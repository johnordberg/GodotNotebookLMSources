Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue How to contribute The Godot Engine is free and open source Like any community driven project we rely on volunteer contributions On this page we want to showcase the various ways you as users can participate to help you find the right starting place with the skillset you have Because contrary to popular opinion we need more than just programmers on the project Fundraising Donate We created the non profit Godot Foundation to be able to support the Godot Engine in both matters of finance and administration In practice this means the Foundation hires people to work part time or full time on the project These jobs include engine development as well as related tasks like code reviews production management community marketing efforts and more With as little as 5 EUR per month you can help us keep going strong Currently we are intending to hire more core developers as to cover more ground with full time specialists that supplement and guide volunteer work Join the Development Fund Donation Drives Think about your followers on social media or other communities you are active in Use that reach to remind your social environment that even small contributions can make a difference especially when done by a great number of people at the same time Are you a content creator Consider adding a link to the Godot Development Fund to your descriptions If you do live streams perhaps think about organizing a stream with donation incentives Publish Godot Games You heard right simply publishing a game MadeWithGodot can positively impact the well being of this project Your personal success elevates the engine to a viable alternative for other developers growing the community further Additionally it opens the doors for us to approach industry contacts about possible cooperations Technical contributions Report bugs other issues As active users of the engine you are better equipped to identify bugs and other issues than anyone else To let us know about your findings fill out this bug report form on our GitHub Make sure to include as much information as possible to ensure these issues can easily be reproduced by others If you are interested in helping keep our bug tracker organized you can even join the bugsquad Test Development Versions While it is recommended to use the stable releases for your projects you can help us test dev releases betas and release candidates by opening a copy of your project in them and checking what problems this introduces or maybe even solves Make sure to have a backup ready since this can produce irreversible changes Find recent development versions directly on our download page or linked in their own blog posts Contribute Engine Code mainly C The engine development is mainly coordinated on our Contributor RocketChat so if you are serious about making PRs you should join us there Read more about the technical submission process Contributing code For each subject area of the engine there is a corresponding team to coordinate the work Join the linked chat to get more eyes on your related PR learn about open todos or partake in meetings For some areas specialists might even be encouraged to step up as maintainer List of teams Review Code Contributions All pull requests need to be thoroughly reviewed before they can be merged into the master branch Help us get a headstart by participating in the code review process To get started chose any open pull request and reference our style guide Pull request review process Write Plugins GDScript C more Community addons are not directly included in the core engine download or repository yet they provide essential quality of life upgrades for your fellow game developers Upload your plugins to the Godot Asset Library to make them available to others Demo projects GDScript C and making Assets We provide new users with demo projects so they can quickly test new features or get familiar with the engine in the first place At industry events we might even exhibit these demo projects to showcase what Godot can do Help improve existing projects or supply your own to be added to the pool and join the demo channel in the Contributor RocketChat to talk about it Documentation The documentation is one of the most essential parts of any tech project yet the need to document new features and substantial changes often gets overlooked Join the documentation team to improve the Godot Engine with your technical writing skills Translations spoken languages other than English Are you interested in making the Godot Engine more accessible to non English speakers Contribute to our community translations Community support Call for Moderators With a community of our size we need people to step up as volunteer moderators in all kinds of places These teams are organized by the Godot Foundation but would not function without the dedication of active community members like you Have a look around your favorite community platform and you might come across open application calls Answer tech support questions With many new people discovering the Godot Engine recently the need for peer to peer tech support has never been greater See the Godot website for a list of official and user supported Godot communities Create tutorials more How did you get started with the Godot Engine Chances are you looked for learning materials outside of what the documentation provides Without content creators covering the game development process there would not be this big of a community today Therefore it seemed only right to mention them in a page about important contributions to the project User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Contribution workflow Godot is a large project both in terms of the codebase and the workload for contributors The guides below serve as a helper when you get stuck dealing with Git or GitHub or if you are generally interested in how maintainers approach the project Contributing code Testing and reporting issues Contributing to the documentation Contributing translations Bisecting regressions Bug triage guidelines Pull request workflow Pull request review process Testing pull requests Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Contributing code The possibility to study use modify and redistribute modifications of the engine s source code are the fundamental rights that Godot s MIT license grants you making it free and open source software As such everyone is entitled to modify Godot s source code and send those modifications back to the upstream project in the form of a patch a text file describing the changes in a ready to apply manner or in the modern workflow that we use via a so called pull request PR i e a proposal to directly merge one or more Git commits patches into the main development branch Contributing code changes upstream has two big advantages Your own code will be reviewed and improved by other developers and will be further maintained directly in the upstream project so you won t have to reapply your own changes every time you move to a newer version On the other hand it comes with a responsibility as your changes have to be generic enough to be beneficial to all users and not just your project so in some cases it might still be relevant to keep your changes only for your own project if they are too specific The whole community will benefit from your work and other contributors will behave the same way contributing code that will be beneficial to you At the time of this writing over 2 000 developers have contributed code changes to the engine To ensure good collaboration and overall quality the Godot developers enforce some rules for code contributions for example regarding the style to use in the C code indentation brackets etc or the Git and PR workflow A good place to start is by searching for issues tagged as good first issue on GitHub See also Technical details about the PR workflow are outlined in a specific section Pull request workflow Details about the code style guidelines and the clang format tool used to enforce them are outlined in Code style guidelines All pull requests must go through a review process before being accepted Depending on the scope of the changes it may take some time for a maintainer responsible for the modified part of the engine to provide their review We value all of our contributors and ask them to be patient in the meantime as it is expected that in an open source project like Godot there is going to be way more contributions than people validating them To make sure that your time and efforts aren t wasted it is recommended to vet the idea first before implementing it and putting it for a review as a PR To that end Godot has a proposal system Its usage is encouraged to plan changes and discuss them with the community Implementation details can also be discussed with other contributors on the Godot Contributors Chat Note Proposals are only required when working on an enhancement or a new feature Bug reports are sufficient for fixing issues Testing and reporting issues Another great way of contributing to the engine is to test development releases or the development branch and to report issues It is also helpful to report issues discovered in stable releases so that they can be fixed in the development branch and in future maintenance releases Testing development versions To help with the testing you have several possibilities Compile the engine from source yourself following the instructions of the Compiling page for your platform Test official pre release binaries when they are announced usually on the blog and other community platforms such as alpha beta and release candidate RC builds Test trusted unofficial builds of the development branch just ask community members for reliable providers Whenever possible it s best to use official binaries or to compile yourself though to be sure about the provenance of your binaries As mentioned previously it is also helpful to keep your eyes peeled for potential bugs that might still be present in the stable releases especially when using some niche features of the engine which might get less testing by the developers Filing an issue on GitHub Godot uses GitHub s issue tracker for bug reports When you start filing a bug report you ll be given a form to fill out Please try to follow it so that all issues are consistent and provide the required information Contributing to the documentation There are two separate resources referred to as documentation in Godot The class reference This is the documentation for the complete Godot API as exposed to GDScript and the other scripting languages It can be consulted offline directly in Godot s code editor or online at Godot Class Reference To contribute to the class reference you have to edit the XML file corresponding to the class and make a pull request See Contributing to the class reference and Class reference primer for more details The tutorials and engine documentation and its translations This is the part you are reading now which is distributed in the HTML format Its contents are generated from plain text files in the reStructured Text rst format to which you can contribute via pull requests on the godot docs GitHub repository See Contributing to the documentation for more details Contributing translations To make Godot accessible to everyone including users who may prefer resources in their native language instead of English our community helps translate both the Godot editor and its documentation in many languages See Editor and documentation localization for more details User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Bisecting regressions Bisecting is a way to find regressions in software After reporting a bug on the Godot repository on GitHub you may be asked by a contributor to bisect the issue Bisecting makes it possible for contributors to fix bugs faster as they can know in advance which commit caused the regression Your effort will be widely appreciated The guide below explains how to find a regression by bisecting What is bisecting Godot developers use the Git version control system In the context of Git bisecting is the process of performing a manual binary search to determine when a regression appeared While it s typically used for bugs it can also be used to find other kinds of unexpected changes such as performance regressions Using official builds to speed up bisecting Before using Git s bisect command we strongly recommend trying to reproduce the bug with an older or newer official release This greatly reduces the range of commits that potentially need to be built from source and tested You can find binaries of official releases as well as alphas betas and release candidates here If you have experience with Godot 3 x and can reproduce an issue with Godot 4 0 we recommend trying to reproduce the issue in the latest Godot 3 x version if the feature exhibiting the bug is present in 3 x This can be used to check whether the issue is a regression in 4 0 or not If the issue is present in 3 x then you ll need to check whether the issue occurs in older 3 x versions as well If the issue is not present in 3 x then you can try older 4 0 alphas and betas to determine when the regression started Warning Project files may be incompatible between Godot versions Make a backup of your project before starting the bisection process Going from the oldest to the newest build generally reduces the risk of the project not being able to successfully open in the editor thanks to backwards compatibility Try to reduce your project to the smallest repeatable example too The more minimal the project is the more likely you ll be able to open it without compatibility issues in newer engine versions The Git bisect command If you ve found a build that didn t exhibit the bug in the above testing process you can now start bisecting the regression The Git version control system offers a built in command for this git bisect This makes the process semi automated as you only have to build the engine run it and try to reproduce the bug Note Before bisecting a regression you need to set up a build environment to compile Godot from source To do so read the Compiling page for your target platform Compiling Godot from source doesn t require C programming knowledge Note that compiling Godot can take a while on slow hardware up an hour for each full rebuild on a slow dual core CPU This means the full process can take up to several hours If your hardware is too slow you may want to stop there and report the results of your pre bisecting on the GitHub issue so another contributor can continue bisecting from there Determine the commit hashes To start bisecting you must first determine the commit hashes identifiers of the bad and good build bad refers to the build that exhibits the bug whereas good refers to the version that doesn t exhibit the bug If you re using a pre release build as the good or bad build browse the download mirror go to the folder that contains the pre release you downloaded and look for the README txt file The commit hash is written inside that file If you re using a stable release as the good or bad build use one of the following commit hashes depending on the version 4 1 1 stable 4 1 stable 4 0 3 stable 4 0 2 stable 4 0 1 stable 4 0 stable 3 5 2 stable 3 5 1 stable 3 5 stable 3 4 5 stable 3 4 4 stable 3 4 3 stable 3 4 2 stable 3 4 1 stable 3 4 stable 3 3 4 stable 3 3 3 stable 3 3 2 stable 3 3 1 stable 3 3 stable 3 2 stable 3 1 stable 3 0 stable Copy to clipboard You can also use this Bash function to retrieve the Git commit hash of a pre release build add it to your HOME bashrc or similar gd_snapshot_commit curl s https downloads tuxfamily org godotengine 1 2 README txt grep from commit sed s Built from commit 1 Copy to clipboard Example usage gd_snapshot_commit 4 0 beta4 Copy to clipboard To refer to the latest state of the master branch you can use master instead of a commit hash Note that unlike tagged releases or snapshot commit hashes master is a perpetually moving target Build the engine Get Godot s source code using Git Once this is done in the terminal window use cd to reach the Godot repository folder and enter the following command good commit hash is hash of the build that works as expected bad commit hash is hash of the build exhibiting the bug git bisect start git bisect good good commit hash git bisect bad bad commit hash Copy to clipboard Compile Godot This assumes you ve set up a build environment scons Copy to clipboard Run the engine Run the binary located in the bin folder and try to reproduce the bug Note Double check the output file name in bin to make sure you re actually running the binary you ve just compiled Different Godot versions will output binaries with different names If the build still exhibits the bug run the following command git bisect bad Copy to clipboard If the build does not exhibit the bug run the following command git bisect good Copy to clipboard After entering one of the commands above Git will switch to a different commit You should now build Godot again try to reproduce the bug then enter git bisect good or git bisect bad depending on the result You ll have to repeat this several times The longer the commit range the more steps will be required 5 to 10 steps are usually sufficient to find most regressions Git will remind you of the number of steps remaining in the worst case scenario Once you ve completed enough steps Git will display the commit hash where the regression appeared Write this commit hash as a comment to the GitHub issue you ve bisected This will help in solving the issue Thanks again for contributing to Godot Note You can read the full documentation on git bisect here User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Bug triage guidelines This page describes the typical workflow of the bug triage team aka bugsquad when handling issues and pull requests on Godot s GitHub repository It is bound to evolve together with the bugsquad so do not hesitate to propose modifications to the following guidelines Issues management GitHub proposes various features to manage issues Set one or several labels from a predefined list Set one milestone from a predefined list Keep track of the issue in the project dashboard Define one contributor as assignee among the Godot engine organization members As the Godot engine organization on GitHub currently has a restricted number of contributors we do not use assignees extensively for now All contributors are welcome to take on any issue if relevant after mentioning it on the issue ticket and or discussing the best way to resolve it with other developers For the time being we do not use the project dashboard feature either As far as possible we try to assign labels and milestones when relevant to both issues and pull requests Labels The following labels are currently defined in the Godot repository Categories Archived either a duplicate of another issue or invalid Such an issue would also be closed Breaks compat describes something that can only be fixed by breaking compatibility with existing projects Bug describes something that is not working properly Cherrypick describes something that can be backported to a stable branch after being merged in the master branch Confirmed has been confirmed by at least one other contributor than the bug reporter typically for Bug reports The purpose of this label is to let developers know which issues are still reproducible when they want to select what to work on It is therefore a good practice to add in a comment on what platform and what version or commit of Godot the issue could be reproduced if a developer looks at the issue one year later the Confirmed label may not be relevant anymore Crash describes a bug that causes the engine to crash This label is only used for hard crashes not freezes Discussion the issue is not consensual and needs further discussion to define what exactly should be done to address the topic Documentation issue related to the documentation Mainly to request enhancements in the API documentation Issues related to the ReadTheDocs documentation should be filed on the godot docs repository Enhancement describes a proposed enhancement to an existing functionality Feature proposal describes a wish for a new feature to be implemented Note that the main Godot repository no longer accepts feature requests Please use godot proposals instead For PR meeting the issue needs to be discussed in a pull request meeting These meetings are public and are held on the Godot Contributors Chat Good first issue the issue is assumed to be an easy one to fix which makes it a great fit for new contributors who want to become familiar with the code base It should be removed while an active PR is available that resolves this issue High priority the issue is particularly important as it can prevent people from releasing their projects or cause data loss Needs testing the issue pull request could not be completely tested and thus need further testing This can mean that it needs to be tested on different hardware software configurations or even that the steps to reproduce are not certain Needs work the pull request needs additional work before it can be merged Performance issues that directly impact engine or editor performance Can also be used for pull requests that improve performance or add low end friendly options Should not be coupled with Usability Production Relates to the production team Regression the bug appeared after a stable release not exhibiting the bug was released Salvageable the pull request can t be merged due to design issues or merge conflicts and its author is not active anymore However it can still be picked up by an external contributor to bring it to a mergeable state To do so you need to open a new pull request based on the original pull request Tracker issue used to track other issues like all issues related to the plugin system Usability issues that directly impact user usability Should not be coupled with Performance The categories are used for general triage of the issues They can be combined in some way when relevant e g an issue can be labelled Enhancement and Usability at the same time if it s an issue to improve usability Or Feature proposal and Discussion if it s a non consensual feature request or one that is not precise enough to be worked on At least one of the categories Bug Enhancement or Discussion is used to describe an issue or pull request Topics 2D relates to 2D specific issues Should be coupled with one of the labels below and should not be coupled with 3D 3D relates to 3D specific issues Should be coupled with one of the labels below and should not be coupled with 2D Animation relates to the Animation system editors and importers Assetlib relates to issues with the asset library Audio relates to the audio features low and high level Buildsystem relates to building issues either linked to the SCons buildsystem or to compiler peculiarities Codestyle relates to the programming style used within the codebase Core anything related to the core engine Specific topics are split off separately as they crop up Dotnet relates to the C Dotnet bindings Editor relates to issues in the editor mainly UI Export relates to the export system and templates GDExtension relates to the GDExtension system for native extensions GDScript relates to GDScript GUI relates to GUI Control nodes or to Nodes that compose user interfaces Import relates to the resource import system Input relates to the input system Multiplayer relates to multiplayer high level networking systems Navigation relates to the navigation system including A and navmeshes Network relates to lot level networking Particles particles particle systems and their editors Physics relates to the physics engine 2D 3D Plugin relates to problems encountered while writing plugins Porting relates to some specific platforms or exporting projects Rendering relates to the 2D and 3D rendering engines Shaders relates to the Godot shader language or visual shaders Tests relates to unit tests Thirdparty relates to third party libraries used in Godot XR relates to Augmented Reality or Virtual Reality Issues would typically correspond to only one topic though it s not unthinkable to see issues that fit two bills The general idea is that there will be specialized contributors teams behind all topics so they can focus on the issues labelled with their team s topic Platforms Android iOS Linux macOS Web Windows By default it is assumed that a given issue applies to all platforms If one of the platform labels is used it is then exclusive and the previous assumption doesn t stand anymore so if it s a bug on e g Android and Linux exclusively select those two platforms Documentation labels In the documentation repository we use the following labels Archived either a duplicate of another issue or invalid Such an issue would also be closed Bug Incorrect information in an existing page Not to be used for missing information Cherrypick describes something that can be backported to a stable branch after being merged in the master branch Dependencies describes pull requests that update a dependency file Discussion the issue is not consensual and needs further discussion to define what exactly should be done to address the topic Enhancement new information to be added in an existing page Good first issue the issue is assumed to be an easy one to fix which makes it a great fit for new contributors who want to become familiar with the code base It should be removed while an active PR is available that resolves this issue Needs work the pull request needs additional work before it can be merged Python Pull requests that update Python code Salvageable the pull request can t be merged due to design issues or merge conflicts and its author is not active anymore However it can still be picked up by an external contributor to bring it to a mergeable state To do so you need to open a new pull request based on the original pull request Tracker issue used to track other issues like all issues related to the plugin system Area About Issues and PRs related to the About section of the documentation and other general articles Class reference the issue is about the class reference not a documentation page Community Issues and PRs related to the Community section of the documentation Contributing Issues and PRs related to the Contributing Development section of the documentation Getting started Issues and PRs related to the Getting Started section of the documentation Manual Issues and PRs related to the Manual Tutorials section of the documentation Content Images Issues and PRs involving outdated or incorrect images in articles New page Issues and PRs related to creation of new documentation pages for new or undocumented features Organization Issues and PRs related to reorganizing the content Proofreading Issues and PRs related to proofreading the documentation Redirect Issues and PRs involving moving content and adding a redirect rule on the backend Website Issues related to adding website features and fixing bugs whether on the front or back end Topic The available topics describe the same content as the topics in the main repository Milestones Milestones correspond to planned future versions of Godot for which there is an existing roadmap Issues that fit in the said roadmap should be filed under the corresponding milestone if they don t correspond to any current roadmap they should be left without milestone As a rule of thumb an issue corresponds to a given milestone if it concerns a feature that is new in the milestone or a critical bug that can t be accepted in any future stable release or anything that Juan wants to work on right now Contributors are free to pick issues regardless of their assigned milestone if a fix is proposed for a bug that was not deemed urgent and thus without milestone it would likely still be very welcome User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Pull request workflow The so called PR workflow used by Godot is common to many projects using Git and should be familiar to veteran free software contributors The idea is that only a small number if any commit directly to the master branch Instead contributors fork the project i e create a copy of it which they can modify as they wish and then use the GitHub interface to request a pull from one of their fork s branches to one branch of the original often named upstream repository The resulting pull request PR can then be reviewed by other contributors which might approve it reject it or most often request that modifications be done Once approved the PR can then be merged by one of the core developers and its commit s will become part of the target branch usually the master branch We will go together through an example to show the typical workflow and associated Git commands But first let s have a quick look at the organization of Godot s Git repository Git source repository The repository on GitHub is a Git code repository together with an embedded issue tracker and PR system Note If you are contributing to the documentation its repository can be found here The Git version control system is the tool used to keep track of successive edits to the source code to contribute efficiently to Godot learning the basics of the Git command line is highly recommended There exist some graphical interfaces for Git but they usually encourage users to take bad habits regarding the Git and PR workflow and we therefore recommend not to use them In particular we advise not to use GitHub s online editor for code contributions although it s tolerated for small fixes or documentation changes as it enforces one commit per file and per modification which quickly leads to PRs with an unreadable Git history especially after peer review See also The first sections of Git s Book are a good introduction to the tool s philosophy and the various commands you need to master in your daily workflow You can read them online on the Git SCM website You can also try out GitHub s interactive guide The branches on the Git repository are organized as follows The master branch is where the development of the next major version occurs As a development branch it can be unstable and is not meant for use in production This is where PRs should be done in priority The stable branches are named after their version e g 3 1 and 2 1 They are used to backport bugfixes and enhancements from the master branch to the currently maintained stable release e g 3 1 2 or 2 1 6 As a rule of thumb the last stable branch is maintained until the next minor version e g the 3 0 branch was maintained until the release of Godot 3 1 If you want to make PRs against a maintained stable branch please check first if your changes are also relevant for the master branch and if so make the PR for the master branch in priority Release managers can then cherry pick the fix to a stable branch if relevant There might occasionally be feature branches usually meant to be merged into the master branch at some time Forking and cloning The first step is to fork the godotengine godot repository on GitHub To do so you will need to have a GitHub account and to be logged in In the top right corner of the repository s GitHub page you should see the Fork button as shown below Click it and after a while you should be redirected to your own fork of the Godot repo with your GitHub username as namespace You can then clone your fork i e create a local copy of the online repository in Git speak the origin remote If you haven t already download Git from its website if you re using Windows or macOS or install it through your package manager if you re using Linux Note If you are on Windows open Git Bash to type commands macOS and Linux users can use their respective terminals To clone your fork from GitHub use the following command git clone https github com USERNAME godot Copy to clipboard Note In our examples the character denotes the command line prompt on typical UNIX shells It is not part of the command and should not be typed After a little while you should have a godot directory in your current working directory Move into it using the cd command cd godot Copy to clipboard We will start by setting up a reference to the original repository that we forked git remote add upstream https github com godotengine godot git fetch upstream Copy to clipboard This will create a reference named upstream pointing to the original godotengine godot repository This will be useful when you want to pull new commits from its master branch to update your fork You have another remote reference named origin which points to your fork USERNAME godot You only need to do the above steps once as long as you keep that local godot folder which you can move around if you want the relevant metadata is hidden in its git subfolder Note Branch it pull it code it stage it commit push it rebase it technologic This bad take on Daft Punk s Technologic shows the general conception Git beginners have of its workflow lots of strange commands to learn by copy and paste hoping they will work as expected And that s actually not a bad way to learn as long as you re curious and don t hesitate to question your search engine when lost so we will give you the basic commands to know when working in Git In the following we will assume as an example that you want to implement a feature in Godot s Project Manager which is coded in the editor project_manager cpp file Branching By default the git clone should have put you on the master branch of your fork origin To start your own feature development we will create a feature branch Create the branch based on the current branch master git branch better project manager Change the current branch to the new one git checkout better project manager Copy to clipboard This command is equivalent Change the current branch to a new named one based on the current branch git checkout b better project manager Copy to clipboard If you want to go back to the master branch you d use git checkout master Copy to clipboard You can see which branch you are currently on with the git branch command git branch 2 1 better project manager master Copy to clipboard Be sure to always go back to the master branch before creating a new branch as your current branch will be used as the base for the new one Alternatively you can specify a custom base branch after the new branch s name git checkout b my new feature master Copy to clipboard Updating your branch This would not be needed the first time just after you forked the upstream repository However the next time you want to work on something you will notice that your fork s master is several commits behind the upstream master branch pull requests from other contributors would have been merged in the meantime To ensure there won t be conflicts between the feature you develop and the current upstream master branch you will have to update your branch by pulling the upstream branch git pull rebase upstream master Copy to clipboard The rebase argument will ensure that any local changes that you committed will be re applied on top of the pulled branch which is usually what we want in our PR workflow This way when you open a pull request your own commits will be the only difference with the upstream master branch While rebasing conflicts may arise if your commits modified code that has been changed in the upstream branch in the meantime If that happens Git will stop at the conflicting commit and will ask you to resolve the conflicts You can do so with any text editor then stage the changes more on that later and proceed with git rebase continue Repeat the operation if later commits have conflicts too until the rebase operation completes If you re unsure about what is going on during a rebase and you panic no worry we all do the first few times you can abort the rebase with git rebase abort You will then be back to the original state of your branch before calling git pull rebase Note If you omit the rebase argument you will instead create a merge commit which tells Git what to make of the two distinct branches If any conflicts arise they would be resolved all at once via this merge commit While this is a valid workflow and the default behavior of git pull merge commits within PRs are frowned upon in our PR workflow We only use them when merging PRs into the upstream branch The philosophy is that a PR should represent the final stage of the changes made to the codebase and we are not interested in mistakes and fixes that would have been done in intermediate stages before merging Git gives us great tools to rewrite the history and make it as if we got things right the first time and we re happy to use it to ensure that changes are easy to review and understand long after they have been merged If you have already created a merge commit without using rebase or have made any other changes that have resulted in undesired history the best option is to use an interactive rebase on the upstream branch See the dedicated section for instructions Tip If at any time you want to reset a local branch to a given commit or branch you can do so with git reset hard commit ID or git reset hard remote branch e g git reset hard upstream master Be warned that this will remove any changes that you might have committed in this branch If you ever lose commits by mistake use the git reflog command to find the commit ID of the previous state that you would like to restore and use it as argument of git reset hard to go back to that state Making changes You would then do your changes to our example s editor project_manager cpp file with your usual development environment text editor IDE etc By default those changes are unstaged The staging area is a layer between your working directory where you make your modifications and the local Git repository the commits and all the metadata in the git folder To bring changes from the working directory to the Git repository you need to stage them with the git add command and then to commit them with the git commit command There are various commands you should know to review your current work before staging it while it is staged and after it has been committed git diff will show you the current unstaged changes i e the differences between your working directory and the staging area git checkout files will undo the unstaged changes to the given files git add files will stage the changes on the listed files git diff staged will show the current staged changes i e the differences between the staging area and the last commit git reset HEAD files will unstage changes to the listed files git status will show you what are the currently staged and unstaged modifications git commit will commit the staged files It will open a text editor you can define the one you want to use with the GIT_EDITOR environment variable or the core editor setting in your Git configuration to let you write a commit log You can use git commit m Cool commit log to write the log directly git commit amend lets you amend the last commit with your currently staged changes added with git add This is the best option if you want to fix a mistake in the last commit bug typo style issue etc git log will show you the last commits of your current branch If you did local commits they should be shown at the top git show will show you the changes of the last commit You can also specify a commit hash to see the changes for that commit That s a lot to memorize Don t worry just check this cheat sheet when you need to make changes and learn by doing Here s how the shell history could look like on our example It s nice to know where you re starting from git log Do changes to the Project Manager with the nano text editor nano editor project_manager cpp Find an unrelated bug in Control and fix it nano scene gui control cpp Review changes git status git diff We ll do two commits for our unrelated changes starting by the Control changes necessary for the PM enhancements git add scene gui control cpp git commit m Fix handling of margins in Control Check we did good git log git show git status Make our second commit git add editor project_manager cpp git commit m Add a pretty banner to the Project Manager git log Copy to clipboard With this we should have two new commits in our better project manager branch which were not in the master branch They are still only local though the remote fork does not know about them nor does the upstream repo Pushing changes to a remote That s where git push will come into play In Git a commit is always done in the local repository unlike Subversion where a commit will modify the remote repository directly You need to push the new commits to a remote branch to share them with the world The syntax for this is git push remote local branch remote branch Copy to clipboard The part about the remote branch can be omitted if you want it to have the same name as the local branch which is our case in this example so we will do git push origin better project manager Copy to clipboard Git will ask you for your username and password For your password enter your GitHub Personal Access Token PAT If you do not have a GitHub Personal Access Token or do not have one with the correct permissions for your newly forked repository you will need to create one Follow this link to create your Personal Access Token Creating a personal access token After you have successfully verified your account using your PAT the changes will be sent to your remote repository If you check the fork s page on GitHub you should see a new branch with your added commits Issuing a pull request When you load your fork s branch on GitHub you should see a line saying This branch is 2 commits ahead of godotengine master and potentially some commits behind if your master branch was out of sync with the upstream master branch On that line there is a Pull request link Clicking it will open a form that will let you issue a pull request on the godotengine godot upstream repository It should show you your two commits and state Able to merge If not e g it has way more commits or says there are merge conflicts don t create the PR yet something went wrong Go to our Godot Contributors Chat and ask for support Use an explicit title for the PR and put the necessary details in the comment area You can drag and drop screenshots GIFs or zipped projects if relevant to showcase what your work implements Click Create a pull request and tadaa Modifying a pull request While it is reviewed by other contributors you will often need to make changes to your yet unmerged PR either because contributors requested them or because you found issues yourself while testing The good news is that you can modify a pull request simply by acting on the branch you made the pull request from You can e g make a new commit on that branch push it to your fork and the PR will be updated automatically Check out your branch again if you had changed in the meantime git checkout better project manager Fix a mistake nano editor project_manager cpp git add editor project_manager cpp git commit m Fix a typo in the banner s title git push origin better project manager Copy to clipboard However be aware that in our PR workflow we favor commits that bring the codebase from one functional state to another functional state without having intermediate commits fixing up bugs in your own code or style issues Most of the time we will prefer a single commit in a given PR unless there s a good reason to keep the changes separate Instead of authoring a new commit consider using git commit amend to amend the previous commit with your fixes The above example would then become Check out your branch again if you had changed in the meantime git checkout better project manager Fix a mistake nano editor project_manager cpp git add editor project_manager cpp amend will change the previous commit so you will have the opportunity to edit its commit message if relevant git commit amend As we modified the last commit it no longer matches the one from your remote branch so we need to force push to overwrite that branch git push force origin better project manager Copy to clipboard The interactive rebase If you didn t follow the above steps closely to amend changes into a commit instead of creating fixup commits or if you authored your changes without being aware of our workflow and Git usage tips reviewers might request you to rebase your branch to squash some or all of the commits into one Indeed if some commits have been made following reviews to fix bugs typos etc in the original commit they are not relevant to a future changelog reader who would want to know what happened in the Godot codebase or when and how a given file was last modified To squash those extraneous commits into the main one we will have to rewrite history Right we have that power You may read that it s a bad practice and it s true when it comes to branches of the upstream repo But in your fork you can do whatever you want and everything is allowed to get neat PRs We will use the interactive rebase git rebase i to do this This command takes a commit ID or a branch name as argument and will let you modify all commits between that commit branch and the last one in your working branch the so called HEAD While you can give any commit ID to git rebase i and review everything in between the most common and convenient workflow involves rebasing on the upstream master branch which you can do with git rebase i upstream master Copy to clipboard Note Referencing branches in Git is a bit tricky due to the distinction between remote and local branches Here upstream master with a is a local branch which has been pulled from the upstream remote s master branch Interactive rebases can only be done on local branches so the is important here As the upstream remote changes frequently your local upstream master branch may become outdated so you can update it with git fetch upstream master Contrarily to git pull rebase upstream master which would update your currently checked out branch fetch will only update the upstream master reference which is distinct from your local master branch yes it s confusing but you ll become familiar with this little by little This will open a text editor vi by default see Git docs to configure your favorite one with something which may look like this pick 1b4aad7 Add a pretty banner to the Project Manager pick e07077e Fix a typo in the banner s title Copy to clipboard The editor will also show instructions regarding how you can act on those commits In particular it should tell you that pick means to use that commit do nothing and that squash and fixup can be used to meld the commit in its parent commit The difference between squash and fixup is that fixup will discard the commit log from the squashed commit In our example we are not interested in keeping the log of the Fix a typo commit so we use pick 1b4aad7 Add a pretty banner to the Project Manager fixup e07077e Fix a typo in the banner s title Copy to clipboard Upon saving and quitting the editor the rebase will occur The second commit will be melded into the first one and git log and git show should now confirm that you have only one commit with the changes from both previous commits But You rewrote the history and now your local and remote branches have diverged Indeed commit 1b4aad7 in the above example will have changed and therefore got a new commit hash If you try to push to your remote branch it will raise an error git push origin better project manager To https github com akien mga godot rejected better project manager better project manager non fast forward error failed to push some refs to https akien mga github com akien mga godot hint Updates were rejected because the tip of your current branch is behind hint its remote counterpart Copy to clipboard This is reasonable behavior Git will not let you push changes that would override remote content But that s actually what we want to do here so we will have to force it git push force origin better project manager Copy to clipboard And tadaa Git will happily replace your remote branch with what you had locally so make sure that s what you wanted using git log This will also update the PR accordingly Rebasing onto another branch If you have accidentally opened your PR on the wrong branch or need to target another branch for some reason you might need to filter out a lot of commits that differ between the old branch for example 4 2 and the new branch for example master This can make rebasing difficult and tedious Fortunately git has a command just for this situation git rebase onto If your PR was created from the 4 2 branch and you want to update it to instead start at master the following steps should fix this in one step git rebase i onto master 4 2 Copy to clipboard This will take all the commits on your branch after the 4 2 branch and then splice them on top of master ignoring any commits from the 4 2 branch not on the master branch You may still need to do some fixing but this command should save you a lot of tedious work removing commits Just like above for the interactive rebase you need to force push your branch to handle the different changes git push force origin better project manager Copy to clipboard Deleting a Git branch After your pull request gets merged there s one last thing you should do delete your Git branch for the PR There won t be issues if you don t delete your branch but it s good practice to do so You ll need to do this twice once for the local branch and another for the remote branch on GitHub To delete our better Project Manager branch locally use this command git branch d better project manager Copy to clipboard Alternatively if the branch hadn t been merged yet and we wanted to delete it anyway instead of d you would use D Next to delete the remote branch on GitHub use this command git push origin d better project manager Copy to clipboard You can also delete the remote branch from the GitHub PR itself a button should appear once it has been merged or closed User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Pull request review process Note This page is intended to provide insight into the pull request PR review process that we aspire to As such it is primarily targeted at engine maintainers who are responsible for reviewing and approving pull requests That being said much of the content is useful for prospective contributors wanting to know how to ensure that their PR is merged From a high level the ideal life cycle of a pull request looks like the following A contributor opens a PR that fixes a specific problem optimally closing a GitHub issue or implementing a proposal Other contributors provide feedback on the PR including reviewing and or approving the PR as appropriate An engine maintainer reviews the code and provides feedback requests changes or approves the pull request as appropriate Another maintainer reviews the code with a focus on code style clarity and approves it once satisfied A team leader or a member of the production team merges the pull request if satisfied that it has been sufficiently reviewed This document will explain steps 2 3 4 and 5 in more detail For a more detailed explanation of the pull request workflow please see the pull request workflow document Note In practice these steps may blend together Oftentimes maintainers will provide comments on code style and code quality at the same time and will approve a pull request for both Typically the first interaction on a pull request will be an engine maintainer assigning tags to the pull request and flagging it for review by someone familiar with that area of code Engine maintainers are folks who are members of the Godot project repository on GitHub and or are listed on the Teams page on the Godot website Maintainers are responsible for a given area of the engine Typically this means they are the people who are given more trust to approve and recommend pull requests for merging Even if you are not a maintainer you can still help by reviewing code providing feedback on PRs and testing PRs locally on your machine to confirm that they work as intended Many of the currently active maintainers started out doing this before they became maintainers Code review and testing The following is a list of things that contributors and engine maintainers can do to conduct a substantive code review of a pull request Note If you want to conduct a code review but can t do everything on this list say that in your review comment For example it is still very helpful to provide comments on code even if you can t build the pull request locally to test the pull request or vice versa Feel free to review the code just remember to make a note at the end of your review that you have reviewed the code only and have not tested the changes locally 1 Confirm that the problem exists PRs need to solve problems and problems need to be documented Make sure that the pull request links and closes or at least addresses a bug or a proposal If it doesn t consider asking the contributor to update the opening message of the PR to explain the problem that the PR aims to solve in more detail Note It should be clear _why_ a pull request is needed before it is merged This assists reviewers in determining whether a PR does what it says it does and it helps contributors in the future understand why the code is the way it is 2 Test the PR and look for regressions While strict code review and CI help to ensure that all pull requests work as intended mistakes happen and sometimes contributors push code that creates a problem in addition to solving a problem Maintainers will avoid merging code that contains a regression even if it solves the problem as intended When reviewing a pull request ensure that the PR does what it says it does i e fixes the linked bug or implements the new feature and nothing outside of the PR target area is broken by the change You can do this by running the editor and trying out some common functions of the editor adding objects to a scene running GDScript opening and closing menus etc Also while reviewing the code look for suspicious changes in other parts of the engine Sometimes during rebasing changes slip through that contributors are not aware of 3 Do a code review Code reviews are usually done by people who are already experienced in a given area They may be able to provide ideas to make code faster more organized or more idiomatic But even if you are not very experienced you may want to conduct a code review to provide feedback within the scope of what you are comfortable reviewing Doing so is valuable for the area maintainer as a second set of eyes on a problem is always helpful and it is also helpful for you as it will help you get more familiar with that area of code and will expose you to how other people solve problems In fact reviewing the code of experienced engine maintainers is a great way to get to know the codebase Here are some things to think about and look out for as you review the code Code only touches the areas announced in the PR and the commit message It can be tempting to fix random things in the code as you see them However this can quickly make a pull request difficult to review and can make it hard to dig through in the commit history Small touch ups next to the related area are alright but often bugs that you can find along the way are better fixed in their own PRs Code properly uses Godot s own APIs and patterns Consistency is very important and a solution that already exists in the codebase is preferable to an ad hoc solution Are core areas affected by the change Sometimes a PR that is supposed to solve a local problem can have a far reaching effect way outside of its scope Usually it is best to keep code changes local to where the problem arises If you think that the solution requires changes outside the scope of the problem it is usually best to seek the opinion of a team leader who may have another idea for how to solve the problem 4 Iterate with the contributor and improve the PR Maintainers should provide feedback and suggestions for improvement if they spot things in the code that they would like changed Preferably suggestions should come in order of importance first address overall code design and the approach to solving the problem then make sure the code is complying with the engine s best practices and lastly do the code style review Note Communicate barriers to merging early in the review process If the PR has clear blockers or will likely not get merged for whatever other reason that fact should be communicated as early and clearly as possible We want to avoid stringing people along because it feels bad to say sorry no As you review pull requests keep the Godot Code of Conduct in mind Especially the following Politeness is expected at all times Be kind and courteous Always assume positive intent from others Feedback is always welcome but keep your criticism constructive Here are some things to avoid as you iterate on a pull request with a contributor Needless double reviews In other words review the full PR at once and avoid coming back endless times to point out issues that you could have noted in the first review Of course this can t always be avoided but we should try to catch everything at once Being overly nitpicky Code quality can be flexible depending on the area of the engine you are working in In general our standard for code quality is much higher in core areas and in performance sensitive areas than it is in editor code for example Expanding the scope of a pull request Providing context or related similar issues or proposals that may be fixed similarly can be helpful but adding a may as well fix that thing over there as well while at it or could we add to this as well isn t always fair to the contributor Use your judgement when deciding whether additional fixes are within scope but try to keep the scope as close to the original pull request as possible And ultimately don t feel pressured to deal with the PR all alone Feel free to ask for a helping hand on the Godot Contributors Chat in the appropriate channel or in general Other teams may already be tagged for review so you can also wait or ask for their assistance 5 Approve the pull request After reviewing the code if you think that the code is ready to be merged into the engine then go ahead and approve it Make sure to also comment and specify the nature of your review i e say whether you ran the code locally whether you reviewed for style as well as correctness etc Even if you are not an engine maintainer approving a pull request signals to others that the code is good and likely solves the problem the PR says it does Approving a pull request as a non engine maintainer does not guarantee that the code will be merged other people will still review it so don t be shy Code style review Generally speaking we aim to conduct a code review before a style clarity review as contributors typically want to know if their general approach is acceptable before putting in the effort to make nitpicky changes to style In other words maintainers shouldn t ask contributors to change the style of code that may need to be rewritten in subsequent reviews Similarly maintainers should avoid asking for contributors to rebase PRs if the PR has not been reviewed That being said not everyone feels confident enough to provide a review on code correctness in that case providing comments on code style and clarity ahead of a more substantive code review is totally appropriate and more than welcome In practice the code style review can be done as part of the substantive code review The important thing is that both the substantive code and the code style need to be reviewed and considered before a pull request is merged When reviewing code style pay particular attention to ensuring that the pull request follows the Code style guidelines While clang format and various CI checks can catch a lot of inconsistencies they are far from perfect and are unable to detect some issues For example you should check that The style of header includes is respected Identifiers use snake_case and follow our naming conventions Method parameters start with p_ or r_ if they are used to return a value Braces are used appropriately even for one liner conditionals Code is properly spaced exactly one empty line between methods no unnecessary empty lines inside of method bodies Note This list is not complete and doesn t aim to be complete Refer to the linked style guide document for a complete set of rules Keep in mind that clang format may not catch things you hope it would so pay attention and try to build a sense of what exactly it can and cannot detect Merging pull requests In general pull requests should only be merged by members of the production team or team leaders for pull requests in their area of the engine For example the networking team leader could merge a networking pull request that doesn t substantially change non networking sections of code In practice it is best to wait for a member of the production team to merge the pull request as they keep a close eye on the entire codebase and will likely have a better sense of what other recent upcoming changes this pull request may conflict with or any other reason that it may make sense to delay the pull request Feel free to leave a comment saying that the PR should be ready to merge The following are the steps to take before merging a pull request The degree to which you adhere to these steps can be flexible for simple straightforward pull requests but they should be carefully taken for complex or risky pull requests As a contributor you can help move a pull request forward by doing some of these steps yourself 1 Get feedback from the right people teams Production team members should ensure that the right people look at a pull request before it is merged In some cases this may require multiple people to weigh in In other cases only one substantive approval is needed before the code can be merged In general try not to merge things based on one review alone especially if it is your own Get a second opinion from another maintainer and make sure all the teams that may be impacted have been reasonably represented by the reviewers For example if a pull request adds to the documentation it s often useful to let the area maintainers check it for factual correctness and let documentation maintainers check it for formatting style and grammar A good rule of thumb is that at least one subject matter expert should have approved the pull request for correctness and at least one other maintainer should have approved the pull request for code style Either of those people could be the person merging the pull request Make sure that the reviews and approvals were left by people competent in that specific engine area It is possible that even a long standing member of the Godot organization left a review without having the relevant expertise Note An easy way to find PRs that may be ready for merging is filtering by approved PRs and sorting by recently updated For example in the main Godot repository you can use this link 2 Get feedback from the community If a pull request is having trouble attracting reviewers you may need to reach out more broadly to ask for help reviewing Consider asking the person who reported the bug if the pull request fixes the bug for them contributors who have recently edited that file if they could take a look or a more experienced maintainer from another area if they could provide feedback 3 Git checklist Make sure that the PR comes in one commit When each commit is self contained and could be used to build a clean and working version of the engine it may be okay to merge a pull request with multiple commits but in general we require that all pull requests only have one commit This helps us keep the Git history clean Fixes made during the review process must be squashed into the main commit For multi commit PRs check that those fixes are amended in the relevant commits and are not just applied on top of everything Make sure that the PR has no merge conflicts Contributors may need to rebase their changes on top of the relevant branch e g master or 3 x and manually fix merge conflicts Even if there are no merge conflicts contributors may need to rebase especially old PRs as the GitHub conflict checker may not catch all conflicts or the CI may have changed since it was originally run Check for proper commit attribution If a contributor uses an author signature that is not listed in their GitHub account GitHub won t link the merged pull request to their account This keeps them from getting proper credit in the GitHub history and makes them appear like a new contributor on the GitHub UI even after several contributions Ultimately it s up to the user if they want to fix it but they can do so by authoring the Git commit with the same email they use for their GitHub account or by adding the email they used for the Git commit to their GitHub profile Check for proper commit messages While we don t have a very strict ruleset for commit messages we still require them to be short yet descriptive and use proper English As a maintainer you ve probably written them enough times to know how to make one but for a general template think about Fix issue in part of codebase For a more detailed recommendation see the contributing md page in the main Godot repository 4 GitHub checklist Validate the target branch of the PR Most Godot development happens around in the master branch Therefore most pull requests must be made against it From there pull requests can then be backported to other branches Be wary of people making PRs on the version they are using e g 3 3 and guide them to make a change against a higher order branch e g 3 x If the change is not applicable for the master branch the initial PR can be made against the current maintenance branch such as 3 x It s okay for people to make multiple PRs for each target branch especially if the changes cannot be easily backported Cherry picking is also an option if possible Use the appropriate labels if the PR can be cherrypicked e g cherrypick 3 x Note It is possible to change the target branch of the PR that has already been submitted but be aware of the consequences As it cannot be synchronized with the push the target branch change will inevitable tag the entire list of maintainers for review It may also render the CI incapable of running properly A push should help with that but if nothing else recommend opening a new fresh PR Make sure that the appropriate milestone is assigned This will make it more obvious which version would include the submitted changes should the pull request be merged now Note that the milestone is not a binding contract and does not guarantee that this version is definitely going to include the PR If the pull request is not merged before the version is released the milestone will be moved and the PR itself may require a target branch change Similarly when merging a PR with a higher milestone than the current version or a wildcard milestone e g 4 x ensure to update the milestone to the current version Make sure that the opening message of the PR contains the magic words Closes or Fixes These link the PR and the referenced issue together and allow GitHub to auto close the latter when you merge the changes Note that this only works for the PRs that target the master branch For others you need to pay attention and close the related issues manually Do it with Fixed by or Resolved by comment to clearly indicate the act for future contributors For the issues that get closed by the PR add the closest relevant milestone In other words if the PR is targeting the master branch but is then also cherrypicked for 3 x the next 3 x release would be the appropriate milestone for the closed issue 5 Merge the pull request If it is appropriate for you to be merging a pull request i e you are on the production team or you are the team leader for that area you are confident that the pull request has been sufficiently reviewed and once you carry out these steps you can go ahead and merge the pull request User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Testing pull requests Many people are developing new features or fixing bugs on GitHub To help with engine development you may be asked to test those pull requests with a Godot build that includes code from the pull request in question Thanks to GitHub Actions all pull requests have continuous builds available These builds let you try out pull requests without having to compile anything from source Downloading a compiled build You can download pull request builds from GitHub Actions Since only signed in users may download builds directly from GitHub Actions the procedure varies depending on whether you have a GitHub account or not Note Due to a GitHub Actions limitation builds are only available for 90 days after the pull request was last updated If you still wish to try a pull request locally you can compile the pull request branch from source instead If you have a GitHub account Open the pull request page Click the Checks tab near the top of the page Click the Artifacts dropdown on the right of the page In the dropdown click the artifact s name to download it Remember to scroll if you cannot see the name of the platform you re looking for Extract the ZIP archive then run the executable Note that Windows and macOS binaries are not code signed This means you may have to bypass a security warning before you can run the executable On Windows if you frequently test pull request builds it may be better to disable Windows SmartScreen permanently in the Windows security settings On macOS see Running Godot apps on macOS for instructions on bypassing Gatekeeper If you don t have a GitHub account If you don t have a GitHub account and can t sign up for one you can use the third party nightly link service to generate a universal download link Open the pull request page Click the fork s branch name near the top of the page Now that you are on the fork s branch page click the github folder at the top of the file list Then click on the workflows folder which is inside the github folder Click the workflow file for the platform you wish to download artifacts for After clicking on the file which opens the file view copy the page URL from your browser s address bar Open the nightly link website and paste the URL you just copied into the text field located below the heading Paste a GitHub link get a nightly link After pasting the URL click Get links on the right If the format of the URL you pasted is correct you should be presented with a page like this Click the URL of the artifact you wish to download Extract the ZIP archive then run the executable Note that Windows and macOS binaries are not code signed This means you may have to bypass a security warning before you can run the executable If you frequently test pull request builds it may be better to disable Windows SmartScreen or disable macOS Gatekeeper permanently Compiling a pull request branch from source This approach may be needed for pull requests that were last updated more than 90 days ago or to test on platforms and configurations that are not supported by Godot s GitHub Actions setup Downloading a zipped pull request branch Open the pull request page Click the fork s branch name near the top of the page Now that you are on the fork s branch page click the green Code button on the right of the page then choose Download ZIP in the dropdown Extract the ZIP archive and follow the compiling instructions for your operating system Checking out a pull request branch with git Alternatively you can checkout the pull request directly with git Open the pull request page Note the pull request number PR_NUMBER and the branch name BRANCH_NAME but without the user name Construct the command using this pattern git fetch upstream pull PR_NUMBER head BRANCH_NAME Copy to clipboard So for the pull request above the actual command will be Fetch PR branch locally git fetch upstream pull 48734 head editor_file_dialog_filter_sort Copy to clipboard Once the pull request finishes downloading checkout its branch git checkout editor_file_dialog_filter_sort Copy to clipboard And follow the compiling instructions for your operating system User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Engine development The guides below explain how to contribute to the engine s codebase You will learn about best practices when working on solutions and features the code style and the internal structure of the codebase how to set up your working environment and more Be sure to also check the workflow guidelines especially if you re new to using Git or GitHub Best practices for engine contributors Code style guidelines C usage guidelines Handling compatibility breakages Buildsystem and work environment Configuring an IDE Building from source Debugging and profiling Engine architecture Engine core and modules Godot file formats Editor development Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Best practices for engine contributors Introduction Godot has a large amount of users who have the ability to contribute because the project itself is aimed mainly at users who can code That being said not all of them have the same level of experience working in large projects or in software engineering which can lead to common misunderstandings and bad practices during the process of contributing code to the project Language The scope of this document is to be a list of best practices for contributors to follow as well as to create a language they can use to refer to common situations that arise in the process of submitting their contributions While a generalized list of software development best practices might be useful we ll focus on the situations that are most common in our project Contributions are most of the time categorized as bug fixes enhancements or new features To abstract this idea we will call them Solutions because they always seek to solve something that can be described as a Problem Best Practices 1 The problem always comes first Many contributors are extremely creative and just enjoy the process of designing abstract data structures creating nice user interfaces or simply love programming Whatever the case may be they come up with cool ideas which may or may not solve real problems These are usually called solutions in search of a problem In an ideal world they would not be harmful but in reality code takes time to write takes up space and requires maintenance once it exists Avoiding the addition of anything unnecessary is always considered a good practice in software development 2 To solve the problem it has to exist in the first place This is a variation of the previous practice Adding anything unnecessary is not a good idea but what constitutes what is necessary and what isn t The answer to this question is that the problem needs to exist before it can be actually solved It must not be speculation or a belief The user must be using the software as intended to create something they need In this process the user may stumble upon a problem that requires a solution to proceed or in order to achieve greater productivity In this case a solution is needed Believing that problems may arise in the future and that the software needs to be ready to solve them by the time they appear is called Future proofing and its characterized by lines of thought such as I think it would be useful for users to I think users will eventually need to This is generally considered a bad habit because trying to solve problems that don t actually exist in the present will often lead to code that will be written but never used or that is considerably more complex to use and maintain than it needs to be 3 The problem has to be complex or frequent Software is designed to solve problems but we can t expect it to solve every problem that exists under the sun As a game engine Godot will help you make games better and faster but it won t make an entire game for you A line must be drawn somewhere Whether a problem is worth solving is determined by the effort that is required to work around it The required effort depends on The complexity of the problem The frequency the problem If the problem is too complex for most users to solve then the software should offer a ready made solution for it Likewise if the problem is easy for the user to work around offering such a solution is unnecessary The exception however is when the user encounters a problem frequently enough that having to do the simple solution every time becomes an annoyance In this case the software should offer a solution to simplify the use case It s usually easy to tell if a problem is complex or frequent but it can be difficult This is why discussing with other developers next point is always advised 4 The solution must be discussed with others Often users will be immersed in their own projects when they stumble upon problems These users will naturally try to solve the problem from their perspective thinking only about their own use case As a result user proposed solutions don t always contemplate all use cases and are often biased towards the user s own requirements For developers the perspective is different They may find the user s problem too unique to justify a solution instead of a workaround or they might suggest a partial usually simpler or lower level solution that applies to a wider range of known problems and leave the rest of the solution up to the user In any case before attempting to contribute it is important to discuss the actual problems with the other developers or contributors so a better agreement on implementation can be reached The only exception is when an area of code has a clear agreed upon owner who talks to users directly and has the most knowledge to implement a solution directly Also Godot s philosophy is to favor ease of use and maintenance over absolute performance Performance optimizations will be considered but they may not be accepted if they make something too difficult to use or if they add too much complexity to the codebase 5 To each problem its own solution For programmers it is always a most enjoyable challenge to find the most optimal solutions to problems It is possible to go overboard though Sometimes contributors will try to come up with solutions that solve as many problems as possible The situation will often take a turn for the worse when in order to make this solution appear even more fantastic and flexible the pure speculation based problems as described in 2 also make their appearance on stage The main problem is that in reality it rarely works this way Most of the time writing an individual solution to each problem results in code that is simpler and more maintainable Additionally solutions that target individual problems are better for the users Targeted solutions allow users find something that does exactly what they need without having to learn a more complex system they will only need for simple tasks Big and flexible solutions also have an additional drawback which is that over time they are rarely flexible enough for all users Users end up requesting more and more functionality which ends up making the API and codebase more and more complex 6 Cater to common use cases leave the door open for the rare ones This is a continuation of the previous point which further explains why this way of thinking and designing software is preferred As mentioned before in point 2 it is very difficult for us as human beings who design software to actually understand all future user needs Trying to write very flexible structures that cater to many use cases at once is often a mistake We may come up with something we believe is brilliant but later find out that users will never even use half of it or that they require features that don t quite fit into our original design forcing us to either throw it away or make it even more complex The question is then how do we design software that both allows users to do what we know they need to do now and allows them to do what we don t yet know they ll need to do in the future The answer to this question is that to ensure users still can do what they want to do we need to give them access to a low level API that they can use to achieve what they want even if it s more work for them because it means reimplementing some logic that already exists In real life scenarios these use cases will be at most rare and uncommon anyway so it makes sense a custom solution needs to be written This is why it s important to still provide users the basic building blocks to do it 7 Prefer local solutions When looking for a solution to a problem be it implementing a new feature or fixing a bug sometimes the easiest path is to add data or a new function in the core layers of code The main problem here is adding something to the core layers that will only be used from a single location far away will not only make the code more difficult to follow split in two but also make the core API larger more complex more difficult to understand in general This is bad because readability and cleanness of core APIs is always of extreme importance given how much code relies on it and because it s key for new contributors as a starting point to learning the codebase A common reason for wanting to do this is that it s usually less code to simply add a hack in the core layers Doing so is not advised Generally the code for a solution should be closer to where the problem originates even if it involves additional duplicated more complex or less efficient code More creativity might be needed but this path is always the advised one 8 Don t use complex canned solutions for simple problems Not every problem has a simple solution and many times the right choice is to use a third party library to solve the problem As Godot requires to be shipped in a large amount of platforms we can t link libraries dynamically Instead we bundle them in our source tree As a result we are very picky with what goes in and we tend to prefer smaller libraries single header ones are our favorite We will only bundle something larger if there is no other choice Libraries must use a permissive enough license to be included into Godot Some examples of acceptable licenses are Apache 2 0 BSD MIT ISC and MPL 2 0 In particular we cannot accept libraries licensed under the GPL or LGPL since these licenses effectively disallow static linking in proprietary software which Godot is distributed as in most exported projects This requirement also applies to the editor since we may want to run it on iOS in the long term Since iOS doesn t support dynamic linking static linking is the only option on that platform User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Code style guidelines When contributing to Godot s source code you will be expected to follow the style guidelines outlined below Some of them are checked via the Continuous Integration process and reviewers will ask you to fix potential issues so best setup your system as outlined below to ensure all your commits follow the guidelines C and Objective C There are no written guidelines but the code style agreed upon by the developers is enforced via the clang format code beautifier which takes care for you of all our conventions To name a few Indentation and alignment are both tab based respectively one and two tabs One space around math and assignments operators as well as after commas Pointer and reference operators are affixed to the variable identifier not to the type name See further down regarding header includes The rules used by clang format are outlined in the clang format file of the Godot repository As long as you ensure that your style matches the surrounding code and that you re not introducing trailing whitespace or space based indentation you should be fine If you plan to contribute regularly however we strongly advise that you set up clang format locally to check and automatically fix all your commits Warning Godot s code style should not be applied to third party code i e that is included in Godot s source tree but was not written specifically for our project Such code usually comes from different upstream projects with their own style guides or lack thereof and don t want to introduce differences that would make syncing with upstream repositories harder Third party code is usually included in the thirdparty folder and can thus easily be excluded from formatting scripts For the rare cases where a third party code snippet needs to be included directly within a Godot file you can use clang format off and clang format on to tell clang format to ignore a chunk of code See also These guidelines only cover code formatting See C usage guidelines for a list of language features that are permitted in pull requests Using clang format locally You need to use clang format 17 to be compatible with Godot s format Later versions might be suitable but previous versions may not support all used options or format some things differently leading to style issues in pull requests Pre commit hook For ease of use we provide hooks for Git with the pre commit Python framework that will run clang format automatically on all your commits with the correct version of clang format To set up pip install pre commit pre commit install Copy to clipboard You can also run the hook manually with pre commit run Note Previously we supplied a hook in the folder misc hooks If you copied the script manually these hooks should still work but symlinks will be broken If you are using the new system run rm git hooks to remove the old hooks that are no longer needed Installation Here s how to install clang format Linux It will usually be available out of the box with the clang toolchain packaged by your distribution If your distro version is not the required one you can download a pre compiled version from the LLVM website or if you are on a Debian derivative use the upstream repos macOS and Windows You can download precompiled binaries from the LLVM website You may need to add the path to the binary s folder to your system s PATH environment variable to be able to call clang format out of the box You then have different possibilities to apply clang format to your changes Manual usage You can apply clang format manually for one or more files with the following command clang format i path to file s Copy to clipboard i means that the changes should be written directly to the file by default clang format would only output the fixed version to the terminal The path can point to several files either one after the other or using wildcards like in a typical Unix shell Be careful when globbing so that you don t run clang format on compiled objects o and a files that are in Godot s tree So better use core cpp h than core IDE plugin Most IDEs or code editors have beautifier plugins that can be configured to run clang format automatically for example each time you save a file Here is a non exhaustive list of beautifier plugins for some IDEs Qt Creator Beautifier plugin Visual Studio Code Clang Format Visual Studio Clang Power Tools 2022 vim vim clang format CLion Starting from version 2019 1 no plugin is required Instead enable ClangFormat Pull requests are welcome to extend this list with tested plugins Header includes When adding new C or Objective C files or including new headers in existing ones the following rules should be followed The first lines in the file should be Godot s copyright header and MIT license copy pasted from another file Make sure to adjust the filename In a h header include guards should be used with the form FILENAME_H In a cpp file e g filename cpp the first include should be the one where the class is declared e g include filename h followed by an empty line for separation Then come headers from Godot s own code base included in alphabetical order enforced by clang format with paths relative to the root folder Those includes should be done with quotes e g include core object h The block of Godot header includes should then be followed by an empty line for separation Finally third party headers either from thirdparty or from the system s include paths come next and should be included with the and symbols e g include png h The block of third party headers should also be followed by an empty line for separation Godot and third party headers should be included in the file that requires them i e in the h header if used in the declarative code or in the cpp if used only in the imperative code Example my_new_file h This file is part of GODOT ENGINE https godotengine org Copyright c 2014 present Godot Engine contributors see AUTHORS md Copyright c 2007 2014 Juan Linietsky Ariel Manzur Permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files the Software to deal in the Software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense and or sell copies of the Software and to permit persons to whom the Software is furnished to do so subject to the following conditions The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software THE SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND EXPRESS OR IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE ifndef MY_NEW_FILE_H define MY_NEW_FILE_H include core hash_map h include core list h include scene gui control h include png h endif MY_NEW_FILE_H Copy to clipboard my_new_file cpp This file is part of GODOT ENGINE https godotengine org Copyright c 2014 present Godot Engine contributors see AUTHORS md Copyright c 2007 2014 Juan Linietsky Ariel Manzur Permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files the Software to deal in the Software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense and or sell copies of the Software and to permit persons to whom the Software is furnished to do so subject to the following conditions The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software THE SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND EXPRESS OR IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE include my_new_file h include core math math_funcs h include scene gui line_edit h include zlib h include zstd h Copy to clipboard Java Godot s Java code mostly in platform android is also enforced via clang format so see the instructions above to set it up Keep in mind that this style guide only applies to code written and maintained by Godot not third party code such as the java src com google subfolder Python Godot s SCons buildsystem is written in Python and various scripts included in the source tree are also using Python For those we use the Ruff linter and code formatter Using ruff locally First of all you will need to install Ruff Ruff requires Python 3 7 to run Installation Here s how to install ruff pip3 install ruff user Copy to clipboard You then have different possibilities to apply ruff to your changes Manual usage You can apply ruff manually to one or more files with the following command ruff l 120 path to file s Copy to clipboard l 120 means that the allowed number of characters per line is 120 This number was agreed upon by the developers The path can point to several files either one after the other or using wildcards like in a typical Unix shell Pre commit hook For ease of use we provide hooks for Git with the pre commit Python framework that will run ruff automatically on all your commits with the correct version of ruff To set up pip install pre commit pre commit install Copy to clipboard You can also run the hook manually with pre commit run Note Previously we supplied a hook in the folder misc hooks If you copied the script manually these hooks should still work but symlinks will be broken If you are using the new system run rm git hooks to remove the old hooks that are no longer needed Editor integration Many IDEs or code editors have beautifier plugins that can be configured to run ruff automatically for example each time you save a file For details you can check Ruff Integrations Comment style guide This comment style guide applies to all programming languages used within Godot s codebase Begin comments with a space character to distinguish them from disabled code Use sentence case for comments Begin comments with an uppercase character and always end them with a period Reference variable function names and values using backticks Wrap comments to 100 characters You can use TODO FIXME NOTE or HACK as admonitions when needed Example Compute the first 10 000 decimals of Pi FIXME Don t crash when computing the 1 337th decimal due to increment being negative Copy to clipboard Don t repeat what the code says in a comment Explain the why rather than how Bad Draw loading screen draw_load_screen Copy to clipboard You can use Javadoc style comments above function or macro definitions It s recommended to use Javadoc style comments only for methods which are not exposed to scripting This is because exposed methods should be documented in the class reference XML instead Example Returns the number of nodes in the universe This can potentially be a very large number hence the 64 bit return type uint64_t Universe get_node_count Copy to clipboard For member variables don t use Javadoc style comments but use single line comments instead class Universe The cached number of nodes in the universe This value may not always be up to date with the current number of nodes in the universe uint64_t node_count_cached 0 Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue C usage guidelines Rationale Since Godot 4 0 the C standard used throughout the codebase is a subset of C 17 While modern C brings a lot of opportunities to write faster more readable code we chose to restrict our usage of C to a subset for a few reasons It makes it easier to review code in online editors This is because engine contributors don t always have access to a full featured IDE while reviewing code It makes the code easier to grasp for beginner contributors who may not be professional C programmers Godot s codebase is known to be easy to learn from and we d like to keep it that way To get your pull request merged it needs to follow the C usage guidelines outlined here Of course you can use features not allowed here in your own C modules or GDExtensions Note Prior to Godot 4 0 the C standard used throughout the codebase was C 03 with a handful of C 14 extensions If you are contributing a pull request to the 3 x branch rather than master your code can t use C 17 features Instead your code must be able to be built with a C 14 compiler The guidelines below don t apply to third party dependencies although we generally favor small libraries instead of larger solutions See also Best practices for engine contributors See also See Code style guidelines for formatting guidelines Disallowed features Any feature not listed below is allowed Using features like constexpr variables and nullptr is encouraged when possible Still try to keep your use of modern C features conservative Their use needs to serve a real purpose such as improving code readability or performance Standard Template Library We don t allow using the STL as Godot provides its own data types among other things See Why does Godot not use STL Standard Template Library for more information This means that pull requests should not use std string std vector and the like Instead use Godot s datatypes as described below Use String instead of std string Use Vector instead of std vector In some cases LocalVector can be used as an alternative ask core developers first Use Array instead of std array Note Godot also has a List datatype which is a linked list While List is already used in the codebase it typically performs worse than other datatypes like Vector and Array Therefore List should be avoided in new code unless necessary auto keyword Please don t use the auto keyword for type inference While it can avoid repetition it can also lead to confusing code Not so confusing auto button memnew Button but what about this auto result EditorNode get_singleton get_complex_result Copy to clipboard Keep in mind hover documentation often isn t readily available for pull request reviewers Most of the time reviewers will use GitHub s online viewer to review pull requests We chose to forbid auto instead of allowing it on a case by case basis to avoid having to decide on difficult edge cases Thank you for your understanding Lambdas Lambdas should be used conservatively when they make code effectively faster or simpler and do not impede readability Please ask before using lambdas in a pull request pragma once directive To follow the existing style please use standard ifdef based include guards instead of pragma once in new files See also See Header includes for guidelines on sorting includes in C and Objective C files User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Handling compatibility breakages So you ve added a new parameter to a method changed the return type changed the type of a parameter or changed its default value and now the automated testing is complaining about compatibility breakages Breaking compatibility should be avoided but when necessary there are systems in place to handle this in a way that makes the transition as smooth as possible A practical example These changes are taken from pull request 88047 which added new pathing options to AStarGrid2D and other AStar classes Among other changes these methods were modified in core math a_star_grid_2d h Vector Vector2 get_point_path const Vector2i p_from const Vector2i p_to TypedArray Vector2i get_id_path const Vector2i p_from const Vector2i p_to Copy to clipboard To Vector Vector2 get_point_path const Vector2i p_from const Vector2i p_to bool p_allow_partial_path false TypedArray Vector2i get_id_path const Vector2i p_from const Vector2i p_to bool p_allow_partial_path false Copy to clipboard This meant adding new compatibility method bindings to the file which should be in the protected section of the code usually placed next to _bind_methods ifndef DISABLE_DEPRECATED TypedArray Vector2i _get_id_path_bind_compat_88047 const Vector2i p_from const Vector2i p_to Vector Vector2 _get_point_path_bind_compat_88047 const Vector2i p_from const Vector2i p_to static void _bind_compatibility_methods endif Copy to clipboard They should start with a _ to indicate that they are internal and end with _bind_compat_ followed by the PR number that introduced the change 88047 in this example These compatibility methods need to be implemented in a dedicated file like core math a_star_grid_2d compat inc in this case a_star_grid_2d compat inc This file is part of GODOT ENGINE https godotengine org Copyright c 2014 present Godot Engine contributors see AUTHORS md Copyright c 2007 2014 Juan Linietsky Ariel Manzur Permission is hereby granted free of charge to any person obtaining a copy of this software and associated documentation files the Software to deal in the Software without restriction including without limitation the rights to use copy modify merge publish distribute sublicense and or sell copies of the Software and to permit persons to whom the Software is furnished to do so subject to the following conditions The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software THE SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND EXPRESS OR IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE ifndef DISABLE_DEPRECATED include core variant typed_array h TypedArray Vector2i AStarGrid2D _get_id_path_bind_compat_88047 const Vector2i p_from_id const Vector2i p_to_id return get_id_path p_from_id p_to_id false Vector Vector2 AStarGrid2D _get_point_path_bind_compat_88047 const Vector2i p_from_id const Vector2i p_to_id return get_point_path p_from_id p_to_id false void AStarGrid2D _bind_compatibility_methods ClassDB bind_compatibility_method D_METHOD get_id_path from_id to_id AStarGrid2D _get_id_path_bind_compat_88047 ClassDB bind_compatibility_method D_METHOD get_point_path from_id to_id AStarGrid2D _get_point_path_bind_compat_88047 endif DISABLE_DEPRECATED Copy to clipboard Unless the change in compatibility is complex the compatibility method should simply call the modified method directly instead of duplicating that method Make sure to match the default arguments for that method in the example above this would be false This file should always be placed next to the original file and have compat inc at the end instead of cpp or h Next this should be included in the cpp file we re adding compatibility methods to so core math a_star_grid_2d cpp include a_star_grid_2d h include a_star_grid_2d compat inc include core variant typed_array h Copy to clipboard And finally the changes reported by the API validation step should be added to the relevant validation file Because this was done during the development of 4 3 this would be misc extension_api_validation 4 2 stable expected including changes not shown in this example GH 88047 Validate extension JSON Error Field classes AStar2D methods get_id_path arguments size changed value in new API from 2 to 3 Validate extension JSON Error Field classes AStar2D methods get_point_path arguments size changed value in new API from 2 to 3 Validate extension JSON Error Field classes AStar3D methods get_id_path arguments size changed value in new API from 2 to 3 Validate extension JSON Error Field classes AStar3D methods get_point_path arguments size changed value in new API from 2 to 3 Validate extension JSON Error Field classes AStarGrid2D methods get_id_path arguments size changed value in new API from 2 to 3 Validate extension JSON Error Field classes AStarGrid2D methods get_point_path arguments size changed value in new API from 2 to 3 Added optional allow_partial_path argument to get_id_path and get_point_path methods in AStar classes Compatibility methods registered Copy to clipboard The instructions for how to add to that file are at the top of the file itself If you get a Hash changed error for a method it means that the compatibility binding is missing or incorrect Such lines shouldn t be added to the expected file but fixed by binding the proper compatibility method And that s it You might run into a bit more complicated cases like rearranging arguments changing return types etc but this covers the basic on how to use this system For more information see pull request 76446 User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Configuring an IDE We assume that you have already cloned and compiled Godot You can easily develop Godot with any text editor and by invoking scons on the command line but if you want to work with an IDE Integrated Development Environment here are setup instructions for some popular ones Android Studio CLion Code Blocks KDevelop Qt Creator Rider Visual Studio Visual Studio Code Xcode It is possible to use other IDEs but their setup is not documented yet If your editor supports the language server protocol you can use clangd for completion diagnostics and more You can generate a compilation database for use with clangd one of two ways Generate compile_commands json while compiling scons compiledb yes Generate compile_commands json without compiling scons compiledb yes compile_commands json Copy to clipboard Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Android Studio Android Studio is a free IDE for Android development made by Google and JetBrains It s based on IntelliJ IDEA and has a feature rich editor which supports Java and C C It can be used to work on Godot s core engine as well as the Android platform codebase Importing the project From the Android Studio s welcome window select Open Android Studio s welcome window Navigate to Godot root directory platform android java and select the settings gradle file Android Studio will import and index the project Android Studio project layout The project is organized using Android Studio s modules lib module Located under Godot root directory platform android java lib this is a library module that organizes the Godot java and native code and make it available as a reusable dependency artifact The artifact generated by this module is made available for other Android modules projects to use as a dependency via MavenCentral editor module Located under Godot root directory platform android java editor this is an application module that holds the source code for the Android port of the Godot Editor This module has a dependency on the lib module app module Located under Godot root directory platform android java app this is an application module that holds the source code for the Android build templates This module has a dependency on the lib module Building debugging the editor module To build the editor module Select the Run Debug Configurations drop down and select editor Select Run Run editor from the top menu or click the Run icon To debug the editor module Open the Build Variants window using View Tools Windows Build Variants from the top menu In the Build Variants window make sure that in the Active Build Variant column the editor entry is set to dev Open the Run Debug Configurations window by clicking on Run Edit Configurations on the top menu In the Run Debug Configurations window select the editor entry and under Debugger make sure the Debug Type is set to Dual Java Native Select Run Debug editor from the top menu or click the Debug icon Building debugging the app module The app module requires the presence of a Godot project in its assets directory Godot root directory platform android java app assets to run This is usually handled by the Godot Editor during the export process While developing in Android Studio it s necessary to manually add a Godot project under that directory to replicate the export process Once that s done you can follow the instructions below to run debug the app module To build the app module Select the Run Debug Configurations drop down and select app Select Run Run app from the top menu or click the Run icon To debug the app module Open the Build Variants window using View Tools Windows Build Variants from the top menu In the Build Variants window make sure that in the Active Build Variant column the app entry is set to dev Open the Run Debug Configurations window by clicking on Run Edit Configurations on the top menu In the Run Debug Configurations window select the app entry and under Debugger make sure the Debug Type is set to Dual Java Native Select Run Debug app from the top menu or click the Debug icon If you run into any issues ask for help in Godot s Android dev channel User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue CLion CLion is a commercial JetBrains IDE for C Importing the project CLion can import a project s compilation database file commonly named compile_commands json To generate the compilation database file open the terminal change to the Godot root directory and run scons compiledb yes Copy to clipboard Then open the Godot root directory with CLion CLion will import the compilation database index the codebase and provide autocompletion and other advanced code navigation and refactoring functionality Compiling and debugging the project CLion does not support compiling and debugging Godot via SCons out of the box This can be achieved by creating a custom build target and run configuration in CLion Before creating a custom build target you must compile Godot once on the command line to generate the Godot executable Open the terminal change into the Godot root directory and execute scons dev_build yes Copy to clipboard To add a custom build target that invokes SCons for compilation Open CLion and navigate to Preferences Build Execution Deployment Custom Build Targets Click Add target and give the target a name e g Godot debug Click next to the Build selectbox then click the button in the External Tools dialog to add a new external tool Give the tool a name e g Build Godot debug set Program to scons set Arguments to the compilation settings you want see compiling Godot and set the Working directory to ProjectFileDir which equals the Godot root directory Click OK to create the tool Note CLion does not expand shell commands like scons j nproc Use concrete values instead e g scons j8 Back in the External Tools dialog click the again to add a second external tool for cleaning the Godot build via SCons Give the tool a name e g Clean Godot debug set Program to scons set Arguments to c which will clean the build and set the Working directory to ProjectFileDir Click OK to create the tool Close the External Tools dialog In the Custom Build Target dialog for the custom Godot debug build target select the Build Godot debug tool from the Build select box and select the Clean Godot debug tool from the Clean select box Click OK to create the custom build target In the main IDE window click Add Configuration In the Run Debug Configuration dialog click Add new then select Custom Build Application to create a new custom run debug configuration Give the run debug configuration a name e g Godot debug select the Godot debug custom build target as the Target Select the Godot executable in the bin folder as the Executable and set the Program arguments to editor path path to your project where path to your project should be a path pointing to an existing Godot project If you omit the path argument you will only be able to debug the Godot Project Manager window Click OK to create the run debug configuration You can now build run debug profile and Valgrind check the Godot editor via the run configuration When playing a scene the Godot editor will spawn a separate process You can debug this process in CLion by going to Run Attach to process typing godot and selecting the Godot process with the highest pid process ID which will usually be the running project User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Code Blocks Code Blocks is a free open source cross platform IDE Creating a new project From Code Blocks main screen click Create a new project or select File New Project In the New from template window from Projects select Empty project and click Go Click Next to pass the welcome to the new empty project wizard The project file should be created in the root of the cloned project folder To achieve this first ensure that the Project title is the same as the folder name that Godot was cloned into Unless you cloned the project into a folder with a different name this will be godot Second ensure that the Folder to create project in is the folder you ran the Git clone command from not the godot project folder Confirm that the Resulting filename field will create the project file in the root of the cloned project folder The compiler and configuration settings are managed through SCons and will be configured later However it s worth deselecting the Create Release configuration option so only a single build target is created before clicking Finish Configuring the build The first step is to change the project properties Right click on the new project and select Properties Check the This is a custom Makefile property Click OK to save the changes The next step is to change the build options Right click on the new project and select Build Options Select the Make commands tab and remove all the existing commands for all the build targets For each build target enter the SCons command for creating the desired build in the Build project target field The minimum is scons For details on the SCons build options see Introduction to the buildsystem It s also useful to add the scons clean command in the Clean project target field to the project s default commands If you re using Windows all the commands need to be preceded with cmd c to initialize the command interpreter Windows example Code Blocks should now be configured to build Godot so either select Build Build click the gear button or press Ctrl F9 Configuring the run Once SCons has successfully built the desired target reopen the project Properties and select the Build targets tab In the Output filename field browse to the bin folder and select the compiled file Deselect the Auto generate filename prefix and Auto generate filename extension options Code Blocks should now be configured to run your compiled Godot executable so either select Build Run click the green arrow button or press Ctrl F10 There are two additional points worth noting First if required the Execution working dir field can be used to test specific projects by setting it to the folder containing the project godot file Second the Build targets tab can be used to add and remove build targets for working with and creating different builds Adding files to the project To add all the Godot code files to the project right click on the new project and select Add files recursively It should automatically select the project folder so simply click Open By default all code files are included so simply click OK Code style configuration Before editing any files remember that all code needs to comply with the Code style guidelines One important difference with Godot is the use of tabs for indents Therefore the key default editor setting that needs to be changed in Code Blocks is to enable tabs for indents This setting can be found by selecting Settings Editor Under General Settings on the Editor Settings tab under Tab Options check Use TAB character That s it You re ready to start contributing to Godot using the Code Blocks IDE Remember to save the project file and the Workspace If you run into any issues ask for help in one of Godot s community channels User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue KDevelop KDevelop is a free open source IDE for all desktop platforms Importing the project From the KDevelop s main screen select Open Project KDevelop s main screen Navigate to the Godot root folder and select it On the next screen choose Custom Build System for the Project Manager After the project has been imported open the project configuration by right clicking on it in the Projects panel and selecting Open Configuration option Under Language Support open the Includes Imports tab and add the following paths A dot to indicate the root of the Godot project core core os core math drivers platform your_platform Replace your_platform with a folder corresponding to your current platform Copy to clipboard Apply the changes Under Custom Build System add a new build configuration with the following settings Build Directory blank Enable True Executable scons Arguments See Introduction to the buildsystem for a full list of arguments Apply the changes and close the configuration window Debugging the project Select Run Configure Launches from the top menu Click Add to create a new launch configuration Select Executable option and specify the path to your executable located in the Godot root directory bin folder The name depends on your build configuration e g godot linuxbsd editor dev x86_64 for 64 bit LinuxBSD platform with platform editor and dev_build yes If you run into any issues ask for help in one of Godot s community channels User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Qt Creator Qt Creator is a free open source IDE for all desktop platforms Importing the project From the Qt Creator s main screen select New Project Import Project Import Existing Project Under Location select the Godot root folder Next you can choose which folders and files will be visible to the project While C C files are added automatically other extensions can be potentially useful glsl for shader files py for buildsystem files java for Android platform development mm for macOS platform development Note You can change this configuration later by right clicking on your project and selecting the Edit Files option Finish the import Open the project_name includes file and add a line containing to it to correctly enable the code completion From the left side menu select Projects and open the Build tab Delete the predefined make build step Click Add Build Step Custom Process Step to add a new build step with the following settings Command scons Arguments See Introduction to the buildsystem for a full list of arguments Note If the build fails with Could not start process scons it can mean that scons is not in your PATH environment variable In this case you ll have to specify the full path to the SCons binary Debugging the project From the left side menu select Projects and open the Run tab Under Executable specify the path to your executable located in the Godot root directory bin folder The name depends on your build configuration e g godot linuxbsd editor dev x86_64 for 64 bit LinuxBSD platform with platform editor and dev_build yes You can use buildDir to reference the project root e g buildDir bin godot linuxbsd editor dev x86_64 If you want to run a specific project specify its root folder under Working directory If you want to run the editor add e to the Command line arguments field To learn more about command line arguments refer to the command line tutorial Code style configuration Developers must follow the project s code style and the IDE should help them follow it By default Qt Creator uses spaces for indentation which doesn t match the Godot code style guidelines You can change this behavior by changing the Code Style in Tools Options C Click on Edit to change the current settings then click on Copy Built in Code Style button to set a new code style Set a name for it e g Godot and change the Tab policy to be Tabs Only If you run into any issues ask for help in one of Godot s community channels User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Rider Rider is a commercial JetBrains IDE for C and C that uses the same solution system as Visual Studio Importing the project Tip If you already use Visual Studio as your main IDE you can use the same solution file in Rider Rider and Visual Studio use the same solution format so you can switch between the two IDEs without rebuilding the solution file Debug configurations need to be changed when going from one IDE to another Rider requires a solution file to work on a project While Godot does not come with the solution file it can be generated using SCons Navigate to the Godot root folder and open a Command Prompt or PowerShell window Copy paste and run the next command to generate the solution scons platform windows vsproj yes dev_build yes Copy to clipboard The vsproj parameter signals that you want Visual Studio solution generated The dev_build parameter makes sure the debug symbols are included allowing to e g step through code using breakpoints If you have Rider setup as your main IDE for sln you can now open the project by double clicking on the godot sln in the project root or by using the Open option inside of Rider Note Rider could fail to build the first time you open the project If that is the case you can close Rider and open the solution in Visual Studio build it close Visual Studio and open the solution in Rider again You are now able to build the project from Rider Compiling and debugging the project Rider comes with a built in debugger that can be used to debug the Godot project You can launch the debugger by pressing the Debug icon at the top of the screen this only works for the Project manager if you want to debug the editor you need to configure the debugger first Click on the Godot Edit Configurations option at the top of the screen Delete what is under Program arguments and paste the following line e path path to the Godot project Copy to clipboard This will tell the executable to debug the specified project without using the project manager Use the root path to the project folder not project godot file path Finally click on apply and ok to save the changes You can now launch the debugger by pressing the Debug icon at the top of the screen and it will open the project to debug Alternatively you can use Run Attach to Process to attach the debugger to a running Godot instance User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Visual Studio Visual Studio Community is a Windows only IDE by Microsoft that s free for individual use or non commercial use within organizations It has many useful features such as memory view performance view source control and more Importing the project Visual Studio requires a solution file to work on a project While Godot does not come with the solution file it can be generated using SCons Navigate to the Godot root folder and open a Command Prompt or PowerShell window Run scons platform windows vsproj yes dev_build yes to generate the solution with debug symbols The vsproj parameter signals that you want Visual Studio solution generated The dev_build parameter makes sure the debug symbols are included allowing to e g step through code using breakpoints You can now open the project by double clicking on the godot sln in the project root or by using the Open a project or solution option inside of the Visual Studio Use the Build top menu to build the project Warning Visual Studio must be configured with the C package It can be selected in the installer Debugging the project Visual Studio features a powerful debugger This allows the user to examine Godot s source code stop at specific points in the code inspect the current execution context and make live changes to the codebase You can launch the project with the debugger attached using the Debug Start Debugging option from the top menu However unless you want to debug the Project Manager specifically you d need to configure debugging options first This is due to the fact that when the Godot Project Manager opens a project the initial process is terminated and the debugger gets detached To configure the launch options to use with the debugger use Project Properties from the top menu Open the Debugging section and under Command Arguments add two new arguments the e flag opens the editor instead of the Project Manager and the path argument tells the executable to open the specified project must be provided as an absolute path to the project root not the project godot file if the path contains spaces be sure to pass it inside double quotation marks To learn more about command line arguments refer to the command line tutorial Even if you start the project without a debugger attached it can still be connected to the running process using Debug Attach to Process menu To check that everything is working put a breakpoint in main cpp and press F5 to start debugging If you run into any issues ask for help in one of Godot s community channels User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Visual Studio Code Visual Studio Code is a free cross platform code editor by Microsoft not to be confused with Visual Studio Importing the project Make sure the C C extension is installed You can find instructions in the official documentation Alternatively clangd can be used instead When using the clangd extension run scons compiledb yes From the Visual Studio Code s main screen open the Godot root folder with File Open Folder Press Ctrl Shift P to open the command prompt window and enter Configure Task Select the Create tasks json file from template option Then select Others If there is no such option as Create tasks json file from template available either delete the file if it already exists in your folder or create a vscode tasks json file manually See Tasks in Visual Studio Code for more details on tasks Within the tasks json file find the tasks array and add a new section to it label build group build type shell command scons args enable for debugging with breakpoints dev_build yes problemMatcher msCompile Copy to clipboard An example of a filled out tasks json Arguments can be different based on your own setup and needs See Introduction to the buildsystem for a full list of arguments Debugging the project To run and debug the project you need to create a new configuration in the launch json file Press Ctrl Shift D to open the Run panel If launch json file is missing you will be prompted to create a new one Select C GDB LLDB There may be another platform specific option here If selected adjust the configuration example provided accordingly Within the launch json file find the configurations array and add a new section to it LinuxBSD LinuxBSD_gdb Windows name Launch Project type lldb request launch Change to godot linuxbsd editor dev x86_64 llvm for llvm based builds program workspaceFolder bin godot linuxbsd editor dev x86_64 Change the arguments below for the project you want to test with To run the project instead of editing it remove the editor argument args editor path path to your godot project folder stopAtEntry false cwd workspaceFolder environment externalConsole false preLaunchTask build Copy to clipboard name Launch Project type cppdbg request launch Change to godot linuxbsd editor dev x86_64 llvm for llvm based builds program workspaceFolder bin godot linuxbsd editor dev x86_64 Change the arguments below for the project you want to test with To run the project instead of editing it remove the editor argument args editor path path to your godot project folder stopAtEntry false cwd workspaceFolder environment externalConsole false setupCommands description Enable pretty printing for gdb text enable pretty printing ignoreFailures true description Load custom pretty printers for Godot types text source workspaceRoot misc utility godot_gdb_pretty_print py preLaunchTask build Copy to clipboard name Launch Project type cppvsdbg request launch program workspaceFolder bin godot windows editor dev x86_64 exe Change the arguments below for the project you want to test with To run the project instead of editing it remove the editor argument args editor path path to your godot project folder stopAtEntry false cwd workspaceFolder environment console internalConsole visualizerFile workspaceFolder platform windows godot natvis preLaunchTask build Copy to clipboard An example of a filled out launch json Note Due to sporadic performance issues it is recommended to use LLDB over GDB on Unix based systems Make sure that the CodeLLDB extension is installed If you encounter issues with lldb you may consider using gdb see the LinuxBSD_gdb configuration Do note that lldb may work better with LLVM based builds See Compiling for Linux BSD for further information The name under program depends on your build configuration e g godot linuxbsd editor dev x86_64 for 64 bit LinuxBSD platform with target editor and dev_build yes Configuring Intellisense For the C C extension To fix include errors you may be having you need to configure some settings in the c_cpp_properties json file First make sure to build the project since some files need to be generated Edit the C C Configuration file either with the UI or with text Add an include path for your platform for example workspaceFolder platform windows Add defines for the editor TOOLS_ENABLED debug builds DEBUG_ENABLED and tests TESTS_ENABLED Make sure the compiler path is configured correctly to the compiler you are using See Introduction to the buildsystem for further information on your platform The c_cpp_properties json file should look similar to this for Windows configurations name Win32 includePath workspaceFolder workspaceFolder platform windows defines _DEBUG UNICODE _UNICODE TOOLS_ENABLED DEBUG_ENABLED TESTS_ENABLED windowsSdkVersion 10 0 22621 0 compilerPath C Program Files Microsoft Visual Studio 2022 Community VC Tools MSVC 14 39 33519 bin Hostx64 x64 cl exe cStandard c17 cppStandard c 17 intelliSenseMode windows msvc x64 version 4 Copy to clipboard Alternatively you can use the scons argument compiledb yes and set the compile commands setting compileCommands to compile_commands json found in the advanced section of the C C Configuration UI This argument can be added to your build task in tasks json since it will need to be run whenever files are added or moved If you run into any issues ask for help in one of Godot s community channels Tip To get linting on class reference XML files install the vscode xml extension User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Xcode Xcode is a free macOS only IDE You can download it from the Mac App Store Importing the project From Xcode s main screen create a new project using the Other External Build System template Now choose a name for your project and set the path to scons executable in build tool to find the path you can type where scons in a terminal Open the main target from the Targets section and select the Info tab Fill out the form with the following settings Arguments See Introduction to the buildsystem for a full list of arguments Directory A full path to the Godot root folder Add a Command Line Tool target which will be used for indexing the project by choosing File New Target Select macOS Application Command Line Tool Note Name it something so you know not to compile with this target e g GodotXcodeIndex For this target open the Build Settings tab and look for Header Search Paths Set Header Search Paths to the absolute path to the Godot root folder You need to include subdirectories as well To achieve that add two two asterisks to the end of the path e g Users me repos godot source Add the Godot source to the project by dragging and dropping it into the project file browser Select Create groups for the Added folders option and check only your command line indexing target in the Add to targets section Xcode will now index the files This may take a few minutes Once Xcode is done indexing you should have jump to definition autocompletion and full syntax highlighting Debugging the project To enable debugging support you need to edit the external build target s build and run schemes Open the scheme editor of the external build target Locate the Build Post Actions section Add a new script run action Under Provide build settings from select your project This allows to reference the project directory within the script Create a script that will give the binary a name that Xcode can recognize e g ln f PROJECT_DIR godot bin godot macos tools 64 PROJECT_DIR godot bin godot Copy to clipboard Build the external build target Open the scheme editor again and select Run Set the Executable to the file you linked in your post build action script Check Debug executable You can add two arguments on the Arguments tab the e flag opens the editor instead of the Project Manager and the path argument tells the executable to open the specified project must be provided as an absolute path to the project root not the project godot file To check that everything is working put a breakpoint in platform macos godot_main_macos mm and run the project If you run into any issues ask for help in one of Godot s community channels User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Building from source Godot prides itself on being very easy to build by C projects standards Godot uses the SCons build system and after the initial setup compiling the engine for your current platform should be as easy as running scons Copy to clipboard But you will probably need to use at least some of the available options to configure the build to match your specific needs be it a custom engine fork a lightweight build stripped of extra modules or an executable targeting engine development The articles below should help you navigate configuration options available as well as prerequisites required to compile Godot exactly the way you need Basics of building Godot Let s start with basics and learn how to get Godot s source code and then which options to use to compile it regardless of your target platform Getting the source Introduction to the buildsystem Building for target platforms Below you can find instructions for compiling the engine for your specific target platform Note that Godot supports cross compilation which means you can compile it for a target platform that doesn t match your current platform say target Linux while being on Windows The guides will try their best to cover all possible situations Compiling for Windows Compiling for Linux BSD Compiling for macOS Compiling for Android Compiling for iOS Cross compiling for iOS on Linux Compiling for the Web Other compilation targets and options Some additional universal compilation options require further setup Namely while Godot does have C NET support as a part of its main codebase it does not get compiled by default to reduce the executable size for users who don t need C for their projects Articles below explain how to configure the buildsystem for cases like this and also cover some optimization techniques Compiling with NET Compiling with PCK encryption key Optimizing a build for size Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Getting the source Downloading the Godot source code Before getting into the SCons build system and compiling Godot you need to actually download the Godot source code The source code is available on GitHub and while you can manually download it via the website in general you want to do it via the git version control system If you are compiling in order to make contributions or pull requests you should follow the instructions from the Pull Request workflow If you don t know much about git yet there are a great number of tutorials available on various websites In general you need to install git and or one of the various GUI clients Afterwards to get the latest development version of the Godot source code the unstable master branch you can use git clone If you are using the git command line client this is done by entering the following in a terminal git clone https github com godotengine godot git You can add the depth 1 argument to omit the commit history Faster but not all Git operations like blame will work Copy to clipboard For any stable release visit the release page and click on the link for the release you want You can then download and extract the source from the download link on the page With git you can also clone a stable release by specifying its branch or tag after the branch or just b argument Clone the continuously maintained stable branch 3 x as of writing git clone https github com godotengine godot git b 3 x Clone the 3 2 3 stable tag This is a fixed revision that will never change git clone https github com godotengine godot git b 3 2 3 stable Copy to clipboard There are also generally branches besides master for each major version After downloading the Godot source code you can continue to compiling Godot User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Introduction to the buildsystem Godot is a primarily C project and it uses the SCons build system We love SCons for how maintainable and easy to set up it makes our buildsystem And thanks to that compiling Godot from source can be as simple as running scons Copy to clipboard This produces an editor build for your current platform operating system and architecture You can change what gets built by specifying a target a platform and or an architecture For example to build an export template used for running exported games you can run scons target template_release Copy to clipboard If you plan to debug or develop the engine then you might want to enable the dev_build option to enable dev only debugging code scons dev_build yes Copy to clipboard Following sections in the article will explain these and other universal options in more detail But before you can compile Godot you need to install a few prerequisites Please refer to the platform documentation to learn more Compiling for Android Compiling for iOS Compiling for Linux BSD Compiling for macOS Compiling for the Web Compiling for Windows These articles cover in great detail both how to setup your environment to compile Godot on a specific platform and how to compile for that platform Please feel free to go back and forth between them and this article to reference platform specific and universal configuration options Using multi threading The build process may take a while depending on how powerful your system is By default Godot s SCons setup is configured to use all CPU threads but one to keep the system responsive during compilation If you want to adjust how many CPU threads SCons will use use the j threads parameter to specify how many threads will be used for the build Example for using 4 threads scons j4 Copy to clipboard Platform selection Godot s build system will begin by detecting the platforms it can build for If not detected the platform will simply not appear on the list of available platforms The build requirements for each platform are described in the rest of this tutorial section SCons is invoked by just calling scons If no platform is specified SCons will detect the target platform automatically based on the host platform It will then start building for the target platform right away To list the available target platforms use scons platform list scons platform list scons Reading SConscript files The following platforms are available android javascript linuxbsd server windows Please run SCons again and select a valid platform platform string Copy to clipboard To build for a platform for example linuxbsd run with the platform or p to make it short argument scons platform linuxbsd Copy to clipboard Resulting binary The resulting binaries will be placed in the bin subdirectory generally with this naming convention godot platform target dev double arch extra_suffix ext Copy to clipboard For the previous build attempt the result would look like this ls bin bin godot linuxbsd editor x86_64 Copy to clipboard This means that the binary is for Linux or BSD not both is not optimized has the whole editor compiled in and is meant for 64 bits A Windows binary with the same configuration will look like this C godot dir bin godot windows editor 64 exe Copy to clipboard Copy that binary to any location you like as it contains the Project Manager editor and all means to execute the game However it lacks the data to export it to the different platforms For that the export templates are needed which can be either downloaded from godotengine org or you can build them yourself Aside from that there are a few standard options that can be set in all build targets and which will be explained below Target Target controls if the editor is contained and debug flags are used All builds are optimized Each mode means target editor Build with editor optimized with debugging code defines TOOLS_ENABLED DEBUG_ENABLED O2 O2 target template_debug Build with C debugging symbols defines DEBUG_ENABLED O2 O2 target template_release Build without symbols defines O3 O2 The editor is enabled by default in all PC targets Linux Windows macOS disabled for everything else Disabling the editor produces a binary that can run projects but does not include the editor or the Project Manager scons platform platform target editor template_debug template_release Copy to clipboard Development and production aliases When creating builds for development running debugging profiling tools you often have different goals compared to production builds making binaries as fast and small as possible Godot provides two aliases for this purpose dev_mode yes is an alias for verbose yes warnings extra werror yes tests yes This enables warnings as errors behavior similar to Godot s continuous integration setup and also builds unit tests so you can run them locally production yes is an alias for use_static_cpp yes debug_symbols no lto auto Statically linking libstdc allows for better binary portability when compiling for Linux This alias also enables link time optimization when compiling for Linux Web and Windows with MinGW but keeps LTO disabled when compiling for macOS iOS or Windows with MSVC This is because LTO on those platforms is very slow to link or has issues with the generated code You can manually override options from those aliases by specifying them on the same command line with different values For example you can use scons production yes debug_symbols yes to create production optimized binaries with debugging symbols included Dev build Note dev_build should not be confused with dev_mode which is an alias for several development related options see above When doing engine development the dev_build option can be used together with target to enable dev specific code dev_build defines DEV_ENABLED disables optimization O0 0d enables generating debug symbols and does not define NDEBUG so assert works in thirdparty libraries scons platform platform dev_build yes Copy to clipboard This flag appends the dev suffix for development to the generated binary name See also There are additional SCons options to enable sanitizers which are tools you can enable at compile time to better debug certain engine issues See Using sanitizers for more information Debugging symbols By default debug_symbols no is used which means no debugging symbols are included in compiled binaries Use debug_symbols yes to include debug symbols within compiled binaries which allows debuggers and profilers to work correctly Debugging symbols are also required for Godot s crash stacktraces to display with references to source code files and lines The downside is that debugging symbols are large files significantly larger than the binaries themselves As a result official binaries currently do not include debugging symbols This means you need to compile Godot yourself to have access to debugging symbols When using debug_symbols yes you can also use separate_debug_symbols yes to put debug information in a separate file with a debug suffix This allows distributing both files independently Note that on Windows when compiling with MSVC debugging information is always written to a separate pdb file regardless of separate_debug_symbols Tip Use the strip path to binary command to remove debugging symbols from a binary you ve already compiled Optimization level Several compiler optimization levels can be chosen from optimize speed_trace default when targeting non Web platforms Favors execution speed at the cost of larger binary size Optimizations may sometimes negatively impact debugger usage stack traces may be less accurate If this occurs to you use optimize debug instead optimize speed Favors even more execution speed at the cost of even larger binary size compared to optimize speed_trace Even less friendly to debugging compared to optimize debug as this uses the most aggressive optimizations available optimize size default when targeting the Web platform Favors small binaries at the cost of slower execution speed optimize debug Only enables optimizations that do not impact debugging in any way This results in faster binaries than optimize none but slower binaries than optimize speed_trace optimize none Do not perform any optimization This provides the fastest build times but the slowest execution times optimize custom advanced users only Do not pass optimization arguments to the C C compilers You will have to pass arguments manually using the cflags ccflags and cxxflags SCons options Architecture The arch option is meant to control the CPU or OS version intended to run the binaries It is focused mostly on desktop platforms and ignored everywhere else Supported values for the arch option are auto x86_32 x86_64 arm32 arm64 rv64 ppc32 ppc64 and wasm32 scons platform platform arch auto x86_32 x86_64 arm32 arm64 rv64 ppc32 ppc64 wasm32 Copy to clipboard This flag appends the value of arch to resulting binaries when relevant The default value arch auto detects the architecture that matches the host platform Custom modules It s possible to compile modules residing outside of Godot s directory tree along with the built in modules A custom_modules build option can be passed to the command line before compiling The option represents a comma separated list of directory paths containing a collection of independent C modules that can be seen as C packages just like the built in modules directory For instance it s possible to provide both relative absolute and user directory paths containing such modules scons custom_modules modules abs path to modules src godot_modules Copy to clipboard Note If there s any custom module with the exact directory name as a built in module the engine will only compile the custom one This logic can be used to override built in module implementations See also Custom modules in C Cleaning generated files Sometimes you may encounter an error due to generated files being present You can remove them by using scons clean options where options is the list of build options you ve used to build Godot previously Alternatively you can use git clean fixd which will clean build artifacts for all platforms and configurations Beware as this will remove all untracked and ignored files in the repository Don t run this command if you have uncommitted work Other build options There are several other build options that you can use to configure the way Godot should be built compiler debug options etc as well as the features to include disable Check the output of scons help for details about each option for the version you are willing to compile Overriding the build options Using a file The default custom py file can be created at the root of the Godot Engine source to initialize any SCons build options passed via the command line custom py optimize size module_mono_enabled yes use_llvm yes extra_suffix game_title Copy to clipboard You can also disable some of the builtin modules before compiling saving some time it takes to build the engine See Optimizing a build for size page for more details See also You can use the online Godot build options generator to generate a custom py file containing SCons options You can then save this file and place it at the root of your Godot source directory Another custom file can be specified explicitly with the profile command line option both overriding the default build configuration scons profile path to custom py Copy to clipboard Note Build options set from the file can be overridden by the command line options It s also possible to override the options conditionally custom py import version Override options specific for Godot 3 x and 4 x versions if version major 3 pass elif version major 4 pass Copy to clipboard Using the SCONSFLAGS SCONSFLAGS is an environment variable which is used by the SCons to set the options automatically without having to supply them via the command line For instance you may want to force a number of CPU threads with the aforementioned j option for all future builds Linux macOS Windows cmd Windows PowerShell export SCONSFLAGS j4 Copy to clipboard set SCONSFLAGS j4 Copy to clipboard env SCONSFLAGS j4 Copy to clipboard SCU single compilation unit build Regular builds tend to be bottlenecked by including large numbers of headers in each compilation translation unit Primarily to speed up development rather than for production builds Godot offers a single compilation unit build aka Unity Jumbo build For the folders accelerated by this option multiple cpp files are compiled in each translation unit so headers can be shared between multiple files which can dramatically decrease build times To perform an SCU build use the scu_build yes SCons option Note When developing a Pull Request using SCU builds be sure to make a regular build prior to submitting the PR This is because SCU builds by nature include headers from earlier cpp files in the translation unit therefore won t catch all the includes you will need in a regular build The CI will catch these errors but it will usually be faster to catch them on a local build on your machine Export templates Official export templates are downloaded from the Godot Engine site godotengine org However you might want to build them yourself in case you want newer ones you are using custom modules or simply don t trust your own shadow If you download the official export templates package and unzip it you will notice that most files are optimized binaries or packages for each platform android_debug apk android_release apk android_source zip ios zip linux_debug arm32 linux_debug arm64 linux_debug x86_32 linux_debug x86_64 linux_release arm32 linux_release arm64 linux_release x86_32 linux_release x86_64 macos zip version txt web_debug zip web_dlink_debug zip web_dlink_nothreads_debug zip web_dlink_nothreads_release zip web_dlink_release zip web_nothreads_debug zip web_nothreads_release zip web_release zip windows_debug_x86_32_console exe windows_debug_x86_32 exe windows_debug_x86_64_console exe windows_debug_x86_64 exe windows_debug_arm64_console exe windows_debug_arm64 exe windows_release_x86_32_console exe windows_release_x86_32 exe windows_release_x86_64_console exe windows_release_x86_64 exe windows_release_arm64_console exe windows_release_arm64 exe Copy to clipboard To create those yourself follow the instructions detailed for each platform in this same tutorial section Each platform explains how to create its own template The version txt file should contain the corresponding Godot version identifier This file is used to install export templates in a version specific directory to avoid conflicts For instance if you are building export templates for Godot 3 1 1 version txt should contain 3 1 1 stable on the first line and nothing else This version identifier is based on the major minor patch if present and status lines of the version py file in the Godot Git repository If you are developing for multiple platforms macOS is definitely the most convenient host platform for cross compilation since you can cross compile for every target Linux and Windows come in second place but Linux has the advantage of being the easier platform to set this up User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Compiling for Windows See also This page describes how to compile Windows editor and export template binaries from source If you re looking to export your project to Windows instead read Exporting for Windows Requirements For compiling under Windows the following is required A C compiler Use one of the following Visual Studio Community version 2019 or later Visual Studio 2022 is recommended Make sure to enable C in the list of workflows to install If you ve already installed Visual Studio without C support run the installer again it should present you a Modify button Supports x86_64 x86_32 and arm64 MinGW w64 with GCC can be used as an alternative to Visual Studio Be sure to install configure it to use the posix thread model Important When using MinGW to compile the master branch you need GCC 9 or later Supports x86_64 and x86_32 only MinGW LLVM with clang can be used as an alternative to Visual Studio and MinGW w64 Supports x86_64 x86_32 and arm64 Python 3 6 Make sure to enable the option to add Python to the PATH in the installer SCons 3 1 2 build system Using the latest release is recommended especially for proper support of recent Visual Studio releases Note If you have Scoop installed you can easily install MinGW and other dependencies using the following command scoop install gcc python scons make mingw Copy to clipboard Note If you have MSYS2 installed you can easily install MinGW and other dependencies using the following command pacman S mingw w64 x86_64 python3 pip mingw w64 x86_64 gcc mingw w64 i686 python3 pip mingw w64 i686 gcc make Copy to clipboard For each MSYS2 MinGW subsystem you should then run pip3 install scons in its shell See also To get the Godot source code for compiling see Getting the source For a general overview of SCons usage for Godot see Introduction to the buildsystem Setting up SCons To install SCons open the command prompt and run the following command python m pip install scons Copy to clipboard If you are prompted with the message Defaulting to user installation because normal site packages is not writeable you may have to run that command again using elevated permissions Open a new command prompt as an Administrator then run the command again to ensure that SCons is available from the PATH To check whether you have installed Python and SCons correctly you can type python version and scons version into a command prompt cmd exe If the commands above don t work make sure to add Python to your PATH environment variable after installing it then check again You can do so by running the Python installer again and enabling the option to add Python to the PATH If SCons cannot detect your Visual Studio installation it might be that your SCons version is too old Update it to the latest version with python m pip install upgrade scons Downloading Godot s source Refer to Getting the source for detailed instructions The tutorial will assume from now on that you placed the source code in C godot Warning To prevent slowdowns caused by continuous virus scanning during compilation add the Godot source folder to the list of exceptions in your antivirus software For Windows Defender hit the Windows key type Windows Security then hit Enter Click on Virus threat protection on the left panel Under Virus threat protection settings click on Manage Settings and scroll down to Exclusions Click Add or remove exclusions then add the Godot source folder Compiling Selecting a compiler SCons will automatically find and use an existing Visual Studio installation If you do not have Visual Studio installed it will attempt to use MinGW instead If you already have Visual Studio installed and want to use MinGW w64 pass use_mingw yes to the SCons command line Note that MSVC builds cannot be performed from the MSYS2 or MinGW shells Use either cmd exe or PowerShell instead If you are using MinGW LLVM pass both use_mingw yes and use_llvm yes to the SCons command line Tip During development using the Visual Studio compiler is usually a better idea as it links the Godot binary much faster than MinGW However MinGW can produce more optimized binaries using link time optimization see below making it a better choice for production use This is particularly the case for the GDScript VM which performs much better with MinGW compared to MSVC Therefore it s recommended to use MinGW to produce builds that you distribute to players All official Godot binaries are built in custom containers using MinGW Running SCons After opening a command prompt change to the root directory of the engine source code using cd and type C godot scons platform windows Copy to clipboard Note When compiling with multiple CPU threads SCons may warn about pywin32 being missing You can safely ignore this warning If all goes well the resulting binary executable will be placed in C godot bin with the name godot windows editor x86_32 exe or godot windows editor x86_64 exe By default SCons will build a binary matching your CPU architecture but this can be overridden using arch x86_64 arch x86_32 or arch arm64 This executable file contains the whole engine and runs without any dependencies Running it will bring up the Project Manager Tip If you are compiling Godot for production use you can make the final executable smaller and faster by adding the SCons option production yes This enables additional compiler optimizations and link time optimization LTO takes some time to run and requires up to 30 GB of available RAM while compiling depending on toolchain If you re running out of memory with the above option use production yes lto none or production yes lto thin LLVM only for a lightweight but less effective form of LTO Note If you want to use separate editor settings for your own Godot builds and official releases you can enable Self contained mode by creating a file called _sc_ or _sc_ in the bin folder Compiling with support for Direct3D 12 By default builds of Godot do not contain support for the Direct3D 12 graphics API To compile Godot with Direct3D 12 support you need at least the following item godot nir static library We compile the Mesa libraries you will need into a static library Download it anywhere unzip it and remember the path to the unzipped folder you will need it below Note You can optionally build the godot nir static libraries yourself with the following steps Install the Python package mako which is needed to generate some files Clone the godot nir static directory and navigate to it Run the following git submodule update init update_mesa sh scons Copy to clipboard If you are building with MinGW w64 add use_mingw yes to the scons command you can also specify build architecture using arch architecture If you are building with MinGW LLVM add both use_mingw yes and use_llvm yes to the scons command If you are building with MinGW and the binaries are not located in the PATH add mingw_prefix path to mingw to the scons command Mesa static library should be built using the same compiler and the same CRT if you are building with MinGW you are using for building Godot Optionally you can compile with the following for additional features PIX is a performance tuning and debugging application for Direct3D12 applications If you compile in support for it you can get much more detailed information through PIX that will help you optimize your game and troubleshoot graphics bugs To use it download the WinPixEventRuntime package You will be taken to a NuGet package page where you can click Download package to get it Once downloaded change the file extension to zip and unzip the file to some path Agility SDK can be used to provide access to the latest Direct3D 12 features without relying on driver updates To use it download the latest Agility SDK package You will be taken to a NuGet package page where you can click Download package to get it Once downloaded change the file extension to zip and unzip the file to some path Note If you use a preview version of the Agility SDK remember to enable developer mode in Windows otherwise it won t be used Note If you want to use a PIX with MinGW build navigate to PIX runtime directory and use the following commands to generate import library For x86 64 gendef bin x64 WinPixEventRuntime dll dlltool machine i386 x86 64 no leading underscore d WinPixEventRuntime def D WinPixEventRuntime dll l bin x64 libWinPixEventRuntime a For ARM64 gendef bin ARM64 WinPixEventRuntime dll dlltool machine arm64 no leading underscore d WinPixEventRuntime def D WinPixEventRuntime dll l bin ARM64 libWinPixEventRuntime a Copy to clipboard When building Godot you will need to tell SCons to use Direct3D 12 and where to look for the additional libraries C godot scons platform windows d3d12 yes mesa_libs Copy to clipboard Or with all options enabled C godot scons platform windows d3d12 yes mesa_libs agility_sdk_path pix_path Copy to clipboard Note For the Agility SDK s DLLs you have to explicitly choose the kind of workflow Single arch is the default DLLs copied to bin If you pass agility_sdk_multi_arch yes to SCons you ll opt in for multi arch DLLs will be copied to the appropriate bin arch subdirectories and at runtime the right one will be loaded Compiling with ANGLE support ANGLE provides a translation layer from OpenGL ES 3 x to Direct3D 11 and can be used to improve support for the Compatibility renderer on some older GPUs with outdated OpenGL drivers and on Windows for ARM By default Godot is built with dynamically linked ANGLE you can use it by placing libEGL dll and libGLESv2 dll alongside the executable Note You can use dynamically linked ANGLE with export templates as well rename aforementioned DLLs to libEGL architecture dll and libGLESv2 architecture dll and place them alongside export template executables and libraries will be automatically copied during the export process To compile Godot with statically linked ANGLE Download pre built static libraries from godot angle static library and unzip them When building Godot add angle_libs path to tell SCons where to look for the ANGLE libraries scons platform windows angle_libs Copy to clipboard Note You can optionally build the godot angle static libraries yourself with the following steps Clone the godot angle static directory and navigate to it Run the following command git submodule update init update_angle sh scons Copy to clipboard If you are buildng with MinGW add use_mingw yes to the command you can also specify build architecture using arch architecture If you are building with MinGW LLVM add both use_mingw yes and use_llvm yes to the scons command If you are building with MinGW and the binaries are not located in the PATH add mingw_prefix path to mingw to the scons command ANGLE static library should be built using the same compiler and the same CRT if you are building with MinGW you are using for building Godot Development in Visual Studio Using an IDE is not required to compile Godot as SCons takes care of everything But if you intend to do engine development or debugging of the engine s C code you may be interested in configuring a code editor or an IDE Folder based editors don t require any particular setup to start working with Godot s codebase To edit projects with Visual Studio they need to be set up as a solution You can create a Visual Studio solution via SCons by running SCons with the vsproj yes parameter like this scons platform windows vsproj yes Copy to clipboard You will be able to open Godot s source in a Visual Studio solution now and able to build Godot using Visual Studio s Build button See also See Visual Studio for further details Cross compiling for Windows from other operating systems If you are a Linux or macOS user you need to install MinGW w64 which typically comes in 32 bit and 64 bit variants or MinGW LLVM which comes as a single archive for all target architectures The package names may differ based on your distribution here are some known ones Arch Linux pacman Sy mingw w64 Copy to clipboard Debian Ubuntu apt install mingw w64 Copy to clipboard Fedora dnf install mingw64 gcc c mingw64 winpthreads static mingw32 gcc c mingw32 winpthreads static Copy to clipboard macOS brew install mingw w64 Copy to clipboard Mageia urpmi mingw64 gcc c mingw64 winpthreads static mingw32 gcc c mingw32 winpthreads static Copy to clipboard Before attempting the compilation SCons will check for the following binaries in your PATH environment variable for MinGW w64 i686 w64 mingw32 gcc x86_64 w64 mingw32 gcc for MinGW LLVM aarch64 w64 mingw32 clang i686 w64 mingw32 clang x86_64 w64 mingw32 clang Copy to clipboard If the binaries are not located in the PATH e g usr bin you can define the following environment variable to give a hint to the build system export MINGW_PREFIX path to mingw Copy to clipboard Where path to mingw is the path containing the bin directory where i686 w64 mingw32 gcc and x86_64 w64 mingw32 gcc are located e g opt mingw w64 if the binaries are located in opt mingw w64 bin To make sure you are doing things correctly executing the following in the shell should result in a working compiler the version output may differ based on your system MINGW_PREFIX bin x86_64 w64 mingw32 gcc version x86_64 w64 mingw32 gcc GCC 13 2 0 Copy to clipboard Note If you are building with MinGW LLVM add use_llvm yes to the scons command Note When cross compiling for Windows using MinGW w64 keep in mind only x86_64 and x86_32 architectures are supported MinGW LLVM supports arm64 as well Be sure to specify the right arch option when invoking SCons if building from a different architecture Troubleshooting Cross compiling from some Ubuntu versions may lead to this bug due to a default configuration lacking support for POSIX threading You can change that configuration following those instructions for 64 bit sudo update alternatives config x86_64 w64 mingw32 gcc choose x86_64 w64 mingw32 gcc posix from the list sudo update alternatives config x86_64 w64 mingw32 g choose x86_64 w64 mingw32 g posix from the list Copy to clipboard And for 32 bit sudo update alternatives config i686 w64 mingw32 gcc choose i686 w64 mingw32 gcc posix from the list sudo update alternatives config i686 w64 mingw32 g choose i686 w64 mingw32 g posix from the list Copy to clipboard Creating Windows export templates Windows export templates are created by compiling Godot without the editor with the following flags C godot scons platform windows target template_debug arch x86_32 C godot scons platform windows target template_release arch x86_32 C godot scons platform windows target template_debug arch x86_64 C godot scons platform windows target template_release arch x86_64 C godot scons platform windows target template_debug arch arm64 C godot scons platform windows target template_release arch arm64 Copy to clipboard If you plan on replacing the standard export templates copy these to the following location replacing version with the version identifier such as 4 2 1 stable or 4 3 dev APPDATA Godot export_templates version Copy to clipboard With the following names windows_debug_x86_32_console exe windows_debug_x86_32 exe windows_debug_x86_64_console exe windows_debug_x86_64 exe windows_debug_arm64_console exe windows_debug_arm64 exe windows_release_x86_32_console exe windows_release_x86_32 exe windows_release_x86_64_console exe windows_release_x86_64 exe windows_release_arm64_console exe windows_release_arm64 exe Copy to clipboard However if you are using custom modules or custom engine code you may instead want to configure your binaries as custom export templates here Select matching architecture in the export config You don t need to copy them in this case just reference the resulting files in the bin directory of your Godot source folder so the next time you build you will automatically have the custom templates referenced User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Compiling for Linux BSD See also This page describes how to compile Linux editor and export template binaries from source If you re looking to export your project to Linux instead read Exporting for Linux Requirements For compiling under Linux or other Unix variants the following is required GCC 9 or Clang 6 Python 3 6 SCons 3 1 2 build system pkg config used to detect the development libraries listed below Development libraries X11 Xcursor Xinerama Xi and XRandR Wayland and wayland scanner Mesa ALSA PulseAudio Optional libudev build with udev yes See also To get the Godot source code for compiling see Getting the source For a general overview of SCons usage for Godot see Introduction to the buildsystem Distro specific one liners Alpine Linux Arch Linux Debian Ubuntu Fedora FreeBSD Gentoo Mageia NetBSD OpenBSD openSUSE Solus apk add scons pkgconf gcc g libx11 dev libxcursor dev libxinerama dev libxi dev libxrandr dev mesa dev eudev dev alsa lib dev pulseaudio dev Copy to clipboard pacman Sy noconfirm needed scons pkgconf gcc libxcursor libxinerama libxi libxrandr wayland utils mesa glu libglvnd alsa lib pulseaudio Copy to clipboard sudo apt get update sudo apt get install y build essential scons pkg config libx11 dev libxcursor dev libxinerama dev libgl1 mesa dev libglu1 mesa dev libasound2 dev libpulse dev libudev dev libxi dev libxrandr dev libwayland dev Copy to clipboard sudo dnf install y scons pkgconfig libX11 devel libXcursor devel libXrandr devel libXinerama devel libXi devel wayland devel mesa libGL devel mesa libGLU devel alsa lib devel pulseaudio libs devel libudev devel gcc c libstdc static libatomic static Copy to clipboard pkg install py37 scons pkgconf xorg libraries libXcursor libXrandr libXi xorgproto libGLU alsa lib pulseaudio Copy to clipboard emerge sync emerge an dev build scons x11 libs libX11 x11 libs libXcursor x11 libs libXinerama x11 libs libXi dev util wayland scanner media libs mesa media libs glu media libs alsa lib media sound pulseaudio Copy to clipboard sudo urpmi auto scons task c devel wayland devel pkgconfig alsa pkgconfig glu pkgconfig libpulse pkgconfig udev pkgconfig x11 pkgconfig xcursor pkgconfig xinerama pkgconfig xi pkgconfig xrandr Copy to clipboard pkg_add pkg config py37 scons Copy to clipboard Hint For audio support you can optionally install pulseaudio pkg_add python scons llvm Copy to clipboard sudo zypper install y scons pkgconfig libX11 devel libXcursor devel libXrandr devel libXinerama devel libXi devel wayland devel Mesa libGL devel alsa devel libpulse devel libudev devel gcc c libGLU1 Copy to clipboard eopkg install y c system devel scons libxcursor devel libxinerama devel libxi devel libxrandr devel wayland devel mesalib devel libglu alsa lib devel pulseaudio devel Copy to clipboard Compiling Start a terminal go to the root dir of the engine source code and type scons platform linuxbsd Copy to clipboard Note Prior to Godot 4 0 the Linux BSD target was called x11 instead of linuxbsd If you are looking to compile Godot 3 x make sure to use the 3 x branch of this documentation If all goes well the resulting binary executable will be placed in the bin subdirectory This executable file contains the whole engine and runs without any dependencies Executing it will bring up the Project Manager Note If you wish to compile using Clang rather than GCC use this command scons platform linuxbsd use_llvm yes Copy to clipboard Using Clang appears to be a requirement for OpenBSD otherwise fonts would not build For RISC V architecture devices use the Clang compiler instead of the GCC compiler Tip If you are compiling Godot for production use you can make the final executable smaller and faster by adding the SCons option production yes This enables additional compiler optimizations and link time optimization LTO takes some time to run and requires about 7 GB of available RAM while compiling If you re running out of memory with the above option use production yes lto none or production yes lto thin for a lightweight but less effective form of LTO Note If you want to use separate editor settings for your own Godot builds and official releases you can enable Self contained mode by creating a file called _sc_ or _sc_ in the bin folder Running a headless server build To run in headless mode which provides editor functionality to export projects in an automated manner use the normal build scons platform linuxbsd target editor Copy to clipboard And then use the headless command line argument bin godot linuxbsd editor x86_64 headless Copy to clipboard To compile a debug server build which can be used with remote debugging tools use scons platform linuxbsd target template_debug Copy to clipboard To compile a server build which is optimized to run dedicated game servers use scons platform linuxbsd target template_release production yes Copy to clipboard Building export templates Warning Linux binaries usually won t run on distributions that are older than the distribution they were built on If you wish to distribute binaries that work on most distributions you should build them on an old distribution such as Ubuntu 16 04 You can use a virtual machine or a container to set up a suitable build environment To build Linux or BSD export templates run the build system with the following parameters 32 bits scons platform linuxbsd target template_release arch x86_32 scons platform linuxbsd target template_debug arch x86_32 Copy to clipboard 64 bits scons platform linuxbsd target template_release arch x86_64 scons platform linuxbsd target template_debug arch x86_64 Copy to clipboard Note that cross compiling for the opposite bits 64 32 as your host platform is not always straight forward and might need a chroot environment To create standard export templates the resulting files in the bin folder must be copied to HOME local share godot export_templates version Copy to clipboard and named like this even for BSD which is seen as Linux X11 by Godot linux_debug arm32 linux_debug arm64 linux_debug x86_32 linux_debug x86_64 linux_release arm32 linux_release arm64 linux_release x86_32 linux_release x86_64 Copy to clipboard However if you are writing your custom modules or custom C code you might instead want to configure your binaries as custom export templates here You don t even need to copy them you can just reference the resulting files in the bin directory of your Godot source folder so the next time you build you automatically have the custom templates referenced Cross compiling for RISC V devices To cross compile Godot for RISC V devices we need to setup the following items riscv gnu toolchain While we are not going to use this directly it provides us with a sysroot as well as header and libraries files that we will need There are many versions to choose from however the older the toolchain the more compatible our final binaries will be If in doubt use this version and download riscv64 glibc ubuntu 18 04 nightly 2021 12 22 nightly tar gz Extract it somewhere and remember its path Clang RISC V GCC has bugs with its atomic operations which prevent it from compiling Godot correctly Any version of Clang from 16 0 0 upwards will suffice Download it from the package manager of your distro and make sure that it can compile to RISC V You can verify by executing this command clang print targets make sure you see riscv64 on the list of targets mold This fast linker is the only one that correctly links the resulting binary Download it extract it and make sure to add its bin folder to your PATH Run mold help grep support to check if your version of Mold supports RISC V If you don t see RISC V your Mold may need to be updated To make referencing our toolchain easier we can set an environment variable like this export RISCV_TOOLCHAIN_PATH path to toolchain here Copy to clipboard This way we won t have to manually set the directory location each time we want to reference it With all the above setup we are now ready to build Godot Go to the root of the source code and execute the following build command scons arch rv64 use_llvm yes linker mold lto none target editor ccflags sysroot RISCV_TOOLCHAIN_PATH sysroot gcc toolchain RISCV_TOOLCHAIN_PATH target riscv64 unknown linux gnu linkflags sysroot RISCV_TOOLCHAIN_PATH sysroot gcc toolchain RISCV_TOOLCHAIN_PATH target riscv64 unknown linux gnu Copy to clipboard The command is similar in nature but with some key changes ccflags and linkflags append additional flags to the build sysroot points to a folder simulating a Linux system it contains all the headers libraries and so files Clang will use gcc toolchain tells Clang where the complete toolchain is and target riscv64 unknown linux gnu indicates to Clang the target architecture and OS we want to build for If all went well you should now see a bin directory and within it a binary similar to the following godot linuxbsd editor rv64 llvm Copy to clipboard You can now copy this executable to your favorite RISC V device then launch it there by double clicking which should bring up the project manager If you later decide to compile the export templates copy the above build command but change the value of target to template_debug for a debug build or template_release for a release build Using Clang and LLD for faster development You can also use Clang and LLD to build Godot This has two upsides compared to the default GCC GNU ld setup LLD links Godot significantly faster compared to GNU ld or gold This leads to faster iteration times Clang tends to give more useful error messages compared to GCC To do so install Clang and the lld package from your distribution s package manager then use the following SCons command scons platform linuxbsd use_llvm yes linker lld Copy to clipboard After the build is completed a new binary with a llvm suffix will be created in the bin folder It s still recommended to use GCC for production builds as they can be compiled using link time optimization making the resulting binaries smaller and faster If this error occurs usr bin ld cannot find l libatomic a No such file or directory Copy to clipboard There are two solutions In your SCons command add the parameter use_static_cpp no Follow these instructions to configure build and install libatomic_ops Then copy usr lib libatomic_ops a to usr lib libatomic a or create a soft link to libatomic_ops by command ln s usr lib libatomic_ops a usr lib libatomic a The soft link can ensure the latest libatomic_ops will be used without the need to copy it every time when it is updated Using mold for faster development For even faster linking compared to LLD you can use mold mold can be used with either GCC or Clang As of January 2023 mold is not readily available in Linux distribution repositories so you will have to install its binaries manually Download mold binaries from its releases page Extract the tar gz file then move the extracted folder to a location such as local share mold Add HOME local share mold bin to your user s PATH environment variable For example you can add the following line at the end of your HOME bash_profile file PATH HOME local share mold bin PATH Copy to clipboard Open a new terminal or run source HOME bash_profile then use the following SCons command when compiling Godot scons platform linuxbsd linker mold Copy to clipboard Using system libraries for faster development Godot bundles the source code of various third party libraries You can choose to use system versions of third party libraries instead This makes the Godot binary faster to link as third party libraries are dynamically linked Therefore they don t need to be statically linked every time you build the engine even on small incremental changes However not all Linux distributions have packages for third party libraries available or they may not be up to date Moving to system libraries can reduce linking times by several seconds on slow CPUs but it requires manual testing depending on your Linux distribution Also you may not be able to use system libraries for everything due to bugs in the system library packages or in the build system as this feature is less tested To compile Godot with system libraries install these dependencies on top of the ones listed in the Distro specific one liners Debian Ubuntu Fedora sudo apt get update sudo apt get install y libembree dev libenet dev libfreetype dev libpng dev zlib1g dev libgraphite2 dev libharfbuzz dev libogg dev libtheora dev libvorbis dev libwebp dev libmbedtls dev libminiupnpc dev libpcre2 dev libzstd dev libsquish dev libicu dev Copy to clipboard sudo dnf install y embree3 devel enet devel glslang devel graphite2 devel harfbuzz devel libicu devel libsquish devel libtheora devel libvorbis devel libwebp devel libzstd devel mbedtls devel miniupnpc devel Copy to clipboard After installing all required packages use the following command to build Godot scons platform linuxbsd builtin_embree no builtin_enet no builtin_freetype no builtin_graphite no builtin_harfbuzz no builtin_libogg no builtin_libpng no builtin_libtheora no builtin_libvorbis no builtin_libwebp no builtin_mbedtls no builtin_miniupnpc no builtin_pcre2 no builtin_zlib no builtin_zstd no Copy to clipboard On Debian stable you will need to remove builtin_embree no as the system provided Embree version is too old to work with Godot s latest master branch which requires Embree 4 You can view a list of all built in libraries that have system alternatives by running scons h then looking for options starting with builtin_ Warning When using system libraries the resulting library is not portable across Linux distributions anymore Do not use this approach for creating binaries you intend to distribute to others unless you re creating a package for a Linux distribution Using Pyston for faster development You can use Pyston to run SCons Pyston is a JIT enabled implementation of the Python language which SCons is written in It is currently only compatible with Linux Pyston can speed up incremental builds significantly often by a factor between 1 5 and 2 Pyston can be combined with Clang and LLD to get even faster builds Download the latest portable Pyston release Extract the portable tar gz to a set location such as HOME local opt pyston create folders as needed Use cd to reach the extracted Pyston folder from a terminal then run pyston m pip install scons to install SCons within Pyston To make SCons via Pyston easier to run create a symbolic link of its wrapper script to a location in your PATH environment variable ln s local opt pyston bin scons local bin pyston scons Copy to clipboard Instead of running scons build arguments run pyston scons build arguments to compile Godot If you can t run pyston scons after creating the symbolic link make sure HOME local bin is part of your user s PATH environment variable Note Alternatively you can run python m pip install pyston_lite_autoload then run SCons as usual This will automatically load a subset of Pyston s optimizations in any Python program you run However this won t bring as much of a performance improvement compared to installing full Pyston User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Compiling for macOS Note This page describes how to compile macOS editor and export template binaries from source If you re looking to export your project to macOS instead read Exporting for macOS Requirements For compiling under macOS the following is required Python 3 6 SCons 3 1 2 build system Xcode or the more lightweight Command Line Tools for Xcode Vulkan SDK for MoltenVK macOS doesn t support Vulkan out of the box Note If you have Homebrew installed you can easily install SCons using the following command brew install scons Copy to clipboard Installing Homebrew will also fetch the Command Line Tools for Xcode automatically if you don t have them already Similarly if you have MacPorts installed you can easily install SCons using the following command sudo port install scons Copy to clipboard See also To get the Godot source code for compiling see Getting the source For a general overview of SCons usage for Godot see Introduction to the buildsystem Compiling Start a terminal go to the root directory of the engine source code To compile for Intel x86 64 powered Macs use scons platform macos arch x86_64 Copy to clipboard To compile for Apple Silicon ARM64 powered Macs use scons platform macos arch arm64 Copy to clipboard To support both architectures in a single Universal 2 binary run the above two commands and then use lipo to bundle them together lipo create bin godot macos editor x86_64 bin godot macos editor arm64 output bin godot macos editor universal Copy to clipboard If all goes well the resulting binary executable will be placed in the bin subdirectory This executable file contains the whole engine and runs without any dependencies Executing it will bring up the Project Manager Note If you want to use separate editor settings for your own Godot builds and official releases you can enable Self contained mode by creating a file called _sc_ or _sc_ in the bin folder To create an app bundle like in the official builds you need to use the template located in misc dist macos_tools app Typically for an optimized editor binary built with dev_build yes cp r misc dist macos_tools app Godot app mkdir p Godot app Contents MacOS cp bin godot macos editor universal Godot app Contents MacOS Godot chmod x Godot app Contents MacOS Godot codesign force timestamp options runtime entitlements misc dist macos editor entitlements s Godot app Copy to clipboard Note If you are building the master branch you also need to include support for the MoltenVK Vulkan portability library By default it will be linked statically from your installation of the Vulkan SDK for macOS You can also choose to link it dynamically by passing use_volk yes and including the dynamic library in your app bundle mkdir p Godot app Contents Frameworks cp Vulkan SDK path macOS lib libMoltenVK dylib Godot app Contents Frameworks libMoltenVK dylib Copy to clipboard Running a headless server build To run in headless mode which provides editor functionality to export projects in an automated manner use the normal build scons platform macos target editor Copy to clipboard And then use the headless command line argument bin godot macos editor x86_64 headless Copy to clipboard To compile a debug server build which can be used with remote debugging tools use scons platform macos target template_debug Copy to clipboard To compile a release server build which is optimized to run dedicated game servers use scons platform macos target template_release production yes Copy to clipboard Building export templates To build macOS export templates you have to compile using the targets without the editor target template_release release template and target template_debug Official templates are universal binaries which support both Intel x86_64 and ARM64 architectures You can also create export templates that support only one of those two architectures by leaving out the lipo step below For Intel x86_64 scons platform macos target template_release arch x86_64 scons platform macos target template_debug arch x86_64 Copy to clipboard For Arm64 Apple M1 scons platform macos target template_release arch arm64 scons platform macos target template_debug arch arm64 Copy to clipboard To support both architectures in a single Universal 2 binary run the above two commands blocks and then use lipo to bundle them together lipo create bin godot macos template_release x86_64 bin godot macos template_release arm64 output bin godot macos template_release universal lipo create bin godot macos template_debug x86_64 bin godot macos template_debug arm64 output bin godot macos template_debug universal Copy to clipboard To create an app bundle like in the official builds you need to use the template located in misc dist macos_template app The release and debug builds should be placed in macos_template app Contents MacOS with the names godot_macos_release universal and godot_macos_debug universal respectively You can do so with the following commands assuming a universal build otherwise replace the universal extension with the one of your arch specific binaries cp r misc dist macos_template app mkdir p macos_template app Contents MacOS cp bin godot macos template_release universal macos_template app Contents MacOS godot_macos_release universal cp bin godot macos template_debug universal macos_template app Contents MacOS godot_macos_debug universal chmod x macos_template app Contents MacOS godot_macos Copy to clipboard Note If you are building the master branch you also need to include support for the MoltenVK Vulkan portability library By default it will be linked statically from your installation of the Vulkan SDK for macOS You can also choose to link it dynamically by passing use_volk yes and including the dynamic library in your app bundle mkdir p macos_template app Contents Frameworks cp Vulkan SDK path macOS libs libMoltenVK dylib macos_template app Contents Frameworks libMoltenVK dylib Copy to clipboard You can then zip the macos_template app folder to reproduce the macos zip template from the official Godot distribution zip q 9 r macos zip macos_template app Copy to clipboard Using Pyston for faster development You can use Pyston to run SCons Pyston is a JIT enabled implementation of the Python language which SCons is written in Its full version is currently only compatible with Linux but Pyston lite is also compatible with macOS both x86 and ARM Pyston can speed up incremental builds significantly often by a factor between 1 5 and 2 Pyston can be combined with alternative linkers such as LLD or Mold to get even faster builds To install Pyston lite run python m pip install pyston_lite_autoload then run SCons as usual This will automatically load a subset of Pyston s optimizations in any Python program you run However this won t bring as much of a performance improvement compared to installing full Pyston which currently can t be done on macOS Cross compiling for macOS from Linux It is possible to compile for macOS in a Linux environment and maybe also in Windows using the Windows Subsystem for Linux For that you ll need to install OSXCross to be able to use macOS as a target First follow the instructions to install it Clone the OSXCross repository somewhere on your machine or download a ZIP file and extract it somewhere e g git clone depth 1 https github com tpoechtrager osxcross git HOME osxcross Copy to clipboard Follow the instructions to package the SDK https github com tpoechtrager osxcross packaging the sdk Follow the instructions to install OSXCross https github com tpoechtrager osxcross installation After that you will need to define the OSXCROSS_ROOT as the path to the OSXCross installation the same place where you cloned the repository extracted the zip e g export OSXCROSS_ROOT HOME osxcross Copy to clipboard Now you can compile with SCons like you normally would scons platform macos Copy to clipboard If you have an OSXCross SDK version different from the one expected by the SCons buildsystem you can specify a custom one with the osxcross_sdk argument scons platform macos osxcross_sdk darwin15 Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Compiling for Android See also This page describes how to compile Android export template binaries from source If you re looking to export your project to Android instead read Exporting for Android Note In most cases using the built in deployer and export templates is good enough Compiling the Android APK manually is mostly useful for custom builds or custom packages for the deployer Also you still need to follow the steps mentioned in the Exporting for Android tutorial before attempting to build a custom export template Requirements For compiling under Windows Linux or macOS the following is required Python 3 6 SCons 3 1 2 build system Android SDK command line tools are sufficient Required SDK components will be automatically installed On Linux do not use an Android SDK provided by your distribution s repositories as it will often be outdated On macOS do not use an Android SDK provided by Homebrew as it will not be installed in a unified location Gradle will be downloaded and installed automatically if missing JDK 17 either OpenJDK or Oracle JDK You can download a build from Adoptium See also To get the Godot source code for compiling see Getting the source For a general overview of SCons usage for Godot see Introduction to the buildsystem Setting up the buildsystem Set the environment variable ANDROID_HOME to point to the Android SDK If you downloaded the Android command line tools this would be the folder where you extracted the contents of the ZIP archive Windows Press Windows R type control system then click on Advanced system settings in the left pane then click on Environment variables on the window that appears Linux or macOS Add the text export ANDROID_HOME path to android sdk to your bashrc or zshrc where path to android sdk points to the root of the SDK directories Install the necessary SDK components in this folder Accept the SDK component licenses by running the following command where android_sdk_path is the path to the Android SDK then answering all the prompts with y cmdline tools latest bin sdkmanager sdk_root android_sdk_path licenses Copy to clipboard Complete setup by running the following command where android_sdk_path is the path to the Android SDK cmdline tools latest bin sdkmanager sdk_root android_sdk_path platform tools build tools 34 0 0 platforms android 34 cmdline tools latest cmake 3 10 2 4988404 ndk 23 2 8568313 Copy to clipboard After setting up the SDK and environment variables be sure to restart your terminal to apply the changes If you are using an IDE with an integrated terminal you need to restart the IDE Run scons platform android If this fails go back and check the steps If you completed the setup correctly the NDK will begin downloading If you are trying to compile GDExtension you need to first compile the engine to download the NDK then you can compile GDExtension Building the export templates Godot needs three export templates for Android the optimized release template android_release apk the debug template android_debug apk and the Gradle build template android_source zip As Google requires all APKs to include ARMv8 64 bit libraries since August 2019 the commands below build templates containing both ARMv7 and ARMv8 libraries Compiling the standard export templates is done by calling SCons from the Godot root directory with the following arguments Release template used when exporting with Debugging Enabled unchecked scons platform android target template_release arch arm32 scons platform android target template_release arch arm64 generate_apk yes Copy to clipboard Debug template used when exporting with Debugging Enabled checked scons platform android target template_debug arch arm32 scons platform android target template_debug arch arm64 generate_apk yes Copy to clipboard Optional Dev template used when troubleshooting scons platform android target template_debug arch arm32 dev_build yes scons platform android target template_debug arch arm64 dev_build yes generate_apk yes Copy to clipboard The resulting templates will be located under the bin directory bin android_release apk for the release template bin android_debug apk for the debug template bin android_dev apk for the dev template bin android_source zip for the Gradle build template Note If you are changing the list of architectures you re building remember to add generate_apk yes to the last architecture you re building so that the template files are generated after the build To include debug symbols in the generated templates add the debug_symbols yes parameter to the SCons command See also If you want to enable Vulkan validation layers see Vulkan validation layers on Android Adding support for x86 devices If you also want to include support for x86 and x86_64 devices run the SCons command a third and fourth time with the arch x86_32 and arch x86_64 arguments before building the APK with Gradle For example for the release template scons platform android target template_release arch arm32 scons platform android target template_release arch arm64 scons platform android target template_release arch x86_32 scons platform android target template_release arch x86_64 generate_apk yes Copy to clipboard This will create template binaries that works on all platforms The final binary size of exported projects will depend on the platforms you choose to support when exporting in other words unused platforms will be removed from the binary Cleaning the generated export templates You can use the following commands to remove the generated export templates cd platform android java On Windows g radlew clean On Linux and macOS gradlew clean Copy to clipboard Using the export templates Godot needs release and debug binaries that were compiled against the same version commit as the editor If you are using official binaries for the editor make sure to install the matching export templates or build your own from the same version When exporting your game Godot uses the templates as a base and updates their content as needed Installing the templates The newly compiled templates android_debug apk android_release apk and android_source zip must be copied to Godot s templates folder with their respective names The templates folder can be located in Windows APPDATA Godot export_templates version Linux HOME local share godot export_templates version macOS HOME Library Application Support Godot export_templates version version is of the form major minor patch status using values from version py in your Godot source repository e g 4 1 3 stable or 4 2 dev You also need to write this same version string to a version txt file located next to your export templates However if you are writing your custom modules or custom C code you might instead want to configure your template binaries as custom export templates here You don t even need to copy them you can just reference the resulting file in the bin directory of your Godot source folder so that the next time you build you will automatically have the custom templates referenced Building the Godot editor Compiling the editor is done by calling SCons from the Godot root directory with the following arguments scons platform android arch arm32 production yes target editor scons platform android arch arm64 production yes target editor scons platform android arch x86_32 production yes target editor scons platform android arch x86_64 production yes target editor generate_apk yes Copy to clipboard You can add the dev_build yes parameter to generate a dev build of the Godot editor You can add the debug_symbols yes parameter to include the debug symbols in the generated build You can skip certain architectures depending on your target device to speed up compilation Remember to add generate_apk yes to the last architecture you re building so that binaries are generated after the build The resulting binaries will be located under bin android_editor_builds Removing the Editor binaries You can use the following commands to remove the generated editor binaries cd platform android java On Windows g radlew clean On Linux and macOS gradlew clean Copy to clipboard Installing the Godot editor APK With an Android device with Developer Options enabled connect the Android device to your computer via its charging cable to a USB USB C port Open up a Terminal Command Prompt and run the following commands from the root directory with the following arguments adb install bin android_editor_builds android_editor release apk Copy to clipboard Troubleshooting Platform doesn t appear in SCons Double check that you ve set the ANDROID_HOME environment variable This is required for the platform to appear in SCons list of detected platforms See Setting up the buildsystem for more information Application not installed Android might complain the application is not correctly installed If so Check that the debug keystore is properly generated Check that the jarsigner executable is from JDK 8 If it still fails open a command line and run logcat adb logcat Copy to clipboard Then check the output while the application is installed the error message should be presented there Seek assistance if you can t figure it out Application exits immediately If the application runs but exits immediately this might be due to one of the following reasons Make sure to use export templates that match your editor version if you use a new Godot version you have to update the templates too libgodot_android so is not in libs arch where arch is the device s architecture The device s architecture does not match the exported one s Make sure your templates were built for that device s architecture and that the export settings included support for that architecture In any case adb logcat should also show the cause of the error User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Compiling for iOS See also This page describes how to compile iOS export template binaries from source If you re looking to export your project to iOS instead read Exporting for iOS Requirements Python 3 6 SCons 3 1 2 build system Xcode Launch Xcode once and install iOS support If you have already launched Xcode and need to install iOS support go to Xcode Settings Platforms Go to Xcode Settings Locations Command Line Tools and select an installed version Even if one is already selected re select it If you are building the master branch Download and follow README instructions to build a static xcframework from the MoltenVK SDK Note If you have Homebrew installed you can easily install SCons using the following command brew install scons Copy to clipboard Installing Homebrew will also fetch the Command Line Tools for Xcode automatically if you don t have them already Similarly if you have MacPorts installed you can easily install SCons using the following command sudo port install scons Copy to clipboard See also To get the Godot source code for compiling see Getting the source For a general overview of SCons usage for Godot see Introduction to the buildsystem Compiling Open a Terminal go to the root dir of the engine source code and type scons platform ios target template_debug Copy to clipboard for a debug build or scons platform ios target template_release Copy to clipboard for a release build check platform ios detect py for the compiler flags used for each configuration Alternatively you can run scons platform ios target template_debug ios_simulator yes arch x86_64 scons platform ios target template_debug ios_simulator yes arch arm64 Copy to clipboard for a Simulator libraries To create an Xcode project like in the official builds you need to use the template located in misc dist ios_xcode The release and debug libraries should be placed in libgodot ios debug xcframework and libgodot ios release xcframework respectively cp r misc dist ios_xcode cp libgodot ios template_debug arm64 a ios_xcode libgodot ios debug xcframework ios arm64 libgodot a lipo create libgodot ios template_debug arm64 simulator a libgodot ios template_debug x86_64 simulator a output ios_xcode libgodot ios debug xcframework ios arm64_x86_64 simulator libgodot a cp libgodot ios template_release arm64 a ios_xcode libgodot ios release xcframework ios arm64 libgodot a lipo create libgodot ios template_release arm64 simulator a libgodot ios template_release x86_64 simulator a output ios_xcode libgodot ios release xcframework ios arm64_x86_64 simulator libgodot a Copy to clipboard The MoltenVK static xcframework folder must also be placed in the ios_xcode folder once it has been created Run To run on a device or simulator follow these instructions Exporting for iOS User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Cross compiling for iOS on Linux The procedure for this is somewhat complex and requires a lot of steps but once you have the environment properly configured you can compile Godot for iOS anytime you want Disclaimer While it is possible to compile for iOS on a Linux environment Apple is very restrictive about the tools to be used especially hardware wise allowing pretty much only their products to be used for development So this is not official However in 2010 Apple said they relaxed some of the App Store review guidelines to allow any tool to be used as long as the resulting binary does not download any code which means it should be OK to use the procedure described here and cross compiling the binary Requirements XCode with the iOS SDK you must be logged into an Apple ID to download Xcode Clang 3 5 for your development machine installed and in the PATH It has to be version 3 5 to target arm64 architecture xar and pbzx required to extract the xip archive Xcode comes in For building xar and pbzx you may want to follow this guide cctools port for the needed build tools The procedure for building is quite peculiar and is described below This also has some extra dependencies automake autogen libtool Configuring the environment Preparing the SDK Extract the Xcode xip file you downloaded from Apple s developer website mkdir xcode xar xf path to Xcode_X x xip C xcode pbzx n Content cpio i Blocks Copy to clipboard Note that for the commands below you will need to replace the version x x with whatever iOS SDK version you re using If you don t know your iPhone SDK version you can see the JSON file inside of Xcode app Contents Developer Platforms iPhoneOS platform Developer SDKs Extract the iOS SDK export IOS_SDK_VERSION x x mkdir p iPhoneSDK iPhoneOS IOS_SDK_VERSION sdk cp r xcode Xcode app Contents Developer Platforms iPhoneOS platform Developer SDKs iPhoneOS sdk iPhoneSDK iPhoneOS IOS_SDK_VERSION sdk cp r xcode Xcode app Contents Developer Toolchains XcodeDefault xctoolchain usr include c iPhoneSDK iPhoneOS IOS_SDK_VERSION sdk usr include c fusermount u xcode Copy to clipboard Pack the SDK so that cctools can use it cd iPhoneSDK tar cf xz 9 c iPhoneOS IOS_SDK_VERSION sdk tar xz Copy to clipboard Toolchain Build cctools git clone https github com tpoechtrager cctools port git cd cctools port usage_examples ios_toolchain build sh path iPhoneOS IOS_SDK_VERSION sdk tar xz arm64 Copy to clipboard Copy the tools to a nicer place Note that the SCons scripts for building will look under usr bin inside the directory you provide for the toolchain binaries so you must copy to such subdirectory akin to the following commands mkdir p HOME iostoolchain usr cp r target bin HOME iostoolchain usr Copy to clipboard Now you should have the iOS toolchain binaries in HOME iostoolchain usr bin Compiling Godot for iPhone Once you ve done the above steps you should keep two things in your environment the built toolchain and the iPhoneOS SDK directory Those can stay anywhere you want since you have to provide their paths to the SCons build command For the iPhone platform to be detected you need the OSXCROSS_IOS environment variable defined to anything export OSXCROSS_IOS anything Copy to clipboard Now you can compile for iPhone using SCons like the standard Godot way with some additional arguments to provide the correct paths scons platform ios arch arm64 target template_release IOS_SDK_PATH path to iPhoneSDK IOS_TOOLCHAIN_PATH path to iostoolchain ios_triple arm apple darwin11 Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Compiling for the Web See also This page describes how to compile HTML5 editor and export template binaries from source If you re looking to export your project to HTML5 instead read Exporting for the Web Requirements To compile export templates for the Web the following is required Emscripten 3 1 39 Python 3 6 SCons 3 1 2 build system See also To get the Godot source code for compiling see Getting the source For a general overview of SCons usage for Godot see Introduction to the buildsystem Note Emscripten 3 1 39 is recommended but older 3 x versions are known to work Please note that the minimum requirement for GDExtension support is 3 1 14 Building export templates Before starting confirm that emcc is available in your PATH This is usually configured by the Emscripten SDK e g when invoking emsdk activate and source emsdk_env sh emsdk_env bat Open a terminal and navigate to the root directory of the engine source code Then instruct SCons to build the Web platform Specify target as either template_release for a release build or template_debug for a debug build scons platform web target template_release scons platform web target template_debug Copy to clipboard By default the JavaScriptBridge singleton will be built into the engine Official export templates also have the JavaScript singleton enabled Since eval calls can be a security concern the javascript_eval option can be used to build without the singleton scons platform web target template_release javascript_eval no scons platform web target template_debug javascript_eval no Copy to clipboard By default WebWorker threads support is enabled To disable it and only use a single thread the threads option can be used to build the web template without threads support scons platform web target template_release threads no scons platform web target template_debug threads no Copy to clipboard The engine will now be compiled to WebAssembly by Emscripten Once finished the resulting file will be placed in the bin subdirectory Its name is godot web template_release wasm32 zip for release or godot web template_debug wasm32 zip for debug Finally rename the zip archive to web_release zip for the release template mv bin godot web template_release wasm32 zip bin web_release zip Copy to clipboard And web_debug zip for the debug template mv bin godot web template_debug wasm32 zip bin web_debug zip Copy to clipboard GDExtension The default export templates do not include GDExtension support for performance and compatibility reasons See the export page for more info You can build the export templates using the option dlink_enabled yes to enable GDExtension support scons platform web dlink_enabled yes target template_release scons platform web dlink_enabled yes target template_debug Copy to clipboard Once finished the resulting file will be placed in the bin subdirectory Its name will have _dlink added Finally rename the zip archives to web_dlink_release zip and web_dlink_release zip for the release template mv bin godot web template_release wasm32 dlink zip bin web_dlink_release zip mv bin godot web template_debug wasm32 dlink zip bin web_dlink_debug zip Copy to clipboard Building the editor It is also possible to build a version of the Godot editor that can run in the browser The editor version is not recommended over the native build You can build the editor with scons platform web target editor Copy to clipboard Once finished the resulting file will be placed in the bin subdirectory Its name will be godot web editor wasm32 zip You can upload the zip content to your web server and visit it with your browser to use the editor Refer to the export page for the web server requirements Tip The Godot repository includes a Python script to host a local web server This can be used to test the web editor locally After compiling the editor extract the ZIP archive that was created in the bin folder then run the following command in the Godot repository root You may need to replace python with python3 on some platforms python platform web serve py Copy to clipboard This will serve the contents of the bin folder and open the default web browser automatically In the page that opens access godot tools html and you should be able to test the web editor this way Note that for production use cases this Python based web server should not be used Instead you should use an established web server such as Apache or nginx User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Compiling with NET Requirements NET SDK 8 0 You can use dotnet info to check which NET SDK versions are installed Enable the NET module Note C support for Godot has historically used the Mono runtime instead of the NET Runtime and internally many things are still named mono instead of dotnet or otherwise referred to as mono By default the NET module is disabled when building To enable it add the option module_mono_enabled yes to the SCons command line while otherwise following the instructions for building the desired Godot binaries Generate the glue Parts of the sources of the managed libraries are generated from the ClassDB These source files must be generated before building the managed libraries They can be generated by any NET enabled Godot editor binary by running it with the parameters headless generate mono glue followed by the path to an output directory This path must be modules mono glue in the Godot directory godot_binary headless generate mono glue modules mono glue Copy to clipboard This command will tell Godot to generate the C bindings for the Godot API at modules mono glue GodotSharp GodotSharp Generated and the C bindings for the editor tools at modules mono glue GodotSharp GodotSharpEditor Generated Once these files are generated you can build Godot s managed libraries for all the desired targets without having to repeat this process godot_binary refers to the editor binary you compiled with the NET module enabled Its exact name will differ based on your system and configuration but should be of the form bin godot platform editor arch mono e g bin godot linuxbsd editor x86_64 mono or bin godot windows editor x86_32 mono exe Be especially aware of the mono suffix If you ve previously compiled Godot without NET support you might have similarly named binaries without this suffix These binaries can t be used to generate the NET glue Note The glue sources must be regenerated every time the ClassDB registered API changes That is for example when a new method is registered to the scripting API or one of the parameters of such a method changes Godot will print an error at startup if there is an API mismatch between ClassDB and the glue sources Building the managed libraries Once you have generated the NET glue you can build the managed libraries with the build_assemblies py script modules mono build_scripts build_assemblies py godot output dir bin Copy to clipboard If everything went well the GodotSharp directory containing the managed libraries should have been created in the bin directory Note By default all development builds share a version number which can cause some issues with caching of the NuGet packages To solve this issue either use GODOT_VERSION_STATUS to give every build a unique version or delete GodotNuGetFallbackFolder after every build to clear the package cache Unlike classical Godot builds when building with the NET module enabled and depending on the target platform a data directory may be created both for the editor and for exported projects This directory is important for proper functioning and must be distributed together with Godot More details about this directory in Data directory Build Platform Provide the godot platform platform argument to control for which platform specific the libraries are built Omit this argument to build for the current system This currently only controls the inclusion of the support for Visual Studio as an external editor the libraries are otherwise identical NuGet packages The API assemblies source generators and custom MSBuild project SDK are distributed as NuGet packages This is all transparent to the user but it can make things complicated during development In order to use Godot with a development version of those packages a local NuGet source must be created where MSBuild can find them First pick a location for the local NuGet source If you don t have a preference create an empty directory at one of these recommended locations On Windows C Users username MyLocalNugetSource On Linux BSD etc MyLocalNugetSource This path is referred to later as my_local_source After picking a directory run this NET CLI command to configure NuGet to use your local source dotnet nuget add source my_local_source name MyLocalNugetSource Copy to clipboard When you run the build_assemblies py script pass my_local_source to the push nupkgs local option modules mono build_scripts build_assemblies py godot output dir bin push nupkgs local my_local_source Copy to clipboard This option ensures the packages will be added to the specified local NuGet source and that conflicting versions of the package are removed from the NuGet cache It s recommended to always use this option when building the C solutions during development to avoid mistakes Double Precision Support REAL_T_IS_DOUBLE When building Godot with double precision support i e the precision double argument for scons the managed libraries must be adjusted to match by passing the precision double argument modules mono build_scripts build_assemblies py godot output dir bin push nupkgs local my_local_source precision double Copy to clipboard Examples Example Windows Build editor binary scons platform windows target editor module_mono_enabled yes Build export templates scons platform windows target template_debug module_mono_enabled yes scons platform windows target template_release module_mono_enabled yes Generate glue sources bin godot windows editor x86_64 mono headless generate mono glue modules mono glue Build NET assemblies modules mono build_scripts build_assemblies py godot output dir bin godot platform windows Copy to clipboard Example Linux BSD Build editor binary scons platform linuxbsd target editor module_mono_enabled yes Build export templates scons platform linuxbsd target template_debug module_mono_enabled yes scons platform linuxbsd target template_release module_mono_enabled yes Generate glue sources bin godot linuxbsd editor x86_64 mono headless generate mono glue modules mono glue Generate binaries modules mono build_scripts build_assemblies py godot output dir bin godot platform linuxbsd Copy to clipboard Data directory The data directory is a dependency for Godot binaries built with the NET module enabled It contains important files for the correct functioning of Godot It must be distributed together with the Godot executable Editor The name of the data directory for the Godot editor will always be GodotSharp This directory contains an Api subdirectory with the Godot API assemblies and a Tools subdirectory with the tools required by the editor like the GodotTools assemblies and its dependencies On macOS if the Godot editor is distributed as a bundle the GodotSharp directory may be placed in the bundle_name app Contents Resources directory inside the bundle Export templates The data directory for exported projects is generated by the editor during the export It is named data_ APPNAME _ ARCH where APPNAME is the application name as specified in the project setting application config name and ARCH is the current architecture of the export In the case of multi architecture exports multiple such data directories will be generated Command line options The following is the list of command line options available when building with the NET module module_mono_enabled yes no Build Godot with the NET module enabled User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Compiling with PCK encryption key The export dialog gives you the option to encrypt your PCK file with a 256 bit AES key when releasing your project This will make sure your scenes scripts and other resources are not stored in plain text and can not easily be ripped by some script kiddie Of course the key needs to be stored in the binary but if it s compiled optimized and without symbols it would take some effort to find it For this to work you need to build the export templates from source with that same key Warning This will not work if you use official precompiled export templates It is absolutely required to compile your own export templates to use PCK encryption Warning By default Android exports store assets directly in the APK file and aren t affected by PCK encryption To use PCK encryption on Android enable APK expansion in the export options Step by step Generate a 256 bit AES key in hexadecimal format You can use the aes 256 cbc variant from this service Alternatively you can generate it yourself using OpenSSL command line tools openssl rand hex 32 godot gdkey Copy to clipboard The output in godot gdkey should be similar to NOTE Do not use the key below Generate your own key instead aeb1bc56aaf580cc31784e9c41551e9ed976ecba10d315db591e749f3f64890f Copy to clipboard You can generate the key without redirecting the output to a file but that way you can minimize the risk of exposing the key Set this key as environment variable in the console that you will use to compile Godot like this Linux macOS Windows cmd Windows PowerShell export SCRIPT_AES256_ENCRYPTION_KEY your_generated_key Copy to clipboard set SCRIPT_AES256_ENCRYPTION_KEY your_generated_key Copy to clipboard env SCRIPT_AES256_ENCRYPTION_KEY your_generated_key Copy to clipboard Compile Godot export templates and set them as custom export templates in the export preset options Set the encryption key in the Encryption tab of the export preset Add filters for the files folders to encrypt By default include filters are empty and nothing will be encrypted Export the project The project should run with the files encrypted now Troubleshooting If you get an error like below it means the key wasn t properly included in your Godot build Godot is encrypting PCK file during export but can t read it at runtime ERROR open_and_parse Condition String md5 md5 digest String md5 md5d is true Returning ERR_FILE_CORRUPT At core io file_access_encrypted cpp 103 Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Optimizing a build for size Rationale Sometimes it is desired to optimize a build for size rather than speed This means not compiling unused functions from the engine as well as using specific compiler flags to aid on decreasing build size Common situations include creating builds for mobile and Web platforms This tutorial aims to give an overview on different methods to create a smaller binary Before continuing it is recommended to read the previous tutorials on compiling Godot for each platform The options below are listed from the most important greatest size savings to the least important lowest size savings Stripping binaries Space savings Very high Difficulty Easy Performed in official builds Yes If you build Windows MinGW Linux or macOS binaries from source remember to strip debug symbols from binaries by installing the strip package from your distribution then running strip path to godot binary Copy to clipboard On Windows strip exe is included in most MinGW toolchain setups This will reduce the size of compiled binaries by a factor between 5 and 10 The downside is that crash backtraces will no longer provide accurate information which is useful for troubleshooting the cause of a crash C profilers will also no longer be able to display function names this does not affect the built in GDScript profiler Note The above command will not work on Windows binaries compiled with MSVC and platforms such as Android and Web Instead pass debug_symbols no on the SCons command line when compiling Compiling with link time optimization Space savings High Difficulty Easy Performed in official builds Yes Enabling link time optimization produces more efficient binaries both in terms of performance and file size It works by eliminating duplicate template functions and unused code It can currently be used with the GCC and MSVC compilers scons target template_release lto full Copy to clipboard Linking becomes much slower and more RAM consuming with this option so it should be used only for release builds When compiling the master branch you need to have at least 8 GB of RAM available for successful linking with LTO enabled When compiling the 3 x branch you need to have at least 6 GB of RAM available for successful linking with LTO enabled Optimizing for size instead of speed Space savings High Difficulty Easy Performed in official builds Yes but only for web builds Godot 3 1 onwards allows compiling using size optimizations instead of speed To enable this set the optimize flag to size scons target template_release optimize size Copy to clipboard Some platforms such as WebAssembly already use this mode by default Disabling advanced text server Space savings High Difficulty Easy Performed in official builds No By default Godot uses an advanced text server with the support for the following features Right to left typesetting and complex scripts required to write languages such as Arabic and Hebrew Font ligatures and OpenType features such as small capitals fractions and slashed zero Godot provides a fallback text server that isn t compiled by default This text server can be used as a lightweight alternative to the default advanced text server scons target template_release module_text_server_adv_enabled no module_text_server_fb_enabled yes Copy to clipboard If you only intend on supporting Latin Greek and Cyrillic based languages in your project the fallback text server should suffice This fallback text server can also process large amounts of text more quickly than the advanced text server This makes the fallback text server a good fit for mobile web projects Note Remember to always pass module_text_server_fb_enabled yes when using module_text_server_adv_enabled no Otherwise the compiled binary won t contain any text server which means no text will be displayed at all when running the project Disabling 3D Space savings Moderate Difficulty Easy Performed in official builds No For 2D games having the whole 3D engine available usually makes no sense Because of this there is a build flag to disable it scons target template_release disable_3d yes Copy to clipboard Tools must be disabled in order to use this flag as the editor is not designed to operate without 3D support Without it the binary size can be reduced by about 15 Note Disabling 3D support also disables all navigation This includes 2D navigation as it uses the 3D navigation system internally Disabling advanced GUI objects Space savings Moderate Difficulty Easy Performed in official builds No Most small games don t require complex GUI controls such as Tree ItemList TextEdit or GraphEdit They can be disabled using a build flag scons target template_release disable_advanced_gui yes Copy to clipboard This is everything that will be disabled FileDialog PopupMenu Tree TextEdit CodeEdit SyntaxHighlighter CodeHighlighter TreeItem OptionButton SpinBox ColorPicker ColorPickerButton RichTextlabel RichTextEffect CharFXTransform AcceptDialog ConfirmationDialog MarginContainer SubViewportContainer SplitContainer HSplitContainer VSplitContainer GraphNode GraphEdit Disabling unwanted modules Space savings Very low to moderate depending on modules Difficulty Medium to hard depending on modules Performed in official builds No A lot of Godot s functions are offered as modules You can see a list of modules with the following command scons help Copy to clipboard The list of modules that can be disabled will appear together with all build options If you are working on a simple 2D game you could disable a lot of them scons target template_release module_basis_universal_enabled no module_bmp_enabled no module_camera_enabled no module_csg_enabled no module_dds_enabled no module_enet_enabled no module_gridmap_enabled no module_hdr_enabled no module_jsonrpc_enabled no module_ktx_enabled no module_mbedtls_enabled no module_meshoptimizer_enabled no module_minimp3_enabled no module_mobile_vr_enabled no module_msdfgen_enabled no module_multiplayer_enabled no module_noise_enabled no module_navigation_enabled no module_ogg_enabled no module_openxr_enabled no module_raycast_enabled no module_regex_enabled no module_squish_enabled no module_svg_enabled no module_tga_enabled no module_theora_enabled no module_tinyexr_enabled no module_upnp_enabled no module_vhacd_enabled no module_vorbis_enabled no module_webrtc_enabled no module_websocket_enabled no module_webxr_enabled no module_zip_enabled no Copy to clipboard If this proves not to work for your use case you should review the list of modules and see which ones you actually still need for your game e g you might want to keep networking related modules regex support minimp3 ogg vorbis to play music or theora to play videos Alternatively you can supply a list of disabled modules by creating custom py at the root of the source with the contents similar to the following custom py module_basis_universal_enabled no module_bmp_enabled no module_camera_enabled no module_csg_enabled no module_dds_enabled no module_enet_enabled no module_gridmap_enabled no module_hdr_enabled no module_jsonrpc_enabled no module_ktx_enabled no module_mbedtls_enabled no module_meshoptimizer_enabled no module_minimp3_enabled no module_mobile_vr_enabled no module_msdfgen_enabled no module_multiplayer_enabled no module_noise_enabled no module_navigation_enabled no module_ogg_enabled no module_openxr_enabled no module_raycast_enabled no module_regex_enabled no module_squish_enabled no module_svg_enabled no module_tga_enabled no module_theora_enabled no module_tinyexr_enabled no module_upnp_enabled no module_vhacd_enabled no module_vorbis_enabled no module_webrtc_enabled no module_websocket_enabled no module_webxr_enabled no module_zip_enabled no Copy to clipboard See also Overriding the build options Optimizing the distribution of your project Desktop Note This section is only relevant when distributing the files on a desktop platform that doesn t perform its own compression or packing As such this advice is relevant when you distribute ZIP archives on itch io or GitHub Releases Platforms like Steam already apply their own compression scheme so you don t need to create a ZIP archive to distribute files in the first place As an aside you can look into optimizing the distribution of your project itself This can be done even without recompiling the export template 7 Zip can be used to create ZIP archives that are more efficient than usual while remaining compatible with every ZIP extractor including Windows own built in extractor ZIP size reduction in a large project can reach dozens of megabytes compared to a typical ZIP compressor although average savings are in the 1 5 MB range Creating this ZIP archive will take longer than usual but it will extract just as fast as any other ZIP archive When using the 7 Zip GUI this is done by creating a ZIP archive with the Ultra compression mode When using the command line this is done using the following command 7z a mx9 my_project zip folder_containing_executable_and_pck Copy to clipboard Web Enabling gzip or Brotli compression for all file types from the web export especially the wasm and pck can reduce the download size significantly leading to faster loading times especially on slow connections Creating precompressed gzip or Brotli files with a high compression level can be even more efficient as long as the web server is configured to serve those files when they exist When supported Brotli should be preferred over gzip as it has a greater potential for file size reduction See Serving the files for instructions User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Debugging and profiling This section contains pages that provide guidance if you re looking at the engine code trying to find an underlying issue or an optimization possibility Using C profilers Using sanitizers Debugging on macOS Vulkan Debugging the editor When working on the Godot editor keep in mind that by default the executable will start in the Project Manager mode Opening a project from the Project Manager spawns a new process which stops the debugging session To avoid that you should launch directly into the project using e and path launch options For example using gdb directly you may do this gdb godot run e path myproject Copy to clipboard You can also run the editor directly from your project s folder In that case only the e option is required cd myproject gdb godot run e Copy to clipboard You can learn more about these launch options and other command line arguments in the command line tutorial If you re using a code editor or an IDE to debug Godot check out our configuration guides which cover the setup process for building and debugging with your particular editor Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using C profilers To optimize Godot s performance you need to know what to optimize first To this end profilers are useful tools Note There is a built in GDScript profiler in the editor but using C profiler may be useful in cases where the GDScript profiler is not accurate enough or is missing information due to bugs in the profiler Recommended profilers VerySleepy Windows only HotSpot Linux only Xcode Instruments macOS only These profilers may not be the most powerful or flexible options but their standalone operation and limited feature set tends to make them easier to use Setting up Godot To get useful profiling information it is absolutely required to use a Godot build that includes debugging symbols Official binaries do not include debugging symbols since these would make the download size significantly larger To get profiling data that best matches the production environment but with debugging symbols you should compile binaries with the production yes debug_symbols yes SCons options It is possible to run a profiler on less optimized builds e g target template_debug without LTO but results will naturally be less representative of real world conditions Warning Do not strip debugging symbols on the binaries using the strip command after compiling the binaries Otherwise you will no longer get useful profiling information when running a profiler Benchmarking startup shutdown times If you re looking into optimizing Godot s startup shutdown performance you can tell the profiler to use the quit command line option on the Godot binary This will exit Godot just after it finished starting The quit option works with editor project manager or path path to project directory which runs a project directly See also See Command line tutorial for more command line arguments supported by Godot Profiler specific instructions VerySleepy Start the Godot editor or your project first If you start the Project Manager make sure to edit or run a project first Otherwise the profiler will not track the child process since the Project Manager will spawn a child process for every project edited or run Open VerySleepy and select the Godot executable in the list of processes on the left Click the Profile All button on the right to start profiling Perform the actions you wish to profile in the editor or project When you re done click Stop not Abort Wait for the results window to appear Once the results window appears filter the view to remove external modules such as the graphics driver You can filter by module by finding a line whose Module matches the Godot executable name right clicking that line then choosing Filter Module to Godot executable name in the dropdown that appears Your results window should now look something like this HotSpot Open HotSpot Click Record Data In the next window specify the path to the Godot binary that includes debug symbols Specify command line arguments to run a specific project with or without the editor The path to the working directory can be anything if an absolute path is used for the path command line argument Otherwise it must be set to that the relative path to the project is valid Make sure Elevate Privileges is checked if you have administrative privileges While not essential for profiling Godot this will ensure all events can be captured Otherwise some events may be missing in the capture Your settings should now look something like this Click Start Recording and perform the actions you wish to profile in the editor project Quit the editor project normally or use the Stop Profiling button in HotSpot to stop profiling early Stopping profiling early can result in cleaner profiles if you re not interested in the engine s quit procedure Click View Results and wait for the profiling visualization to be generated Use the tabs at the top to navigate between the different views These views show the same data but in different ways The Flame Graph tab is a good way to see which functions take up the most time at a glance These functions are therefore the most important ones to optimize since optimizing them will improve performance the most At the bottom of all tabs except Summary you will also see a list of CPU threads started by the engine among with the CPU utilization for each thread This lets you see threads that can be a bottleneck at a given point in time Note If you don t want the startup procedure to be included in the profile you can also attach HotSpot to a running process by clicking Record Data then setting the Launch Application dropdown option to Attach To Process es This process attachment based workflow is similar to the one used by VerySleepy Xcode Instruments Open Xcode Select Open Developer Tool Instruments from the Xcode app menu Double click on Time Profiler in the Instruments window In the Time Profiler window click on the Target menu select Choose target and specify the path to the Godot binary command line arguments and environment variables in the next window You can also attach the Time Profiler to a running process by selecting it from the Target menu Click the Start an immediate mode recording button to start profiling Perform the actions you wish to profile in the editor or project When you re done click the Stop button Wait for the results to appear At the bottom of the window you will see a call tree for all CPU threads started and the Heaviest Stack Trace overview Select Hide system libraries in the Call Tree menu at the bottom of window to remove external modules You can use the timeline at the top of the window to display details for the specific time period User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using sanitizers What are sanitizers Sanitizers are static instrumentation tools that help find bugs that traditional debuggers usually cannot catch This is particularly useful when combined with Unit testing in continuous integration Sanitizers can be used on Windows macOS and Linux by using the Clang LLVM GCC or Visual Studio compilers Certain platforms may also have their own sanitizers available In situations where a single sanitizer is provided by several different compilers remember that their output and behavior will differ slightly Using sanitizers on Godot Sanitizers require recompiling the binary This means you cannot use official Godot binaries to run sanitizers When compiling with any of the sanitizers enabled the resulting binary will have the san suffix added to its name to distinguish it from a binary without sanitizers There is a performance impact as many additional runtime checks need to be performed Memory utilization will also increase It is possible to enable certain combinations of multiple sanitizers in a single build Beware of the performance impact when using multiple sanitizers at once though as the resulting binary may be excessively slow Certain options can be passed to sanitizers without having to recompile the binary using environment variables Address sanitizer ASAN Available in Clang and GCC Supported platforms Linux macOS Windows Visual Studio Web Clang ASAN documentation The address sanitizer is generally the most frequently used sanitizer It can diagnose issues such as buffer overruns and out of bounds access If the engine crashes with a message such as free invalid pointer this is typically the result of a buffer overrun This message is printed by the C runtime not Godot In certain situations such as detecting uninitialized memory reads the address sanitizer doesn t suffice The Memory sanitizer MSAN should be used instead It is also possible to detect use after return situations by specifying the ASAN_OPTIONS detect_stack_use_after_return 1 environment variable before running Godot not when compiling it This increases the address sanitizer s runtime overhead so only enable this feature when you actually need it To enable the address sanitizer in a Godot build pass the use_asan yes SCons option when compiling Enabling ASAN generally makes the resulting binary about 2 slower Warning Due to a design decision the address memory and thread sanitizers are mutually exclusive This means you can only use one of those sanitizers in a given binary Leak sanitizer LSAN Available in Clang and GCC Supported platforms Linux Web Clang LSAN documentation The leak sanitizer can detect memory leaks which are situations where memory that is no longer in use is never freed by the running program This can potentially lead to out of memory situations if the program runs for long enough Since Godot may run on dedicated servers for months or even years without a restart it s important to fix memory leaks when they occur To enable the leak sanitizer in a Godot build pass the use_lsan yes SCons option when compiling Enabling LSAN only has a small performance overhead but the program will be much slower to exit as leak detection occurs when the program exits Memory sanitizer MSAN Available in Clang only not GCC Supported platforms Linux Clang MSAN documentation The memory sanitizer complements the Address sanitizer ASAN Unlike the address sanitizer the memory sanitizer can detect uninitialized memory reads To enable the memory sanitizer in a Godot build pass the use_msan yes SCons option when compiling Enabling MSAN generally makes the resulting binary about 3 slower Warning Due to a design decision the address memory and thread sanitizers are mutually exclusive This means you can only use one of those sanitizers in a given binary Thread sanitizer TSAN Available in Clang and GCC Supported platforms Linux macOS Clang TSAN documentation The thread sanitizer is used to track down race conditions related to multithreading A race condition is when multiple threads try to modify the same data at the same time Since thread scheduling can be ordered in any fashion by the operating system this leads to incorrect behavior that only occurs occasionally and can be difficult to track as a result To prevent a race condition you need to add a lock to ensure only one thread can access the shared data at a given time To enable the thread sanitizer in a Godot build pass the use_tsan yes SCons option when compiling Enabling TSAN generally makes the resulting binary 10 slower while also multiplying memory usage by an approximately 8 factor Warning Due to a design decision the address memory and thread sanitizers are mutually exclusive This means you can only use one of those sanitizers in a given binary Undefined behavior sanitizer UBSAN Available in Clang and GCC Supported platforms Linux macOS Web Clang UBSAN documentation The undefined behavior sanitizer is used to track down situations where the program exhibits random and unpredictable behavior This is due to C C code that is accepted by the compiler but is not correct Compiling with a different set of optimizations can also change the observed results of undefined behavior To enable the undefined behavior sanitizer in a Godot build pass the use_ubsan yes SCons option when compiling Enabling UBSAN only has a small performance overhead Platform specific sanitizers Web When compiling for the Web there are 2 additional sanitizer SCons options available use_assertions yes enables runtime Emscripten assertions which can catch various issues use_safe_heap yes enables Emscripten s SAFE_HEAP sanitizer It provides similar functionality to ASAN but it focuses on issues that are specific to WebAssembly SAFE_HEAP is not guaranteed to be compatible with ASAN and UBSAN in the same binary so you may have to build it separately User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Debugging on macOS Debugging Godot editor Attaching a debugger to the signed macOS process requires the com apple security get task allow entitlement which is not enabled by default since apps can t be notarized as long as it is enabled If you want to debug an official build of the editor it should be re signed with the proper entitlements Create an editor entitlements text file with the following contents xml version 1 0 encoding UTF 8 DOCTYPE plist PUBLIC Apple DTD PLIST 1 0 EN http www apple com DTDs PropertyList 1 0 dtd plist version 1 0 dict key com apple security cs allow dyld environment variables key true key com apple security cs allow jit key true key com apple security cs allow unsigned executable memory key true key com apple security cs disable executable page protection key true key com apple security cs disable library validation key true key com apple security device audio input key true key com apple security device camera key true key com apple security get task allow key true dict plist Copy to clipboard Then use the following command to re sign the editor codesign s deep force options runtime entitlements editor entitlements path to Godot app Copy to clipboard Debugging exported project To allow debugging select the codesign debugging com apple security get task allow entitlement during the export When it is selected notarization is not supported and should be disabled User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Vulkan Validation layers Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Engine core and modules The following pages are meant to introduce the global organization of Godot Engine s source code and give useful tips for extending and fixing the engine on the C side Getting started with Godot s source code This section covers the basics that you will encounter in almost every source file Godot s architecture diagram Common engine methods and macros Core types Variant class Object class Inheritance class tree Internal rendering architecture 2D coordinate systems and 2D transforms Scripting development Extending Godot by modifying its source code This section covers what you can do by modifying Godot s C source code Custom modules in C Binding to external libraries Custom Godot servers Custom resource format loaders Custom AudioStreams Custom platform ports Unit testing Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Godot s architecture diagram The following diagram describes the architecture used by Godot from the core components down to the abstracted drivers via the scene structure and the servers User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Common engine methods and macros Godot s C codebase makes use of dozens of custom methods and macros which are used in almost every file This page is geared towards beginner contributors but it can also be useful for those writing custom C modules Print text Prints a message to standard output print_line Message Non String arguments are automatically converted to String for printing If passing several arguments they will be concatenated together with a space between each argument print_line There are 123 nodes Prints a message to standard output but only when the engine is started with the verbose command line argument print_verbose Message Prints a rich formatted message using BBCode to standard output This supports a subset of BBCode tags supported by RichTextLabel and will also appear formatted in the editor Output panel On Windows this requires Windows 10 or later to work in the terminal print_line_rich b Bold b color red Red text color Prints a formatted error or warning message with a trace ERR_PRINT Message WARN_PRINT Message Prints an error or warning message only once per session This can be used to avoid spamming the console output ERR_PRINT_ONCE Message WARN_PRINT_ONCE Message Copy to clipboard If you need to add placeholders in your messages use format strings as described below Format a string The vformat function returns a formatted String It behaves in a way similar to C s sprintf vformat My name is s Godette vformat d bugs on the wall 1234 vformat Pi is approximately f 3 1416 Converts the resulting String into a const char You may need to do this if passing the result as an argument to a method that expects a const char instead of a String vformat My name is s Godette c_str Copy to clipboard In most cases try to use vformat instead of string concatenation as it makes for more readable code Convert an integer or float to a string This is not needed when printing numbers using print_line but you may still need to perform manual conversion for some other use cases Stores the string 42 using integer to string conversion String int_to_string itos 42 Stores the string 123 45 using real to string conversion String real_to_string rtos 123 45 Copy to clipboard Internationalize a string There are two types of internationalization in Godot s codebase TTR Editor tools translations will only be processed in the editor If a user uses the same text in one of their projects it won t be translated if they provide a translation for it When contributing to the engine this is generally the macro you should use for localizable strings RTR Run time translations will be automatically localized in projects if they provide a translation for the given string This kind of translation shouldn t be used in editor only code Returns the translated string that matches the user s locale settings Translations are located in editor translations The localization template is generated automatically don t modify it TTR Exit the editor Copy to clipboard To insert placeholders in localizable strings wrap the localization macro in a vformat call as follows String file_path example txt vformat TTR Couldn t open s for reading file_path Copy to clipboard Note When using vformat and a translation macro together always wrap the translation macro in vformat not the other way around Otherwise the string will never match the translation as it will have the placeholder already replaced when it s passed to TranslationServer Clamp a value Godot provides macros for clamping a value with a lower bound MAX an upper bound MIN or both CLAMP int a 3 int b 5 MAX b 6 6 MIN 2 a 2 CLAMP a 10 30 10 Copy to clipboard This works with any type that can be compared to other values like int and float Microbenchmarking If you want to benchmark a piece of code but don t know how to use a profiler use this snippet uint64_t begin Time get_singleton get_ticks_usec Your code here uint64_t end Time get_singleton get_ticks_usec print_line vformat Snippet took d microseconds end begin Copy to clipboard This will print the time spent between the begin declaration and the end declaration Note You may have to include core os os h if it s not present already When opening a pull request make sure to remove this snippet as well as the include if it wasn t there previously Get project editor settings There are four macros available for this Returns the specified project setting s value defaulting to false if it doesn t exist GLOBAL_DEF section subsection value false Returns the specified editor setting s value defaulting to Untitled if it doesn t exist EDITOR_DEF section subsection value Untitled Copy to clipboard If a default value has been specified elsewhere don t specify it again to avoid repetition Returns the value of the project setting GLOBAL_GET section subsection value Returns the value of the editor setting EDITOR_GET section subsection value Copy to clipboard It s recommended to use GLOBAL_DEF EDITOR_DEF only once per setting and use GLOBAL_GET EDITOR_GET in all other places where it s referenced Error macros Godot features many error macros to make error reporting more convenient Warning Conditions in error macros work in the opposite way of GDScript s built in assert function An error is reached if the condition inside evaluates to true not false Note Only variants with custom messages are documented here as these should always be used in new contributions Make sure the custom message provided includes enough information for people to diagnose the issue even if they don t know C In case a method was passed invalid arguments you can print the invalid value in question to ease debugging For internal error checking where displaying a human readable message isn t necessary remove _MSG at the end of the macro name and don t supply a message argument Also always try to return processable data so the engine can keep running well Conditionally prints an error message and returns from the function Use this in methods which don t return a value ERR_FAIL_COND_MSG mesh is_valid vformat Couldn t load mesh at s path Conditionally prints an error message and returns 0 from the function Use this in methods which must return a value ERR_FAIL_COND_V_MSG rect x 0 rect y 0 0 Couldn t calculate the rectangle s area Prints an error message if index is 0 or SomeEnum QUALITY_MAX then returns from the function ERR_FAIL_INDEX_MSG index SomeEnum QUALITY_MAX vformat Invalid quality d See SomeEnum for allowed values index Prints an error message if index is 0 some_array size then returns 1 from the function ERR_FAIL_INDEX_V_MSG index some_array size 1 vformat Item d is out of bounds index Unconditionally prints an error message and returns from the function Only use this if you need to perform complex error checking if complex_error_checking_routine ERR_FAIL_MSG Couldn t reload the filesystem cache Unconditionally prints an error message and returns false from the function Only use this if you need to perform complex error checking if complex_error_checking_routine ERR_FAIL_V_MSG false Couldn t parse the input arguments Crashes the engine This should generally never be used except for testing crash handling code Godot s philosophy is to never crash both in the editor and in exported projects CRASH_NOW_MSG Can t predict the future Aborting Copy to clipboard See also See core error error_macros h in Godot s codebase for more information about each error macro Some functions return an error code materialized by a return type of Error This value can be returned directly from an error macro See the list of available error codes in core error error_list h User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Core types Godot has a rich set of classes and templates that compose its core and everything is built upon them This reference will try to list them in order for their better understanding Definitions Godot uses the standard C99 datatypes such as uint8_t uint32_t int64_t etc which are nowadays supported by every compiler Reinventing the wheel for those is not fun as it makes code more difficult to read In general care is not taken to use the most efficient datatype for a given task unless using large structures or arrays int is used through most of the code unless necessary This is done because nowadays every device has at least a 32 bits bus and can do such operations in one cycle It makes code more readable too For files or memory sizes size_t is used which is warranted to be 64 bits For Unicode characters CharType instead of wchar_t is used because many architectures have 4 bytes long wchar_t where 2 bytes might be desired However by default this has not been forced and CharType maps directly to wchar_t References core typedefs h Memory model PC is a wonderful architecture Computers often have gigabytes of RAM terabytes of storage and gigahertz of CPU and when an application needs more resources the OS will swap out the inactive ones Other architectures like mobile or consoles are in general more limited The most common memory model is the heap where an application will request a region of memory and the underlying OS will try to fit it somewhere and return it This often works best and is flexible but over time and with abuse this can lead to segmentation Segmentation slowly creates holes that are too small for most common allocations so that memory is wasted There is a lot of literature about heap and segmentation so this topic will not be developed further here Modern operating systems use paged memory which helps mitigate the problem of segmentation but doesn t solve it However in many studies and tests it is shown that given enough memory if the maximum allocation size is below a given threshold in proportion to the maximum heap size and proportion of memory intended to be unused segmentation will not be a problem over time as it will remain constant In other words leave 10 20 of your memory free and perform all small allocations and you are fine Godot ensures that all objects that can be allocated dynamically are small less than a few kb at most But what happens if an allocation is too large like an image or mesh geometry or large array In this case Godot has the option to use a dynamic memory pool This memory needs to be locked to be accessed and if an allocation runs out of memory the pool will be rearranged and compacted on demand Depending on the need of the game the programmer can configure the dynamic memory pool size Allocating memory Godot has many tools for tracking memory usage in a game especially during debug Because of this the regular C and C library calls should not be used Instead a few other ones are provided For C style allocation Godot provides a few macros memalloc memrealloc memfree Copy to clipboard These are equivalent to the usual malloc realloc free of the standard C library For C style allocation special macros are provided memnew Class Class args memdelete instance memnew_arr Class amount memdelete_arr pointer to array Copy to clipboard which are equivalent to new delete new and delete memnew memdelete also use a little C magic and notify Objects right after they are created and right before they are deleted For dynamic memory the PoolVector template is provided PoolVector is a standard vector class and is very similar to vector in the C standard library To create a PoolVector buffer use this PoolVector int data Copy to clipboard PoolVector can be accessed using the operator and a few helpers exist for this PoolVector int Read r data read int someint r 4 Copy to clipboard PoolVector int Write w data write w 4 22 Copy to clipboard These operations allow fast read write from PoolVectors and keep it locked until they go out of scope However PoolVectors should be used for small dynamic memory operations as read and write are too slow for a large amount of accesses References core os memory h core pool_vector h Containers Godot provides also a set of common containers Vector List Set Map They aim to be as minimal as possible as templates in C are often inlined and make the binary size much fatter both in debug symbols and code List Set and Map can be iterated using pointers like this for List int Element E somelist front E E E next print_line E get print the element Copy to clipboard The Vector class also has a few nice features It does copy on write so making copies of it is cheap as long as they are not modified It supports multi threading by using atomic operations on the reference counter References core templates vector h core templates list h core templates set h core templates map h String Godot also provides a String class This class has a huge amount of features full Unicode support in all the functions like case operations and utf8 parsing extracting as well as helpers for conversion and visualization References core string ustring h StringName StringNames are like a String but they are unique Creating a StringName from a string results in a unique internal pointer for all equal strings StringNames are useful for using strings as identifier as comparing them is basically comparing a pointer Creation of a StringName especially a new one is slow but comparison is fast References core string string_name h Math types There are several linear math types available in the core math directory References core math NodePath This is a special datatype used for storing paths in a scene tree and referencing them fast References core string node_path h RID RIDs are resource IDs Servers use these to reference data stored in them RIDs are opaque meaning that the data they reference can t be accessed directly RIDs are unique even for different types of referenced data References core templates rid h User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Variant class About Variant is the most important datatype of Godot it s the most important class in the engine A Variant takes up only 20 bytes and can store almost any engine datatype inside of it Variants are rarely used to hold information for long periods of time instead they are used mainly for communication editing serialization and generally moving data around A Variant can Store almost any datatype Perform operations between many variants GDScript uses Variant as its atomic native datatype Be hashed so it can be compared quickly to other variants Be used to convert safely between datatypes Be used to abstract calling methods and their arguments Godot exports all its functions through variants Be used to defer calls or move data between threads Be serialized as binary and stored to disk or transferred via network Be serialized to text and use it for printing values and editable settings Work as an exported property so the editor can edit it universally Be used for dictionaries arrays parsers etc Basically thanks to the Variant class writing Godot itself was a much much easier task as it allows for highly dynamic constructs not common of C with little effort Become a friend of Variant today References core variant variant h Containers Dictionary and Array Both are implemented using variants A Dictionary can match any datatype used as key to any other datatype An Array just holds an array of Variants Of course a Variant can also hold a Dictionary and an Array inside making it even more flexible Modifications to a container will modify all references to it A Mutex should be created to lock it if multi threaded access is desired Copy on write COW mode support for containers was dropped with Godot 3 0 References core variant dictionary h core variant array h User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Object class See also This page describes the C implementation of objects in Godot Looking for the Object class reference Have a look here General definition Object is the base class for almost everything Most classes in Godot inherit directly or indirectly from it Objects provide reflection and editable properties and declaring them is a matter of using a single macro like this class CustomObject public Object GDCLASS CustomObject Object this is required to inherit Copy to clipboard This adds a lot of functionality to Objects For example obj memnew CustomObject print_line Object class obj get_class print object class obj2 Object cast_to OtherClass obj converting between classes this also works without RTTI enabled Copy to clipboard References core object object h Registering an Object ClassDB is a static class that holds the entire list of registered classes that inherit from Object as well as dynamic bindings to all their methods properties and integer constants Classes are registered by calling ClassDB register_class MyCustomClass Copy to clipboard Registering it will allow the class to be instanced by scripts code or creating them again when deserializing Registering as virtual is the same but it can t be instanced ClassDB register_virtual_class MyCustomClass Copy to clipboard Object derived classes can override the static function static void _bind_methods When one class is registered this static function is called to register all the object methods properties constants etc It s only called once If an Object derived class is instanced but has not been registered it will be registered as virtual automatically Inside _bind_methods there are a couple of things that can be done Registering functions is one ClassDB bind_method D_METHOD methodname arg1name arg2name arg3name MyCustomType method Copy to clipboard Default values for arguments can be passed as parameters at the end ClassDB bind_method D_METHOD methodname arg1name arg2name arg3name MyCustomType method DEFVAL 1 DEFVAL 2 Default values for arg2name 1 and arg3name 2 Copy to clipboard Default values must be provided in the same order as they are declared skipping required arguments and then providing default values for the optional ones This matches the syntax for declaring methods in C D_METHOD is a macro that converts methodname to a StringName for more efficiency Argument names are used for introspection but when compiling on release the macro ignores them so the strings are unused and optimized away Check _bind_methods of Control or Object for more examples If just adding modules and functionality that is not expected to be documented as thoroughly the D_METHOD macro can safely be ignored and a string passing the name can be passed for brevity References core object class_db h Constants Classes often have enums such as enum SomeMode MODE_FIRST MODE_SECOND Copy to clipboard For these to work when binding to methods the enum must be declared convertible to int A macro is provided to help with this VARIANT_ENUM_CAST MyClass SomeMode now functions that take SomeMode can be bound Copy to clipboard The constants can also be bound inside _bind_methods by using BIND_CONSTANT MODE_FIRST BIND_CONSTANT MODE_SECOND Copy to clipboard Properties set get Objects export properties properties are useful for the following Serializing and deserializing the object Creating a list of editable values for the Object derived class Properties are usually defined by the PropertyInfo class and constructed as PropertyInfo type name hint hint_string usage_flags Copy to clipboard For example PropertyInfo Variant INT amount PROPERTY_HINT_RANGE 0 49 1 PROPERTY_USAGE_EDITOR Copy to clipboard This is an integer property named amount The hint is a range and the range goes from 0 to 49 in steps of 1 integers It is only usable for the editor editing the value visually but won t be serialized Another example PropertyInfo Variant STRING modes PROPERTY_HINT_ENUM Enabled Disabled Turbo Copy to clipboard This is a string property can take any string but the editor will only allow the defined hint ones Since no usage flags were specified the default ones are PROPERTY_USAGE_STORAGE and PROPERTY_USAGE_EDITOR There are plenty of hints and usage flags available in object h give them a check Properties can also work like C properties and be accessed from script using indexing but this usage is generally discouraged as using functions is preferred for legibility Many properties are also bound with categories such as animation frame which also make indexing impossible unless using operator From _bind_methods properties can be created and bound as long as set get functions exist Example ADD_PROPERTY PropertyInfo Variant INT amount set_amount get_amount Copy to clipboard This creates the property using the setter and the getter Binding properties using _set _get _get_property_list An additional method of creating properties exists when more flexibility is desired i e adding or removing properties on context The following functions can be overridden in an Object derived class they are NOT virtual DO NOT make them virtual they are called for every override and the previous ones are not invalidated multilevel call protected void _get_property_list List PropertyInfo r_props const return list of properties bool _get const StringName p_property Variant r_value const return true if property was found bool _set const StringName p_property const Variant p_value return true if property was found Copy to clipboard This is also a little less efficient since p_property must be compared against the desired names in serial order Dynamic casting Godot provides dynamic casting between Object derived classes for example void somefunc Object some_obj Button button Object cast_to Button some_obj Copy to clipboard If cast fails NULL is returned This system uses RTTI but it also works fine although a bit slower when RTTI is disabled This is useful on platforms where a small binary size is ideal such as HTML5 or consoles with low memory footprint Signals Objects can have a set of signals defined similar to Delegates in other languages This example shows how to connect to them obj connect signal target_instance target_method for example obj connect enter_tree this _node_entered_tree Copy to clipboard The method _node_entered_tree must be registered to the class using ClassDB bind_method explained before Adding signals to a class is done in _bind_methods using the ADD_SIGNAL macro for example ADD_SIGNAL MethodInfo been_killed Copy to clipboard Notifications All objects in Godot have a _notification method that allows it to respond to engine level callbacks that may relate to it More information can be found on the Godot notifications page References RefCounted inherits from Object and holds a reference count It is the base for reference counted object types Declaring them must be done using Ref template For example class MyReference public RefCounted GDCLASS MyReference RefCounted Ref MyReference myref memnew MyReference Copy to clipboard myref is reference counted It will be freed when no more Ref templates point to it References core object reference h Resources Resource inherits from Reference so all resources are reference counted Resources can optionally contain a path which reference a file on disk This can be set with resource set_path path though this is normally done by the resource loader No two different resources can have the same path attempting to do so will result in an error Resources without a path are fine too References core io resource h Resource loading Resources can be loaded with the ResourceLoader API like this Ref Resource res ResourceLoader load res someresource res Copy to clipboard If a reference to that resource has been loaded previously and is in memory the resource loader will return that reference This means that there can be only one resource loaded from a file referenced on disk at the same time resourceinteractiveloader TODO References core io resource_loader h Resource saving Saving a resource can be done with the resource saver API ResourceSaver save res someresource res instance Copy to clipboard The instance will be saved and sub resources that have a path to a file will be saved as a reference to that resource Sub resources without a path will be bundled with the saved resource and assigned sub IDs like res someresource res 1 This also helps to cache them when loaded References core io resource_saver h User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Inheritance class tree Object Reference Control Node2D Node3D Source files class_tree zip User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Internal rendering architecture This page is a high level overview of Godot 4 s internal renderer design It does not apply to previous Godot versions The goal of this page is to document design decisions taken to best suit Godot s design philosophy while providing a starting point for new rendering contributors If you have questions about rendering internals not answered here feel free to ask in the rendering channel of the Godot Contributors Chat Note If you have difficulty understanding concepts on this page it is recommended to go through an OpenGL tutorial such as LearnOpenGL Modern low level APIs Vulkan Direct3D 12 require intermediate knowledge of higher level APIs OpenGL Direct3D 11 to be used effectively Thankfully contributors rarely need to work directly with low level APIs Godot s renderers are built entirely on OpenGL and RenderingDevice which is our abstraction over Vulkan Direct3D 12 Rendering methods Forward This is a forward renderer that uses a clustered approach to lighting Clustered lighting uses a compute shader to group lights into a 3D frustum aligned grid Then at render time pixels can lookup what lights affect the grid cell they are in and only run light calculations for lights that might affect that pixel This approach can greatly speed up rendering performance on desktop hardware but is substantially less efficient on mobile Forward Mobile This is a forward renderer that uses a traditional single pass approach to lighting Intended for mobile platforms but can also run on desktop platforms This rendering method is optimized to perform well on mobile GPUs Mobile GPUs have a very different architecture compared to desktop GPUs due to their unique constraints around battery usage heat and overall bandwidth limitations of reading and writing data Compute shaders also have very limited support or aren t supported at all As a result the mobile renderer purely uses raster based shaders fragment vertex Unlike desktop GPUs mobile GPUs perform tile based rendering Instead of rendering the whole image as a single unit the image is divided in smaller tiles that fit within the faster internal memory of the mobile GPU Each tile is rendered and then written out to the destination texture This all happens automatically on the graphics driver The problem is that this introduces bottlenecks in our traditional approach For desktop rendering we render all opaque geometry then handle the background then transparent geometry then post processing Each pass will need to read the current result into tile memory perform its operations and then write it out again We then wait for all tiles to be completed before moving on to the next pass The first important change in the mobile renderer is that the mobile renderer does not use the RGBA16F texture formats that the desktop renderer does Instead it is using an R10G10B10A2 UNORM texture format This halves the bandwidth required and has further improvements as mobile hardware often further optimizes for 32 bit formats The tradeoff is that the mobile renderer has limited HDR capabilities due to the reduced precision and maximum values in the color data The second important change is the use of sub passes whenever possible Sub passes allows us to perform the rendering steps end to end per tile saving on the overhead introduced by reading from and writing to the tiles between each rendering pass The ability to use sub passes is limited by the inability to read neighboring pixels as we re constrained to working within a single tile This limitation of subpasses results in not being able to implement features such as glow and depth of field efficiently Similarly if there is a requirement to read from the screen texture or depth texture we must fully write out the rendering result limiting our ability to use sub passes When such features are enabled a mix of sub passes and normal passes are used and these features result in a notable performance penalty On desktop platforms the use of sub passes won t have any impact on performance However this rendering method can still perform better than Clustered Forward in simple scenes thanks to its lower complexity and lower bandwidth usage This is especially noticeable on low end GPUs integrated graphics or in VR applications Given its low end focus this rendering method does not provide high end rendering features such as SDFGI and Volumetric fog and fog volumes Several post processing effects are also not available Compatibility Note This is the only rendering method available when using the OpenGL driver This rendering method is not available when using Vulkan or Direct3D 12 This is a traditional non clustered forward renderer It s intended for old GPUs that don t have Vulkan support but still works very efficiently on newer hardware Specifically it is optimized for older and lower end mobile devices However many optimizations carry over making it a good choice for older and lower end desktop as well Like the Mobile renderer the Compatibility renderer uses an R10G10B10A2 UNORM texture for 3D rendering Unlike the mobile renderer colors are tonemapped and stored in sRGB format so there is no HDR support This avoids the need for a tonemapping pass and allows us to use the lower bit texture without substantial banding The Compatibility renderer uses a traditional forward single pass approach to drawing objects with lights but it uses a multi pass approach to draw lights with shadows Specifically in the first pass it can draw multiple lights without shadows and up to one DirectionalLight3D with shadows In each subsequent pass it can draw up to one OmniLight3D one SpotLight3D and one DirectionalLight3D with shadows Lights with shadows will affect the scene differently than lights without shadows as the lighting is blended in sRGB space instead of linear space This difference in lighting will impact how the scene looks and needs to be kept in mind when designing scenes for the Compatibility renderer Given its low end focus this rendering method does not provide high end rendering features even less so compared to Forward Mobile Most post processing effects are not available Why not deferred rendering Forward rendering generally provides a better tradeoff for performance versus flexibility especially when a clustered approach to lighting is used While deferred rendering can be faster in some cases it s also less flexible and requires using hacks to be able to use MSAA Since games with a less realistic art style can benefit a lot from MSAA we chose to go with forward rendering for Godot 4 like Godot 3 That said parts of the forward renderer are performed with a deferred approach to allow for some optimizations when possible This applies to VoxelGI and SDFGI in particular A clustered deferred renderer may be developed in the future This renderer could be used in situations where performance is favored over flexibility Rendering drivers Godot 4 supports the following graphics APIs Vulkan This is the main driver in Godot 4 with most of the development focus going towards this driver Vulkan 1 0 is required as a baseline with optional Vulkan 1 1 and 1 2 features used when available volk is used as a Vulkan loader and Vulkan Memory Allocator is used for memory management Both the Forward and Mobile Rendering methods are supported when using the Vulkan driver Vulkan context creation drivers vulkan vulkan_context cpp Direct3D 12 context creation drivers d3d12 d3d12_context cpp Direct3D 12 Like Vulkan the Direct3D 12 driver targets modern platforms only It is designed to target both Windows and Xbox whereas Vulkan can t be used directly on Xbox Both the Forward and Mobile Rendering methods can be used with Direct3D 12 Core shaders are shared with the Vulkan renderer Shaders are transpiled from SPIR V to DXIL using Mesa NIR more information This driver is still experimental and only available in Godot 4 3 and later While Direct3D 12 allows supporting Direct3D exclusive features on Windows 11 such as windowed optimizations and Auto HDR Vulkan is still recommended for most projects See the pull request that introduced Direct3D 12 support for more information Metal Godot supports Metal rendering via MoltenVK as macOS and iOS do not support Vulkan natively This is done automatically when specifying the Vulkan driver in the Project Settings MoltenVK makes driver maintenance easy at the cost of some performance overhead Also MoltenVK has several limitations that a native Metal driver implementation wouldn t have Both the clustered and mobile Rendering methods can be used with a Metal backend via MoltenVK A native Metal driver is planned in the future for better performance and compatibility OpenGL This driver uses OpenGL ES 3 0 and targets legacy and low end devices that don t support Vulkan OpenGL 3 3 Core Profile is used on desktop platforms to run this driver as most graphics drivers on desktop don t support OpenGL ES WebGL 2 0 is used for web exports It is possible to use the use of OpenGL ES 3 0 directly on desktop platforms using the rendering driver opengl3_es command line argument although this will only work on graphics drivers that feature native OpenGL ES support such as Mesa Only the Compatibility rendering method can be used with the OpenGL driver Core shaders are entirely different from the Vulkan renderer Many advanced features are not supported with this driver as it targets low end devices first and foremost Summary of rendering drivers methods The following rendering API rendering method combinations are currently possible Vulkan Forward Vulkan Forward Mobile Direct3D 12 Forward Direct3D 12 Forward Mobile Metal Forward via MoltenVK Metal Forward Mobile via MoltenVK OpenGL Compatibility Each combination has its own limitations and performance characteristics Make sure to test your changes on all rendering methods if possible before opening a pull request RenderingDevice abstraction Note The OpenGL driver does not use the RenderingDevice abstraction To make the complexity of modern low level graphics APIs more manageable Godot uses its own abstraction called RenderingDevice This means that when writing code for modern rendering methods you don t actually use the Vulkan or Direct3D 12 APIs directly While this is still lower level than an API like OpenGL this makes working on the renderer easier as RenderingDevice will abstract many API specific quirks for you The RenderingDevice presents a similar level of abstraction as Metal or WebGPU Vulkan RenderingDevice implementation drivers vulkan rendering_device_driver_vulkan cpp Direct3D 12 RenderingDevice implementation drivers d3d12 rendering_device_driver_d3d12 cpp Core rendering classes architecture This diagram represents the structure of rendering classes in Godot including the RenderingDevice abstraction View at full size Core shaders While shaders in Godot projects are written using a custom language inspired by GLSL core shaders are written directly in GLSL These core shaders are embedded in the editor and export template binaries at compile time To see any changes you ve made to those GLSL shaders you need to recompile the editor or export template binary Some material features such as height mapping refraction and proximity fade are not part of core shaders and are performed in the default BaseMaterial3D using the Godot shader language instead not GLSL This is done by procedurally generating the required shader code depending on the features enabled in the material By convention shader files with _inc in their name are included in other GLSL files for better code reuse Standard GLSL preprocessing is used to achieve this Warning Core material shaders will be used by every material in the scene both with the default BaseMaterial3D and custom shaders As a result these shaders must be kept as simple as possible to avoid performance issues and ensure shader compilation doesn t become too slow If you use if branching in a shader performance may decrease as VGPR usage will increase in the shader This happens even if all pixels evaluate to true or false in a given frame If you use if preprocessor branching the number of required shader versions will increase in the scene In a worst case scenario adding a single boolean define can double the number of shader versions that may need to be compiled in a given scene In some cases Vulkan specialization constants can be used as a faster but more limited alternative This means there is a high barrier to adding new built in material features in Godot both in the core shaders and BaseMaterial3D While BaseMaterial3D can make use of dynamic code generation to only include the shader code if the feature is enabled it ll still require generating more shader versions when these features are used in a project This can make shader compilation stutter more noticeable in complex 3D scenes See The Shader Permutation Problem and Branching on a GPU blog posts for more information Core GLSL material shaders Forward servers rendering renderer_rd shaders forward_clustered scene_forward_clustered glsl Forward Mobile servers rendering renderer_rd shaders forward_mobile scene_forward_mobile glsl Compatibility drivers gles3 shaders scene glsl Material shader generation scene resources material cpp Other GLSL shaders for Forward and Forward Mobile rendering methods servers rendering renderer_rd shaders modules lightmapper_rd Other GLSL shaders for the Compatibility rendering method drivers gles3 shaders 2D and 3D rendering separation Note The following is only applicable in the Forward and Forward Mobile rendering methods not in Compatibility Multiple Viewports can be used to emulate this when using the Compatibility backend or to perform 2D resolution scaling 2D and 3D are rendered to separate buffers as 2D rendering in Godot is performed in LDR sRGB space while 3D rendering uses HDR linear space The color format used for 2D rendering is RGB8 RGBA8 if the Transparent property on the Viewport is enabled 3D rendering uses a 24 bit unsigned normalized integer depth buffer or 32 bit signed floating point if a 24 bit depth buffer is not supported by the hardware 2D rendering does not use a depth buffer 3D resolution scaling is performed differently depending on whether bilinear or FSR 1 0 scaling is used When bilinear scaling is used no special upscaling shader is run Instead the viewport s texture is stretched and displayed with a linear sampler which makes the filtering happen directly on the hardware This allows maximizing the performance of bilinear 3D scaling The configure function in RenderSceneBuffersRD reallocates the 2D 3D buffers when the resolution or scaling changes Dynamic resolution scaling isn t supported yet but is planned in a future Godot release 2D and 3D rendering buffer configuration C code servers rendering renderer_rd storage_rd render_scene_buffers_rd cpp FSR 1 0 servers rendering renderer_rd effects fsr cpp thirdparty amd fsr 2D rendering techniques 2D light rendering is performed in a single pass to allow for better performance with large amounts of lights The Forward and Mobile rendering methods don t feature 2D batching yet but it s planned for a future release The Compatibility backend features 2D batching to improve performance which is especially noticeable with lots of text on screen MSAA can be enabled in 2D to provide automatic line and polygon antialiasing but FXAA does not affect 2D rendering as it s calculated before 2D rendering begins Godot s 2D drawing methods such as the Line2D node or some CanvasItem draw_ methods provide their own way of antialiasing based on triangle strips and vertex colors which don t require MSAA to work A 2D signed distance field representing LightOccluder2D nodes in the viewport is automatically generated if a user shader requests it This can be used for various effects in custom shaders such as 2D global illumination It is also used to calculate particle collisions in 2D 2D SDF generation GLSL shader servers rendering renderer_rd shaders canvas_sdf glsl 3D rendering techniques Batching and instancing In the Forward backend Vulkan instancing is used to group rendering of identical objects for performance This is not as fast as static mesh merging but it still allows instances to be culled individually Light decal and reflection probe rendering Note Reflection probe and decal rendering are currently not available in the Compatibility backend As its name implies the Forward backend uses clustered lighting This allows using as many lights as you want performance largely depends on screen coverage Shadow less lights can be almost free if they don t occupy much space on screen All rendering methods also support rendering up to 8 directional lights at the same time albeit with lower shadow quality when more than one light has shadows enabled The Forward Mobile backend uses a single pass lighting approach with a limitation of 8 OmniLights 8 SpotLights affecting each Mesh resource plus a limitation of 256 OmniLights 256 SpotLights in the camera view These limits are hardcoded and can t be adjusted in the project settings The Compatibility backend uses a hybrid single pass multi pass lighting approach Lights without shadows are rendered in a single pass Lights with shadows are rendered in multiple passes This is required for performance reasons on mobile devices As a result performance does not scale well with many shadow casting lights It is recommended to only have a handful of lights with shadows in the camera frustum at a time and for those lights to be spread apart so that each object is only touched by 1 or 2 shadowed lights at a time The maximum number of lights visible at once can be adjusted in the project settings In all 3 methods lights without shadows are much cheaper than lights with shadows To improve performance lights are only updated when the light is modified or when objects in its radius are modified Godot currently doesn t separate static shadow rendering from dynamic shadow rendering but this is planned in a future release Clustering is also used for reflection probes and decal rendering in the Forward backend Shadow mapping Both Forward and Forward Mobile methods use PCF to filter shadow maps and create a soft penumbra Instead of using a fixed PCF pattern these methods use a vogel disk pattern which allows for changing the number of samples and smoothly changing the quality Godot also supports percentage closer soft shadows PCSS for more realistic shadow penumbra rendering PCSS shadows are limited to the Forward backend as they re too demanding to be usable in the Forward Mobile backend PCSS also uses a vogel disk shaped kernel Additionally both shadow mapping techniques rotate the kernel on a per pixel basis to help soften under sampling artifacts The Compatibility backend doesn t support shadow mapping for any light types yet Temporal antialiasing Note Only available in the Forward backend not the Forward Mobile or Compatibility methods Godot uses a custom TAA implementation based on the old TAA implementation from Spartan Engine Temporal antialiasing requires motion vectors to work If motion vectors are not correctly generated ghosting will occur when the camera or objects move Motion vectors are generated on the GPU in the main material shader This is done by running the vertex shader corresponding to the previous rendered frame with the previous camera transform in addition to the vertex shader for the current rendered frame then storing the difference between them in a color buffer Alternatively FSR 2 2 can be used as an upscaling solution that also provides its own temporal antialiasing algorithm FSR 2 2 is implemented on top of the RenderingDevice abstraction as opposed to using AMD s reference code directly TAA resolve servers rendering renderer_rd shaders effects taa_resolve glsl FSR 2 2 servers rendering renderer_rd effects fsr2 cpp servers rendering renderer_rd shaders effects fsr2 thirdparty amd fsr2 Global illumination Note VoxelGI and SDFGI are only available in the Forward backend not the Forward Mobile or Compatibility methods LightmapGI baking is only available in the Forward and Forward Mobile methods and can only be performed within the editor not in an exported project LightmapGI rendering will eventually be supported by the Compatibility backend Godot supports voxel based GI VoxelGI signed distance field GI SDFGI and lightmap baking and rendering LightmapGI These techniques can be used simultaneously if desired Lightmap baking happens on the GPU using Vulkan compute shaders The GPU based lightmapper is implemented in the LightmapperRD class which inherits from the Lightmapper class This allows for implementing additional lightmappers paving the way for a future port of the CPU based lightmapper present in Godot 3 x This would allow baking lightmaps while using the Compatibility backend Core GI C code servers rendering renderer_rd environment gi cpp scene 3d voxel_gi cpp VoxelGI node editor plugins voxel_gi_editor_plugin cpp Editor UI for the VoxelGI node Core GI GLSL shaders servers rendering renderer_rd shaders environment voxel_gi glsl servers rendering renderer_rd shaders environment voxel_gi_debug glsl VoxelGI debug draw mode servers rendering renderer_rd shaders environment sdfgi_debug glsl SDFGI Cascades debug draw mode servers rendering renderer_rd shaders environment sdfgi_debug_probes glsl SDFGI Probes debug draw mode servers rendering renderer_rd shaders environment sdfgi_integrate glsl servers rendering renderer_rd shaders environment sdfgi_preprocess glsl servers rendering renderer_rd shaders environment sdfgi_direct_light glsl Lightmapper C code scene 3d lightmap_gi cpp LightmapGI node editor plugins lightmap_gi_editor_plugin cpp Editor UI for the LightmapGI node scene 3d lightmapper cpp Abstract class modules lightmapper_rd lightmapper_rd cpp GPU based lightmapper implementation Lightmapper GLSL shaders modules lightmapper_rd lm_raster glsl modules lightmapper_rd lm_compute glsl modules lightmapper_rd lm_blendseams glsl Depth of field Note Only available in the Forward and Forward Mobile methods not the Compatibility backend The Forward and Forward Mobile methods use different approaches to DOF rendering with different visual results This is done to best match the performance characteristics of the target hardware In Clustered Forward DOF is performed using a compute shader In Forward Mobile DOF is performed using a fragment shader raster Box hexagon and circle bokeh shapes are available from fastest to slowest Depth of field can optionally be jittered every frame to improve its appearance when temporal antialiasing is enabled Depth of field C code servers rendering renderer_rd effects bokeh_dof cpp Depth of field GLSL shader compute used for Forward servers rendering renderer_rd shaders effects bokeh_dof glsl Depth of field GLSL shader raster used for Forward Mobile servers rendering renderer_rd shaders effects bokeh_dof_raster glsl Screen space effects SSAO SSIL SSR SSS Note Only available in the Forward backend not the Forward Mobile or Compatibility methods The Forward backend supports screen space ambient occlusion screen space indirect lighting screen space reflections and subsurface scattering SSAO uses an implementation derived from Intel s ASSAO converted to Vulkan SSIL is derived from SSAO to provide high performance indirect lighting When both SSAO and SSIL are enabled parts of SSAO and SSIL are shared to reduce the performance impact SSAO and SSIL are performed at half resolution by default to improve performance SSR is always performed at half resolution to improve performance Screen space effects C code servers rendering renderer_rd effects ss_effects cpp Screen space ambient occlusion GLSL shader servers rendering renderer_rd shaders effects ssao glsl servers rendering renderer_rd shaders effects ssao_blur glsl servers rendering renderer_rd shaders effects ssao_interleave glsl servers rendering renderer_rd shaders effects ssao_importance_map glsl Screen space indirect lighting GLSL shader servers rendering renderer_rd shaders effects ssil glsl servers rendering renderer_rd shaders effects ssil_blur glsl servers rendering renderer_rd shaders effects ssil_interleave glsl servers rendering renderer_rd shaders effects ssil_importance_map glsl Screen space reflections GLSL shader servers rendering renderer_rd shaders effects screen_space_reflection glsl servers rendering renderer_rd shaders effects screen_space_reflection_scale glsl servers rendering renderer_rd shaders effects screen_space_reflection_filter glsl Subsurface scattering GLSL servers rendering renderer_rd shaders effects subsurface_scattering glsl Sky rendering See also Sky shaders Godot supports using shaders to render the sky background The radiance map which is used to provide ambient light and reflections for PBR materials is automatically updated based on the sky shader The SkyMaterial resources such as ProceduralSkyMaterial PhysicalSkyMaterial and PanoramaSkyMaterial generate a built in shader for sky rendering This is similar to what BaseMaterial3D provides for 3D scene materials A detailed technical implementation can be found in the Custom sky shaders in Godot 4 0 article Sky rendering C code servers rendering renderer_rd environment sky cpp Sky rendering scene resources sky cpp Sky resource not to be confused with sky rendering scene resources sky_material cpp SkyMaterial resources used in the Sky resource Sky rendering GLSL shader Volumetric fog Note Only available in the Forward backend not the Forward Mobile or Compatibility methods See also Fog shaders Godot supports a frustum aligned voxel froxel approach to volumetric fog rendering As opposed to a post processing filter this approach is more general purpose as it can work with any light type Fog can also use shaders for custom behavior which allows animating the fog or using a 3D texture to represent density The FogMaterial resource generates a built in shader for FogVolume nodes This is similar to what BaseMaterial3D provides for 3D scene materials A detailed technical explanation can be found in the Fog Volumes arrive in Godot 4 0 article Volumetric fog C code servers rendering renderer_rd environment fog cpp General volumetric fog scene 3d fog_volume cpp FogVolume node scene resources fog_material cpp FogMaterial resource used by FogVolume Volumetric fog GLSL shaders servers rendering renderer_rd shaders environment volumetric_fog glsl servers rendering renderer_rd shaders environment volumetric_fog_process glsl Occlusion culling While modern GPUs can handle drawing a lot of triangles the number of draw calls in complex scenes can still be a bottleneck even with Vulkan and Direct3D 12 Godot 4 supports occlusion culling to reduce overdraw when the depth prepass is disabled and reduce vertex throughput This is done by rasterizing a low resolution buffer on the CPU using Embree The buffer s resolution depends on the number of CPU threads on the system as this is done in parallel This buffer includes occluder shapes that were baked in the editor or created at run time As complex occluders can introduce a lot of strain on the CPU baked occluders can be simplified automatically when generated in the editor Godot s occlusion culling doesn t support dynamic occluders yet but OccluderInstance3D nodes can still have their visibility toggled or be moved However this will be slow when updating complex occluders this way Therefore updating occluders at run time is best done only on simple occluder shapes such as quads or cuboids This CPU based approach has a few advantages over other solutions such as portals and rooms or a GPU based culling solution No manual setup required but can be tweaked manually for best performance No frame delay which is problematic in cutscenes during camera cuts or when the camera moves fast behind a wall Works the same on all rendering drivers and methods with no unpredictable behavior depending on the driver or GPU hardware Occlusion culling is performed by registering occluder meshes which is done using OccluderInstance3D nodes which themselves use Occluder3D resources RenderingServer then performs occlusion culling by calling Embree in RendererSceneOcclusionCull Occlusion culling C code scene 3d occluder_instance_3d cpp servers rendering renderer_scene_occlusion_cull cpp Visibility range LOD Godot supports manually authored hierarchical level of detail HLOD with distances specified by the user in the inspector In RenderingSceneCull the _scene_cull and _render_scene functions are where most of the LOD determination happens Each viewport can render the same mesh with different LODs to allow for split screen rendering to look correct Visibility range C code servers rendering renderer_scene_cull cpp Automatic mesh LOD The ImporterMesh class is used for the 3D mesh import workflow in the editor Its generate_lods function handles generating using the meshoptimizer library LOD mesh generation also generates shadow meshes at the same time These are meshes that have their vertices welded regardless of smoothing and materials This is used to improve shadow rendering performance by lowering the vertex throughput required to render shadows The RenderingSceneCull class s _render_scene function determines which mesh LOD should be used when rendering Each viewport can render the same mesh with different LODs to allow for split screen rendering to look correct The mesh LOD is automatically chosen based on a screen coverage metric This takes resolution and camera FOV changes into account without requiring user intervention The threshold multiplier can be adjusted in the project settings To improve performance shadow rendering and reflection probe rendering also choose their own mesh LOD thresholds which can be different from the main scene rendering Mesh LOD generation on import C code scene resources importer_mesh cpp Mesh LOD determination C code servers rendering renderer_scene_cull cpp User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue 2D coordinate systems and 2D transforms Introduction This is a detailed overview of the available 2D coordinate systems and 2D transforms that are built in The basic concepts are covered in Viewport and canvas transforms Transform2D are matrices that convert coordinates from one coordinate system to an other In order to use them it is beneficial to know which coordinate systems are available in Godot For a deeper understanding the Matrices and transforms tutorial offers insights to the underlying functionality Godot 2D coordinate systems The following graphic gives an overview of Godot 2D coordinate systems and the available node transforms transform functions and coordinate system related functions At the left is the OS Window Manager screen at the right are the CanvasItems For simplicity reasons this graphic doesn t include SubViewport SubViewportContainer ParallaxLayer and ParallaxBackground all of which also influence transforms The graphic is based on a node tree of the following form Root Window embed Windows Window don t embed Windows CanvasLayer CanvasItem CanvasItem CanvasItem There are more complex combinations possible like deeply nested Window and SubViewports however this example intends to provide an overview of the methodology in general Click graphic to enlarge Item Coordinates This is the local coordinate system of a CanvasItem Parent Item Coordinates This is the local coordinate system of the parent s CanvasItem When positioning CanvasItems in the Canvas they usually inherit the transformations of their parent CanvasItems An exceptions is CanvasItems top_level Canvas Coordinates As mentioned in the previous tutorial Canvas layers there are two types of canvases Viewport canvas and CanvasLayer canvas and both have a canvas coordinate system These are also called world coordinates A Viewport can contain multiple Canvases with different coordinate systems Viewport Coordinates This is the coordinate system of the Viewport Camera Coordinates This is only used internally for functionality like 3D camera ray projections Embedder Coordinates Screen Coordinates Every Viewport Window or SubViewport in the scene tree is embedded either in a different node or in the OS Window Manager This coordinate system s origin is identical to the top left corner of the Window or SubViewport and its scale is the one of the embedder or the OS Window Manager If the embedder is the OS Window Manager then they are also called Screen Coordinates Absolute Embedder Coordinates Absolute Screen Coordinates The origin of this coordinate system is the top left corner of the embedding node or the OS Window Manager screen Its scale is the one of the embedder or the OS Window Manager If the embedder is the OS Window Manager then they are also called Absolute Screen Coordinates Node transforms Each of the mentioned nodes have one or more transforms associated with them and the combination of these nodes infer the transforms between the different coordinate systems With a few exceptions the transforms are Transform2D and the following list shows details and effects of each of them CanvasItem transform CanvasItems are either Control nodes or Node2D nodes For Control nodes this transform consists of a position relative to the parent s origin and a scale and rotation around a pivot point For Node2D nodes transform consists of position rotation scale and skew The transform affects the item itself and usually also child CanvasItems and in the case of a SubViewportContainer it affects the contained SubViewport CanvasLayer transform The CanvasLayer s transform affects all CanvasItems within the CanvasLayer It doesn t affect other CanvasLayers or Windows in its Viewport CanvasLayer follow viewport transform The follow viewport transform is an automatically calculated transform that is based on the Viewport s canvas transform and the CanvasLayer s follow viewport scale and can be used if enabled to achieve a pseudo 3D effect It affects the same child nodes as the CanvasLayer transform Viewport canvas transform The canvas transform affects all CanvasItems in the Viewport s default canvas It also affects CanvasLayers that have follow viewport transform enabled The Viewport s active Camera2D works by changing this transform It doesn t affect this Viewport s embedded Windows Viewport global canvas transform Viewports also have a global canvas transform This is the master transform and affects all individual Canvas Layer and embedded Window transforms This is primarily used in Godot s CanvasItem Editor Viewport stretch transform Finally Viewports have a stretch transform which is used when resizing or stretching the viewport This transform is used for Windows as described in Multiple resolutions but can also be manually set on SubViewports by means of size and size_2d_override It s translation rotation and skew are the default values and it can only have non default scale Window transform In order to scale and position the Window s content as described in Multiple resolutions each Window contains a window transform It is for example responsible for the black bars at the Window s sides so that the Viewport is displayed with a fixed aspect ratio Window position Every Window also has a position to describe its position within its embedder The embedder can be another Viewport or the OS Window Manager SubViewportContainer shrink transform stretch together with stretch_shrink declare for a SubViewportContainer if and by what integer factor the contained SubViewport should be scaled in comparison to the container s size User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Scripting development GDScript Annotation guidelines Create annotations for modifiers that act on the script or its code Additionally create annotations for behavior that is specific to the Godot engine and editor if the primary purpose is to affect the way that the engine or editor treats or interacts with the script implement the token as an annotation Do not create annotations for general programming language features Affects how the editor treats this script icon res path to class icon svg Affects how the engine interacts with this script onready var character_name Label static is a general programming language feature static var num_players 2 Copy to clipboard For historical reasons some existing annotations and keywords do not strictly follow these guidelines Choosing between implementing a feature as an annotation or as a language keyword is a nuanced decision that should be made through discussion with other GDScript developers User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Custom modules in C Modules Godot allows extending the engine in a modular way New modules can be created and then enabled disabled This allows for adding new engine functionality at every level without modifying the core which can be split for use and reuse in different modules Modules are located in the modules subdirectory of the build system By default dozens of modules are enabled such as GDScript which yes is not part of the base engine the Mono runtime a regular expressions module and others As many new modules as desired can be created and combined The SCons build system will take care of it transparently What for While it s recommended that most of a game be written in scripting as it is an enormous time saver it s perfectly possible to use C instead Adding C modules can be useful in the following scenarios Binding an external library to Godot like PhysX FMOD etc Optimize critical parts of a game Adding new functionality to the engine and or editor Porting an existing game to Godot Write a whole new game in C because you can t live without C Creating a new module Before creating a module make sure to download the source code of Godot and compile it To create a new module the first step is creating a directory inside modules If you want to maintain the module separately you can checkout a different VCS into modules and use it The example module will be called summator godot modules summator Inside we will create a summator class summator h ifndef SUMMATOR_H define SUMMATOR_H include core object ref_counted h class Summator public RefCounted GDCLASS Summator RefCounted int count protected static void _bind_methods public void add int p_value void reset int get_total const Summator endif SUMMATOR_H Copy to clipboard And then the cpp file summator cpp include summator h void Summator add int p_value count p_value void Summator reset count 0 int Summator get_total const return count void Summator _bind_methods ClassDB bind_method D_METHOD add value Summator add ClassDB bind_method D_METHOD reset Summator reset ClassDB bind_method D_METHOD get_total Summator get_total Summator Summator count 0 Copy to clipboard Then the new class needs to be registered somehow so two more files need to be created register_types h register_types cpp Copy to clipboard Important These files must be in the top level folder of your module next to your SCsub and config py files for the module to be registered properly These files should contain the following register_types h include modules register_module_types h void initialize_summator_module ModuleInitializationLevel p_level void uninitialize_summator_module ModuleInitializationLevel p_level yes the word in the middle must be the same as the module folder name Copy to clipboard register_types cpp include register_types h include core object class_db h include summator h void initialize_summator_module ModuleInitializationLevel p_level if p_level MODULE_INITIALIZATION_LEVEL_SCENE return ClassDB register_class Summator void uninitialize_summator_module ModuleInitializationLevel p_level if p_level MODULE_INITIALIZATION_LEVEL_SCENE return Nothing to do here in this example Copy to clipboard Next we need to create an SCsub file so the build system compiles this module SCsub Import env env add_source_files env modules_sources cpp Add all cpp files to the build Copy to clipboard With multiple sources you can also add each file individually to a Python string list src_list summator cpp other cpp etc cpp env add_source_files env modules_sources src_list Copy to clipboard This allows for powerful possibilities using Python to construct the file list using loops and logic statements Look at some modules that ship with Godot by default for examples To add include directories for the compiler to look at you can append it to the environment s paths env Append CPPPATH mylib include this is a relative path env Append CPPPATH myotherlib include this is an absolute path Copy to clipboard If you want to add custom compiler flags when building your module you need to clone env first so it won t add those flags to whole Godot build which can cause errors Example SCsub with custom flags SCsub Import env module_env env Clone module_env add_source_files env modules_sources cpp Append CCFLAGS flags for both C and C code module_env Append CCFLAGS O2 If you need to you can Append CFLAGS for C code only Append CXXFLAGS for C code only Copy to clipboard And finally the configuration file for the module this is a Python script that must be named config py config py def can_build env platform return True def configure env pass Copy to clipboard The module is asked if it s OK to build for the specific platform in this case True means it will build for every platform And that s it Hope it was not too complex Your module should look like this godot modules summator config py godot modules summator summator h godot modules summator summator cpp godot modules summator register_types h godot modules summator register_types cpp godot modules summator SCsub Copy to clipboard You can then zip it and share the module with everyone else When building for every platform instructions in the previous sections your module will be included Note There is a parameter limit of 5 in C modules for things such as subclasses This can be raised to 13 by including the header file core method_bind_ext gen inc Using the module You can now use your newly created module from any script GDScript var s Summator new s add 10 s add 20 s add 30 print s get_total s reset Copy to clipboard The output will be 60 See also The previous Summator example is great for small custom modules but what if you want to use a larger external library Refer to Binding to external libraries for details about binding to external libraries Warning If your module is meant to be accessed from the running project not just from the editor you must also recompile every export template you plan to use then specify the path to the custom template in each export preset Otherwise you ll get errors when running the project as the module isn t compiled in the export template See the Compiling pages for more information Compiling a module externally Compiling a module involves moving the module s sources directly under the engine s modules directory While this is the most straightforward way to compile a module there are a couple of reasons as to why this might not be a practical thing to do Having to manually copy modules sources every time you want to compile the engine with or without the module or taking additional steps needed to manually disable a module during compilation with a build option similar to module_summator_enabled no Creating symbolic links may also be a solution but you may additionally need to overcome OS restrictions like needing the symbolic link privilege if doing this via script Depending on whether you have to work with the engine s source code the module files added directly to modules changes the working tree to the point where using a VCS like git proves to be cumbersome as you need to make sure that only the engine related code is committed by filtering changes So if you feel like the independent structure of custom modules is needed lets take our summator module and move it to the engine s parent directory mkdir modules mv modules summator modules Copy to clipboard Compile the engine with our module by providing custom_modules build option which accepts a comma separated list of directory paths containing custom C modules similar to the following scons custom_modules modules Copy to clipboard The build system shall detect all modules under the modules directory and compile them accordingly including our summator module Warning Any path passed to custom_modules will be converted to an absolute path internally as a way to distinguish between custom and built in modules It means that things like generating module documentation may rely on a specific path structure on your machine See also Introduction to the buildsystem Custom modules build option Customizing module types initialization Modules can interact with other built in engine classes during runtime and even affect the way core types are initialized So far we ve been using register_summator_types as a way to bring in module classes to be available within the engine A crude order of the engine setup can be summarized as a list of the following type registration methods preregister_module_types preregister_server_types register_core_singletons register_server_types register_scene_types EditorNode register_editor_types register_platform_apis register_module_types initialize_physics initialize_navigation_server register_server_singletons register_driver_types ScriptServer init_languages Copy to clipboard Our Summator class is initialized during the register_module_types call Imagine that we need to satisfy some common module run time dependency like singletons or allow us to override existing engine method callbacks before they can be assigned by the engine itself In that case we want to ensure that our module classes are registered before any other built in type This is where we can define an optional preregister_summator_types method which will be called before anything else during the preregister_module_types engine setup stage We now need to add this method to register_types header and source files register_types h define MODULE_SUMMATOR_HAS_PREREGISTER void preregister_summator_types void register_summator_types void unregister_summator_types Copy to clipboard Note Unlike other register methods we have to explicitly define MODULE_SUMMATOR_HAS_PREREGISTER to let the build system know what relevant method calls to include at compile time The module s name has to be converted to uppercase as well register_types cpp include register_types h include core object class_db h include summator h void preregister_summator_types Called before any other core types are registered Nothing to do here in this example void register_summator_types ClassDB register_class Summator void unregister_summator_types Nothing to do here in this example Copy to clipboard Improving the build system for development Warning This shared library support is not designed to support distributing a module to other users without recompiling the engine For that purpose use a GDExtension instead So far we defined a clean SCsub that allows us to add the sources of our new module as part of the Godot binary This static approach is fine when we want to build a release version of our game given we want all the modules in a single binary However the trade off is that every single change requires a full recompilation of the game Even though SCons is able to detect and recompile only the file that was changed finding such files and eventually linking the final binary takes a long time The solution to avoid such a cost is to build our own module as a shared library that will be dynamically loaded when starting our game s binary SCsub Import env sources register_types cpp summator cpp First create a custom env for the shared library module_env env Clone Position independent code is required for a shared library module_env Append CCFLAGS fPIC Don t inject Godot s dependencies into our shared library module_env LIBS Define the shared library By default it would be built in the module s folder however it s better to output it into bin next to the Godot binary shared_lib module_env SharedLibrary target bin summator source sources Finally notify the main build environment it now has our shared library as a new dependency LIBPATH and LIBS need to be set on the real env not the clone to link the specified libraries to the Godot executable env Append LIBPATH bin SCons wants the name of the library with it custom suffixes e g linuxbsd tools 64 but without the final so shared_lib_shim shared_lib 0 name rsplit 1 0 env Append LIBS shared_lib_shim Copy to clipboard Once compiled we should end up with a bin directory containing both the godot binary and our libsummator so However given the so is not in a standard directory like usr lib we have to help our binary find it during runtime with the LD_LIBRARY_PATH environment variable export LD_LIBRARY_PATH PWD bin bin godot Copy to clipboard Note You have to export the environment variable Otherwise you won t be able to run your project from the editor On top of that it would be nice to be able to select whether to compile our module as shared library for development or as a part of the Godot binary for release To do that we can define a custom flag to be passed to SCons using the ARGUMENT command SCsub Import env sources register_types cpp summator cpp module_env env Clone module_env Append CCFLAGS O2 if ARGUMENTS get summator_shared no yes Shared lib compilation module_env Append CCFLAGS fPIC module_env LIBS shared_lib module_env SharedLibrary target bin summator source sources shared_lib_shim shared_lib 0 name rsplit 1 0 env Append LIBS shared_lib_shim env Append LIBPATH bin else Static compilation module_env add_source_files env modules_sources sources Copy to clipboard Now by default scons command will build our module as part of Godot s binary and as a shared library when passing summator_shared yes Finally you can even speed up the build further by explicitly specifying your shared module as target in the SCons command scons summator_shared yes platform linuxbsd bin libsummator linuxbsd tools 64 so Copy to clipboard Writing custom documentation Writing documentation may seem like a boring task but it is highly recommended to document your newly created module to make it easier for users to benefit from it Not to mention that the code you ve written one year ago may become indistinguishable from the code that was written by someone else so be kind to your future self There are several steps in order to setup custom docs for the module Make a new directory in the root of the module The directory name can be anything but we ll be using the doc_classes name throughout this section Now we need to edit config py add the following snippet def get_doc_path return doc_classes def get_doc_classes return Summator Copy to clipboard The get_doc_path function is used by the build system to determine the location of the docs In this case they will be located in the modules summator doc_classes directory If you don t define this the doc path for your module will fall back to the main doc classes directory The get_doc_classes method is necessary for the build system to know which registered classes belong to the module You need to list all of your classes here The classes that you don t list will end up in the main doc classes directory Tip You can use Git to check if you have missed some of your classes by checking the untracked files with git status For example git status Copy to clipboard Example output Untracked files use git add file to include in what will be committed doc classes MyClass2D xml doc classes MyClass4D xml doc classes MyClass5D xml doc classes MyClass6D xml Copy to clipboard Now we can generate the documentation We can do this via running Godot s doctool i e godot doctool path which will dump the engine API reference to the given path in XML format In our case we ll point it to the root of the cloned repository You can point it to an another folder and just copy over the files that you need Run command bin godot_binary doctool Copy to clipboard Now if you go to the godot modules summator doc_classes folder you will see that it contains a Summator xml file or any other classes that you referenced in your get_doc_classes function Edit the file s following Class reference primer and recompile the engine Once the compilation process is finished the docs will become accessible within the engine s built in documentation system In order to keep documentation up to date all you ll have to do is simply modify one of the XML files and recompile the engine from now on If you change your module s API you can also re extract the docs they will contain the things that you previously added Of course if you point it to your godot folder make sure you don t lose work by extracting older docs from an older engine build on top of the newer ones Note that if you don t have write access rights to your supplied path you might encounter an error similar to the following ERROR Can t write doc file docs doc classes GDScript xml At editor doc doc_data cpp 956 Copy to clipboard Writing custom unit tests It s possible to write self contained unit tests as part of a C module If you are not familiar with the unit testing process in Godot yet please refer to Unit testing The procedure is the following Create a new directory named tests under your module s root cd modules summator mkdir tests cd tests Copy to clipboard Create a new test suite test_summator h The header must be prefixed with test_ so that the build system can collect it and include it as part of the tests test_main cpp where the tests are run Write some test cases Here s an example test_summator h ifndef TEST_SUMMATOR_H define TEST_SUMMATOR_H include tests test_macros h include modules summator summator h namespace TestSummator TEST_CASE Modules Summator Adding numbers Ref Summator s memnew Summator CHECK s get_total 0 s add 10 CHECK s get_total 10 s add 20 CHECK s get_total 30 s add 30 CHECK s get_total 60 s reset CHECK s get_total 0 namespace TestSummator endif TEST_SUMMATOR_H Copy to clipboard Compile the engine with scons tests yes and run the tests with the following command bin godot_binary test source file test_summator success Copy to clipboard You should see the passing assertions now Adding custom editor icons Similarly to how you can write self contained documentation within a module you can also create your own custom icons for classes to appear in the editor For the actual process of creating editor icons to be integrated within the engine please refer to Editor icons first Once you ve created your icon s proceed with the following steps Make a new directory in the root of the module named icons This is the default path for the engine to look for module s editor icons Move your newly created svg icons optimized or not into that folder Recompile the engine and run the editor Now the icon s will appear in editor s interface where appropriate If you d like to store your icons somewhere else within your module add the following code snippet to config py to override the default path def get_icons_path return path to icons Copy to clipboard Summing up Remember to Use GDCLASS macro for inheritance so Godot can wrap it Use _bind_methods to bind your functions to scripting and to allow them to work as callbacks for signals Avoid multiple inheritance for classes exposed to Godot as GDCLASS doesn t support this You can still use multiple inheritance in your own classes as long as they re not exposed to Godot s scripting API But this is not all depending what you do you will be greeted with some hopefully positive surprises If you inherit from Node or any derived node type such as Sprite2D your new class will appear in the editor in the inheritance tree in the Add Node dialog If you inherit from Resource it will appear in the resource list and all the exposed properties can be serialized when saved loaded By this same logic you can extend the Editor and almost any area of the engine User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Binding to external libraries Modules The Summator example in Custom modules in C is great for small custom modules but what if you want to use a larger external library Let s look at an example using Festival a speech synthesis text to speech library written in C To bind to an external library set up a module directory similar to the Summator example godot modules tts Copy to clipboard Next you will create a header file with a TTS class tts h ifndef GODOT_TTS_H define GODOT_TTS_H include core object ref_counted h class TTS public RefCounted GDCLASS TTS RefCounted protected static void _bind_methods public bool say_text String p_txt TTS endif GODOT_TTS_H Copy to clipboard And then you ll add the cpp file tts cpp include tts h include festival h bool TTS say_text String p_txt convert Godot String to Godot CharString to C string return festival_say_text p_txt ascii get_data void TTS _bind_methods ClassDB bind_method D_METHOD say_text txt TTS say_text TTS TTS festival_initialize true 210000 not the best way to do it as this should only ever be called once Copy to clipboard Just as before the new class needs to be registered somehow so two more files need to be created register_types h register_types cpp Copy to clipboard Important These files must be in the top level folder of your module next to your SCsub and config py files for the module to be registered properly These files should contain the following register_types h void initialize_tts_module ModuleInitializationLevel p_level void uninitialize_tts_module ModuleInitializationLevel p_level yes the word in the middle must be the same as the module folder name Copy to clipboard register_types cpp include register_types h include core object class_db h include tts h void initialize_tts_module ModuleInitializationLevel p_level if p_level MODULE_INITIALIZATION_LEVEL_SCENE return ClassDB register_class TTS void uninitialize_tts_module ModuleInitializationLevel p_level Nothing to do here in this example Copy to clipboard Next you need to create an SCsub file so the build system compiles this module SCsub Import env env_tts env Clone env_tts add_source_files env modules_sources cpp Add all cpp files to the build Copy to clipboard You ll need to install the external library on your machine to get the a library files See the library s official documentation for specific instructions on how to do this for your operation system We ve included the installation commands for Linux below for reference sudo apt get install festival festival dev Installs festival and speech_tools libraries apt cache search festvox Displays list of voice packages sudo apt get install festvox don festvox rablpc16k festvox kallpc16k festvox kdlpc16k Installs voices Copy to clipboard Important The voices that Festival uses and any other potential external 3rd party resource all have varying licenses and terms of use some if not most of them may be be problematic with Godot even if the Festival Library itself is MIT License compatible Please be sure to check the licenses and terms of use The external library will also need to be installed inside your module to make the source files accessible to the compiler while also keeping the module code self contained The festival and speech_tools libraries can be installed from the modules tts directory via git using the following commands git clone https github com festvox festival git clone https github com festvox speech_tools Copy to clipboard If you don t want the external repository source files committed to your repository you can link to them instead by adding them as submodules from within the modules tts directory as seen below git submodule add https github com festvox festival git submodule add https github com festvox speech_tools Copy to clipboard Important Please note that Git submodules are not used in the Godot repository If you are developing a module to be merged into the main Godot repository you should not use submodules If your module doesn t get merged in you can always try to implement the external library as a GDExtension To add include directories for the compiler to look at you can append it to the environment s paths These paths are relative to modules tts env_tts Append CPPPATH speech_tools include festival src include LIBPATH and LIBS need to be set on the real env not the clone to link the specified libraries to the Godot executable This is a path relative to modules tts where your a libraries reside If you are compiling the module externally not in the godot source tree these will need to be full paths env Append LIBPATH libpath Check with the documentation of the external library to see which library files should be included linked env Append LIBS Festival estools estbase eststring Copy to clipboard If you want to add custom compiler flags when building your module you need to clone env first so it won t add those flags to whole Godot build which can cause errors Example SCsub with custom flags SCsub Import env env_tts env Clone env_tts add_source_files env modules_sources cpp Append CCFLAGS flags for both C and C code env_tts Append CCFLAGS O2 If you need to you can Append CFLAGS for C code only Append CXXFLAGS for C code only Copy to clipboard The final module should look like this godot modules tts festival godot modules tts libpath libestbase a godot modules tts libpath libestools a godot modules tts libpath libeststring a godot modules tts libpath libFestival a godot modules tts speech_tools godot modules tts config py godot modules tts tts h godot modules tts tts cpp godot modules tts register_types h godot modules tts register_types cpp godot modules tts SCsub Copy to clipboard Using the module You can now use your newly created module from any script var t TTS new var script Hello world This is a test var is_spoken t say_text script print is_spoken is_spoken Copy to clipboard And the output will be is_spoken True if the text is spoken User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Custom Godot servers Introduction Godot implements multi threading as servers Servers are daemons which manage data process it and push the result Servers implement the mediator pattern which interprets resource ID and process data for the engine and other modules In addition the server claims ownership for its RID allocations This guide assumes the reader knows how to create C modules and Godot data types If not refer to Custom modules in C References Why does Godot use servers and RIDs Singleton pattern Mediator pattern What for Adding artificial intelligence Adding custom asynchronous threads Adding support for a new input device Adding writing threads Adding a custom VoIP protocol And more Creating a Godot server At minimum a server must have a static instance a sleep timer a thread loop an initialization state and a cleanup procedure ifndef HILBERT_HOTEL_H define HILBERT_HOTEL_H include core object object h include core os thread h include core os mutex h include core templates list h include core templates rid h include core templates set h include core variant variant h class HilbertHotel public Object GDCLASS HilbertHotel Object static HilbertHotel singleton static void thread_func void p_udata private bool thread_exited mutable bool exit_thread Thread thread Mutex mutex public static HilbertHotel get_singleton Error init void lock void unlock void finish protected static void _bind_methods private uint64_t counter RID_Owner InfiniteBus bus_owner https github com godotengine godot blob master core templates rid h Set RID buses void _emit_occupy_room uint64_t room RID rid public RID create_bus Variant get_bus_info RID id bool empty bool delete_bus RID id void clear void register_rooms HilbertHotel endif Copy to clipboard include hilbert_hotel h include core variant dictionary h include core os os h include prime_225 h void HilbertHotel thread_func void p_udata HilbertHotel ac HilbertHotel p_udata uint64_t msdelay 1000 while ac exit_thread if ac empty ac lock ac register_rooms ac unlock OS get_singleton delay_usec msdelay 1000 Error HilbertHotel init thread_exited false counter 0 mutex Mutex create thread Thread create HilbertHotel thread_func this return OK HilbertHotel HilbertHotel singleton NULL HilbertHotel HilbertHotel get_singleton return singleton void HilbertHotel register_rooms for Set RID Element e buses front e e e next auto bus bus_owner getornull e get if bus uint64_t room bus next_room _emit_occupy_room room bus get_self void HilbertHotel unlock if thread mutex return mutex unlock void HilbertHotel lock if thread mutex return mutex lock void HilbertHotel _emit_occupy_room uint64_t room RID rid _HilbertHotel get_singleton _occupy_room room rid Variant HilbertHotel get_bus_info RID id InfiniteBus bus bus_owner getornull id if bus Dictionary d d prime bus get_bus_num d current_room bus get_current_room return d return Variant void HilbertHotel finish if thread return exit_thread true Thread wait_to_finish thread memdelete thread if mutex memdelete mutex thread NULL RID HilbertHotel create_bus lock InfiniteBus ptr memnew InfiniteBus PRIME counter RID ret bus_owner make_rid ptr ptr set_self ret buses insert ret unlock return ret https github com godotengine godot blob master core templates rid h bool HilbertHotel delete_bus RID id if bus_owner owns id lock InfiniteBus b bus_owner get id bus_owner free id buses erase id memdelete b unlock return true return false void HilbertHotel clear for Set RID Element e buses front e e e next delete_bus e get bool HilbertHotel empty return buses size 0 void HilbertHotel _bind_methods HilbertHotel HilbertHotel singleton this Copy to clipboard prime_225 h const uint64_t PRIME 225 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967 971 977 983 991 997 1009 1013 1019 1021 1031 1033 1039 1049 1051 1061 1063 1069 1087 1091 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181 1187 1193 1201 1213 1217 1223 1229 1231 1237 1249 1259 1277 1279 1283 1289 1291 1297 1301 1303 1307 1319 1321 1327 1361 1367 1373 1381 1399 1409 1423 1427 Copy to clipboard Custom managed resource data Godot servers implement a mediator pattern All data types inherit RID_Data RID_Owner MyRID_Data owns the object when make_rid is called During debug mode only RID_Owner maintains a list of RIDs In practice RIDs are similar to writing object oriented C code class InfiniteBus public RID_Data RID self private uint64_t prime_num uint64_t num public uint64_t next_room return prime_num num uint64_t get_bus_num const return prime_num uint64_t get_current_room const return prime_num num _FORCE_INLINE_ void set_self const RID p_self self p_self _FORCE_INLINE_ RID get_self const return self InfiniteBus uint64_t prime prime_num prime num 1 InfiniteBus Copy to clipboard References RID core templates rid h Registering the class in GDScript Servers are allocated in register_types cpp The constructor sets the static instance and init creates the managed thread unregister_types cpp cleans up the server Since a Godot server class creates an instance and binds it to a static singleton binding the class might not reference the correct instance Therefore a dummy class must be created to reference the proper Godot server In register_server_types Engine get_singleton add_singleton is used to register the dummy class in GDScript register_types cpp include register_types h include core object class_db h include core config engine h include hilbert_hotel h static HilbertHotel hilbert_hotel NULL static _HilbertHotel _hilbert_hotel NULL void register_hilbert_hotel_types hilbert_hotel memnew HilbertHotel hilbert_hotel init _hilbert_hotel memnew _HilbertHotel ClassDB register_class _HilbertHotel Engine get_singleton add_singleton Engine Singleton HilbertHotel _HilbertHotel get_singleton void unregister_hilbert_hotel_types if hilbert_hotel hilbert_hotel finish memdelete hilbert_hotel if _hilbert_hotel memdelete _hilbert_hotel Copy to clipboard register_types h Yes the word in the middle must be the same as the module folder name void register_hilbert_hotel_types void unregister_hilbert_hotel_types Copy to clipboard servers register_server_types cpp Bind methods The dummy class binds singleton methods to GDScript In most cases the dummy class methods wraps around Variant _HilbertHotel get_bus_info RID id return HilbertHotel get_singleton get_bus_info id Copy to clipboard Binding Signals It is possible to emit signals to GDScript by calling the GDScript dummy object void HilbertHotel _emit_occupy_room uint64_t room RID rid _HilbertHotel get_singleton _occupy_room room rid Copy to clipboard class _HilbertHotel public Object GDCLASS _HilbertHotel Object friend class HilbertHotel static _HilbertHotel singleton protected static void _bind_methods private void _occupy_room int room_number RID bus public RID create_bus void connect_signals bool delete_bus RID id static _HilbertHotel get_singleton Variant get_bus_info RID id _HilbertHotel _HilbertHotel endif Copy to clipboard _HilbertHotel _HilbertHotel singleton NULL _HilbertHotel _HilbertHotel get_singleton return singleton RID _HilbertHotel create_bus return HilbertHotel get_singleton create_bus bool _HilbertHotel delete_bus RID rid return HilbertHotel get_singleton delete_bus rid void _HilbertHotel _occupy_room int room_number RID bus emit_signal occupy_room room_number bus Variant _HilbertHotel get_bus_info RID id return HilbertHotel get_singleton get_bus_info id void _HilbertHotel _bind_methods ClassDB bind_method D_METHOD get_bus_info r_id _HilbertHotel get_bus_info ClassDB bind_method D_METHOD create_bus _HilbertHotel create_bus ClassDB bind_method D_METHOD delete_bus _HilbertHotel delete_bus ADD_SIGNAL MethodInfo occupy_room PropertyInfo Variant INT room_number PropertyInfo Variant _RID r_id void _HilbertHotel connect_signals HilbertHotel get_singleton connect occupy_room _HilbertHotel get_singleton _occupy_room _HilbertHotel _HilbertHotel singleton this _HilbertHotel _HilbertHotel Copy to clipboard MessageQueue In order to send commands into SceneTree MessageQueue is a thread safe buffer to queue set and call methods for other threads To queue a command obtain the target object RID and use either push_call push_set or push_notification to execute the desired behavior The queue will be flushed whenever either SceneTree idle or SceneTree iteration is executed References core object message_queue cpp Summing it up Here is the GDScript sample code extends Node func _ready print Start debugging HilbertHotel occupy_room connect _print_occupy_room var rid HilbertHotel create_bus OS delay_msec 2000 HilbertHotel create_bus OS delay_msec 2000 HilbertHotel create_bus OS delay_msec 2000 print HilbertHotel get_bus_info rid HilbertHotel delete_bus rid print Ready done func _print_occupy_room room_number r_id print Room number str room_number RID str r_id print HilbertHotel get_bus_info r_id Copy to clipboard Notes The actual Hilbert Hotel is impossible Connecting signal example code is pretty hacky User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Custom resource format loaders Introduction ResourceFormatLoader is a factory interface for loading file assets Resources are primary containers When load is called on the same file path again the previous loaded Resource will be referenced Naturally loaded resources must be stateless This guide assumes the reader knows how to create C modules and Godot data types If not refer to this guide Custom modules in C References ResourceLoader core io resource_loader cpp What for Adding new support for many file formats Audio formats Video formats Machine learning models What not Raster images ImageFormatLoader should be used to load images References core io image_loader h Creating a ResourceFormatLoader Each file format consist of a data container and a ResourceFormatLoader ResourceFormatLoaders are classes which return all the necessary metadata for supporting new extensions in Godot The class must return the format name and the extension string In addition ResourceFormatLoaders must convert file paths into resources with the load function To load a resource load must read and handle data serialization resource_loader_json h ifndef RESOURCE_LOADER_JSON_H define RESOURCE_LOADER_JSON_H include core io resource_loader h class ResourceFormatLoaderJson public ResourceFormatLoader GDCLASS ResourceFormatLoaderJson ResourceFormatLoader public virtual RES load const String p_path const String p_original_path Error r_error NULL virtual void get_recognized_extensions List String r_extensions const virtual bool handles_type const String p_type const virtual String get_resource_type const String p_path const endif RESOURCE_LOADER_JSON_H Copy to clipboard resource_loader_json cpp include resource_loader_json h include resource_json h RES ResourceFormatLoaderJson load const String p_path const String p_original_path Error r_error Ref JsonResource json memnew JsonResource if r_error r_error OK Error err json load_file p_path return json void ResourceFormatLoaderJson get_recognized_extensions List String r_extensions const if r_extensions find json r_extensions push_back json String ResourceFormatLoaderJson get_resource_type const String p_path const return Resource bool ResourceFormatLoaderJson handles_type const String p_type const return ClassDB is_parent_class p_type Resource Copy to clipboard Creating a ResourceFormatSaver If you d like to be able to edit and save a resource you can implement a ResourceFormatSaver resource_saver_json h ifndef RESOURCE_SAVER_JSON_H define RESOURCE_SAVER_JSON_H include core io resource_saver h class ResourceFormatSaverJson public ResourceFormatSaver GDCLASS ResourceFormatSaverJson ResourceFormatSaver public virtual Error save const String p_path const RES p_resource uint32_t p_flags 0 virtual bool recognize const RES p_resource const virtual void get_recognized_extensions const RES p_resource List String r_extensions const endif RESOURCE_SAVER_JSON_H Copy to clipboard resource_saver_json cpp include resource_saver_json h include resource_json h include scene resources resource_format_text h Error ResourceFormatSaverJson save const String p_path const RES p_resource uint32_t p_flags Ref JsonResource json memnew JsonResource Error error json save_file p_path p_resource return error bool ResourceFormatSaverJson recognize const RES p_resource const return Object cast_to JsonResource p_resource NULL void ResourceFormatSaverJson get_recognized_extensions const RES p_resource List String r_extensions const if Object cast_to JsonResource p_resource r_extensions push_back json Copy to clipboard Creating custom data types Godot may not have a proper substitute within its Core types or managed resources Godot needs a new registered data type to understand additional binary formats such as machine learning models Here is an example of creating a custom datatype resource_json h ifndef RESOURCE_JSON_H define RESOURCE_JSON_H include core io json h include core variant_parser h class JsonResource public Resource GDCLASS JsonResource Resource protected static void _bind_methods ClassDB bind_method D_METHOD set_dict dict JsonResource set_dict ClassDB bind_method D_METHOD get_dict JsonResource get_dict ADD_PROPERTY PropertyInfo Variant DICTIONARY content set_dict get_dict private Dictionary content public Error load_file const String p_path Error save_file const String p_path const RES p_resource void set_dict const Dictionary p_dict Dictionary get_dict endif RESOURCE_JSON_H Copy to clipboard resource_json cpp include resource_json h Error JsonResource load_file const String p_path Error error FileAccess file FileAccess open p_path FileAccess READ error if error OK if file file close return error String json_string String while file eof_reached json_string file get_line file close String error_string int error_line JSON json Variant result error json parse json_string result error_string error_line if error OK file close return error content Dictionary result return OK Error JsonResource save_file const String p_path const RES p_resource Error error FileAccess file FileAccess open p_path FileAccess WRITE error if error OK if file file close return error Ref JsonResource json_ref p_resource get_ref_ptr JSON json file store_string json print json_ref get_dict file close return OK void JsonResource set_dict const Dictionary p_dict content p_dict Dictionary JsonResource get_dict return content Copy to clipboard Considerations Some libraries may not define certain common routines such as IO handling Therefore Godot call translations are required For example here is the code for translating FileAccess calls into std istream include core os file_access h include istream include streambuf class GodotFileInStreamBuf public std streambuf public GodotFileInStreamBuf FileAccess fa _file fa int underflow if _file eof_reached return EOF else size_t pos _file get_position uint8_t ret _file get_8 _file seek pos Required since get_8 advances the read head return ret int uflow return _file eof_reached EOF _file get_8 private FileAccess _file Copy to clipboard References istream streambuf core io file_access h Registering the new file format Godot registers ResourcesFormatLoader with a ResourceLoader handler The handler selects the proper loader automatically when load is called register_types h void register_json_types void unregister_json_types Copy to clipboard register_types cpp include register_types h include core class_db h include resource_loader_json h include resource_saver_json h include resource_json h static Ref ResourceFormatLoaderJson json_loader static Ref ResourceFormatSaverJson json_saver void register_json_types ClassDB register_class JsonResource json_loader instantiate ResourceLoader add_resource_format_loader json_loader json_saver instantiate ResourceSaver add_resource_format_saver json_saver void unregister_json_types ResourceLoader remove_resource_format_loader json_loader json_loader unref ResourceSaver remove_resource_format_saver json_saver json_saver unref Copy to clipboard References core io resource_loader cpp Loading it on GDScript Save a file called demo json with the following contents and place it in the project s root folder savefilename demo json demo welcome to godot resource loaders Copy to clipboard Then attach the following script to any node extends Node onready var json_resource load res demo json func _ready print json_resource get_dict Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Custom AudioStreams Introduction AudioStream is the base class of all audio emitting objects AudioStreamPlayer binds onto an AudioStream to emit PCM data into an AudioServer which manages audio drivers All audio resources require two audio based classes AudioStream and AudioStreamPlayback As a data container AudioStream contains the resource and exposes itself to GDScript AudioStream references its own internal custom AudioStreamPlayback which translates AudioStream into PCM data This guide assumes the reader knows how to create C modules If not refer to this guide Custom modules in C References servers audio audio_stream h scene audio audio_stream_player cpp What for Binding external libraries like Wwise FMOD etc Adding custom audio queues Adding support for more audio formats Create an AudioStream An AudioStream consists of three components data container stream name and an AudioStreamPlayback friend class generator Audio data can be loaded in a number of ways such as with an internal counter for a tone generator internal external buffer or a file reference Some AudioStreams need to be stateless such as objects loaded from ResourceLoader ResourceLoader loads once and references the same object regardless how many times load is called on a specific resource Therefore playback state must be self contained in AudioStreamPlayback audiostream_mytone h include core reference h include core resource h include servers audio audio_stream h class AudioStreamMyTone public AudioStream GDCLASS AudioStreamMyTone AudioStream private friend class AudioStreamPlaybackMyTone uint64_t pos int mix_rate bool stereo int hz public void reset void set_position uint64_t pos virtual Ref AudioStreamPlayback instance_playback virtual String get_stream_name const void gen_tone int16_t pcm_buf int size virtual float get_length const return 0 if supported otherwise return 0 AudioStreamMyTone protected static void _bind_methods Copy to clipboard audiostream_mytone cpp include audiostream_mytone h AudioStreamMyTone AudioStreamMyTone mix_rate 44100 stereo false hz 639 Ref AudioStreamPlayback AudioStreamMyTone instance_playback Ref AudioStreamPlaybackMyTone talking_tree talking_tree instantiate talking_tree base Ref AudioStreamMyTone this return talking_tree String AudioStreamMyTone get_stream_name const return MyTone void AudioStreamMyTone reset set_position 0 void AudioStreamMyTone set_position uint64_t p pos p void AudioStreamMyTone gen_tone int16_t pcm_buf int size for int i 0 i size i pcm_buf i 32767 0 sin 2 0 Math_PI double pos i double mix_rate double hz pos size void AudioStreamMyTone _bind_methods ClassDB bind_method D_METHOD reset AudioStreamMyTone reset ClassDB bind_method D_METHOD get_stream_name AudioStreamMyTone get_stream_name Copy to clipboard References servers audio audio_stream h Create an AudioStreamPlayback AudioStreamPlayer uses mix callback to obtain PCM data The callback must match sample rate and fill the buffer Since AudioStreamPlayback is controlled by the audio thread i o and dynamic memory allocation are forbidden audiostreamplayer_mytone h include core reference h include core resource h include servers audio audio_stream h class AudioStreamPlaybackMyTone public AudioStreamPlayback GDCLASS AudioStreamPlaybackMyTone AudioStreamPlayback friend class AudioStreamMyTone private enum PCM_BUFFER_SIZE 4096 enum MIX_FRAC_BITS 13 MIX_FRAC_LEN 1 MIX_FRAC_BITS MIX_FRAC_MASK MIX_FRAC_LEN 1 void pcm_buffer Ref AudioStreamMyTone base bool active public virtual void start float p_from_pos 0 0 virtual void stop virtual bool is_playing const virtual int get_loop_count const times it looped virtual float get_playback_position const virtual void seek float p_time virtual void mix AudioFrame p_buffer float p_rate_scale int p_frames virtual float get_length const if supported otherwise return 0 AudioStreamPlaybackMyTone AudioStreamPlaybackMyTone Copy to clipboard audiostreamplayer_mytone cpp include audiostreamplayer_mytone h include core math math_funcs h include core print_string h AudioStreamPlaybackMyTone AudioStreamPlaybackMyTone active false AudioServer get_singleton lock pcm_buffer AudioServer get_singleton audio_data_alloc PCM_BUFFER_SIZE zeromem pcm_buffer PCM_BUFFER_SIZE AudioServer get_singleton unlock AudioStreamPlaybackMyTone AudioStreamPlaybackMyTone if pcm_buffer AudioServer get_singleton audio_data_free pcm_buffer pcm_buffer NULL void AudioStreamPlaybackMyTone stop active false base reset void AudioStreamPlaybackMyTone start float p_from_pos seek p_from_pos active true void AudioStreamPlaybackMyTone seek float p_time float max get_length if p_time 0 p_time 0 base set_position uint64_t p_time base mix_rate MIX_FRAC_BITS void AudioStreamPlaybackMyTone mix AudioFrame p_buffer float p_rate int p_frames ERR_FAIL_COND active if active return zeromem pcm_buffer PCM_BUFFER_SIZE int16_t buf int16_t pcm_buffer base gen_tone buf p_frames for int i 0 i p_frames i float sample float buf i 32767 0 p_buffer i AudioFrame sample sample int AudioStreamPlaybackMyTone get_loop_count const return 0 float AudioStreamPlaybackMyTone get_playback_position const return 0 0 float AudioStreamPlaybackMyTone get_length const return 0 0 bool AudioStreamPlaybackMyTone is_playing const return active Copy to clipboard Resampling Godot s AudioServer currently uses 44100 Hz sample rate When other sample rates are needed such as 48000 either provide one or use AudioStreamPlaybackResampled Godot provides cubic interpolation for audio resampling Instead of overloading mix AudioStreamPlaybackResampled uses _mix_internal to query AudioFrames and get_stream_sampling_rate to query current mix rate include core reference h include core resource h include servers audio audio_stream h class AudioStreamMyToneResampled class AudioStreamPlaybackResampledMyTone public AudioStreamPlaybackResampled GDCLASS AudioStreamPlaybackResampledMyTone AudioStreamPlaybackResampled friend class AudioStreamMyToneResampled private enum PCM_BUFFER_SIZE 4096 enum MIX_FRAC_BITS 13 MIX_FRAC_LEN 1 MIX_FRAC_BITS MIX_FRAC_MASK MIX_FRAC_LEN 1 void pcm_buffer Ref AudioStreamMyToneResampled base bool active protected virtual void _mix_internal AudioFrame p_buffer int p_frames public virtual void start float p_from_pos 0 0 virtual void stop virtual bool is_playing const virtual int get_loop_count const times it looped virtual float get_playback_position const virtual void seek float p_time virtual float get_length const if supported otherwise return 0 virtual float get_stream_sampling_rate AudioStreamPlaybackResampledMyTone AudioStreamPlaybackResampledMyTone Copy to clipboard include mytone_audiostream_resampled h include core math math_funcs h include core print_string h AudioStreamPlaybackResampledMyTone AudioStreamPlaybackResampledMyTone active false AudioServer get_singleton lock pcm_buffer AudioServer get_singleton audio_data_alloc PCM_BUFFER_SIZE zeromem pcm_buffer PCM_BUFFER_SIZE AudioServer get_singleton unlock AudioStreamPlaybackResampledMyTone AudioStreamPlaybackResampledMyTone if pcm_buffer AudioServer get_singleton audio_data_free pcm_buffer pcm_buffer NULL void AudioStreamPlaybackResampledMyTone stop active false base reset void AudioStreamPlaybackResampledMyTone start float p_from_pos seek p_from_pos active true void AudioStreamPlaybackResampledMyTone seek float p_time float max get_length if p_time 0 p_time 0 base set_position uint64_t p_time base mix_rate MIX_FRAC_BITS void AudioStreamPlaybackResampledMyTone _mix_internal AudioFrame p_buffer int p_frames ERR_FAIL_COND active if active return zeromem pcm_buffer PCM_BUFFER_SIZE int16_t buf int16_t pcm_buffer base gen_tone buf p_frames for int i 0 i p_frames i float sample float buf i 32767 0 p_buffer i AudioFrame sample sample float AudioStreamPlaybackResampledMyTone get_stream_sampling_rate return float base mix_rate int AudioStreamPlaybackResampledMyTone get_loop_count const return 0 float AudioStreamPlaybackResampledMyTone get_playback_position const return 0 0 float AudioStreamPlaybackResampledMyTone get_length const return 0 0 bool AudioStreamPlaybackResampledMyTone is_playing const return active Copy to clipboard References core math audio_frame h servers audio audio_stream h scene audio audio_stream_player cpp User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Custom platform ports Similar to Custom modules in C Godot s multi platform architecture is designed in a way that allows creating platform ports without modifying any existing source code An example of a custom platform port distributed independently from the engine is FRT which targets single board computers Note that this platform port currently targets Godot 3 x therefore it does not use the DisplayServer abstraction that is new in Godot 4 Some reasons to create custom platform ports might be You want to port your game to consoles but wish to write the platform layer yourself This is a long and arduous process as it requires signing NDAs with console manufacturers but it allows you to have full control over the console porting process You want to port Godot to an exotic platform that isn t currently supported If you have questions about creating a custom platform port feel free to ask in the platforms channel of the Godot Contributors Chat Note Godot is a modern engine with modern requirements Even if you only intend to run simple 2D projects on the target platform it still requires an amount of memory that makes it unviable to run on most retro consoles For reference in Godot 4 an empty project with nothing visible requires about 100 MB of RAM to run on Linux 50 MB in headless mode If you want to run Godot on heavily memory constrained platforms older Godot versions have lower memory requirements The porting process is similar with the exception of DisplayServer not being split from the OS singleton Official platform ports The official platform ports can be used as a reference when creating a custom platform port Windows macOS Linux BSD Android iOS Web While platform code is usually self contained there are exceptions to this rule For instance audio drivers that are shared across several platforms and rendering backends are located in the drivers folder of the Godot source code Creating a custom platform port Creating a custom platform port is a large undertaking which requires prior knowledge of the platform s SDKs Depending on what features you need the amount of work needed varies Required features of a platform port At the very least a platform port must have methods from the OS singleton implemented to be buildable and usable for headless operation A logo svg 32 32 vector image must also be present within the platform folder This logo is displayed in the Export dialog for each export preset targeting the platform in question See this implementation for the Linux BSD platform as an example See also the OS singleton header for reference Note If your target platform is UNIX like consider inheriting from the OS_Unix class to get much of the work done automatically If the platform is not UNIX like you might use the Windows port https github com godotengine godot blob master platform windows os_windows cpp as a reference detect py file A detect py file must be created within the platform s folder with all methods implemented This file is required for SCons to detect the platform as a valid option for compiling See the detect py file for the Linux BSD platform as an example All methods should be implemented within detect py as follows is_active Can be used to temporarily disable building for a platform This should generally always return True get_name Returns the platform s user visible name as a string can_build Return True if the host system is able to build for the target platform False otherwise Do not put slow checks here as this is queried when the list of platforms is requested by the user Use configure for extensive dependency checks instead get_opts Returns the list of SCons build options that can be defined by the user for this platform get_flags Returns the list of overridden SCons flags for this platform configure Perform build configuration such as selecting compiler options depending on SCons options chosen Optional features of a platform port In practice headless operation doesn t suffice if you want to see anything on screen and handle input devices You may also want audio output for most games Some links on this list point to the Linux BSD platform implementation as a reference One or more DisplayServers with the windowing methods implemented DisplayServer also covers features such as mouse support touchscreen support and tablet driver for pen input See the DisplayServer singleton header for reference For platforms not featuring full windowing support or if it s not relevant for the port you are making most windowing functions can be left mostly unimplemented These functions can be made to only check if the window ID is MAIN_WINDOW_ID and specific operations like resizing may be tied to the platform s screen resolution feature if relevant Any attempt to create or manipulate other window IDs can be rejected If the target platform supports the graphics APIs in question Rendering context for Vulkan OpenGL 3 3 or OpenGL ES 3 0 Input handlers for keyboard and controller One or more audio drivers The audio driver can be located in the platform folder this is done for the Android and Web platforms or in the drivers folder if multiple platforms may be using this audio driver See the AudioServer singleton header for reference Crash handler for printing crash backtraces when the game crashes This allows for easier troubleshooting on platforms where logs aren t readily accessible Text to speech driver for accessibility Export handler for exporting from the editor including One click deploy Not required if you intend to export only a PCK from the editor then run the export template binary directly by renaming it to match the PCK file See the EditorExportPlatform header for reference run_icon svg 16 16 should be present within the platform folder if One click deploy is implemented for the target platform This icon is displayed at the top of the editor when one click deploy is set up for the target platform If the target platform doesn t support running Vulkan OpenGL 3 3 or OpenGL ES 3 0 you have two options Use a library at run time to translate Vulkan or OpenGL calls to another graphics API For example MoltenVK is used on macOS to translate Vulkan to Metal at run time Create a new renderer from scratch This is a large undertaking especially if you want to support both 2D and 3D rendering with advanced features Distributing a custom platform port Warning Before distributing a custom platform port make sure you re allowed to distribute all the code that is being linked against Console SDKs are typically under NDAs which prevent redistribution to the public Platform ports are designed to be as self contained as possible Most of the code can be kept within a single folder located in platform Like Custom modules in C this allows for streamlining the build process by making it possible to git clone a platform folder within a Godot repository clone s platform folder then run scons platform name No other steps are necessary for building unless third party platform specific dependencies need to be installed first However when a custom rendering backend is needed another folder must be added in drivers In this case the platform port can be distributed as a fork of the Godot repository or as a collection of several folders that can be added over a Godot Git repository clone User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Unit testing Godot Engine allows to write unit tests directly in C The engine integrates the doctest unit testing framework which gives ability to write test suites and test cases next to production code but since the tests in Godot go through a different main entry point the tests reside in a dedicated tests directory instead which is located at the root of the engine source code Platform and target support C unit tests can be run on Linux macOS and Windows operating systems Tests can only be run with editor tools enabled which means that export templates cannot be tested currently Running tests Before tests can be actually run the engine must be compiled with the tests build option enabled and any other build option you typically use as the tests are not compiled as part of the engine by default scons tests yes Copy to clipboard Once the build is done run the tests with a test command line option bin godot_binary test Copy to clipboard The test run can be configured with the various doctest specific command line options To retrieve the full list of supported options run the test command with the help option bin godot_binary test help Copy to clipboard Any other options and arguments after the test command are treated as arguments for doctest Note Tests are compiled automatically if you use the dev_mode yes SCons option dev_mode yes is recommended if you plan on contributing to the engine development as it will automatically treat compilation warnings as errors The continuous integration system will fail if any compilation warnings are detected so you should strive to fix all warnings before opening a pull request Filtering tests By default all tests are run if you don t supply any extra arguments after the test command But if you re writing new tests or would like to see the successful assertions output coming from those tests for debugging purposes you can run the tests of interest with the various filtering options provided by doctest The wildcard syntax is supported for matching any number of characters in test suites test cases and source file names Filter options Shorthand Examples test suite ts ts GDScript test case tc tc String source file sf sf test_color For instance to run only the String unit tests run bin godot_binary test test case String Copy to clipboard Successful assertions output can be enabled with the success s option and can be combined with any combination of filtering options above for instance bin godot_binary test source file test_color success Copy to clipboard Specific tests can be skipped with corresponding exclude options As of now some tests include random stress tests which take a while to execute In order to skip those kind of tests run the following command bin godot_binary test test case exclude Stress Copy to clipboard Writing tests Test suites represent C header files which must be included as part of the main test entry point in tests test_main cpp Most test suites are located directly under tests directory All header files are prefixed with test_ and this is a naming convention which the Godot build system relies on to detect tests throughout the engine Here s a minimal working test suite with a single test case written ifndef TEST_STRING_H define TEST_STRING_H include tests test_macros h namespace TestString TEST_CASE String Hello World String hello Hello World CHECK hello Hello World namespace TestString endif TEST_STRING_H Copy to clipboard Note You can quickly generate new tests using the create_test py script found in the tests directory This script automatically creates a new test file with the required boilerplate code in the appropriate location It s also able to automatically include the new header in tests test_main cpp using invasive mode i flag To view usage instructions run the script with the h flag The tests test_macros h header encapsulates everything which is needed for writing C unit tests in Godot It includes doctest assertion and logging macros such as CHECK as seen above and of course the definitions for writing test cases themselves See also tests test_macros h source code for currently implemented macros and aliases for them Test cases are created using TEST_CASE function like macro Each test case must have a brief description written in parentheses optionally including custom tags which allow to filter the tests at run time such as String Stress etc Test cases are written in a dedicated namespace This is not required but allows to prevent naming collisions for when other static helper functions are written to accommodate the repeating testing procedures such as populating common test data for each test or writing parameterized tests Godot supports writing tests per C module For instructions on how to write module tests refer to Writing custom unit tests Subcases In situations where you have a common setup for several test cases with only slight variations subcases can be very helpful Here s an example TEST_CASE SceneTree Node Testing node operations with a very simple scene tree common setup e g creating a scene tree with a few nodes SUBCASE Move node to specific index setup and checks for moving a node SUBCASE Remove node at specific index setup and checks for removing a node Copy to clipboard Each SUBCASE causes the TEST_CASE to be executed from the beginning Subcases can be nested to an arbitrary depth but it is advised to limit nesting to no more than one level deep Assertions A list of all commonly used assertions used throughout the Godot tests sorted by severity Assertion Description REQUIRE Test if condition holds true Fails the entire test immediately if the condition does not hold true REQUIRE_FALSE Test if condition does not hold true Fails the entire test immediately if the condition holds true CHECK Test if condition holds true Marks the test run as failing but allow to run other assertions CHECK_FALSE Test if condition does not hold true Marks the test run as failing but allow to run other assertions WARN Test if condition holds true Does not fail the test under any circumstance but logs a warning if something does not hold true WARN_FALSE Test if condition does not hold true Does not fail the test under any circumstance but logs a warning if something holds true All of the above assertions have corresponding _MESSAGE macros which allow to print optional message with rationale of what should happen Prefer to use CHECK for self explanatory assertions and CHECK_MESSAGE for more complex ones if you think that it deserves a better explanation See also doctest Assertion macros Logging The test output is handled by doctest itself and does not rely on Godot printing or logging functionality at all so it s recommended to use dedicated macros which allow to log test output in a format written by doctest Macro Description MESSAGE Prints a message FAIL_CHECK Marks the test as failing but continue the execution Can be wrapped in conditionals for complex checks FAIL Fails the test immediately Can be wrapped in conditionals for complex checks Different reporters can be chosen at run time For instance here s how the output can be redirected to an XML file bin godot_binary test source file test_validate success reporters xml out doctest txt Copy to clipboard See also doctest Logging macros Testing failure paths Sometimes it s not always feasible to test for an expected result With the Godot development philosophy of that the engine should not crash and should gracefully recover whenever a non fatal error occurs it s important to check that those failure paths are indeed safe to execute without crashing the engine Unexpected behavior can be tested in the same way as anything else The only problem this creates is that the error printing shall unnecessarily pollute the test output with errors coming from the engine itself even if the end result is successful To alleviate this problem use ERR_PRINT_OFF and ERR_PRINT_ON macros directly within test cases to temporarily disable the error output coming from the engine for instance TEST_CASE Color Constructor methods ERR_PRINT_OFF Color html_invalid Color html invalid ERR_PRINT_ON Don t forget to re enable CHECK_MESSAGE html_invalid is_equal_approx Color Invalid HTML notation should result in a Color with the default values Copy to clipboard Special tags in test case names These tags can be added to the test case name to modify or extend the test environment Tag Description SceneTree Required for test cases that rely on a scene tree with MessageQueue to be available It also enables a mock rendering server and ThemeDB Editor Like SceneTree but with additional editor related infrastructure available such as EditorSettings Audio Initializes the AudioServer using a mock audio driver Navigation Creates the default 2D 3D navigation servers and makes them available for testing You can use them together to combine multiple test environment extensions Testing signals The following macros can be use to test signals Macro Description SIGNAL_WATCH object signal_name Starts watching the specified signal on the given object SIGNAL_UNWATCH object signal_name Stops watching the specified signal on the given object SIGNAL_CHECK signal_name Vector Vector Variant Checks the arguments of all fired signals The outer vector contains each fired signal while the inner vector contains the list of arguments for that signal The order of signals is significant SIGNAL_CHECK_FALSE signal_name Checks if the specified signal was not fired SIGNAL_DISCARD signal_name Discards all records of the specified signal Below is an example demonstrating the use of these macros SUBCASE Timer Timer process timeout signal must be emitted SIGNAL_WATCH test_timer SNAME timeout test_timer start 0 1 SceneTree get_singleton process 0 2 Array signal_args signal_args push_back Array SIGNAL_CHECK SNAME timeout signal_args SIGNAL_UNWATCH test_timer SNAME timeout Copy to clipboard Test tools Test tools are advanced methods which allow you to run arbitrary procedures to facilitate the process of manual testing and debugging the engine internals These tools can be run by supplying the name of a tool after the test command line option For instance the GDScript module implements and registers several tools to help the debugging of the tokenizer parser and compiler bin godot_binary test gdscript tokenizer test gd bin godot_binary test gdscript parser test gd bin godot_binary test gdscript compiler test gd Copy to clipboard If any such tool is detected then the rest of the unit tests are skipped Test tools can be registered anywhere throughout the engine as the registering mechanism closely resembles of what doctest provides while registering test cases using dynamic initialization technique but usually these can be registered at corresponding register_types cpp sources per module or core Here s an example of how GDScript registers test tools in modules gdscript register_types cpp ifdef TESTS_ENABLED void test_tokenizer TestGDScript test TestGDScript TestType TEST_TOKENIZER void test_parser TestGDScript test TestGDScript TestType TEST_PARSER void test_compiler TestGDScript test TestGDScript TestType TEST_COMPILER REGISTER_TEST_COMMAND gdscript tokenizer test_tokenizer REGISTER_TEST_COMMAND gdscript parser test_parser REGISTER_TEST_COMMAND gdscript compiler test_compiler endif Copy to clipboard The custom command line parsing can be performed by a test tool itself with the help of OS get_cmdline_args method Integration tests for GDScript Godot uses doctest to prevent regressions in GDScript during development There are several types of test scripts which can be written tests for expected errors tests for warnings tests for features Therefore the process of writing integration tests for GDScript is the following Pick a type of a test script you d like to write and create a new GDScript file under the modules gdscript tests scripts directory within corresponding sub directory Write GDScript code The test script must have a function called test which takes no arguments Such function will be called by the test runner The test should not have any dependency unless it s part of the test too Global classes using class_name are registered before the runner starts so those should work if needed Here s an example test script func test if true Missing colon here print true Copy to clipboard Change directory to the Godot source repository root cd godot Copy to clipboard Generate out files to update the expected results from the output bin godot_binary gdscript generate tests modules gdscript tests scripts Copy to clipboard You may add the print filenames option to see filenames as their test outputs are generated If you are working on a new feature that is causing hard crashes you can use this option to quickly find which test file causes the crash and debug from there Run GDScript tests with bin godot_binary test test suite GDScript Copy to clipboard This also accepts the print filenames option see above If no errors are printed and everything goes well you re done Warning Make sure the output does have the expected values before submitting a pull request If gdscript generate tests produces out files which are unrelated to newly added tests you should revert those files back and only commit out files for new tests Note The GDScript test runner is meant for testing the GDScript implementation not for testing user scripts nor testing the engine using scripts We recommend writing new tests for already resolved issues related to GDScript at GitHub or writing tests for currently working features Note If your test case requires that there is no test function present inside the script file you can disable the runtime section of the test by naming the script file so that it matches the pattern notest gd For example test_empty_file notest gd User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Godot file formats GDScript grammar TSCN file format Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request GDScript grammar This is the formal grammar of GDScript written in EBNF for reference purposes Note This grammar is descriptive only derived from the reference documentation and current implementation The GDScript parser is not generated from a grammar definition Inconsistencies here likely mean an error in this grammar not a bug in GDScript GDScript EBNF grammar Uppercase words are terminals generated by the tokenizer INDENT DEDENT are not generated by the tokenizer yet but they are added here for reading convenience Naturally this only cover syntax Semantics can t be inferred from this description program inheritance NEWLINE className topLevelDecl inheritance extends IDENTIFIER STRING IDENTIFIER className class_name IDENTIFIER STRING NEWLINE topLevelDecl classVarDecl constDecl signalDecl enumDecl methodDecl constructorDecl innerClass tool classVarDecl onready export var IDENTIFIER typeHint expression setget NEWLINE setget setget IDENTIFIER IDENTIFIER export export BUILTINTYPE IDENTIFIER literal typeHint BUILTINTYPE IDENTIFIER constDecl const IDENTIFIER typeHint expression NEWLINE signalDecl signal IDENTIFIER signalParList NEWLINE signalParList IDENTIFIER IDENTIFIER enumDecl enum IDENTIFIER IDENTIFIER INTEGER IDENTIFIER INTEGER NEWLINE methodDecl rpc static func IDENTIFIER parList typeHint stmtOrSuite parList parameter parameter parameter var IDENTIFIER typeHint expression rpc remote master puppet remotesync mastersync puppetsync constructorDecl func IDENTIFIER parList argList stmtOrSuite argList expression expression innerClass class IDENTIFIER inheritance NEWLINE INDENT inheritance NEWLINE topLevelDecl topLevelDecl DEDENT stmtOrSuite stmt NEWLINE INDENT suite DEDENT suite stmt stmt stmt varDeclStmt ifStmt forStmt whileStmt matchStmt flowStmt assignmentStmt exprStmt assertStmt yieldStmt preloadStmt breakpoint stmtEnd pass stmtEnd stmtEnd NEWLINE ifStmt if expression stmtOrSuite elif expression stmtOrSuite else stmtOrSuite whileStmt while expression stmtOrSuite forStmt for IDENTIFIER in expression stmtOrSuite matchStmt match expression NEWLINE INDENT matchBlock DEDENT matchBlock patternList stmtOrSuite patternList stmtOrSuite patternList pattern pattern Note you can t have a binding in a pattern list but to not complicate the grammar more it won t be restricted syntactically pattern literal BUILTINTYPE CONSTANT _ bindingPattern arrayPattern dictPattern bindingPattern var IDENTIFIER arrayPattern pattern pattern dictPattern keyValuePattern keyValuePattern keyValuePattern STRING pattern flowStmt continue stmtEnd break stmtEnd return expression stmtEnd assignmentStmt subscription expression stmtEnd varDeclStmt var IDENTIFIER expression stmtEnd assertStmt assert expression STRING stmtEnd yieldStmt yield expression expression preloadStmt preload CONSTANT This expression grammar encodes precedence Items later in the list have higher precedence than the ones before exprStmt expression stmtEnd expression cast expression cast ternaryExpr as typeHint ternaryExpr logicOr if logicOr else logicOr logicOr logicAnd or logicAnd logicAnd logicNot and logicNot logicNot not logicNot in in comparison in comparison comparison bitOr bitOr bitOr bitXor bitXor bitXor bitAnd bitAnd bitAnd bitShift bitShift bitShift minus minus minus plus plus plus factor factor factor sign sign sign sign bitNot bitNot bitNot is is call is IDENTIFIER BUILTINTYPE call attribute argList IDENTIFIER argList STRING IDENTIFIER IDENTIFIER attribute subscription IDENTIFIER subscription primary expression primary true false null self literal arrayDecl dictDecl expression literal STRING NUMBER IDENTIFIER BUILTINTYPE PI TAU NAN INF arrayDecl expression expression dictDecl keyValue keyValue keyValue expression expression IDENTIFIER expression Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue TSCN file format The TSCN text scene file format represents a single scene tree inside Godot Unlike binary SCN files TSCN files have the advantage of being mostly human readable and easy for version control systems to manage The ESCN exported scene file format is identical to the TSCN file format but is used to indicate to Godot that the file has been exported from another program and should not be edited by the user from within Godot Unlike SCN and TSCN files during import ESCN files are compiled to binary SCN files stored inside the godot imported folder This reduces the data size and speeds up loading as binary formats are faster to load compared to text based formats To make files more compact properties equal to the default value are not stored in scene resource files It is possible to write them manually but they will be discarded when saving the file For those looking for a complete description the parsing is handled in the file resource_format_text cpp in the ResourceFormatLoaderText class Note The scene and resource file formats have changed significantly in Godot 4 with the introduction of string based UIDs to replace incremental integer IDs Mesh skeleton and animation data is also stored differently compared to Godot 3 You can read about some of the changes in this article Animation data rework for 4 0 Scenes and resources saved with Godot 4 x contain format 3 in their header whereas Godot 3 x uses format 2 instead File structure There are five main sections inside the TSCN file File descriptor External resources Internal resources Nodes Connections The file descriptor looks like gd_scene load_steps 4 format 3 uid uid cecaux1sm7mo0 and should be the first entry in the file The load_steps parameter is equal to the total amount of resources internal and external plus one for the file itself If the file has no resources load_steps is omitted The engine will still load the file correctly if load_steps is incorrect but this will affect loading bars and any other piece of code relying on that value uid is a unique string based identifier representing the scene This is used by the engine to track files that are moved around even while the editor is closed Scripts can also load UID based resources using the uid path prefix to avoid relying on filesystem paths This makes it possible to move around a file in the project but still be able to load it in scripts without having to modify the script Godot does not use external files to keep track of IDs which means no central metadata storage location is required within the project See this pull request for detailed information These sections should appear in order but it can be hard to distinguish them The only difference between them is the first element in the heading for all of the items in the section For example the heading of all external resources should start with ext_resource A TSCN file may contain single line comments starting with a semicolon However comments will be discarded when saving the file using the Godot editor Whitespace within a TSCN file is not significant except within strings but extraneous whitespace will be discarded when saving the file Entries inside the file A heading looks like resource_type key1 value1 key2 value2 key3 value3 where resource_type is one of ext_resource sub_resource node connection Below every heading comes zero or more key value pairs The values can be complex datatypes such as Arrays Transforms Colors and so on For example a Node3D looks like node name Cube type Node3D transform Transform3D 1 0 0 0 1 0 0 0 1 1 2 3 Copy to clipboard The scene tree The scene tree is made up of nodes The heading of each node consists of its name parent and most of the time a type For example node name PlayerCamera type Camera parent Player Head Other valid keywords include instance instance_placeholder owner index sets the order of appearance in the tree if absent inherited nodes will take precedence over plain ones groups The first node in the file which is also the scene root must not have a parent Path To Node entry in its heading All scene files should have exactly one scene root If it doesn t Godot will fail to import the file The parent path of other nodes should be absolute but shouldn t contain the scene root s name If the node is a direct child of the scene root the path should be Here is an example scene tree but without any node content node name Player type Node3D The scene root node name Arm type Node3D parent Parented to the scene root node name Hand type Node3D parent Arm Child of Arm node name Finger type Node3D parent Arm Hand Child of Hand Copy to clipboard Tip To make the file structure easier to grasp you can save a file with any given node or resource and then inspect it yourself in an external editor You can also make incremental changes in the Godot editor and keep an external text editor open on the tscn or tres file with auto reload enabled to see what changes Here is an example of a scene containing a RigidBody3D based ball with collision visuals mesh light and a camera parented to the RigidBody3D gd_scene load_steps 4 format 3 uid uid cecaux1sm7mo0 sub_resource type SphereShape3D id SphereShape3D_tj6p1 sub_resource type SphereMesh id SphereMesh_4w3ye sub_resource type StandardMaterial3D id StandardMaterial3D_k54se albedo_color Color 1 0 639216 0 309804 1 node name Ball type RigidBody3D node name CollisionShape3D type CollisionShape3D parent shape SubResource SphereShape3D_tj6p1 node name MeshInstance3D type MeshInstance3D parent mesh SubResource SphereMesh_4w3ye surface_material_override 0 SubResource StandardMaterial3D_k54se node name OmniLight3D type OmniLight3D parent light_color Color 1 0 698039 0 321569 1 omni_range 10 0 node name Camera3D type Camera3D parent transform Transform3D 1 0 0 0 0 939693 0 34202 0 0 34202 0 939693 0 1 3 Copy to clipboard NodePath A tree structure is not enough to represent the whole scene Godot uses a NodePath Path To Node structure to refer to another node or attribute of the node anywhere in the scene tree Paths are relative to the current node with NodePath pointing to the current node and NodePath pointing to no node at all For instance MeshInstance3D uses NodePath to point to its skeleton Likewise Animation tracks use NodePath to point to node properties to animate NodePath can also point to a property using a property_name suffix and even point to a specific component for vector transform and color types This is used by Animation resources to point to specific properties to animate For example NodePath MeshInstance3D scale x points to the x component of the scale Vector3 property in MeshInstance3D For example the skeleton property in the MeshInstance3D node called mesh points to its parent Armature01 node name mesh type MeshInstance3D parent Armature01 skeleton NodePath Copy to clipboard Skeleton3D The Skeleton3D node inherits the Node3D node but may also have a list of bones described in key value pairs in the format bones id attribute value The bone attributes consist of position Vector3 rotation Quaternion scale Vector3 These attributes are all optional For instance a bone may only define position or rotation without defining the other properties Here s an example of a skeleton node with two bones node name Skeleton3D type Skeleton3D parent PlayerModel Robot_Skeleton index 0 bones 1 position Vector3 0 114471 2 19771 0 197845 bones 1 rotation Quaternion 0 191422 0 0471201 0 00831942 0 980341 bones 2 position Vector3 2 59096e 05 0 236002 0 000347473 bones 2 rotation Quaternion 0 0580488 0 0310587 0 0085914 0 997794 bones 2 scale Vector3 0 9276 0 9276 0 9276 Copy to clipboard BoneAttachment3D The BoneAttachment3D node is an intermediate node to describe some node being parented to a single bone in a Skeleton node The BoneAttachment has a bone_name name of bone property as well as a property for the matching bone index An example of a Marker3D node parented to a bone in Skeleton node name GunBone type BoneAttachment3D parent PlayerModel Robot_Skeleton Skeleton3D index 5 transform Transform3D 0 333531 0 128981 0 933896 0 567174 0 763886 0 308015 0 753209 0 632331 0 181604 0 323915 1 07098 0 0497144 bone_name hand R bone_idx 55 node name ShootFrom type Marker3D parent PlayerModel Robot_Skeleton Skeleton3D GunBone transform Transform3D 1 0 0 0 1 0 0 0 1 0 0 4 0 Copy to clipboard AnimationPlayer The AnimationPlayer node works with one or more animation libraries stored in AnimationLibrary resources An animation library is a collection of individual Animation resources whose structure is documented here This split between animations themselves and animation libraries was done in Godot 4 so that animations can be imported separately from 3D meshes which is a common workflow in 3D animation software See the original pull request for details If the library name is empty then it acts acts the unique source of animations for this AnimationPlayer This allows using animation_name directly to play animations from script If you name the library then you must play it as library_name animation_name This ensures backwards compatibility and keeps the existing workflow if you don t want to use multiple animation libraries Resources Resources are components that make up the nodes For example a MeshInstance3D node will have an accompanying ArrayMesh resource The ArrayMesh resource may be either internal or external to the TSCN file References to the resources are handled by unique string based IDs in the resource s heading This is different from the uid property which each external resource also has but subresources don t External resources and internal resources are referred to with ExtResource id and SubResource id respectively Because there have different methods to refer to internal and external resources you can have the same ID for both an internal and external resource For example to refer to the resource ext_resource type Material uid uid c4cp0al3ljsjv path res material tres id 1_7bt6s you would use ExtResource 1_7bt6s External resources External resources are links to resources not contained within the TSCN file itself An external resource consists of a path a type a UID used to map its filesystem location to a unique identifier and an ID used to refer to the resource in the scene file Godot always generates absolute paths relative to the resource directory and thus prefixed with res but paths relative to the TSCN file s location are also valid Some example external resources are ext_resource type Texture2D uid uid ccbm14ebjmpy1 path res gradient tres id 2_eorut ext_resource type Material uid uid c4cp0al3ljsjv path material tres id 1_7bt6s Copy to clipboard Like TSCN files a TRES file may contain single line comments starting with a semicolon However comments will be discarded when saving the resource using the Godot editor Whitespace within a TRES file is not significant except within strings but extraneous whitespace will be discarded when saving the file Internal resources A TSCN file can contain meshes materials and other data These are contained in the internal resources section of the file The heading for an internal resource looks similar to those of external resources except that it doesn t have a path Internal resources also have key value pairs under each heading For example a capsule collision shape looks like sub_resource type CapsuleShape3D id CapsuleShape3D_fdxgg radius 1 0 height 3 0 Copy to clipboard Some internal resources contain links to other internal resources such as a mesh having a material In this case the referring resource must appear before the reference to it This means that order matters in the file s internal resources section ArrayMesh An ArrayMesh consists of several surfaces contained in the _surfaces array notice the leading underscore Each surface s data is stored in a dictionary with the following keys aabb The computed axis aligned bounding box for visibility attribute_data Vertex attribute data such as normals tangents vertex colors UV1 UV2 and custom vertex data bone_aabbs The axis aligned bounding box of each bone for visibility format The surface s buffer format index_count The number of indices in the surface This must match index_data s size index_data The index data which determines which vertices from vertex_data are drawn lods Level of detail variations stored as an array Each LOD level represents two values in the array The first value is the percentage of screen space the LOD level is most suited for edge length the second value is the list of indices that should be drawn for the given LOD level material The material used when drawing the surface name The surface s name This can be used in scripts and is imported from 3D DCCs primitive The surface s primitive type matching the Mesh PrimitiveType Godot enum 0 points 1 lines 2 line strip 3 triangles most common 4 triangle strip skin_data Bone weight data vertex_count Number of vertices in the surface This must match vertex_data s size vertex_data The vertex position data Here s an example of an ArrayMesh saved to its own tres file Some fields were shortened with for brevity gd_resource type ArrayMesh load_steps 2 format 3 uid uid dww8o7hsqrhx5 ext_resource type Material path res player model playerobot tres id 1_r3bjq resource resource_name player_Sphere_016 _surfaces aabb AABB 0 207928 1 21409 0 14545 0 415856 0 226569 0 223374 attribute_data PackedByteArray 63 121 117 63 bone_aabbs AABB 0 0 0 1 1 1 AABB 0 207928 1 21409 0 14545 0 134291 0 226569 0 223374 format 7191 index_count 1224 index_data PackedByteArray 30 0 150 4 lods 0 0382013 PackedByteArray 33 1 150 4 material ExtResource 1_r3bjq name playerobot primitive 3 skin_data PackedByteArray 15 0 0 0 vertex_count 1250 vertex_data PackedByteArray 196 169 11 38 blend_shape_mode 0 Copy to clipboard Animation Each animation has the following properties length The animation s length in seconds Note that keyframes may be placed outside the 0 length interval but they may have no effect depending on the interpolation mode chosen loop_mode 0 no looping 1 wrap around looping 2 clamped looping step The step size to use when editing this animation in the editor This is only used in the editor it doesn t affect animation playback in any way Each track is described by a list of key value pairs in the format tracks id attribute Each track includes type The track s type This defines what kind of properties may be animated by this track and how it ll be exposed to the user in the editor Valid types are value generic property track position_3d rotation_3d scale_3d blend_shape optimized 3D animation tracks method method call tracks bezier Bezier curve tracks audio audio playback tracks animation tracks that play other animations imported true if the track was created from an imported 3D scene false if it was manually created by the user in the Godot editor or using a script enabled true if the track is effective false if it was disabled in the editor path Path to the node property that will be affected by the track The property is written after the node path with a separator interp The interpolation mode to use 0 nearest 1 linear 2 cubic 3 linear angle 4 cubic angle loop_wrap true if the track is designed to wrap around when the animation is looping false if the track clamps to the first last keyframes keys The animation track s values This attribute s structure depends on the type Here is a scene containing an AnimationPlayer that scales down a cube over time using a generic property track The AnimationLibrary workflow was not used so the animation library has an empty name but the animation is still given a scale_down name Note that the RESET track was not created in this AnimationPlayer for brevity gd_scene load_steps 4 format 3 uid uid cdyt3nktp6y6 sub_resource type Animation id Animation_r2qdp resource_name scale_down length 1 5 loop_mode 2 step 0 05 tracks 0 type value tracks 0 imported false tracks 0 enabled true tracks 0 path NodePath Box scale tracks 0 interp 1 tracks 0 loop_wrap true tracks 0 keys times PackedFloat32Array 0 1 transitions PackedFloat32Array 1 1 update 0 values Vector3 1 1 1 Vector3 0 0 0 sub_resource type AnimationLibrary id AnimationLibrary_4qx36 _data scale_down SubResource Animation_r2qdp sub_resource type BoxMesh id BoxMesh_u688r node name Node3D type Node3D node name AnimationPlayer type AnimationPlayer parent autoplay scale_down libraries SubResource AnimationLibrary_4qx36 node name Box type MeshInstance3D parent mesh SubResource BoxMesh_u688r Copy to clipboard For generic property value tracks keys is a dictionary containing 3 arrays with positions in times PackedFloat32Array easing values in transitions PackedFloat32Array and values in values Array There is an additional update property which is an integer with the values 0 continuous 1 discrete 2 capture Here is a second Animation resource that makes use of the 3D Position and 3D Rotation tracks These tracks in addition to the 3D Scale track replace Transform tracks from Godot 3 They are optimized for fast playback and can optionally be compressed The downside of these optimized track types is that they can t use custom easing values Instead all keyframes use linear interpolation That said you can still opt for using nearest or cubic interpolation for all keyframes in a given track by changing the track s interpolation mode sub_resource type Animation id Animation_r2qdp resource_name move_and_rotate length 1 5 loop_mode 2 step 0 05 tracks 0 type position_3d tracks 0 imported false tracks 0 enabled true tracks 0 path NodePath Box tracks 0 interp 1 tracks 0 loop_wrap true tracks 0 keys PackedFloat32Array 0 1 0 0 0 1 5 1 1 5 1 0 tracks 1 type rotation_3d tracks 1 imported false tracks 1 enabled true tracks 1 path NodePath Box tracks 1 interp 1 tracks 1 loop_wrap true tracks 1 keys PackedFloat32Array 0 1 0 211 0 047 0 211 0 953 1 5 1 0 005 0 976 0 216 0 022 Copy to clipboard For 3D position rotation and scale tracks keys is a PackedFloat32Array with all values stored in a sequence In the visual guide below T is the keyframe s time in seconds since the start of the animation E is the keyframe s transition currently always 1 For 3D position and scale tracks X Y Z are the Vector3 s coordinates For 3D rotation tracks X Y Z and W are the Quaternion s coordinates For 3D position and scale which use Vector3 tracks id keys PackedFloat32Array T E X Y Z T E X Y Z For 3D rotation which use Quaternion tracks id keys PackedFloat32Array T E X Y Z W T E X Y Z W Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Editor development Introduction to editor development Editor icons Editor style guide Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Introduction to editor development On this page you will learn The design decisions behind the Godot editor How to work efficiently on the Godot editor s C code This guide is aimed at current or future engine contributors To create editor plugins in GDScript see Making plugins instead See also If you are new to Godot we recommended you to read Godot s design philosophy before continuing Since the Godot editor is a Godot project written in C much of the engine s philosophy applies to the editor Technical choices The Godot editor is drawn using Godot s renderer and UI system It does not rely on a toolkit such as GTK or Qt This is similar in spirit to software like Blender While using toolkits makes it easier to achieve a native appearance they are also quite heavy and their licensing is not compatible with Godot s The editor is fully written in C It can t contain any GDScript or C code Directory structure The editor s code is fully self contained in the editor folder of the Godot source repository Some editor functionality is also implemented via modules Some of these are only enabled in editor builds to decrease the binary size of export templates See the modules folder in the Godot source repository Some important files in the editor are editor editor_node cpp Main editor initialization file Effectively the main scene of the editor editor project_manager cpp Main Project Manager initialization file Effectively the main scene of the Project Manager editor plugins canvas_item_editor_plugin cpp The 2D editor viewport and related functionality toolbar at the top editing modes overlaid helpers panels editor plugins node_3d_editor_plugin cpp The 3D editor viewport and related functionality toolbar at the top editing modes overlaid panels editor plugins node_3d_editor_gizmos cpp Where the 3D editor gizmos are defined and drawn This file doesn t have a 2D counterpart as 2D gizmos are drawn by the nodes themselves Editor dependencies in scene files When working on an editor feature you may have to modify files in Godot s GUI nodes which you can find in the scene folder One rule to keep in mind is that you must not introduce new dependencies to editor includes in other folders such as scene This applies even if you use ifdef TOOLS_ENABLED To make the codebase easier to follow and more self contained the allowed dependency order is editor scene servers core This means that files in editor can depend on includes from scene servers and core But for example while scene can depend on includes from servers and core it cannot depend on includes from editor Currently there are some dependencies to editor includes in scene files but they are in the process of being removed Development tips To iterate quickly on the editor we recommend to set up a test project and open it from the command line after compiling the editor This way you don t have to go through the Project Manager every time you start Godot User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Editor icons When a new class is created and exposed to scripting the editor s interface will display it with a default icon representing the base class it inherits from In most cases it s still recommended to create icons for new classes to improve the user experience Creating icons To create new icons you first need a vector graphics editor installed For instance you can use the open source Inkscape editor Clone the godot repository containing all the editor icons git clone https github com godotengine godot git Copy to clipboard The icons must be created in a vector graphics editor in SVG format There are two main requirements to follow Icons must be 16 16 In Inkscape you can configure the document size in File Document Properties Lines should be snapped to pixels whenever possible to remain crisp at lower DPI You can create a 16 16 grid in Inkscape to make this easier Once you re satisfied with the icon s design save the icon in the cloned repository s editor icons folder The icon name should match the intended name in a case sensitive manner For example to create an icon for CPUParticles2D name the file CPUParticles2D svg Color conversion for light editor themes If the user has configured their editor to use a light theme Godot will convert the icon s colors based on a set of predefined color mappings This is to ensure the icon always displays with a sufficient contrast rate Try to restrict your icon s color palette to colors found in the list above Otherwise your icon may become difficult to read on a light background Icon optimization Because the editor renders SVGs once at load time they need to be small in size so they can be efficiently parsed Editor icons must be first optimized before being added to the engine to do so Install svgcleaner by downloading a binary from its Releases tab and placing it into a location in your PATH environment variable Run the command below replacing svg_source svg with the path to your SVG file which can be a relative or absolute path svgcleaner multipass svg_source svg svg_optimized svg Copy to clipboard The multipass switch improves compression so make sure to include it The optimized icon will be saved to svg_optimized svg You can also change the destination parameter to any relative or absolute path you d like Note While this optimization step won t impact the icon s quality noticeably it will still remove editor only information such as guides Therefore it s recommended to keep the source SVG around if you need to make further changes Integrating and sharing the icons If you re contributing to the engine itself you should make a pull request to add optimized icons to editor icons in the main repository Recompile the engine to make it pick up new icons for classes It s also possible to create custom icons within a module If you re creating your own module and don t plan to integrate it with Godot you don t need to make a separate pull request for your icons to be available within the editor as they can be self contained For specific instructions on how to create module icons refer to Creating custom module icons Troubleshooting If icons don t appear in the editor make sure that Each icon s filename matches the naming requirement as described previously modules svg is enabled it should be enabled by default Without it icons won t appear in the editor at all References editor icons User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Editor style guide Introduction Thanks for your interest in contributing to the Godot editor This page describes the grammar and writing style used throughout the Godot editor Following this style guide will help your contribution get merged faster since there will be fewer review steps required Writing style Write messages errors warnings as full sentences They should start with an uppercase letter and end with a period Try to keep sentences short This makes it more likely that their translations will be short as well which is a good thing to avoid UI bugs Use contractions For example use isn t instead of is not An exception to this rule can be made when you specifically want to emphasize one of the contraction s words Use double quotes in messages instead of single quotes Double quotes should be used to quote user input file paths and possibly other things depending on the context See also Try to follow the Writing guidelines in addition to the guidelines outlined above Button and menu texts Capitalize text in buttons and menu actions Good Open Editor Data Folder Bad Open editor data folder If a menu action opens a modal dialog suffix it with an ellipsis Good Editor Settings Bad Editor Settings Inspector sections In general don t create sections that contain less than 3 items Sections that contain few items make it difficult to navigate the inspector while missing the benefits of using sections such as folding There are some valid exceptions for this such as material features in StandardMaterial3D This advice also applies to the Project Settings and Editor Settings Inspector performance hints Enum properties that noticeably impact performance should have a performance hint associated The hint should refer to the absolute performance impact rather than being relative to the other options provided in the enum Here are some examples taken from the Godot editor Screen space antialiasing Disabled Fastest FXAA Fast MSAA quality Disabled Fastest 2x Fast 4x Average 8x Slow 16x Slower DirectionalLight mode Orthogonal Fast PSSM 2 Splits Average PSSM 4 Splits Slow For consistency try to stick to the terms below from fastest to slowest Fastest Faster Fast Average Slow Slower Slowest Their usage doesn t have to be contiguous For example you can use only Fast and Slow from the list above If you re adding a new enum its values should be ordered from the fastest option to the slowest option Tooltips Consider adding tooltips whenever the action performed by a button or menu action isn t obvious You can also provide additional context or highlight caveats in the tooltip You can do this by calling set_tooltip TTR Text here on the Control based node in question If the tooltip is particularly long more than 80 characters wrap it over several lines by adding line breaks using n Tooltips should follow the writing style described above In addition to this use indicative mood instead of imperative mood Good Computes global illumination for the selected GIProbe Bad Compute global illumination for the selected GIProbe User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Writing documentation We always need help to improve the documentation be it the class reference or the manual Below you can find our content and writing guidelines and concrete guides to make changes to the documentation Be sure to also check the workflow guidelines especially if you re new to using Git or GitHub Guidelines Here are the principles and guidelines we strive to follow to write accessible documentation Content guidelines Writing guidelines Creating documentation images and videos Writing the manual These articles explain how to contribute to this very documentation and how to build the online version locally for testing Contributing to the documentation Building the manual with Sphinx Class reference guides The pages below focus on the class reference As the reference is included in the Godot editor its source files are part of the godot repository We use XML files to write it so the process to contribute to the class reference differs from writing the online manual Contributing to the class reference Class reference primer Translating the documentation The community is always working hard on making Godot and its documentation available to more people Localizing the documentation is a colossal and ongoing effort you can be part of Editor and documentation localization Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Content guidelines This document outlines what should be included in the official documentation Below you will find a couple of principles and recommendations for writing accessible content We want to achieve two goals Empathize with our users We should write in a way that makes it easy for them to learn from the docs Write a complete reference manual Our goal here is not to teach programming fundamentals Instead our goal is to provide a reference for how Godot s features work Guidelines and principles Below are the guidelines we should strive to follow They are not hard rules though sometimes a topic will require breaking one or more of them Still we should strive to achieve the two goals listed above Writing complete and accessible documentation A feature doesn t exist unless it is documented If a user can t find information about a feature and how it works it doesn t exist to them We should ensure that we cover everything Godot does Note When adding or updating an engine feature the documentation team needs to know about it Contributors should open an issue on the godot docs repository when their work gets merged and requires documentation Do your best to keep documents under 1000 words in length If a page goes past that threshold consider splitting it into two parts Limiting page size forces us to write concisely and to break up large documents so that each page focuses on a particular problem Each page or section of a page should clearly state what problem it tackles and what it will teach the user Users need to know if they re reading the correct guide for solving the problems they re encountering For example instead of writing the heading Signals consider writing Reacting to changes with signals The second title makes it clear what the purpose of signals is Note Long section titles lead to long entries in the side menu which can make navigation cumbersome Try to keep headings five words long or less If the page assumes specific knowledge of other Godot features mention it and link to the corresponding documentation For instance a page about physics may use signals in which case you could note that the signals tutorial is a prerequisite You may also link to other websites for prerequisites beyond the documentation s scope For example you could link to an introduction to programming in the getting started guide or a website that teaches math theory in the math section Limiting cognitive load Limit the cognitive load required to read the documentation The simpler and more explicit language we use the more efficient it becomes for people to learn You can do so by Introducing only one new concept at a time whenever possible Using simple English as we recommend in our writing guidelines Including one or more concrete usage examples Prefer a real world example to one that uses names like foo bar or baz While many people may understand more complex language and abstract examples you will lose others Understandable writing and practical examples benefit everyone Always make an effort to put yourself in the user s shoes When we understand something thoroughly it becomes obvious to us We may fail to think about details relevant to a newcomer but good documentation meets users where they are We should explain each feature s capabilities or intended uses with the most straightforward language possible Try to remember what you first needed to know when learning about the feature or concept What new terms did you need to learn What confused you What was the hardest to grasp You will want users to review your work and we recommend you practice explaining the feature before writing about it Note Programming fundamentals are a prerequisite for using a complex engine like Godot Talking about variables functions or classes is acceptable But we should favor plain language over specific terminology like metaprogramming If you need to use precise terms be sure to define them User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Writing guidelines The Godot community is rich and international Users come from all around the world Some of them are young and many aren t native English speakers That s why we must all write using a clear and a common language For the class reference the goal is to make it easy to read for everyone and precise In summary always try to Use the active voice Use precise action verbs Avoid verbs that end in ing Remove unnecessary adverbs and adjectives Ban these 8 words obvious simple basic easy actual just clear and however Use explicit references Use s to show possession Use the Oxford comma There are 3 rules to describe classes Give an overview of the node in the brief description Mention what methods return if it s useful Use if true to describe booleans Note A technical writer s job is to pack as much information as possible into the smallest and clearest sentences possible These guidelines will help you work towards that goal See also See the content guidelines for information on the types of documentation you can write in the official documentation 7 rules for clear English Use the active voice Use the active voice when possible Take the classes methods and constants you describe as the subject It s natural to write using the passive voice but it s harder to read and produces longer sentences Passive The man was bitten by the dog Copy to clipboard Active The dog bit the man Copy to clipboard Don t use the passive voice void edit_set_pivot Vector2 pivot This method is implemented only in some nodes that inherit Node2D Copy to clipboard Do use the node s name as a noun void edit_set_pivot Vector2 pivot Only some Node2Ds implement this method Copy to clipboard Use precise action verbs Favor precise yet common verbs over generic ones like make set and any expression you can replace with a single word Don t repeat the method s name It already states it sets the pivot value to a new one void edit_set_pivot Vector2 pivot Set the pivot position of the 2D node to code pivot code value Copy to clipboard Do explain what s the consequence of this set use precise verbs like place position rotate fade etc void edit_set_pivot Vector2 pivot Position the node s pivot to the code pivot code value Copy to clipboard Avoid verbs that end in ing The progressive forms describe continuous actions E g is calling is moving Don t use the progressive form for instant changes Vector2 move Vector2 rel_vec Move the body in the given direction stopping if there is an obstacle Copy to clipboard Do use simple present past or future Vector2 move Vector2 rel_vec Moves the body in the vector s direction The body stops if it collides with an obstacle Copy to clipboard Exception If the subject is not clear replacing ing verbs is not an improvement For example in the previous sentence it replaces would not make much sense where replacing currently is You may use the progressive tense to describe actions that are continuous in time Anything like animation or coroutines Tip Verbs can turn into adjectival nouns with ing This is not a conjugation so you may use them the remaining movement the missing file etc Remove unnecessary adverbs and adjectives Write as few adjectives and adverbs as possible Only use them if they add key information to the description Don t use redundant or meaningless adverbs Words that lengthen the documentation but don t add any information Basically a big texture Copy to clipboard Do write short sentences in a simple descriptive language A big texture Copy to clipboard Ban these 8 words Don t ever use these 8 banned words obvious simple basic easy actual just clear however some uses Game creation and programming aren t simple and nothing s easy to someone learning to use the API for the first time Other words in the list like just or actual won t add any info to the sentence Don t use corresponding adverbs either obviously simply basically easily actually clearly Don t example The banned words lengthen the description and take attention away from the most important info TextureRect Control frame that simply draws an assigned texture It can stretch or not It s a simple way to just show an image in a UI Copy to clipboard Do remove them TextureRect Control node that displays a texture The texture can stretch to the node s bounding box or stay in the center Useful to display sprites in your UIs Copy to clipboard Simple never helps Remember for other users anything could be complex or frustrate them There s nothing like a good old it s simple to make you cringe Here s the old brief description the first sentence on the Timer node s page Timer A simple Timer node Copy to clipboard Do explain what the node does instead Timer Calls a function of your choice after a certain duration Copy to clipboard Don t use basic it is too vague Vector3 Vector class which performs basic 3D vector math operations Copy to clipboard Do use the brief description to offer an overview of the node Vector3 Provides essential math functions to manipulate 3D vectors cross product normalize rotate etc Copy to clipboard Use explicit references Favor explicit references over implicit ones Don t use words like the former the latter etc They re not the most common in English and they require you to check the reference code w code and code h code define right and bottom margins The latter two resize the texture so it fits in the defined margin Copy to clipboard Do repeat words They remove all ambiguity code w code and code h code define right and bottom margins code w code and code h code resize the texture so it fits the margin Copy to clipboard If you need to repeat the same variable name 3 or 4 times you probably need to rephrase your description Use s to show possession Avoid The milk of the cow It feels unnatural in English Write The cow s milk instead Don t write of the X The region of the AtlasTexture that is used Copy to clipboard Do use s It lets you put the main subject at the start of the sentence and keep it short The AtlasTexture s used region Copy to clipboard Use the Oxford comma to enumerate anything From the Oxford dictionary The Oxford comma is an optional comma before the word and at the end of a list We sell books videos and magazines Not all writers and publishers use it but it can clarify the meaning of a sentence when the items in a list are not single words These items are available in black and white red and yellow and blue and green Don t leave the last element of a list without a comma Create a CharacterBody2D node a CollisionShape2D node and a sprite node Copy to clipboard Do add a comma before and or or for the last element of a list with more than two elements Create a CharacterBody2D node a CollisionShape2D node and a sprite node Copy to clipboard How to write methods and classes Dynamic vs static typing The code examples in the documentation should follow a consistent style not to confuse users As static type hints are an optional feature of GDScript we chose to stick to writing dynamic code This leads to writing GDScript that is concise and accessible The exception is topics that explain static typing concepts to users Don t add a type hint with a colon or by casting const MainAttack preload res fire_attack gd var hit_points 5 var name String Bob var body_sprite Sprite2D as Sprite2D Copy to clipboard Do write constants and variables with dynamic typing const MainAttack preload res fire_attack gd var hit_points 5 var name Bob var body_sprite Sprite2D Copy to clipboard Don t write functions with inferred arguments or return types func choose arguments PackedStringArray String Chooses one of the arguments from array with equal chances randomize var size arguments size var choice int randi size return arguments choice Copy to clipboard Do write functions using dynamic typing func choose arguments Chooses one of the arguments from array with equal chances randomize var size arguments size var choice randi size return arguments choice Copy to clipboard Use real world code examples where appropriate Real world examples are more accessible to beginners than abstract foos and bars You can also copy them directly from your game projects ensuring that any code snippet compiles without errors Writing var speed 10 rather than var my_var 10 allows beginners to understand code better It gives them a frame of reference as to where they could use the code snippets in a live project Don t write made up examples onready var a preload res MyPath onready var my_node MyNode func foo Do stuff Copy to clipboard Do write concrete examples onready var sfx_player_gun preload res Assets Sound SFXPlayerGun ogg onready var audio_player Audio AudioStreamPlayer func play_shooting_sound audio_player stream sfx_player_gun audio_player play Copy to clipboard Of course there are times when using real world examples is impractical In those situations you should still avoid using names such as my_var foo or my_func and consider more meaningful names for your examples Give an overview of the node in the brief description The brief description is the reference s most important sentence It s the user s first contact with a node It s the only description in the Create New Node dialog It s at the top of every page in the reference The brief description should explain the node s role and its functionality in up to 200 characters Don t write tiny and vague summaries Node2D Base node for 2D system Copy to clipboard Do give an overview of the node s functionality Node2D A 2D game object inherited by all 2D related nodes Has a position rotation scale and Z index Copy to clipboard Use the node s full description to provide more information and a code example if possible Mention what methods return if it s useful Some methods return important values Describe them at the end of the description ideally on a new line No need to mention the return values for any method whose name starts with set or get Don t use the passive voice Vector2 move Vector2 rel_vec The returned vector is how much movement was remaining before being stopped Copy to clipboard Do always use Returns Vector2 move Vector2 rel_vec Returns the remaining movement before the body was stopped Copy to clipboard Notice the exception to the direct voice rule with the move method an external collider can influence the method and the body that calls move In this case you can use the passive voice Use if true to describe booleans For boolean member variables always use if true and or if false to stay explicit Controls whether or not may be ambiguous and won t work for every member variable Also surround boolean values variable names and methods with code code Do start with if true Timer autostart If code true code the timer will automatically start when entering the scene tree Copy to clipboard Use code around arguments In the class reference always surround arguments with code code In the documentation and in Godot it will display like this When you edit XML files in the Godot repository replace existing arguments written like this or this with code this code Common vocabulary to use in Godot s documentation The developers chose some specific words to refer to areas of the interface They re used in the sources in the documentation and you should always use them instead of synonyms so the users know what you re talking about Overview of the interface and common vocabulary In the top left corner of the editor lie the main menus In the center the buttons change the workspace And together the buttons in the top right are the playtest buttons The area in the center that displays the 2D or the 3D space is the viewport At its top you find a list of tools inside the toolbar The tabs or dockable panels on either side of the viewport are docks You have the FileSystem dock the Scene dock that contains your scene tree the Import dock the Node dock and the Inspector or Inspector dock With the default layout you may call the tabbed docks tabs the Scene tab the Node tab The Animation Debugger etc at the bottom of the viewport are panels Together they make up the bottom panels Foldable areas of the Inspector are sections The node s parent class names which you can t fold are Classes e g the CharacterBody2D class And individual lines with key value pairs are properties E g position or modulate color are both properties Keyboard shortcut guidelines Keyboard and mouse shortcuts should make use of the kbd tag which allows shortcuts to stand out from the rest of the text and inline code Use the compact form for modifier keys Ctrl Cmd instead of their spelled out form Control Command For combinations use the symbol with a space on either side of the symbol Make sure to mention shortcuts that differ on macOS compared to other platforms You can find a list of all shortcuts including what they are on macOS on this page Try to integrate the shortcut into sentences the best you can Here are some examples with the kbd tag left as is for better visibility Press kbd Ctrl Alt T to toggle the panel kbd Opt Cmd T on macOS Press kbd Space and hold the left mouse button to pan in the 2D editor Press kbd Shift Up Arrow to move the node upwards by 8 pixels User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Creating documentation images and videos Throughout the documentation images are often needed to make the explanation of a feature or concept as clear as possible for a reader This page will explain the process from beginning to end Images Capturing an image To take a picture of something in Godot a screen capture tool can be used On Windows 10 and 11 that would be the Snip Sketch program Pressing Windows Shift S lets you take a screenshot of a portion of the screen and save it to the clipboard After pressing those keys click and drag over the area you wish to take a picture of On macOS pressing Shift Command 3 does the same To take a picture of the entire screen press Shift Command 4 All screenshots taken will be saved to the desktop Each Linux desktop environment has it s own screenshot tool For example on KDE Plasma the program Spectacle is used for taking screenshots If your distribution doesn t come with one by default try searching its package repository or Flathub if that s supported All screenshots should ideally be taken on a 1080p screen Anything higher resolution is adding detail that doesn t make the documentation better and dramatically increases file size If you re taking screenshots on a higher resolution screen the screenshot should be scaled down There are instructions on how to do this later on this page Format conversion The current format for images in Godot s documentation is WebP webp While some Linux programs will support saving screenshots in this format macOS and the Snip Sketch program on Windows do not For images that don t need editing such as precise cropping or adding outlines Squoosh can be used Squoosh is a converter developed by Google is open source and doesn t give Google any image rights by using it When choosing compression if you can get an image that s under 300KB in size use lossless compression If it s over 300KB use just enough lossy compression to get it under that size If this results in noticeable compression artifacts using less compression is fine even if the file size is bigger If you already have an image editor such as GIMP Krita or Photoshop installed it may have the ability to open an image then save it as a WebP file Cropping For a screenshot of a 2D or 3D scene in the editor the above steps will be enough But for most UI images some extra work should be done specifically cropping to make an image look clean Below is an example of good cropping For cropping Krita is the recommended program While some screenshot programs do have cropping built in it s not always easy to get something precise And while Krita is designed as a painting program the cropping tool gives you pixel precision by default Of course feel free to use a different program you are familiar with If you ve never used Krita before download it from the official Krita website on Linux you may also be able to download it from your distributions repository flathub is also an option Once it s installed on your computer open Krita then open the image you want to crop This button on the left panel is the crop tool After selecting it click on the image you should now have cropping tools available Click and drag the white boxes to adjust what gets cropped if you zoom in close to the image you will see the individual pixels in an image which is useful for precision If you make a mistake and overcrop don t worry cropping is non destructive in Krita and can be adjusted Click on the image with your cropping tool still selected and the controls will return Scaling down an image As explained earlier on this page all images taken on a screen that is a higher resolution than 1080p should be scaled down To do this in Krita click on Image on the top bar and from the dropdown menu select Scale Image To New Size This menu can also be opened by pressing Ctrl Alt I On this menu you want to adjust the pixel dimensions For anything taken on a 4K monitor change the value of the width and height to half of its current value for anything taken on a 1440p monitor multiply the width and height by 0 75 Make sure the Constrain Proportions box at the bottom of the menu is checked so you only have to change 1 value Saving as WebP in Krita To save an image as webp if it isn t already one Go to File Save As Select webp from the Save as type dropdown then choose wherever you want to save it After clicking Save a menu will popup with webp options Make sure Lossless is checked and Quality is set to 100 This means the image will not lose detail and will be as small as possible If the image is over 300KB in size try compressing it losslessly using Squoosh If it s still over 300KB change to lossy compression and slowly increase the compression until it s under 300KB If this results in noticeable compression artifacts using less compression is fine even if the file size is bigger Outlines arrows and text Sometimes an image needs something extra to properly direct the readers attention or make something clear Outlines and arrows can be used for this purpose For these types of edits Inkscape is the recommended open source program it can be downloaded from the official Inkscape website Like Krita if you re on Linux you can also check your distributions repository or get it from Flathub A full tutorial on creating outlines is not provided here we recommend searching for various tutorials on how to use it online However there are two standards for doc image outlines and arrows First the color should be yellow specifically this hex color fffb44 fffb44ff if there is a transparency value like in Inkscape This color was chosen specifically to make sure color blind people do not have issues reading the documentation other colors can be used in addition to this yellow if multiple outlines on an image are needed red should be avoided The second standard is that all outlines and arrow lines should be 2 pixels wide Finally some images might require text to differentiate multiple parts of an image There are no strict requirements other than use an easy to read non fancy font As for color the yellow color from before should also be used but black or other colors can be used if appropriate For example if yellow blends into the image or if there are multiple outlines in multiple colors Adding an image to a documentation page Once you ve finished working on your image it can be added to the documentation All images are stored in folders named img next to the page they are used in To add your image add it to the img folder that s in the same folder as the rst file for the page create it if it doesn t exist In the rst page images should be included with the following code snippet image img documentation_image webp Copy to clipboard Where documentation_image webp would be changed to the name of the image you created Name your images in a way that makes their meaning clear possibly with a prefix that makes their relationship to a documentation page explicit Videos Capturing a video To record a video of something in Godot a screen capture tool can be used Operating systems generally don t come with tools that are flexible enough for this so you ll need to install a third party utility OBS Studio is the most popular option but SimpleScreenRecorder can be used as an alternative on Linux ShareX can be used as an alternative on Windows All these tools can be configured to record the entire screen a specific window or a predetermined rectangle The recommended framerate for video recordings is 60 FPS although you can use 30 FPS for longer videos to reduce their file size For fullscreen videos use a resolution of 1280 720 Note Godot s Movie Maker mode can be used to record the output of a running project including its audio This doesn t require installing any third party software and avoids any frame drops even when recording on a slow device but it s less flexible Compressing the captured video The recommendation is to record your video in the highest quality possible without dropping frames due to excessive CPU GPU utilization then re encode it later to reduce its file size This results in more efficient compression than directly aiming for a small file size as real time compression methods are less efficient than slower compression methods To re encode videos for a smaller file size use HandBrake or the FFmpeg https ffmpeg org command line below ffmpeg i input mp4 crf 23 output webm Copy to clipboard The number after crf adjusts the video quality with higher numbers resulting in lower quality and smaller file sizes A CRF of 23 is a good starting point but you may need to use a higher value for longer videos to ensure the file size remains reasonable Try to aim for a file size under 2 MB if possible If the video was recorded in a higher resolution or framerate you can adjust its output resolution and framerate as follows ffmpeg i input mp4 crf 23 vf scale 1280 2 r 30 output webm Copy to clipboard This results in a video resolution around 1280 720 at 30 FPS The exact video resolution will vary depending on the source s aspect ratio Tip If the video was recorded with an audio track but this audio track is not necessary consider stripping it by adding the an option to the FFmpeg command line before the output file name This will reduce file size and also ensure audio controls don t show up on the video when played in a browser Adding a video to a documentation page Once you ve finished working on your video it can be added to the documentation All videos are stored in folders named video next to the page they are used in To add your video add it to the video folder that s in the same folder as the rst file for the page create it if it doesn t exist In the rst page videos should be included with the following code snippet video video csg_tools webm alt Put a text description of the video here autoplay loop muted Copy to clipboard Where documentation_video webp would be changed to the name of the video you created Name your videos in a way that makes their meaning clear possibly with a prefix that makes their relationship to a documentation page explicit The autoplay loop and muted flags should always be specified unless the video needs to play audio In this case do not specify any of these flags User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Contributing to the documentation This guide explains how to contribute to Godot s documentation be it by writing or reviewing pages See also If you want to translate pages or the class reference from English to other languages read Editor and documentation localization Getting started To modify or create pages in the reference manual you need to edit rst files in the godot docs GitHub repository Modifying those pages in a pull request triggers a rebuild of the online documentation upon merging See also For details on Git usage and the pull request workflow please refer to the Pull request workflow page Most of what it describes regarding the main godotengine godot repository is also valid for the docs repository Warning The class reference s source files are in the Godot engine repository We generate the Class Reference section of this documentation from them If you want to update the description of a class its methods or properties read Contributing to the class reference What is the Godot documentation The Godot documentation is intended as a comprehensive reference manual for the Godot game engine It is not meant to contain step by step tutorials except for two game creation tutorials in the Getting Started section We strive to write factual content in an accessible and well written language To contribute you should also read Writing guidelines There you will find rules and recommendations to write in a way that everyone understands Content guidelines They explain the principles we follow to write the documentation and the kind of content we accept Contributing changes Pull Requests should use the master branch by default Only make Pull Requests against other branches e g 2 1 or 3 0 if your changes only apply to that specific version of Godot Though less convenient to edit than a wiki this Git repository is where we write the documentation Having direct access to the source files in a revision control system is a plus to ensure our documentation quality Editing existing pages To edit an existing page locate its rst source file and open it in your favorite text editor You can then commit the changes push them to your fork and make a pull request Note that the pages in classes should not be edited here They are automatically generated from Godot s XML class reference See Contributing to the class reference for details See also To build the manual and test changes on your computer see Building the manual with Sphinx Editing pages online You can edit the documentation online by clicking the Edit on GitHub link in the top right of every page Doing so takes you to the GitHub text editor You need to have a GitHub account and to log in to use it Once logged in you can propose change like so Click the Edit on GitHub button On the GitHub page you re taken to click the pencil icon in the top right corner near the Raw Blame and Delete buttons It has the tooltip Fork this project and edit the file Edit the text in the text editor At the bottom of the web page summarize the changes you made and click the button Propose file change Make sure to replace the placeholder Update file rst by a short but clear one line description as this is the commit title On the following screens click the Create pull request button until you see a message like Username wants to merge 1 commit into godotengine master from Username patch 1 Another contributor will review your changes and merge them into the docs if they re good They may also make changes or ask you to do so before merging Adding new pages Before adding a new page please ensure that it fits in the documentation Look for existing issues or open a new one to see if the page is necessary Ensure there isn t a page that already covers the topic Read our Content guidelines To add a new page create a rst file with a meaningful name in the section you want to add a file to e g tutorials 3d light_baking rst You should then add your page to the relevant toctree table of contents e g tutorials 3d index rst Add your new filename to the list on a new line using a relative path and no extension e g here light_baking Titles Always begin pages with their title and a Sphinx reference name _doc_insert_your_title_here Insert your title here Copy to clipboard The reference _doc_insert_your_title_here and the title should match The reference allows linking to this page using the ref format e g ref doc_insert_your_title_here would link to the above example page note the lack of leading underscore in the reference Write your titles like plain sentences without capitalizing each word Good Understanding signals in Godot Bad Understanding Signals In Godot Only proper nouns projects people and node class names should have their first letter capitalized Sphinx and reStructuredText syntax Check Sphinx s reST Primer and the official reference for details on the syntax Sphinx uses specific reST comments to do specific operations like defining the table of contents toctree or cross referencing pages Check the official Sphinx documentation for more details To learn how to use Sphinx directives like note or seealso check out the Sphinx directives documentation Adding images and attachments To add images please put them in an img folder next to the rst file with a meaningful name and include them in your page with image img image_name webp Copy to clipboard Alternatively you can use the figure directive which gives the image a contrasting border and allows centering it on the page figure img image_name webp align center Copy to clipboard You can also include attachments as support material for a tutorial by placing them into a files folder next to the rst file and using this inline markup download file_name zip files file_name zip Copy to clipboard Consider using the godot docs project starters https github com godotengine godot docs project starters repository for hosting support materials such as project templates and asset packs You can use a direct link to the generated archive from that repository with the regular link markup file_name zip https github com godotengine godot docs project starters releases download latest 4 x file_name zip _ Copy to clipboard License This documentation and every page it contains is published under the terms of the Creative Commons Attribution 3 0 license CC BY 3 0 with attribution to Juan Linietsky Ariel Manzur and the Godot community By contributing to the documentation on the GitHub repository you agree that your changes are distributed under this license User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Building the manual with Sphinx This page explains how to build a local copy of the Godot manual using the Sphinx docs engine This allows you to have local HTML files and build the documentation as a PDF EPUB or LaTeX file for example Before you get started make sure that you have Git make unless you re using Windows Python 3 Note Python 3 should come with the pip3 command You may need to write python3 m pip Unix or py m pip Windows instead of pip3 If both approaches fail make sure that you have pip3 installed Optional Set up a virtual environment Virtual environments prevent potential conflicts between the Python packages in requirements txt and other Python packages that are installed on your system Create the virtual environment Windows Other platforms py m venv godot docs venv Copy to clipboard python3 m venv godot docs venv Copy to clipboard Activate the virtual environment Windows Other platforms godot docs venv Scripts activate bat Copy to clipboard source godot docs venv bin activate Copy to clipboard Optional Update pre installed packages Windows Other platforms py m pip install upgrade pip setuptools Copy to clipboard pip3 install upgrade pip setuptools Copy to clipboard Clone the docs repo git clone https github com godotengine godot docs git Copy to clipboard Change directory into the docs repo cd godot docs Copy to clipboard Install the required packages pip3 install r requirements txt Copy to clipboard Build the docs make html Copy to clipboard Note On Windows that command will run make bat instead of GNU Make or an alternative Alternatively you can build the documentation by running the sphinx build program manually sphinx build b html _build html Copy to clipboard The compilation will take some time as the classes folder contains hundreds of files See Hints for performance You can then browse the documentation by opening _build html index html in your web browser Dealing with errors If you run into errors you may try the following command make SPHINXBUILD local bin sphinx build html Copy to clipboard If you get a MemoryError or EOFError you can remove the classes folder and run make again This will drop the class references from the final HTML documentation but will keep the rest intact Important If you delete the classes folder do not use git add when working on a pull request or the whole classes folder will be removed when you commit See 3157 for more detail Hints for performance RAM usage Building the documentation requires at least 8 GB of RAM to run without disk swapping which slows it down If you have at least 16 GB of RAM you can speed up compilation by running Windows Other platforms set SPHINXOPTS j2 make html Copy to clipboard make html SPHINXOPTS j2 Copy to clipboard You can use j auto to use all available CPU threads but this can use a lot of RAM if you have a lot of CPU threads For instance on a system with 32 CPU threads j auto which corresponds to j 32 here can require 20 GB of RAM for Sphinx alone Specifying a list of files You can specify a list of files to build which can greatly speed up compilation make FILELIST classes class_node rst classes class_resource rst html Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Contributing to the class reference The Class reference is a set of articles describing the public API of the engine This includes descriptions for various classes methods properties and global objects available for scripting The class reference is available online from the documentation sidebar and in the Godot editor from the help menu As the engine grows and features are added or modified some parts of the class reference become obsolete and new descriptions and examples need to be added While developers are encouraged to document all of their work in the class reference when submitting a pull request we can t expect everyone to be able to write high quality documentation so there is always work for contributors like you to polish existing and create missing reference material The source of the class reference As the class reference is available in two places online and in the editor we need to take care to keep things in sync To achieve this the main Godot repository is picked as the source of truth and the documentation for the class reference is tracked there Warning You should not edit rst files in the classes folder of the documentation repository These files are generated automatically and are synced manually by project maintainers Read further to learn how to correctly edit the class reference In the main repository the class reference is stored in XML files one for each exposed class or global object The majority of these files is located in doc classes but some modules contain their own documentation as well You will find it in the modules module_name doc_classes directory To learn more about editing XML files refer to Class reference primer See also For details on Git usage and the pull request workflow please refer to the Pull request workflow page If you want to translate the class reference from English to another language see Editor and documentation localization This guide is also available as a video tutorial on YouTube Important If you plan to make large changes you should create an issue on the godot docs repository or comment on an existing issue Doing so lets others know you re already taking care of a given class What to contribute The natural place to start contributing is the classes that you are most familiar with This ensures that the added description will be based on experience and the necessary know how not just the name of a method or a property We advise not to add low effort descriptions no matter how appealing it may look Such descriptions obscure the need for documentation and are hard to identify automatically See also Following this principle is important and allows us to create tools for contributors Such as the class reference s completion status tracker You can use it to quickly find documentation pages missing descriptions If you decide to document a class but don t know what a particular method does don t worry Leave it for now and list the methods you skipped when you open a pull request with your changes Another writer will take care of it You can still look at the methods implementation in Godot s source code on GitHub If you have doubts feel free to ask on the Q A website and Godot Contributors Chat Warning Unless you make minor changes like fixing a typo we do not recommend using the GitHub web editor to edit the class reference s XML files It lacks features to edit XML well like keeping indentations consistent and it does not allow amending commits based on reviews It also doesn t allow you to test your changes in the engine or with validation scripts as described in How to edit class XML Updating class reference when working on the engine When you create a new class or modify an existing engine s API you need to re generate the XML files in doc classes To do so you first need to compile Godot See the Introduction to the buildsystem page to learn how Then execute the compiled Godot binary from the Godot root directory with the doctool option For example if you re on 64 bit Linux the command might be bin godot linuxbsd editor x86_64 doctool Copy to clipboard The exact set of suffixes may be different Carefully read through the linked article to learn more about that The XML files in doc classes should then be up to date with current Godot Engine features You can then check what changed using the git diff command Please only include changes that are relevant to your work on the API in your commits You can discard changes in other XML files using git checkout but consider reporting if you notice unrelated files being updated Ideally running this command should only bring up the changes that you yourself have made You will then need to add descriptions to any newly generated entries User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Class reference primer This page explains how to write the class reference You will learn where to write new descriptions for the classes methods and properties for Godot s built in node types See also To learn to submit your changes to the Godot project using the Git version control system see Contributing to the class reference The reference for each class is contained in an XML file like the one below class name Node2D inherits CanvasItem version 4 0 brief_description A 2D game object inherited by all 2D related nodes Has a position rotation scale and Z index brief_description description A 2D game object with a transform position rotation and scale All 2D nodes including physics objects and sprites inherit from Node2D Use Node2D as a parent node to move scale and rotate children in a 2D project Also gives control of the node s render order description tutorials link title Custom drawing in 2D https docs godotengine org en latest tutorials 2d custom_drawing_in_2d html link link title All 2D Demos https github com godotengine godot demo projects tree master 2d link tutorials methods method name apply_scale return type void return argument index 0 name ratio type Vector2 argument description Multiplies the current scale by the code ratio code vector description method method name translate return type void return argument index 0 name offset type Vector2 argument description Translates the node by the given code offset code in local coordinates description method methods members member name global_position type Vector2 setter set_global_position getter get_global_position Global position member member name z_index type int setter set_z_index getter get_z_index default 0 Z index Controls the order in which the nodes render A node with a higher Z index will display in front of others member members constants constants class Copy to clipboard It starts with brief and long descriptions In the generated docs the brief description is always at the top of the page while the long description lies below the list of methods variables and constants You can find methods member variables constants and signals in separate XML nodes For each you want to learn how they work in Godot s source code Then fill their documentation by completing or improving the text in these tags brief_description description constant method in its description tag return types and arguments don t take separate documentation strings member signal in its description tag arguments don t take separate documentation strings constant Write in a clear and simple language Always follow the writing guidelines to keep your descriptions short and easy to read Do not leave empty lines in the descriptions each line in the XML file will result in a new paragraph even if it is empty How to edit class XML Edit the file for your chosen class in doc classes to update the class reference The folder contains an XML file for each class The XML lists the constants and methods you will find in the class reference Godot generates and updates the XML automatically Note For some modules in the engine s source code you ll find the XML files in the modules module_name doc_classes directory instead Edit it using your favorite text editor If you use a code editor make sure that it doesn t change the indent style you should use tabs for the XML and four spaces inside BBCode style blocks More on that below To check that the modifications you ve made are correct in the generated documentation navigate to the doc folder and run the command make rst This will convert the XML files to the online documentation s format and output errors if anything s wrong Alternatively you can build Godot and open the modified page in the built in code reference To learn how to compile the engine read the compilation guide We recommend using a code editor that supports XML files like Vim Atom Visual Studio Code Notepad or another to comfortably edit the file You can also use their search feature to find classes and properties quickly Tip If you use Visual Studio Code you can install the vscode xml extension to get linting for class reference XML files Improve formatting with BBCode style tags Godot s XML class reference supports BBCode like tags for linking as well as formatting text and code In the tables below you can find the available tags usage examples and the results after conversion to reStructuredText Linking Whenever you link to a member of another class you need to specify the class name For links to the same class the class name is optional and can be omitted Tag and Description Example Result Class Link to class Move the Sprite2D Move the Sprite2D annotation Class name Link to annotation See annotation GDScript rpc See GDScript rpc constant Class name Link to constant See constant Color RED See Color RED enum Class name Link to enum See enum Mesh ArrayType See Mesh ArrayType member Class name Link to member Get member Node2D scale Get Node2D scale method Class name Link to method Call method Node3D hide Call Node3D hide constructor Class name Link to built in constructor Use constructor Color Color Use Color Color operator Class name Link to built in operator Use operator Color operator Use Color operator signal Class name Link to signal Emit signal Node renamed Emit Node renamed theme_item Class name Link to theme item See theme_item Label font See Label font param name Parameter name as code Takes param size for the size Takes size for the size Note Currently only GDScript has annotations Formatting text Tag and Description Example Result br Line break Line 1 br Line 2 Line 1 Line 2 lb rb and respectively lb b rb text lb b rb b text b b b Bold Do b not b call this method Do not call this method i i Italic Returns the i global i position Returns the global position u u Underline u Always u use this method Always use this method s s Strikethrough s Outdated information s Outdated information url url Hyperlink url https example com url url https example com Website url https example com Website center center Horizontal centering center 2 2 4 center 2 2 4 kbd kbd Keyboard mouse shortcut Press kbd Ctrl C kbd Press Ctrl C code code Inline code fragment Returns code true code Returns true Note Some supported tags like color and font are not listed here because they are not recommended in the engine documentation kbd disables BBCode until the parser encounters kbd code disables BBCode until the parser encounters code Formatting code blocks There are two options for formatting code blocks Use codeblock if you want to add an example for a specific language Use codeblocks gdscript and csharp if you want to add the same example for both languages GDScript and C By default codeblock highlights GDScript syntax You can change it using the lang attribute Currently supported options are codeblock lang text disables syntax highlighting codeblock lang gdscript highlights GDScript syntax codeblock lang csharp highlights C syntax only in NET version Note codeblock disables BBCode until the parser encounters codeblock Warning Use codeblock for pre formatted code blocks Inside codeblock always use four spaces for indentation The parser will delete tabs For example codeblock func _ready var sprite get_node Sprite2D print sprite get_pos codeblock Copy to clipboard Will display as func _ready var sprite get_node Sprite2D print sprite get_pos Copy to clipboard If you need to have different code version in GDScript and C use codeblocks instead If you use codeblocks you also need to have at least one of the language specific tags gdscript and csharp Always write GDScript code examples first You can use this experimental code translation tool to speed up your workflow codeblocks gdscript func _ready var sprite get_node Sprite2D print sprite get_pos gdscript csharp public override void _Ready var sprite GetNode Sprite2D GD Print sprite GetPos csharp codeblocks Copy to clipboard The above will display as GDScript C func _ready var sprite get_node Sprite2D print sprite get_pos Copy to clipboard public override void _Ready var sprite GetNode Sprite2D GD Print sprite GetPos Copy to clipboard Formatting notes and warnings To denote important information add a paragraph starting with b Note b at the end of the description b Note b Only available when using the Vulkan renderer Copy to clipboard To denote crucial information that could cause security issues or loss of data if not followed carefully add a paragraph starting with b Warning b at the end of the description b Warning b If this property is set to code true code it allows clients to execute arbitrary code on the server Copy to clipboard In all the paragraphs described above make sure the punctuation is part of the BBCode tags for consistency Marking API as deprecated experimental To mark an API as deprecated or experimental you need to add the corresponding XML attribute The attribute value must be a message explaining why the API is not recommended BBCode markup is supported or an empty string the default message will be used If an API element is marked as deprecated experimental then it is considered documented even if the description is empty class name Parallax2D inherits Node2D experimental This node is meant to replace ParallaxBackground and ParallaxLayer The implementation may change in the future xmlns xsi http www w3 org 2001 XMLSchema instance xsi noNamespaceSchemaLocation class xsd class constant name RESPONSE_USE_PROXY value 305 enum ResponseCode deprecated Many clients ignore this response code for security reasons It is also deprecated by the HTTP standard HTTP status code code 305 Use Proxy code constant member name auto_translate type bool setter set_auto_translate getter is_auto_translating deprecated Use member Node auto_translate_mode instead Toggles if any text should automatically change to its translated version depending on the current locale member method name get_method_call_mode qualifiers const deprecated Use member AnimationMixer callback_mode_method instead return type int enum AnimationPlayer AnimationMethodCallMode description Returns the call mode used for Call Method tracks description method Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Editor and documentation localization Godot aims to make game development available to everyone including people who may not know or be comfortable with English Therefore we do our best to make the most important resources available in many languages thanks to the translation effort of the community These resources include The Godot editor s interface ca 15 000 words The online documentation editor manual and tutorials ca 300 000 words The class reference available both online and in the editor ca 200 000 words To manage translations we use the GNU gettext file format PO files and the open source Weblate web based localization platform which allows easy collaboration of many contributors to complete the translation for the various components and keep them up to date Click the bold links above to access each resource on Weblate This page gives an overview of the general translation workflow on Weblate and some resource specific instructions on e g how to handle some keywords or the localization of images Tip Translating all the official Godot content is a massive undertaking so we advise prioritizing the resources as they are listed above first the editor interface then the online documentation and eventually the class reference if there are enough translators to keep up with updates Using Weblate for translations While our translations eventually reside in the Git repositories of the Godot engine and its documentation all translation updates are handled through Weblate and thus direct pull requests to the Git repositories are not accepted Translations are synced manually between Weblate and the Godot repositories by maintainers You should therefore register on Weblate to contribute to Godot s translations Once signed in browse to the Godot resource which you want to contribute to in this page we will use the editor translation as an example to find the list of all languages See also Feel free to consult Weblate s own documentation on the translation workflow for more details Adding a new language If your language is already listed click on its name to access the overview and skip the rest of this section If your language is not listed scroll to the bottom of the list of languages and click the Start new translation button and select the language you want to translate to Important If your language is spoken in several countries with only limited regional variations please consider adding it with its generic variant e g fr for French instead of a regional variant e g fr_FR for French France fr_CA for French Canada or fr_DZ for French Algeria Godot has a huge amount of content to translate so duplicating the work for regional variants should only be done if the language variations are significant enough Additionally if a translation is done with for a regional variant it will only be available automatically for users located in this region or having their system language configured for this region When regional variations are significant enough to warrant separate translations we advise to focus on completing a generic variant first if possible then duplicate the fully completed translation for regional variants and do the relevant edits This is typically a good strategy for e g Spanish work on es first then duplicate it to es_AR es_ES es_MX etc if necessary or Portuguese pt_BR vs pt_PT Translation interface Once a language has been selected you will see an overview of the translation status including how many strings are left to translate or review Each item can be clicked and used to browse through the corresponding list You can also click the Translate button to get started on the list of strings needing action After selecting a list of clicking Translate you will see the main translation interface where all the work happens On that page you have A toolbar which lets you cycle through strings of the current list change to another predefined list or do a custom search etc There is also a Zen editing mode with a simplified interface The actual string you are working on in the Translation panel By default there should be the English source string and an edit box for your language If you are familiar with other languages you can add them in your user settings to give you more context for translation Once you are done editing the current string press Save to confirm changes and move to the next entry Alternatively use the Skip button to skip it The Needs editing checkbox means that the original string was updated and the translation therefore needs review to take those changes into account in PO jargon these are so called fuzzy strings Such strings won t be used in the translation until fixed The bottom panel has various tools which can help with the translation effort such as context from nearby strings usually from the same editor tool or documentation page so they might use similar terms comments from other translators machine translations and a list of all other existing translations for that string On the top right the glossary shows terms for which an entry has been added previously and which are included in the current string For example if you decided with fellow translators to use a specific translation for the node term in Godot you can add it to the glossary to ensure that other translators use the same convention The bottom right panel includes information on the source string The most relevant item is the source string location which links you to the original string on GitHub You may need to search for the string in the page to locate it and its surrounding context Locating original content PO files are an ordered list of source strings msgid and their translation msgstr and by default Weblate will present the strings in that order It can therefore be useful to understand how the content is organized in the PO files to help you locate the original content and use it as a reference when translating Important It is primordial to use the original context as reference when translating as many words have several possible translations depending on the context Using the wrong translation can actually be detrimental to the user and make things harder to understand than if they stayed in English Using the context also makes the translation effort much easier and more enjoyable as you can see directly if the translation you wrote will make sense in context The editor interface s translation template is generated by parsing all the C source code in alphabetical order so all the strings defined in a given file will be grouped together For example if the source string location indicates editor code_editor cpp the current string and the nearby ones is defined in the editor code_editor cpp code file and is thereby related to the code editors in Godot GDScript shaders The online documentation s translation template is generated from the source RST files in the same order as seen in the table of contents so for example the first strings are from the front page of the documentation The recommended workflow is therefore to find a unique string corresponding to a page that you want to translate and then translate all the strings with the same source string location while comparing with the online version of that page in English An example of source string location could be getting_started step_by_step nodes_and_scenes rst for the page Nodes and Scenes The class reference s translation template is generated from the source XML files in alphabetical order which is also the same as the order of the table of contents for the online version You can therefore locate the source string corresponding to the brief description of a given class to find the first string to translate and all other descriptions from that class should be in the subsequent strings on Weblate For example the descriptions for the Node2D class would have the source string location doc classes Node2D xml A handy tool to locate specific pages classes is to use Weblate s advanced search feature and especially the Location strings query which can also be used with the location token e g location nodes_and_scenes rst Note When a given source string is used in multiple source locations they will all be concatenated into one For example the above location nodes_and_scenes rst query would land first on the Introduction source string which is used in dozens of pages including some that come before nodes_and_scenes rst in the template Clicking the Next button then brings us to the Scene and nodes title string displayed above So it may happen that a given paragraph or section title is not at the location you d expect it when reading the online version of a page Respecting the markup syntax Each translation resource originates from a different source code format and having some notions on the markup language used for each resource is important to avoid creating syntax errors in your translations Editor interface C The editor translations originate from C strings and may use C format specifiers such as s a string or d a number These specifiers are replaced by content at runtime and should be preserved and placed in your translation where necessary for it to be meaningful after substitution You may need to refer to the source string location to understand what kind of content will be substituted if it s not clear from the sentence Example s will be substituted with a file name or path PO file There is no s file Weblate There is no s file Copy to clipboard C escape characters such as n line break or t tabulation In the Weblate editor the n characters are replaced by return and t by Tabs are not used much but you should make sure to use line breaks in the same way as the original English string Weblate will issue a warning if you don t Line breaks might sometimes be used for vertical spacing or manual wrapping of long lines which would otherwise be too long especially in the editor translation Example PO file Scene s is currently being edited n Changes will only take effect when reloaded Weblate Scene s is currently being edited Changes will only take effect when reloaded Copy to clipboard Note Only logical order of the characters matters in the right to left text format specifiers may be displayed as s Online documentation RST The documentation translations originate from reStructuredText RST files which also use their own markup syntax to style text create internal and external links etc Here are some examples development is styled bold Have a look here is a link pointing to https docs godotengine org en latest You should translate Have a look here but not the URL unless there is a matching URL for the same content in your language Note The and _ characters all have a meaning in the hyperlink syntax and should be preserved Looking for the documentation of the current development branch Have a look here https docs godotengine org en latest _ supported is an inline reference to an image and should stay unchanged master uses the markup for inline code and will be styled as such Note Inline code in RST uses 2 backticks on each side unlike Markdown Single backticks are used for hyperlinks supported Backwards compatible new features backported from the master branch as well as bug security and platform support fixes The ref Sphinx role is used for internal references to other pages of the documentation It can be used with only the reference name of a page which should not be changed in which case the title of that page will be displayed See ref doc_ways_to_contribute Or it can be used with an optional custom title which should thus be translated See ref how to contribute doc_ways_to_contribute You may encounter other Sphinx roles such as kbd used for shortcut keys You can translate the content between backticks to match the usual key names if it s different from the English one Save the scene Click Scene Save or press kbd Ctrl S on Windows Linux or kbd Cmd S on macOS Copy to clipboard See also See Sphinx s reStructured Text primer for a quick overview of the markup language you may find in source strings You may encounter especially the inline markup bold italics inline code and the internal and external hyperlink markup Class reference BBCode The class reference is documented in the main Godot repository using XML files and with BBCode like markup for styling and internal references Some of the tags used are from the original BBCode e g b Bold b and i Italics i while others are Godot specific and used for advanced features such as inline code e g code true code linking to another class e g Node2D or to a property in a given class e g member Node2D position or for multiline code blocks Example Returns a color according to the standardized code name code with code alpha code ranging from 0 to 1 codeblock red ColorN red 1 codeblock Supported color names are the same as the constants defined in Color Copy to clipboard In the above example code name code code alpha code and Color should not be translated as they refer respectively to argument names and a class of the Godot API Similarly the contents of the codeblock should not be translated as ColorN is a function of the Godot API and red is one of the named colors it supports At most you can translate the name of the variable which holds the result red Note also that in the XML each line is a paragraph so you should not add line breaks if they are not part of the original translation See also See our documentation for class reference writers for the list of BBCode like tags which are used throughout the class reference Offline translation and testing While we advise using the Weblate interface to write translations you also have the possibility to download the PO file locally to translate it with your preferred PO editing application such as Poedit or Lokalize To download the PO file locally browse to the translation overview for your language and select the first item in the Files menu Once you are done with a series of edits use the Upload translation item in that same menu and select your file Choose Add as translation for the file upload mode Note If a significant amount of time has passed between your download of the PO file and the upload of the edited version there is a risk to overwrite the translations authored by other contributors in the meantime This is why we advise to use the online interface so that you always work on the latest version If you want to test changes locally especially for the editor translation you can use the downloaded PO file and compile Godot from source Rename the editor translation PO file to lang po e g eo po for Esperanto and place it in the editor translations folder GitHub You can also test class reference changes the same way by renaming the PO file similarly and placing it in the doc translations folder GitHub Localizing documentation images The online documentation includes many images which can be screenshots of the Godot editor custom made graphs of any other kind of visual content Some of it includes text and might thus be relevant to localize in your language This part is not handled via Weblate but directly on the godot docs l10n Git repository where the documentation translations are synced from Weblate Note The workflow is not the most straightforward and requires some knowledge of Git We plan to work on a simplified Web tool which could be used to manage image localization in a convenient way abstracting away these steps To translate an image you should first locate it in the original English documentation To do so browse the relevant page in the docs e g First look at Godot s interface Click the Edit on GitHub link in the top right corner On GitHub click on the image you want to translate If relevant click on Download to download it locally and edit it with an image edition tool Note the full path to the image as it will be needed further down here getting_started step_by_step img project_manager_first_open png Create your localized version of the image either by editing the English one or by taking a screenshot of the editor with your language if it s an editor screenshot Some images may also have source files available in SVG format so you can browse the img folder which contains them to check for that Name your localized image like the original one but with the language code added before the extension e g project_manager_first_open png would become project_manager_first_open fr png for the French localization Finally on godot docs l10n recreate the same folder structure as for the original image in the images subfolder GitHub and place your translated image there In our example the end result should be images getting_started step_by_step img project_manager_first_open fr png Repeat this for other images and make a Pull Request User contributed notes Please read the User contributed notes policy before submitting a comment