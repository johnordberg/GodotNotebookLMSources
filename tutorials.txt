Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Best practices Introduction Applying object oriented principles in Godot Scene organization When to use scenes versus scripts Autoloads versus regular nodes When and how to avoid using nodes for everything Godot interfaces Godot notifications Data preferences Logic preferences Project organization Version control systems Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Introduction This series is a collection of best practices to help you work efficiently with Godot Godot allows for a great amount of flexibility in how you structure a project s codebase and break it down into scenes Each approach has its pros and cons and they can be hard to weigh until you ve worked with the engine for long enough There are always many ways to structure your code and solve specific programming problems It would be impossible to cover them all here That is why each article starts from a real world problem We will break down each problem in fundamental questions suggest solutions analyze the pros and cons of each option and highlight the best course of action for the problem at hand You should start by reading Applying object oriented principles in Godot It explains how Godot s nodes and scenes relate to classes and objects in other Object Oriented programming languages It will help you make sense of the rest of the series Note The best practices in Godot rely on Object Oriented design principles We use tools like the single responsibility principle and encapsulation User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Applying object oriented principles in Godot The engine offers two main ways to create reusable objects scripts and scenes Neither of these technically define classes under the hood Still many best practices using Godot involve applying object oriented programming principles to the scripts and scenes that compose your game That is why it s useful to understand how we can think of them as classes This guide briefly explains how scripts and scenes work in the engine s core to help you understand how they work under the hood How scripts work in the engine The engine provides built in classes like Node You can extend those to create derived types using a script These scripts are not technically classes Instead they are resources that tell the engine a sequence of initializations to perform on one of the engine s built in classes Godot s internal classes have methods that register a class s data with a ClassDB This database provides runtime access to class information ClassDB contains information about classes like Properties Methods Constants Signals This ClassDB is what objects check against when performing an operation like accessing a property or calling a method It checks the database s records and the object s base types records to see if the object supports the operation Attaching a Script to your object extends the methods properties and signals available from the ClassDB Note Even scripts that don t use the extends keyword implicitly inherit from the engine s base RefCounted class As a result you can instantiate scripts without the extends keyword from code Since they extend RefCounted though you cannot attach them to a Node Scenes The behavior of scenes has many similarities to classes so it can make sense to think of a scene as a class Scenes are reusable instantiable and inheritable groups of nodes Creating a scene is similar to having a script that creates nodes and adds them as children using add_child We often pair a scene with a scripted root node that makes use of the scene s nodes As such the script extends the scene by adding behavior through imperative code The content of a scene helps to define What nodes are available to the script How they are organized How they are initialized What signal connections they have with each other Why is any of this important to scene organization Because instances of scenes are objects As a result many object oriented principles that apply to written code also apply to scenes single responsibility encapsulation and others The scene is always an extension of the script attached to its root node so you can interpret it as part of a class Most of the techniques explained in this best practices series build on this point User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Scene organization This article covers topics related to the effective organization of scene content Which nodes should you use Where should you place them How should they interact How to build relationships effectively When Godot users begin crafting their own scenes they often run into the following problem They create their first scene and fill it with content only to eventually end up saving branches of their scene into separate scenes as the nagging feeling that they should split things up starts to accumulate However they then notice that the hard references they were able to rely on before are no longer possible Re using the scene in multiple places creates issues because the node paths do not find their targets and signal connections established in the editor break To fix these problems you must instantiate the sub scenes without them requiring details about their environment You need to be able to trust that the sub scene will create itself without being picky about how it s used One of the biggest things to consider in OOP is maintaining focused singular purpose classes with loose coupling to other parts of the codebase This keeps the size of objects small for maintainability and improves their reusability These OOP best practices have several implications for best practices in scene structure and script usage If at all possible you should design scenes to have no dependencies That is you should create scenes that keep everything they need within themselves If a scene must interact with an external context experienced developers recommend the use of Dependency Injection This technique involves having a high level API provide the dependencies of the low level API Why do this Because classes which rely on their external environment can inadvertently trigger bugs and unexpected behavior To do this you must expose data and then rely on a parent context to initialize it Connect to a signal Extremely safe but should be used only to respond to behavior not start it By convention signal names are usually past tense verbs like entered skill_activated or item_collected GDScript C Parent Child signal_name connect method_on_the_object Child signal_name emit Triggers parent defined behavior Copy to clipboard Parent GetNode Child Connect SignalName Callable From ObjectWithMethod MethodOnTheObject Child EmitSignal SignalName Triggers parent defined behavior Copy to clipboard Call a method Used to start behavior GDScript C Parent Child method_name do Child assuming it has String property method_name and method do call method_name Call parent defined method which child must own Copy to clipboard Parent GetNode Child Set MethodName Do Child Call MethodName Call parent defined method which child must own Copy to clipboard Initialize a Callable property Safer than a method as ownership of the method is unnecessary Used to start behavior GDScript C Parent Child func_property object_with_method method_on_the_object Child func_property call Call parent defined method can come from anywhere Copy to clipboard Parent GetNode Child Set FuncProperty Callable From ObjectWithMethod MethodOnTheObject Child FuncProperty Call Call parent defined method can come from anywhere Copy to clipboard Initialize a Node or other Object reference GDScript C Parent Child target self Child print target Use parent defined node Copy to clipboard Parent GetNode Child Set Target this Child GD Print Target Use parent defined node Copy to clipboard Initialize a NodePath GDScript C Parent Child target_path Child get_node target_path Use parent defined NodePath Copy to clipboard Parent GetNode Child Set TargetPath NodePath Child GetNode TargetPath Use parent defined NodePath Copy to clipboard These options hide the points of access from the child node This in turn keeps the child loosely coupled to its environment You can reuse it in another context without any extra changes to its API Note Although the examples above illustrate parent child relationships the same principles apply towards all object relations Nodes which are siblings should only be aware of their own hierarchies while an ancestor mediates their communications and references GDScript C Parent Left target Right get_node Receiver Left var target Node func execute Do something with target Right func _init var receiver Receiver new add_child receiver Copy to clipboard Parent GetNode Left Left Target GetNode Right Receiver public partial class Left Node public Node Target null public void Execute Do something with Target public partial class Right Node public Node Receiver null public Right Receiver ResourceLoader Load Script Receiver cs New AddChild Receiver Copy to clipboard The same principles also apply to non Node objects that maintain dependencies on other objects Whichever object owns the other objects should manage the relationships between them Warning You should favor keeping data in house internal to a scene though as placing a dependency on an external context even a loosely coupled one still means that the node will expect something in its environment to be true The project s design philosophies should prevent this from happening If not the code s inherent liabilities will force developers to use documentation to keep track of object relations on a microscopic scale this is otherwise known as development hell Writing code that relies on external documentation to use it safely is error prone by default To avoid creating and maintaining such documentation you convert the dependent node child above into a tool script that implements _get_configuration_warnings Returning a non empty PackedStringArray from it will make the Scene dock generate a warning icon with the string s as a tooltip by the node This is the same icon that appears for nodes such as the Area2D node when it has no child CollisionShape2D nodes defined The editor then self documents the scene through the script code No content duplication via documentation is necessary A GUI like this can better inform project users of critical information about a Node Does it have external dependencies Have those dependencies been satisfied Other programmers and especially designers and writers will need clear instructions in the messages telling them what to do to configure it So why does all this complex switcheroo work Well because scenes operate best when they operate alone If unable to work alone then working with others anonymously with minimal hard dependencies i e loose coupling is the next best thing Inevitably changes may need to be made to a class and if these changes cause it to interact with other scenes in unforeseen ways then things will start to break down The whole point of all this indirection is to avoid ending up in a situation where changing one class results in adversely affecting other classes dependent on it Scripts and scenes as extensions of engine classes should abide by all OOP principles Examples include SOLID DRY KISS YAGNI Choosing a node tree structure You might start to work on a game but get overwhelmed by the vast possibilities before you You might know what you want to do what systems you want to have but where do you put them all How you go about making your game is always up to you You can construct node trees in countless ways If you are unsure this guide can give you a sample of a decent structure to start with A game should always have an entry point somewhere you can definitively track where things begin so that you can follow the logic as it continues elsewhere It also serves as a bird s eye view of all other data and logic in the program For traditional applications this is normally a main function In Godot it s a Main node Node Main main gd The main gd script will serve as the primary controller of your game Then you have an in game World a 2D or 3D one This can be a child of Main In addition you will need a primary GUI for your game that manages the various menus and widgets the project needs Node Main main gd Node2D Node3D World game_world gd Control GUI gui gd When changing levels you can then swap out the children of the World node Changing scenes manually gives you full control over how your game world transitions The next step is to consider what gameplay systems your project requires If you have a system that tracks all of its data internally should be globally accessible should exist in isolation then you should create an autoload singleton node Note For smaller games a simpler alternative with less control would be to have a Game singleton that simply calls the SceneTree change_scene_to_file method to swap out the main scene s content This structure more or less keeps the World as the main game node Any GUI would also need to be either a singleton a transitory part of the World or manually added as a direct child of the root Otherwise the GUI nodes would also delete themselves during scene transitions If you have systems that modify other systems data you should define those as their own scripts or scenes rather than autoloads For more information see Autoloads versus regular nodes Each subsystem within your game should have its own section within the SceneTree You should use parent child relationships only in cases where nodes are effectively elements of their parents Does removing the parent reasonably mean that the children should also be removed If not then it should have its own place in the hierarchy as a sibling or some other relation Note In some cases you need these separated nodes to also position themselves relative to each other You can use the RemoteTransform RemoteTransform2D nodes for this purpose They will allow a target node to conditionally inherit selected transform elements from the Remote node To assign the target NodePath use one of the following A reliable third party likely a parent node to mediate the assignment A group to pull a reference to the desired node assuming there will only ever be one of the targets When you should do this is subjective The dilemma arises when you must micro manage when a node must move around the SceneTree to preserve itself For example Add a player node to a room Need to change rooms so you must delete the current room Before the room can be deleted you must preserve and or move the player If memory is not a concern you can Create the new room Move the player to the new room Delete the old room If memory is a concern instead you will need to Move the player somewhere else in the tree Delete the room Instantiate and add the new room Re add the player to the new room The issue is that the player here is a special case where the developers must know that they need to handle the player this way for the project The only way to reliably share this information as a team is to document it Keeping implementation details in documentation is dangerous It s a maintenance burden strains code readability and unnecessarily bloats the intellectual content of a project In a more complex game with larger assets it can be a better idea to keep the player somewhere else in the SceneTree entirely This results in More consistency No special cases that must be documented and maintained somewhere No opportunity for errors to occur because these details are not accounted for In contrast if you ever need a child node that does not inherit the transform of its parent you have the following options The declarative solution place a Node in between them Since it doesn t have a transform they won t pass this information to its children The imperative solution Use the top_level property for the CanvasItem or Node3D node This will make the node ignore its inherited transform Note If building a networked game keep in mind which nodes and gameplay systems are relevant to all players versus those just pertinent to the authoritative server For example users do not all need to have a copy of every players PlayerController logic they only need their own Keeping them in a separate branch from the world can help simplify the management of game connections and the like The key to scene organization is to consider the SceneTree in relational terms rather than spatial terms Are the nodes dependent on their parent s existence If not then they can thrive all by themselves somewhere else If they are dependent then it stands to reason that they should be children of that parent and likely part of that parent s scene if they aren t already Does this mean nodes themselves are components Not at all Godot s node trees form an aggregation relationship not one of composition But while you still have the flexibility to move nodes around it is still best when such moves are unnecessary by default User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue When to use scenes versus scripts We ve already covered how scenes and scripts are different Scripts define an engine class extension with imperative code scenes with declarative code Each system s capabilities are different as a result Scenes can define how an extended class initializes but not what its behavior actually is Scenes are often used in conjunction with a script the scene declaring a composition of nodes and the script adding behaviour with imperative code Anonymous types It is possible to completely define a scenes contents using a script alone This is in essence what the Godot Editor does only in the C constructor of its objects But choosing which one to use can be a dilemma Creating script instances is identical to creating in engine classes whereas handling scenes requires a change in API GDScript C const MyNode preload my_node gd const MyScene preload my_scene tscn var node Node new var my_node MyNode new Same method call var my_scene MyScene instantiate Different method call var my_inherited_scene MyScene instantiate PackedScene GEN_EDIT_STATE_MAIN Create scene inheriting from MyScene Copy to clipboard using Godot public partial class Game Node public static CSharpScript MyNode get GD Load CSharpScript res Path To MyNode cs public static PackedScene MyScene get GD Load PackedScene res Path To MyScene tscn private Node _node private Node _myNode private Node _myScene private Node _myInheritedScene public Game _node new Node _myNode MyNode New As Node Different than calling new or MyNode New Instantiated from a PackedScene _myScene MyScene Instantiate Create scene inheriting from MyScene _myInheritedScene MyScene Instantiate PackedScene GenEditState Main Copy to clipboard Also scripts will operate a little slower than scenes due to the speed differences between engine and script code The larger and more complex the node the more reason there is to build it as a scene Named types Scripts can be registered as a new type within the editor itself This displays it as a new type in the node or resource creation dialog with an optional icon This way the user s ability to use the script is much more streamlined Rather than having to Know the base type of the script they would like to use Create an instance of that base type Add the script to the node With a registered script the scripted type instead becomes a creation option like the other nodes and resources in the system The creation dialog even has a search bar to look up the type by name There are two systems for registering types Custom Types Editor only Typenames are not accessible at runtime Does not support inherited custom types An initializer tool Creates the node with the script Nothing more Editor has no type awareness of the script or its relationship to other engine types or scripts Allows users to define an icon Works for all scripting languages because it deals with Script resources in abstract Set up using EditorPlugin add_custom_type Script Classes Editor and runtime accessible Displays inheritance relationships in full Creates the node with the script but can also change types or extend the type from the editor Editor is aware of inheritance relationships between scripts script classes and engine C classes Allows users to define an icon Engine developers must add support for languages manually both name exposure and runtime accessibility Godot 3 1 only The Editor scans project folders and registers any exposed names for all scripting languages Each scripting language must implement its own support for exposing this information Both methodologies add names to the creation dialog but script classes in particular also allow for users to access the typename without loading the script resource Creating instances and accessing constants or static methods is viable from anywhere With features like these one may wish their type to be a script without a scene due to the ease of use it grants users Those developing plugins or creating in house tools for designers to use will find an easier time of things this way On the downside it also means having to use largely imperative programming Performance of Script vs PackedScene One last aspect to consider when choosing scenes and scripts is execution speed As the size of objects increases the scripts necessary size to create and initialize them grows much larger Creating node hierarchies demonstrates this Each Node s logic could be several hundred lines of code in length The code example below creates a new Node changes its name assigns a script to it sets its future parent as its owner so it gets saved to disk along with it and finally adds it as a child of the Main node GDScript C main gd extends Node func _init var child Node new child name Child child script preload child gd add_child child child owner self Copy to clipboard using Godot public partial class Main Node public Node Child get set public Main Child new Node Child Name Child var childID Child GetInstanceId Child SetScript GD Load Script res Path To Child cs SetScript causes the C wrapper object to be disposed so obtain a new wrapper for the Child node using its instance ID before proceeding Child Node GodotObject InstanceFromId childID AddChild Child Child Owner this Copy to clipboard Script code like this is much slower than engine side C code Each instruction makes a call to the scripting API which leads to many lookups on the back end to find the logic to execute Scenes help to avoid this performance issue PackedScene the base type that scenes inherit from defines resources that use serialized data to create objects The engine can process scenes in batches on the back end and provide much better performance than scripts Conclusion In the end the best approach is to consider the following If one wishes to create a basic tool that is going to be re used in several different projects and which people of all skill levels will likely use including those who don t label themselves as programmers then chances are that it should probably be a script likely one with a custom name icon If one wishes to create a concept that is particular to their game then it should always be a scene Scenes are easier to track edit and provide more security than scripts If one would like to give a name to a scene then they can still sort of do this by declaring a script class and giving it a scene as a constant The script becomes in effect a namespace GDScript C game gd class_name Game extends RefCounted so it won t show up in the node creation dialog extends RefCounted const MyScene preload my_scene tscn main gd extends Node func _ready add_child Game MyScene instantiate Copy to clipboard Game cs public partial class Game RefCounted public static PackedScene MyScene get GD Load PackedScene res Path To MyScene tscn Main cs public partial class Main Node public override void _Ready AddChild Game MyScene Instantiate Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Autoloads versus regular nodes Godot offers a feature to automatically load nodes at the root of your project allowing you to access them globally that can fulfill the role of a Singleton Singletons Autoload These autoloaded nodes are not freed when you change the scene from code with SceneTree change_scene_to_file In this guide you will learn when to use the Autoload feature and techniques you can use to avoid it The cutting audio issue Other engines can encourage the use of creating manager classes singletons that organize a lot of functionality into a globally accessible object Godot offers many ways to avoid global state thanks to the node tree and signals For example let s say we are building a platformer and want to collect coins that play a sound effect There s a node for that the AudioStreamPlayer But if we call the AudioStreamPlayer while it is already playing a sound the new sound interrupts the first A solution is to code a global autoloaded sound manager class It generates a pool of AudioStreamPlayer nodes that cycle through as each new request for sound effects comes in Say we call that class Sound you can use it from anywhere in your project by calling Sound play coin_pickup ogg This solves the problem in the short term but causes more problems Global state one object is now responsible for all objects data If the Sound class has errors or doesn t have an AudioStreamPlayer available all the nodes calling it can break Global access now that any object can call Sound play sound_path from anywhere there s no longer an easy way to find the source of a bug Global resource allocation with a pool of AudioStreamPlayer nodes stored from the start you can either have too few and face bugs or too many and use more memory than you need Note About global access the problem is that any code anywhere could pass wrong data to the Sound autoload in our example As a result the domain to explore to fix the bug spans the entire project When you keep code inside a scene only one or two scripts may be involved in audio Contrast this with each scene keeping as many AudioStreamPlayer nodes as it needs within itself and all these problems go away Each scene manages its own state information If there is a problem with the data it will only cause issues in that one scene Each scene accesses only its own nodes Now if there is a bug it s easy to find which node is at fault Each scene allocates exactly the amount of resources it needs Managing shared functionality or data Another reason to use an Autoload can be that you want to reuse the same method or data across many scenes In the case of functions you can create a new type of Node that provides that feature for an individual scene using the class_name keyword in GDScript When it comes to data you can either Create a new type of Resource to share the data Store the data in an object to which each node has access for example using the owner property to access the scene s root node When you should use an Autoload GDScript supports the creation of static functions using static func When combined with class_name this makes it possible to create libraries of helper functions without having to create an instance to call them The limitation of static functions is that they can t reference member variables non static functions or self Since Godot 4 1 GDScript also supports static variables using static var This means you can now share variables across instances of a class without having to create a separate autoload Still autoloaded nodes can simplify your code for systems with a wide scope If the autoload is managing its own information and not invading the data of other objects then it s a great way to create systems that handle broad scoped tasks For example a quest or a dialogue system Note An autoload is not necessarily a singleton Nothing prevents you from instantiating copies of an autoloaded node An autoload is only a tool that makes a node load automatically as a child of the root of your scene tree regardless of your game s node structure or which scene you run e g by pressing the F6 key As a result you can get the autoloaded node for example an autoload called Sound by calling get_node root Sound User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue When and how to avoid using nodes for everything Nodes are cheap to produce but even they have their limits A project may have tens of thousands of nodes all doing things The more complex their behavior though the larger the strain each one adds to a project s performance Godot provides more lightweight objects for creating APIs which nodes use Be sure to keep these in mind as options when designing how you wish to build your project s features Object The ultimate lightweight object the original Object must use manual memory management With that said it isn t too difficult to create one s own custom data structures even node structures that are also lighter than the Node class Example See the Tree node It supports a high level of customization for a table of content with an arbitrary number of rows and columns The data that it uses to generate its visualization though is actually a tree of TreeItem Objects Advantages Simplifying one s API to smaller scoped objects helps improve its accessibility and improve iteration time Rather than working with the entire Node library one creates an abbreviated set of Objects from which a node can generate and manage the appropriate sub nodes Note One should be careful when handling them One can store an Object into a variable but these references can become invalid without warning For example if the object s creator decides to delete it out of nowhere this would trigger an error state when one next accesses it RefCounted Only a little more complex than Object They track references to themselves only deleting loaded memory when no further references to themselves exist These are useful in the majority of cases where one needs data in a custom class Example See the FileAccess object It functions just like a regular Object except that one need not delete it themselves Advantages same as the Object Resource Only slightly more complex than RefCounted They have the innate ability to serialize deserialize i e save and load their object properties to from Godot resource files Example Scripts PackedScene for scene files and other types like each of the AudioEffect classes Each of these can be saved and loaded therefore they extend from Resource Advantages Much has already been said on Resource s advantages over traditional data storage methods In the context of using Resources over Nodes though their main advantage is in Inspector compatibility While nearly as lightweight as Object RefCounted they can still display and export properties in the Inspector This allows them to fulfill a purpose much like sub Nodes on the usability front but also improve performance if one plans to have many such Resources Nodes in their scenes User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Godot interfaces Often one needs scripts that rely on other objects for features There are 2 parts to this process Acquiring a reference to the object that presumably has the features Accessing the data or logic from the object The rest of this tutorial outlines the various ways of doing all this Acquiring object references For all Object s the most basic way of referencing them is to get a reference to an existing object from another acquired instance GDScript C var obj node object Property access var obj node get_object Method access Copy to clipboard GodotObject obj node Object Property access GodotObject obj node GetObject Method access Copy to clipboard The same principle applies for RefCounted objects While users often access Node and Resource this way alternative measures are available Instead of property or method access one can get Resources by load access GDScript C If you need an export const var which doesn t exist use a conditional setter for a tool script that checks if it s executing in the editor The tool annotation must be placed at the top of the script tool Load resource during scene load var preres preload path Load resource when program reaches statement var res load path Note that users load scenes and scripts by convention with PascalCase names like typenames often into constants const MyScene preload my_scene tscn Static load const MyScript preload my_script gd This type s value varies i e it is a variable so it uses snake_case export var script_type Script Must configure from the editor defaults to null export var const_script Script set value if Engine is_editor_hint const_script value Warn users if the value hasn t been set func _get_configuration_warnings if not const_script return Must initialize property const_script return Copy to clipboard Tool script added for the sake of the const Export example Tool public MyType Property initializations load during Script instancing i e new No preload loads during scene load exists in C Initialize with a value Editable at runtime public Script MyScript GD Load Script res Path To MyScript cs Initialize with same value Value cannot be changed public readonly Script MyConstScript GD Load Script res Path To MyScript cs Like readonly due to inaccessible setter But value can be set during constructor i e MyType public Script MyNoSetScript get GD Load Script res Path To MyScript cs If need a const Export which doesn t exist use a conditional setter for a tool script that checks if it s executing in the editor private PackedScene _enemyScn Export public PackedScene EnemyScn get return _enemyScn set if Engine IsEditorHint _enemyScn value Warn users if the value hasn t been set public string _GetConfigurationWarnings if EnemyScn null return new string Must initialize property EnemyScn return Array Empty string Copy to clipboard Note the following There are many ways in which a language can load such resources When designing how objects will access data don t forget that one can pass resources around as references as well Keep in mind that loading a resource fetches the cached resource instance maintained by the engine To get a new object one must duplicate an existing reference or instantiate one from scratch with new Nodes likewise have an alternative access point the SceneTree GDScript C extends Node Slow func dynamic_lookup_with_dynamic_nodepath print get_node Child Faster GDScript only func dynamic_lookup_with_cached_nodepath print Child Fastest Doesn t break if node moves later Note that onready annotation is GDScript only Other languages must do var child func _ready child get_node Child onready var child Child func lookup_and_cache_for_future_access print child Fastest Doesn t break if node is moved in the Scene tree dock Node must be selected in the inspector as it s an exported property export var child Node func lookup_and_cache_for_future_access print child Delegate reference assignment to an external source Con need to perform a validation check Pro node makes no requirements of its external structure prop can come from anywhere var prop func call_me_after_prop_is_initialized_by_parent Validate prop in one of three ways Fail with no notification if not prop return Fail with an error message if not prop printerr prop wasn t initialized return Fail and terminate NOTE Scripts run from a release export template don t run assert s assert prop prop wasn t initialized Use an autoload Dangerous for typical nodes but useful for true singleton nodes that manage their own data and don t interfere with other objects func reference_a_global_autoloaded_variable print globals print globals prop print globals my_getter Copy to clipboard using Godot using System using System Diagnostics public class MyNode Node Slow public void DynamicLookupWithDynamicNodePath GD Print GetNode Child Fastest Lookup node and cache for future access Doesn t break if node moves later private Node _child public void _Ready _child GetNode Child public void LookupAndCacheForFutureAccess GD Print _child Delegate reference assignment to an external source Con need to perform a validation check Pro node makes no requirements of its external structure prop can come from anywhere public object Prop get set public void CallMeAfterPropIsInitializedByParent Validate prop in one of three ways Fail with no notification if prop null return Fail with an error message if prop null GD PrintErr Prop wasn t initialized return Fail with an exception if prop null throw new InvalidOperationException Prop wasn t initialized Fail and terminate Note Scripts run from a release export template don t run Debug Assert s Debug Assert Prop Prop wasn t initialized Use an autoload Dangerous for typical nodes but useful for true singleton nodes that manage their own data and don t interfere with other objects public void ReferenceAGlobalAutoloadedVariable MyNode globals GetNode MyNode root Globals GD Print globals GD Print globals Prop GD Print globals MyGetter Copy to clipboard Accessing data or logic from an object Godot s scripting API is duck typed This means that if a script executes an operation Godot doesn t validate that it supports the operation by type It instead checks that the object implements the individual method For example the CanvasItem class has a visible property All properties exposed to the scripting API are in fact a setter and getter pair bound to a name If one tried to access CanvasItem visible then Godot would do the following checks in order If the object has a script attached it will attempt to set the property through the script This leaves open the opportunity for scripts to override a property defined on a base object by overriding the setter method for the property If the script does not have the property it performs a HashMap lookup in the ClassDB for the visible property against the CanvasItem class and all of its inherited types If found it will call the bound setter or getter For more information about HashMaps see the data preferences docs If not found it does an explicit check to see if the user wants to access the script or meta properties If not it checks for a _set _get implementation depending on type of access in the CanvasItem and its inherited types These methods can execute logic that gives the impression that the Object has a property This is also the case with the _get_property_list method Note that this happens even for non legal symbol names such as names starting with a digit or containing a slash As a result this duck typed system can locate a property either in the script the object s class or any class that object inherits but only for things which extend Object Godot provides a variety of options for performing runtime checks on these accesses A duck typed property access These will be property checks as described above If the operation isn t supported by the object execution will halt GDScript C All Objects have duck typed get set and call wrapper methods get_parent set visible false Using a symbol accessor rather than a string in the method call will implicitly call the set method which in turn calls the setter method bound to the property through the property lookup sequence get_parent visible false Note that if one defines a _set and _get that describe a property s existence but the property isn t recognized in any _get_property_list method then the set and get methods will work but the symbol access will claim it can t find the property Copy to clipboard All Objects have duck typed Get Set and Call wrapper methods GetParent Set visible false C is a static language so it has no dynamic symbol access e g GetParent Visible false won t work Copy to clipboard A method check In the case of CanvasItem visible one can access the methods set_visible and is_visible like any other method GDScript C var child get_child 0 Dynamic lookup child call set_visible false Symbol based dynamic lookup GDScript aliases this into a call method behind the scenes child set_visible false Dynamic lookup checks for method existence first if child has_method set_visible child set_visible false Cast check followed by dynamic lookup Useful when you make multiple safe calls knowing that the class implements them all No need for repeated checks Tricky if one executes a cast check for a user defined type as it forces more dependencies if child is CanvasItem child set_visible false child show_on_top true If one does not wish to fail these checks without notifying users one can use an assert instead These will trigger runtime errors immediately if not true assert child has_method set_visible assert child is_in_group offer assert child is CanvasItem Can also use object labels to imply an interface i e assume it implements certain methods There are two types both of which only exist for Nodes Names and Groups Assuming A Quest object exists and 1 that it can complete or fail and that it will have text available before and after each state 1 Use a name var quest Quest print quest text quest complete or quest fail print quest text implied new text content 2 Use a group for a_child in get_children if a_child is_in_group quest print quest text quest complete or quest fail print quest text implied new text content Note that these interfaces are project specific conventions the team defines which means documentation But maybe worth it Any script that conforms to the documented interface of the name or group can fill in for it Copy to clipboard Node child GetChild 0 Dynamic lookup child Call SetVisible false Dynamic lookup checks for method existence first if child HasMethod SetVisible child Call SetVisible false Use a group as if it were an interface i e assume it implements certain methods Requires good documentation for the project to keep it reliable unless you make editor tools to enforce it at editor time Note this is generally not as good as using an actual interface in C but you can t set C interfaces from the editor since they are language level features if child IsInGroup Offer child Call Accept child Call Reject Cast check followed by static lookup CanvasItem ci GetParent as CanvasItem if ci null ci SetVisible false useful when you need to make multiple safe calls to the class ci ShowOnTop true If one does not wish to fail these checks without notifying users one can use an assert instead These will trigger runtime errors immediately if not true Debug Assert child HasMethod set_visible Debug Assert child IsInGroup offer Debug Assert CanvasItem InstanceHas child Can also use object labels to imply an interface i e assume it implements certain methods There are two types both of which only exist for Nodes Names and Groups Assuming A Quest object exists and 1 that it can Complete or Fail and that it will have Text available before and after each state 1 Use a name Node quest GetNode Quest GD Print quest Get Text quest Call Complete or Fail GD Print quest Get Text Implied new text content 2 Use a group foreach Node AChild in GetChildren if AChild IsInGroup quest GD Print quest Get Text quest Call Complete or Fail GD Print quest Get Text Implied new text content Note that these interfaces are project specific conventions the team defines which means documentation But maybe worth it Any script that conforms to the documented interface of the name or group can fill in for it Also note that in C these methods will be slower than static accesses with traditional interfaces Copy to clipboard Outsource the access to a Callable These may be useful in cases where one needs the max level of freedom from dependencies In this case one relies on an external context to setup the method GDScript C child gd extends Node var fn null func my_method if fn fn call parent gd extends Node onready var child Child func _ready child fn print_me child my_method func print_me print name Copy to clipboard Child cs using Godot public partial class Child Node public Callable Callable get set public void MyMethod Callable Call Parent cs using Godot public partial class Parent Node private Child _child public void _Ready _child GetNode Child Child _child Callable Callable From PrintMe _child MyMethod public void PrintMe GD Print Name Copy to clipboard These strategies contribute to Godot s flexible design Between them users have a breadth of tools to meet their specific needs User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Godot notifications Every Object in Godot implements a _notification method Its purpose is to allow the Object to respond to a variety of engine level callbacks that may relate to it For example if the engine tells a CanvasItem to draw it will call _notification NOTIFICATION_DRAW Some of these notifications like draw are useful to override in scripts So much so that Godot exposes many of them with dedicated functions _ready NOTIFICATION_READY _enter_tree NOTIFICATION_ENTER_TREE _exit_tree NOTIFICATION_EXIT_TREE _process delta NOTIFICATION_PROCESS _physics_process delta NOTIFICATION_PHYSICS_PROCESS _draw NOTIFICATION_DRAW What users might not realize is that notifications exist for types other than Node alone for example Object NOTIFICATION_POSTINITIALIZE a callback that triggers during object initialization Not accessible to scripts Object NOTIFICATION_PREDELETE a callback that triggers before the engine deletes an Object i e a destructor And many of the callbacks that do exist in Nodes don t have any dedicated methods but are still quite useful Node NOTIFICATION_PARENTED a callback that triggers anytime one adds a child node to another node Node NOTIFICATION_UNPARENTED a callback that triggers anytime one removes a child node from another node One can access all these custom notifications from the universal _notification method Note Methods in the documentation labeled as virtual are also intended to be overridden by scripts A classic example is the _init method in Object While it has no NOTIFICATION_ equivalent the engine still calls the method Most languages except C rely on it as a constructor So in which situation should one use each of these notifications or virtual functions _process vs _physics_process vs _input Use _process when one needs a framerate dependent delta time between frames If code that updates object data needs to update as often as possible this is the right place Recurring logic checks and data caching often execute here but it comes down to the frequency at which one needs the evaluations to update If they don t need to execute every frame then implementing a Timer timeout loop is another option GDScript C Allows for recurring operations that don t trigger script logic every frame or even every fixed frame func _ready var timer Timer new timer autostart true timer wait_time 0 5 add_child timer timer timeout connect func print This block runs every 0 5 seconds Copy to clipboard using Godot public partial class MyNode Node Allows for recurring operations that don t trigger script logic every frame or even every fixed frame public override void _Ready var timer new Timer timer Autostart true timer WaitTime 0 5 AddChild timer timer Timeout GD Print This block runs every 0 5 seconds Copy to clipboard Use _physics_process when one needs a framerate independent delta time between frames If code needs consistent updates over time regardless of how fast or slow time advances this is the right place Recurring kinematic and object transform operations should execute here While it is possible to achieve the best performance one should avoid making input checks during these callbacks _process and _physics_process will trigger at every opportunity they do not rest by default In contrast _input callbacks will trigger only on frames in which the engine has actually detected the input One can check for input actions within the input callbacks just the same If one wants to use delta time one can fetch it from the related delta time methods as needed GDScript C Called every frame even when the engine detects no input func _process delta if Input is_action_just_pressed ui_select print delta Called during every input event func _unhandled_input event match event get_class InputEventKey if Input is_action_just_pressed ui_accept print get_process_delta_time Copy to clipboard using Godot public partial class MyNode Node Called every frame even when the engine detects no input public void _Process double delta if Input IsActionJustPressed ui_select GD Print delta Called during every input event Equally true for _input public void _UnhandledInput InputEvent event switch event case InputEventKey if Input IsActionJustPressed ui_accept GD Print GetProcessDeltaTime break Copy to clipboard _init vs initialization vs export If the script initializes its own node subtree without a scene that code should execute in _init Other property or SceneTree independent initializations should also run here Note The C equivalent to GDScript s _init method is the constructor _init triggers before _enter_tree or _ready but after a script creates and initializes its properties When instantiating a scene property values will set up according to the following sequence Initial value assignment the property is assigned its initialization value or its default value if one is not specified If a setter exists it is not used _init assignment the property s value is replaced by any assignments made in _init triggering the setter Exported value assignment an exported property s value is again replaced by any value set in the Inspector triggering the setter GDScript C test is initialized to one without triggering the setter export var test String one set value test value func _init Triggers the setter changing test s value from one to two test two If someone sets test to three from the Inspector it would trigger the setter changing test s value from two to three Copy to clipboard using Godot public partial class MyNode Node private string _test one Export public string Test get return _test set _test value public MyNode Triggers the setter changing _test s value from one to two Test two If someone sets Test to three in the Inspector it would trigger the setter changing _test s value from two to three Copy to clipboard As a result instantiating a script versus a scene may affect both the initialization and the number of times the engine calls the setter _ready vs _enter_tree vs NOTIFICATION_PARENTED When instantiating a scene connected to the first executed scene Godot will instantiate nodes down the tree making _init calls and build the tree going downwards from the root This causes _enter_tree calls to cascade down the tree Once the tree is complete leaf nodes call _ready A node will call this method once all child nodes have finished calling theirs This then causes a reverse cascade going up back to the tree s root When instantiating a script or a standalone scene nodes are not added to the SceneTree upon creation so no _enter_tree callbacks trigger Instead only the _init call occurs When the scene is added to the SceneTree the _enter_tree and _ready calls occur If one needs to trigger behavior that occurs as nodes parent to another regardless of whether it occurs as part of the main active scene or not one can use the PARENTED notification For example here is a snippet that connects a node s method to a custom signal on the parent node without failing Useful on data centric nodes that one might create at runtime GDScript C extends Node var parent_cache func connection_check return parent_cache has_user_signal interacted_with func _notification what match what NOTIFICATION_PARENTED parent_cache get_parent if connection_check parent_cache interacted_with connect _on_parent_interacted_with NOTIFICATION_UNPARENTED if connection_check parent_cache interacted_with disconnect _on_parent_interacted_with func _on_parent_interacted_with print I m reacting to my parent s interaction Copy to clipboard using Godot public partial class MyNode Node private Node _parentCache public bool ConnectionCheck return _parentCache HasUserSignal InteractedWith public void _Notification int what switch what case NotificationParented _parentCache GetParent if ConnectionCheck _parentCache Connect InteractedWith Callable From OnParentInteractedWith break case NotificationUnparented if ConnectionCheck _parentCache Disconnect InteractedWith Callable From OnParentInteractedWith break private void OnParentInteractedWith GD Print I m reacting to my parent s interaction Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Data preferences Ever wondered whether one should approach problem X with data structure Y or Z This article covers a variety of topics related to these dilemmas Note This article makes references to something time operations This terminology comes from algorithm analysis Big O Notation Long story short it describes the worst case scenario of runtime length In laymen s terms As the size of a problem domain increases the runtime length of the algorithm Constant time O 1 does not increase Logarithmic time O log n increases at a slow rate Linear time O n increases at the same rate Etc Imagine if one had to process 3 million data points within a single frame It would be impossible to craft the feature with a linear time algorithm since the sheer size of the data would increase the runtime far beyond the time allotted In comparison using a constant time algorithm could handle the operation without issue By and large developers want to avoid engaging in linear time operations as much as possible But if one keeps the scale of a linear time operation small and if one does not need to perform the operation often then it may be acceptable Balancing these requirements and choosing the right algorithm data structure for the job is part of what makes programmers skills valuable Array vs Dictionary vs Object Godot stores all variables in the scripting API in the Variant class Variants can store Variant compatible data structures such as Array and Dictionary as well as Objects Godot implements Array as a Vector Variant The engine stores the Array contents in a contiguous section of memory i e they are in a row adjacent to each other Note For those unfamiliar with C a Vector is the name of the array object in traditional C libraries It is a templated type meaning that its records can only contain a particular type denoted by angled brackets So for example a PackedStringArray would be something like a Vector String Contiguous memory stores imply the following operation performance Iterate Fastest Great for loops Op All it does is increment a counter to get to the next record Insert Erase Move Position dependent Generally slow Op Adding removing moving content involves moving the adjacent records over to make room fill space Fast add remove from the end Slow add remove from an arbitrary position Slowest add remove from the front If doing many inserts removals from the front then invert the array do a loop which executes the Array changes at the end re invert the array This makes only 2 copies of the array still constant time but slow versus copying roughly 1 2 of the array on average N times linear time Get Set Fastest by position E g can request 0th 2nd 10th record etc but cannot specify which record you want Op 1 addition operation from array start position up to desired index Find Slowest Identifies the index position of a value Op Must iterate through array and compare values until one finds a match Performance is also dependent on whether one needs an exhaustive search If kept ordered custom search operations can bring it to logarithmic time relatively fast Laymen users won t be comfortable with this though Done by re sorting the Array after every edit and writing an ordered aware search algorithm Godot implements Dictionary as an OrderedHashMap Variant Variant The engine stores a small array initialized to 2 3 or 8 records of key value pairs When one attempts to access a value they provide it a key It then hashes the key i e converts it into a number The hash is used to calculate the index into the array As an array the OHM then has a quick lookup within the table of keys mapped to values When the HashMap becomes too full it increases to the next power of 2 so 16 records then 32 etc and rebuilds the structure Hashes are to reduce the chance of a key collision If one occurs the table must recalculate another index for the value that takes the previous position into account In all this results in constant time access to all records at the expense of memory and some minor operational efficiency Hashing every key an arbitrary number of times Hash operations are constant time so even if an algorithm must do more than one as long as the number of hash calculations doesn t become too dependent on the density of the table things will stay fast Which leads to Maintaining an ever growing size for the table HashMaps maintain gaps of unused memory interspersed in the table on purpose to reduce hash collisions and maintain the speed of accesses This is why it constantly increases in size exponentially by powers of 2 As one might be able to tell Dictionaries specialize in tasks that Arrays do not An overview of their operational details is as follows Iterate Fast Op Iterate over the map s internal vector of hashes Return each key Afterwards users then use the key to jump to and return the desired value Insert Erase Move Fastest Op Hash the given key Do 1 addition operation to look up the appropriate value array start offset Move is two of these one insert one erase The map must do some maintenance to preserve its capabilities update ordered List of records determine if table density mandates a need to expand table capacity The Dictionary remembers in what order users inserted its keys This enables it to execute reliable iterations Get Set Fastest Same as a lookup by key Op Same as insert erase move Find Slowest Identifies the key of a value Op Must iterate through records and compare the value until a match is found Note that Godot does not provide this feature out of the box because they aren t meant for this task Godot implements Objects as stupid but dynamic containers of data content Objects query data sources when posed questions For example to answer the question do you have a property called position it might ask its script or the ClassDB One can find more information about what objects are and how they work in the Applying object oriented principles in Godot article The important detail here is the complexity of the Object s task Every time it performs one of these multi source queries it runs through several iteration loops and HashMap lookups What s more the queries are linear time operations dependent on the Object s inheritance hierarchy size If the class the Object queries its current class doesn t find anything the request defers to the next base class all the way up until the original Object class While these are each fast operations in isolation the fact that it must make so many checks is what makes them slower than both of the alternatives for looking up data Note When developers mention how slow the scripting API is it is this chain of queries they refer to Compared to compiled C code where the application knows exactly where to go to find anything it is inevitable that scripting API operations will take much longer They must locate the source of any relevant data before they can attempt to access it The reason GDScript is slow is because every operation it performs passes through this system C can process some content at higher speeds via more optimized bytecode But if the C script calls into an engine class content or if the script tries to access something external to it it will go through this pipeline NativeScript C goes even further and keeps everything internal by default Calls into external structures will go through the scripting API In NativeScript C registering methods to expose them to the scripting API is a manual task It is at this point that external non C classes will use the API to locate them So assuming one extends from Reference to create a data structure like an Array or Dictionary why choose an Object over the other two options Control With objects comes the ability to create more sophisticated structures One can layer abstractions over the data to ensure the external API doesn t change in response to internal data structure changes What s more Objects can have signals allowing for reactive behavior Clarity Objects are a reliable data source when it comes to the data that scripts and engine classes define for them Properties may not hold the values one expects but one doesn t need to worry about whether the property exists in the first place Convenience If one already has a similar data structure in mind then extending from an existing class makes the task of building the data structure much easier In comparison Arrays and Dictionaries don t fulfill all use cases one might have Objects also give users the opportunity to create even more specialized data structures With it one can design their own List Binary Search Tree Heap Splay Tree Graph Disjoint Set and any host of other options Why not use Node for tree structures one might ask Well the Node class contains things that won t be relevant to one s custom data structure As such it can be helpful to construct one s own node type when building tree structures GDScript C extends Object class_name TreeNode var _parent TreeNode null var _children func _notification p_what match p_what NOTIFICATION_PREDELETE Destructor for a_child in _children a_child free Copy to clipboard using Godot using System Collections Generic Can decide whether to expose getters setters for properties later public partial class TreeNode GodotObject private TreeNode _parent null private List TreeNode _children new public override void _Notification int what switch what case NotificationPredelete foreach TreeNode child in _children node Free break Copy to clipboard From here one can then create their own structures with specific features limited only by their imagination Enumerations int vs string Most languages offer an enumeration type option GDScript is no different but unlike most other languages it allows one to use either integers or strings for the enum values the latter only when using the export_enum annotation in GDScript The question then arises which should one use The short answer is whichever you are more comfortable with This is a feature specific to GDScript and not Godot scripting in general The languages prioritizes usability over performance On a technical level integer comparisons constant time will happen faster than string comparisons linear time If one wants to keep up other languages conventions though then one should use integers The primary issue with using integers comes up when one wants to print an enum value As integers attempting to print MY_ENUM will print 5 or what have you rather than something like MyEnum To print an integer enum one would have to write a Dictionary that maps the corresponding string value for each enum If the primary purpose of using an enum is for printing values and one wishes to group them together as related concepts then it makes sense to use them as strings That way a separate data structure to execute on the printing is unnecessary AnimatedTexture vs AnimatedSprite2D vs AnimationPlayer vs AnimationTree Under what circumstances should one use each of Godot s animation classes The answer may not be immediately clear to new Godot users AnimatedTexture is a texture that the engine draws as an animated loop rather than a static image Users can manipulate the rate at which it moves across each section of the texture FPS the number of regions contained within the texture frames Godot s RenderingServer then draws the regions in sequence at the prescribed rate The good news is that this involves no extra logic on the part of the engine The bad news is that users have very little control Also note that AnimatedTexture is a Resource unlike the other Node objects discussed here One might create a Sprite2D node that uses AnimatedTexture as its texture Or something the others can t do one could add AnimatedTextures as tiles in a TileSet and integrate it with a TileMapLayer for many auto animating backgrounds that all render in a single batched draw call The AnimatedSprite2D node in combination with the SpriteFrames resource allows one to create a variety of animation sequences through spritesheets flip between animations and control their speed regional offset and orientation This makes them well suited to controlling 2D frame based animations If one needs to trigger other effects in relation to animation changes for example create particle effects call functions or manipulate other peripheral elements besides the frame based animation then one will need to use an AnimationPlayer node in conjunction with the AnimatedSprite2D AnimationPlayers are also the tool one will need to use if they wish to design more complex 2D animation systems such as Cut out animations editing sprites transforms at runtime 2D Mesh animations defining a region for the sprite s texture and rigging a skeleton to it Then one animates the bones which stretch and bend the texture in proportion to the bones relationships to each other A mix of the above While one needs an AnimationPlayer to design each of the individual animation sequences for a game it can also be useful to combine animations for blending i e enabling smooth transitions between these animations There may also be a hierarchical structure between animations that one plans out for their object These are the cases where the AnimationTree shines One can find an in depth guide on using the AnimationTree here User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Logic preferences Ever wondered whether one should approach problem X with strategy Y or Z This article covers a variety of topics related to these dilemmas Adding nodes and changing properties which first When initializing nodes from a script at runtime you may need to change properties such as the node s name or position A common dilemma is when should you change those values It is the best practice to change values on a node before adding it to the scene tree Some property s setters have code to update other corresponding values and that code can be slow For most cases this code has no impact on your game s performance but in heavy use cases such as procedural generation it can bring your game to a crawl For these reasons it is always a best practice to set the initial values of a node before adding it to the scene tree Loading vs preloading In GDScript there exists the global preload method It loads resources as early as possible to front load the loading operations and avoid loading resources while in the middle of performance sensitive code Its counterpart the load method loads a resource only when it reaches the load statement That is it will load a resource in place which can cause slowdowns when it occurs in the middle of sensitive processes The load function is also an alias for ResourceLoader load path which is accessible to all scripting languages So when exactly does preloading occur versus loading and when should one use either Let s see an example GDScript C my_buildings gd extends Node Note how constant scripts scenes have a different naming scheme than their property variants This value is a constant so it spawns when the Script object loads The script is preloading the value The advantage here is that the editor can offer autocompletion since it must be a static path const BuildingScn preload res building tscn 1 The script preloads the value so it will load as a dependency of the my_buildings gd script file But because this is a property rather than a constant the object won t copy the preloaded PackedScene resource into the property until the script instantiates with new 2 The preloaded value is inaccessible from the Script object alone As such preloading the value here actually does not benefit anyone 3 Because the user exports the value if this script stored on a node in a scene file the scene instantiation code will overwrite the preloaded initial value anyway wasting it It s usually better to provide null empty or otherwise invalid default values for exports 4 It is when one instantiates this script on its own with new that one will load office tscn rather than the exported value export var a_building PackedScene preload office tscn Uh oh This results in an error One must assign constant values to constants Because load performs a runtime lookup by its very nature one cannot use it to initialize a constant const OfficeScn load res office tscn Successfully loads and only when one instantiates the script Yay var office_scn load res office tscn Copy to clipboard using Godot C and other languages have no concept of preloading public partial class MyBuildings Node This is a read only field it can only be assigned when it s declared or during a constructor public readonly PackedScene Building ResourceLoader Load PackedScene res building tscn public PackedScene ABuilding public override void _Ready Can assign the value during initialization ABuilding GD Load PackedScene res Office tscn Copy to clipboard Preloading allows the script to handle all the loading the moment one loads the script Preloading is useful but there are also times when one doesn t wish for it To distinguish these situations there are a few things one can consider If one cannot determine when the script might load then preloading a resource especially a scene or script could result in further loads one does not expect This could lead to unintentional variable length load times on top of the original script s load operations If something else could replace the value like a scene s exported initialization then preloading the value has no meaning This point isn t a significant factor if one intends to always create the script on its own If one wishes only to import another class resource script or scene then using a preloaded constant is often the best course of action However in exceptional cases one may wish not to do this If the imported class is liable to change then it should be a property instead initialized either using an export or a load and perhaps not even initialized until later If the script requires a great many dependencies and one does not wish to consume so much memory then one may wish to load and unload various dependencies at runtime as circumstances change If one preloads resources into constants then the only way to unload these resources would be to unload the entire script If they are instead loaded properties then one can set them to null and remove all references to the resource entirely which as a RefCounted extending type will cause the resources to delete themselves from memory Large levels static vs dynamic If one is creating a large level which circumstances are most appropriate Should they create the level as one static space Or should they load the level in pieces and shift the world s content as needed Well the simple answer is when the performance requires it The dilemma associated with the two options is one of the age old programming choices does one optimize memory over speed or vice versa The naive answer is to use a static level that loads everything at once But depending on the project this could consume a large amount of memory Wasting users RAM leads to programs running slow or outright crashing from everything else the computer tries to do at the same time No matter what one should break larger scenes into smaller ones to aid in reusability of assets Developers can then design a node that manages the creation loading and deletion unloading of resources and nodes in real time Games with large and varied environments or procedurally generated elements often implement these strategies to avoid wasting memory On the flip side coding a dynamic system is more complex i e uses more programmed logic which results in opportunities for errors and bugs If one isn t careful they can develop a system that bloats the technical debt of the application As such the best options would be To use a static level for smaller games If one has the time resources on a medium large game create a library or plugin that can code the management of nodes and resources If refined over time so as to improve usability and stability then it could evolve into a reliable tool across projects Code the dynamic logic for a medium large game because one has the coding skills but not the time or resources to refine the code game s gotta get done Could potentially refactor later to outsource the code into a plugin For an example of the various ways one can swap scenes around at runtime please see the Change scenes manually documentation User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Project organization Introduction Since Godot has no restrictions on project structure or filesystem usage organizing files when learning the engine can seem challenging This tutorial suggests a workflow which should be a good starting point We will also cover using version control with Godot Organization Godot is scene based in nature and uses the filesystem as is without metadata or an asset database Unlike other engines many resources are contained within the scene itself so the amount of files in the filesystem is considerably lower Considering that the most common approach is to group assets as close to scenes as possible when a project grows it makes it more maintainable As an example one can usually place into a single folder their basic assets such as sprite images 3D model meshes materials and music etc They can then use a separate folder to store built levels that use them project godot docs gdignore See Ignoring specific folders below docs learning html models town house house dae models town house window png models town house door png characters player cubio dae characters player cubio png characters enemies goblin goblin dae characters enemies goblin goblin png characters npcs suzanne suzanne dae characters npcs suzanne suzanne png levels riverdale riverdale scn Copy to clipboard Style guide For consistency across projects we recommend following these guidelines Use snake_case for folder and file names with the exception of C scripts This sidesteps case sensitivity issues that can crop up after exporting a project on Windows C scripts are an exception to this rule as the convention is to name them after the class name which should be in PascalCase Use PascalCase for node names as this matches built in node casing In general keep third party resources in a top level addons folder even if they aren t editor plugins This makes it easier to track which files are third party There are some exceptions to this rule for instance if you use third party game assets for a character it makes more sense to include them within the same folder as the character scenes and scripts Importing Godot versions prior to 3 0 did the import process from files outside the project While this can be useful in large projects it resulted in an organization hassle for most developers Because of this assets are now transparently imported from within the project folder Ignoring specific folders To prevent Godot from importing files contained in a specific folder create an empty file called gdignore in the folder the leading is required This can be useful to speed up the initial project importing Note To create a file whose name starts with a dot on Windows place a dot at both the beginning and end of the filename gdignore Windows will automatically remove the trailing dot when you confirm the name Alternatively you can use a text editor such as Notepad or use the following command in a command prompt type nul gdignore Once the folder is ignored resources in that folder can t be loaded anymore using the load and preload methods Ignoring a folder will also automatically hide it from the FileSystem dock which can be useful to reduce clutter Note that the gdignore file s contents are ignored which is why the file should be empty It does not support patterns like gitignore files do Case sensitivity Windows and recent macOS versions use case insensitive filesystems by default whereas Linux distributions use a case sensitive filesystem by default This can cause issues after exporting a project since Godot s PCK virtual filesystem is case sensitive To avoid this it s recommended to stick to snake_case naming for all files in the project and lowercase characters in general Note You can break this rule when style guides say otherwise such as the C style guide Still be consistent to avoid mistakes On Windows 10 to further avoid mistakes related to case sensitivity you can also make the project folder case sensitive After enabling the Windows Subsystem for Linux feature run the following command in a PowerShell window To enable case sensitivity fsutil file setcasesensitiveinfo path to project folder enable To disable case sensitivity fsutil file setcasesensitiveinfo path to project folder disable Copy to clipboard If you haven t enabled the Windows Subsystem for Linux you can enter the following line in a PowerShell window running as Administrator then reboot when asked Enable WindowsOptionalFeature Online FeatureName Microsoft Windows Subsystem Linux Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Version control systems Introduction Godot aims to be VCS friendly and generate mostly readable and mergeable files Version control plugins Godot also supports the use of version control systems in the editor itself However version control in the editor requires a plugin for the specific VCS you re using As of July 2023 there is only a Git plugin available but the community may create additional VCS plugins Official Git plugin Using Git from inside the editor is supported with an official plugin You can find the latest releases on GitHub Documentation on how to use the Git plugin can be found on its wiki Files to exclude from VCS Note This lists files and folders that should be ignored from version control in Godot 4 1 and later The list of files of folders that should be ignored from version control in Godot 3 x and Godot 4 0 is entirely different This is important as Godot 3 x and 4 0 may store sensitive credentials in export_presets cfg unlike Godot 4 1 and later If you are using Godot 3 check the 3 5 version of this documentation page instead There are some files and folders Godot automatically creates when opening a project in the editor for the first time To avoid bloating your version control repository with generated data you should add them to your VCS ignore godot This folder stores various project cache data translation These files are binary imported translations generated from CSV files You can make the Godot project manager generate version control metadata for you automatically when creating a project When choosing the Git option this creates gitignore and gitattributes files in the project root Creating version control metadata in the project manager s New Project dialog In existing projects select the Project menu at the top of the editor then choose Version Control Generate Version Control Metadata This creates the same files as if the operation was performed in the project manager Working with Git on Windows Most Git for Windows clients are configured with the core autocrlf set to true This can lead to files unnecessarily being marked as modified by Git due to their line endings being converted from LF to CRLF automatically It is better to set this option as git config global core autocrlf input Copy to clipboard Creating version control metadata using the project manager or editor will automatically enforce LF line endings using the gitattributes file In this case you don t need to change your Git configuration User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Troubleshooting This page lists common issues encountered when using Godot and possible solutions See also See Using the Web editor for caveats specific to the Web version of the Godot editor The editor runs slowly and uses all my CPU and GPU resources making my computer noisy This is a known issue especially on macOS since most Macs have Retina displays Due to Retina displays higher pixel density everything has to be rendered at a higher resolution This increases the load on the GPU and decreases perceived performance There are several ways to improve performance and battery life In 3D click the Perspective button in the top left corner and enable Half Resolution The 3D viewport will now be rendered at half resolution which can be up to 4 times faster Open the Editor Settings and increase the value of Low Processor Mode Sleep µsec to 33000 30 FPS This value determines the amount of microseconds between frames to render Higher values will make the editor feel less reactive but will help decrease CPU and GPU usage significantly If you have a node that causes the editor to redraw continuously such as particles hide it and show it using a script in the _ready method This way it will be hidden in the editor but will still be visible in the running project The editor stutters and flickers on my variable refresh rate monitor G Sync FreeSync This is a known issue Variable refresh rate monitors need to adjust their gamma curves continuously to emit a consistent amount of light over time This can cause flicker to appear in dark areas of the image when the refresh rate varies a lot which occurs as the Godot editor only redraws when necessary There are several workarounds for this Enable Interface Editor Update Continuously in the Editor Settings Keep in mind this will increase power usage and heat noise emissions since the editor will now be rendering constantly even if nothing has changed on screen To alleviate this you can increase Low Processor Mode Sleep µsec to 33000 30 FPS in the Editor Settings This value determines the amount of microseconds between frames to render Higher values will make the editor feel less reactive but will help decrease CPU and GPU usage significantly Alternatively disable variable refresh rate on your monitor or in the graphics driver VRR flicker can be reduced on some displays using the VRR Control or Fine Tune Dark Areas options in your monitor s OSD These options may increase input lag or result in crushed blacks If using an OLED display use the Black OLED editor theme preset in the Editor Settings This hides VRR flicker thanks to OLED s perfect black levels The editor or project takes a very long time to start When using one of the Vulkan based renderers Forward or Forward Mobile the first startup is expected to be relatively long This is because shaders need to be compiled before they can be cached Shaders also need to be cached again after updating Godot after updating graphics drivers or after switching graphics cards If the issue persists after the first startup this is a known bug on Windows when you have specific USB peripherals connected In particular Corsair s iCUE software seems to cause this bug Try updating your USB peripherals drivers to their latest version If the bug persists you need to disconnect the specific peripheral before opening the editor You can then connect the peripheral again Firewall software such as Portmaster may also cause the debug port to be blocked This causes the project to take a long time to start while being unable to use debugging features in the editor such as viewing print output You can work this around by changing the debug port used by the project in the Editor Settings Network Debug Remote Port The default is 6007 try another value that is greater than 1024 such as 7007 On Windows when loading the project for the first time after the PC is turned on Windows Defender will cause the filesystem cache validation on project startup to take significantly longer This is especially noticeable in projects with a large number of files Consinder adding the project folder to the list of exclusions by going to Virus threat protection Virus threat protection settings Add or remove exclusions The Godot editor appears frozen after clicking the system console When running Godot on Windows with the system console enabled you can accidentally enable selection mode by clicking inside the command window This Windows specific behavior pauses the application to let you select text inside the system console Godot cannot override this system specific behavior To solve this select the system console window and press Enter to leave selection mode The Godot editor s macOS dock icon gets duplicated every time it is manually moved If you open the Godot editor and manually change the position of the dock icon then restart the editor you will get a duplicate dock icon all the way to the right of the dock This is due to a design limitation of the macOS dock The only known way to resolve this would be to merge the project manager and editor into a single process which means the project manager would no longer spawn a separate process when starting the editor While using a single process instance would bring several benefits it isn t planned to be done in the near future due to the complexity of the task To avoid this issue keep the Godot editor s dock icon at its default location as created by macOS Some text such as NO DC appears in the top left corner of the Project Manager and editor window This is caused by the NVIDIA graphics driver injecting an overlay to display information To disable this overlay on Windows restore your graphics driver settings to the default values in the NVIDIA Control Panel To disable this overlay on Linux open nvidia settings go to X Screen 0 OpenGL Settings then uncheck Enable Graphics API Visual Indicator A microphone or refresh icon appears in the bottom right corner of the Project Manager and editor window This is caused by the NVIDIA graphics driver injecting an overlay to display instant replay information on ShadowPlay recording This overlay can only be seen on Windows as Linux does not have support for ShadowPlay To disable this overlay press Alt Z default shortcut for the NVIDIA overlay and disable Settings HUD Layout Status Indicator in the NVIDIA overlay Alternatively you can install the new NVIDIA app https www nvidia com en us software nvidia app which replaces GeForce Experience and does not suffer from this issue Unlike GeForce Experience the NVIDIA app draws the replay indicator in the corner of the screen as opposed to the corner of each window The editor or project appears overly sharp or blurry Correct appearance left oversharpened appearance due to graphics driver sharpening right If the editor or project appears overly sharp this is likely due to image sharpening being forced on all Vulkan or OpenGL applications by your graphics driver You can disable this behavior in the graphics driver s control panel NVIDIA Windows Open the start menu and choose NVIDIA Control Panel Open the Manage 3D settings tab on the left In the list in the middle scroll to Image Sharpening and set it to Sharpening Off AMD Windows Open the start menu and choose AMD Software Click the settings cog icon in the top right corner Go to the Graphics tab then disable Radeon Image Sharpening If the editor or project appears overly blurry this is likely due to FXAA being forced on all Vulkan or OpenGL applications by your graphics driver NVIDIA Windows Open the start menu and choose NVIDIA Control Panel Open the Manage 3D settings tab on the left In the list in the middle scroll to Fast Approximate Antialiasing and set it to Application Controlled NVIDIA Linux Open the applications menu and choose NVIDIA X Server Settings Select to Antialiasing Settings on the left then uncheck Enable FXAA AMD Windows Open the start menu and choose AMD Software Click the settings cog icon in the top right corner Go to the Graphics tab scroll to the bottom and click Advanced to unfold its settings Disable Morphological Anti Aliasing Third party vendor independent utilities such as vkBasalt may also force sharpening or FXAA on all Vulkan applications You may want to check their configuration as well After changing options in the graphics driver or third party utilities restart Godot to make the changes effective If you still wish to force sharpening or FXAA on other applications it s recommended to do so on a per application basis using the application profiles system provided by graphics drivers control panels The editor or project appears to have washed out colors On Windows this is usually caused by incorrect OS or monitor settings as Godot currently does not support HDR output even though it may internally render in HDR As most displays are not designed to display SDR content in HDR mode it is recommended to disable HDR in the Windows settings when not running applications that use HDR output On Windows 11 this can be done by pressing Windows Alt B this shortcut is part of the Xbox Game Bar app To toggle HDR automatically based on applications currently running you can use AutoActions If you insist on leaving HDR enabled it is possible to somewhat improve the result by ensuring the display is configured to use HGIG tonemapping as opposed to DTM then using the Windows HDR calibration app It is also strongly recommended to use Windows 11 instead of Windows 10 when using HDR The end result will still likely be inferior to disabling HDR on the display though Support for HDR output is planned in a future release The editor project freezes or displays glitched visuals after resuming the PC from suspend This is a known issue on Linux with NVIDIA graphics when using the proprietary driver There is no definitive fix yet as suspend on Linux NVIDIA is often buggy when OpenGL or Vulkan is involved The Compatibility rendering method which uses OpenGL is generally less prone to suspend related issues compared to the Forward and Forward Mobile rendering methods which use Vulkan The NVIDIA driver offers an experimental option to preserve video memory after suspend which may resolve this issue This option has been reported to work better with more recent NVIDIA driver versions To avoid losing work save scenes in the editor before putting the PC to sleep The project works when run from the editor but fails to load some files when running from an exported copy This is usually caused by forgetting to specify a filter for non resource files in the Export dialog By default Godot will only include actual resources into the PCK file Some files commonly used such as JSON files are not considered resources For example if you load test json in the exported project you need to specify json in the non resource export filter See Resource options for more information Also note that files and folders whose names begin with a period will never be included in the exported project This is done to prevent version control folders like git from being included in the exported PCK file On Windows this can also be due to case sensitivity issues If you reference a resource in your script with a different case than on the filesystem loading will fail once you export the project This is because the virtual PCK filesystem is case sensitive while Windows s filesystem is case insensitive by default User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Editor introduction In this section we cover the Godot editor in general from its interface to using it with the command line Editor s interface The following pages explain how to use the various windows workspaces and docks that make up the Godot editor We cover some specific editors interface in other sections where appropriate For example the animation editor Using the Project Manager The Inspector Project Settings Default editor shortcuts Customizing the interface Android editor Godot offers a native port of the editor running entirely on Android devices The Android port can be downloaded from the Android Downloads page While we strive for feature parity with the Desktop version of the editor the Android port has a certain amount of caveats you should be aware of Using the Android editor Web editor Godot offers an HTML5 version of the editor running entirely in your browser No download is required to use it but it has a certain amount of caveats you should be aware of Using the Web editor Advanced features The articles below focus on advanced features useful for experienced developers such as calling Godot from the command line and using an external text editor like Visual Studio Code or Emacs Command line tutorial Using an external text editor Managing editor features Godot allows you to remove features from the editor This may be useful if you re an educator trying to ease students into the editor slowly or if you re working on a project that s only 2D or only 3D and don t want to see what you don t need Managing editor features Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using the Project Manager When you launch Godot the first window you see is the Project Manager It lets you create remove import or play game projects To change the editors language click on the Settings Button in the top right corner In Project Manager Settings you can change the interface language from the language dropdown menu which is the system default language by default You can also change the theme of the editor the display scale for different interface element sizes and the availability of online functionality using network mode If network mode is online Godot will also check and inform you about new versions of Godot The directory naming convention can also be changed to replace spaces according to the chosen format when creating folders automatically Creating and importing projects To create a new project Click the Create button on the top left of the window Give the project a name choose an empty folder on your computer to save the files Alternatively you can enable Create Folder option to automatically create a new sub folder with the project name following the directory naming convention set in the settings An empty folder will show a green tick on the right Select one of the rendering backends this can also be changed later Click the Create Edit button to create the project folder and open it in the editor Note You can optionally choose a version control system Currently only git is supported and it needs the Godot Git Plugin to be installed either manually or using the Asset Library To learn more about the Godot Git Plugin see its wiki Using the file browser Click the Browse button to open Godot s file browser You can pick a location or type the folder s path in the Path field after choosing a drive Left of the path field on the top row contains arrows to navigate backward and forward through the last visited locations The up arrow navigates to parent folder On the right side of the path field there are buttons to refresh the current folder s contents favorite unfavorite the current folder and show hide hidden folders Next the buttons to switch the display type of the folders and files between grid view and list view are seen The last button on the right will create a new folder Favorited folders will be displayed on the left side under the Favorites section You can sort the favorites using the up and down buttons in this section Last chosen folders will be listed under the Recent list Opening and importing projects The next time you open the Project Manager you ll see your new project in the list Double click on it to open it in the editor You can similarly import existing projects using the Import button Locate the folder that contains the project or the project godot file to import and edit it Alternatively it is possible to choose a zip file to be automatically extracted by Godot When the folder path is correct you ll see a green checkmark Downloading demos and templates From the Asset Library tab you can download open source project templates and demos from the Asset Library to help you get started faster The first time you open this tab you ll notice that it s asking you to go online For privacy reasons the project manager and Godot editor can t access the internet by default To enable accessing the internet click the Go Online button This will also allow project manager to notify you about updates If you wish to turn this off in the future go into project manager settings and change Network Mode to Offline Now that Godot is connected to the internet you can download a demo or template to do this Click on its title On the page that opens click the download button Once it finished downloading click install and choose where you want to save the project Managing projects with tags For users with a lot of projects on one PC it can be a lot to keep track of To aid in this Godot allows you to create project tags To add a tag to a project click on the project in the project manager then click on the Manage Tags button This will open up the manage project tags window To add a tag click the plus button Type out the tag name and click OK Your project will now have a tag added to it These tags can be used for any other project in your project manager To show projects with a specific tag only you can click on the tags or write tag and type the tag you would like to search for in the filter bar To limit the results using multiple tags you can click on another tag or add tag after a space and type another tag in the filter bar In addition tags will stay with projects So if you tag your project send it to another machine and import it into the project manager you will see the tags you created To remove a tag from your project manager it must be removed from all the projects it s used by Once that s done close the project manager open it up again and the tag should be gone User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request The Inspector This page explains how the Inspector dock works in depth You will learn how to edit properties fold and unfold areas use the search bar and more Warning This page is a work in progress Overview of the interface Let s start by looking at the dock s main parts At the top are the file and navigation buttons Below it you can find the selected node s name its type and the tools menu on the right side If you click the tool menu icon a drop down menu offers some view and edit options Then comes the search bar Type anything in it to filter displayed properties Delete the text to clear the search User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Project Settings This page explains how to use the Project Settings window If you would like to access and modify project settings via code see ProjectSettings Godot stores the project settings in a project godot file a plain text file in INI format There are dozens of settings you can change to control a project s execution To simplify this process Godot provides a project settings dialog which acts as a front end to editing a project godot file To access that dialog select Project Project Settings Once the window opens let s select a main scene Locate the Application Run Main Scene property and click on it to select hello tscn The project settings dialog provides a lot of options that can be saved to a project godot file and shows their default values If you change a value a tick appears to the left of its name This means that the property will be saved in the project godot file and remembered User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Default editor shortcuts Many of Godot Editor functions can be executed with keyboard shortcuts This page lists functions which have associated shortcuts by default but many others are available for customization in editor settings as well To change keys associated with these and other actions navigate to Editor Editor Settings Shortcuts While some actions are universal a lot of shortcuts are specific to individual tools For this reason it is possible for some key combinations to be assigned to more than one function The correct action will be performed depending on the context Note While Windows and Linux builds of the editor share most of the default settings some shortcuts may differ for macOS version This is done for better integration of the editor into macOS ecosystem Users fluent with standard shortcuts on that OS should find Godot Editor s default key mapping intuitive General Editor Actions Action name Windows Linux macOS Editor setting Open 2D Editor Ctrl F1 Opt 1 editor editor_2d Open 3D Editor Ctrl F2 Opt 2 editor editor_3d Open Script Editor Ctrl F3 Opt 3 editor editor_script Search Help F1 Opt Space editor editor_help Distraction Free Mode Ctrl Shift F11 Cmd Ctrl D editor distraction_free_mode Next tab Ctrl Tab Cmd Tab editor next_tab Previous tab Ctrl Shift Tab Cmd Shift Tab editor prev_tab Filter Files Ctrl Alt P Opt Cmd P editor filter_files Open Scene Ctrl O Cmd O editor open_scene Close Scene Ctrl Shift W Cmd Shift W editor close_scene Reopen Closed Scene Ctrl Shift T Cmd Shift T editor reopen_closed_scene Save Scene Ctrl S Cmd S editor save_scene Save Scene As Ctrl Shift S Cmd Shift S editor save_scene_as Save All Scenes Ctrl Shift Alt S Cmd Shift Opt S editor save_all_scenes Quick Open Shift Alt O Shift Opt O editor quick_open Quick Open Scene Ctrl Shift O Cmd Shift O editor quick_open_scene Quick Open Script Ctrl Alt O Opt Cmd O editor quick_open_script Undo Ctrl Z Cmd Z editor undo Redo Ctrl Shift Z Cmd Shift Z editor redo Quit Ctrl Q Cmd Q editor file_quit Quit to Project List Ctrl Shift Q Shift Opt Q editor quit_to_project_list Take Screenshot Ctrl F12 Cmd F12 editor take_screenshot Toggle Fullscreen Shift F11 Cmd Ctrl F editor fullscreen_mode Play F5 Cmd B editor play Pause Scene F7 Cmd Ctrl Y editor pause_scene Stop F8 Cmd editor stop Play Scene F6 Cmd R editor play_scene Play Custom Scene Ctrl Shift F5 Cmd Shift R editor play_custom_scene Expand Bottom Panel Shift F12 Shift F12 editor bottom_panel_expand 2D Canvas Item Editor Action name Windows Linux macOS Editor setting Zoom In Ctrl Cmd canvas_item_editor zoom_plus Zoom Out Ctrl Cmd canvas_item_editor zoom_minus Zoom Reset Ctrl 0 Cmd 0 canvas_item_editor zoom_reset Pan View Space Space canvas_item_editor pan_view Select Mode Q Q canvas_item_editor select_mode Move Mode W W canvas_item_editor move_mode Rotate Mode E E canvas_item_editor rotate_mode Scale Mode S S canvas_item_editor scale_mode Ruler Mode R R canvas_item_editor ruler_mode Use Smart Snap Shift S Shift S canvas_item_editor use_smart_snap Use Grid Snap Shift G Shift G canvas_item_editor use_grid_snap Multiply grid step by 2 Num Num canvas_item_editor multiply_grid_step Divide grid step by 2 Num Num canvas_item_editor divide_grid_step Always Show Grid G G canvas_item_editor show_grid Show Helpers H H canvas_item_editor show_helpers Show Guides Y Y canvas_item_editor show_guides Center Selection F F canvas_item_editor center_selection Frame Selection Shift F Shift F canvas_item_editor frame_selection Preview Canvas Scale Ctrl Shift P Cmd Shift P canvas_item_editor preview_canvas_scale Insert Key Ins Ins canvas_item_editor anim_insert_key Insert Key Existing Tracks Ctrl Ins Cmd Ins canvas_item_editor anim_insert_key_existing_tracks Make Custom Bones from Nodes Ctrl Shift B Cmd Shift B canvas_item_editor skeleton_make_bones Clear Pose Shift K Shift K canvas_item_editor anim_clear_pose 3D Spatial Editor Action name Windows Linux macOS Editor setting Toggle Freelook Shift F Shift F spatial_editor freelook_toggle Freelook Left A A spatial_editor freelook_left Freelook Right D D spatial_editor freelook_right Freelook Forward W W spatial_editor freelook_forward Freelook Backwards S S spatial_editor freelook_backwards Freelook Up E E spatial_editor freelook_up Freelook Down Q Q spatial_editor freelook_down Freelook Speed Modifier Shift Shift spatial_editor freelook_speed_modifier Freelook Slow Modifier Alt Opt spatial_editor freelook_slow_modifier Select Mode Q Q spatial_editor tool_select Move Mode W W spatial_editor tool_move Rotate Mode E E spatial_editor tool_rotate Scale Mode R R spatial_editor tool_scale Use Local Space T T spatial_editor local_coords Use Snap Y Y spatial_editor snap Snap Object to Floor PgDown PgDown spatial_editor snap_to_floor Top View Num 7 Num 7 spatial_editor top_view Bottom View Alt Num 7 Opt Num 7 spatial_editor bottom_view Front View Num 1 Num 1 spatial_editor front_view Rear View Alt Num 1 Opt Num 1 spatial_editor rear_view Right View Num 3 Num 3 spatial_editor right_view Left View Alt Num 3 Opt Num 3 spatial_editor left_view Switch Perspective Orthogonal View Num 5 Num 5 spatial_editor switch_perspective_orthogonal Insert Animation Key K K spatial_editor insert_anim_key Focus Origin O O spatial_editor focus_origin Focus Selection F F spatial_editor focus_selection Align Transform with View Ctrl Alt M Opt Cmd M spatial_editor align_transform_with_view Align Rotation with View Ctrl Alt F Opt Cmd F spatial_editor align_rotation_with_view 1 Viewport Ctrl 1 Cmd 1 spatial_editor 1_viewport 2 Viewports Ctrl 2 Cmd 2 spatial_editor 2_viewports 2 Viewports Alt Ctrl Alt 2 Opt Cmd 2 spatial_editor 2_viewports_alt 3 Viewports Ctrl 3 Cmd 3 spatial_editor 3_viewports 3 Viewports Alt Ctrl Alt 3 Opt Cmd 3 spatial_editor 3_viewports_alt 4 Viewports Ctrl 4 Cmd 4 spatial_editor 4_viewports Text Editor Action name Windows Linux macOS Editor setting Cut Ctrl X Cmd X script_text_editor cut Copy Ctrl C Cmd C script_text_editor copy Paste Ctrl V Cmd V script_text_editor paste Select All Ctrl A Cmd A script_text_editor select_all Find Ctrl F Cmd F script_text_editor find Find Next F3 Cmd G script_text_editor find_next Find Previous Shift F3 Cmd Shift G script_text_editor find_previous Find in Files Ctrl Shift F Cmd Shift F script_text_editor find_in_files Replace Ctrl R Opt Cmd F script_text_editor replace Replace in Files Ctrl Shift R Cmd Shift R script_text_editor replace_in_files Undo Ctrl Z Cmd Z script_text_editor undo Redo Ctrl Y Cmd Y script_text_editor redo Move Up Alt Up Arrow Opt Up Arrow script_text_editor move_up Move Down Alt Down Arrow Opt Down Arrow script_text_editor move_down Delete Line Ctrl Shift K Cmd Shift K script_text_editor delete_line Toggle Comment Ctrl K Cmd K script_text_editor toggle_comment Fold Unfold Line Alt F Ctrl Cmd F script_text_editor toggle_fold_line Duplicate Lines Ctrl Alt Down Arrow Cmd Shift Down Arrow script_text_editor duplicate_lines Duplicate Selection Ctrl Shift D Cmd Shift C script_text_editor duplicate_selection Complete Symbol Ctrl Space Ctrl Space script_text_editor complete_symbol Evaluate Selection Ctrl Shift E Cmd Shift E script_text_editor evaluate_selection Trim Trailing Whitespace Ctrl Alt T Opt Cmd T script_text_editor trim_trailing_whitespace Uppercase Shift F4 Shift F4 script_text_editor convert_to_uppercase Lowercase Shift F5 Shift F5 script_text_editor convert_to_lowercase Capitalize Shift F6 Shift F6 script_text_editor capitalize Convert Indent to Spaces Ctrl Shift Y Cmd Shift Y script_text_editor convert_indent_to_spaces Convert Indent to Tabs Ctrl Shift I Cmd Shift I script_text_editor convert_indent_to_tabs Auto Indent Ctrl I Cmd I script_text_editor auto_indent Toggle Bookmark Ctrl Alt B Opt Cmd B script_text_editor toggle_bookmark Go to Next Bookmark Ctrl B Cmd B script_text_editor goto_next_bookmark Go to Previous Bookmark Ctrl Shift B Cmd Shift B script_text_editor goto_previous_bookmark Go to Function Ctrl Alt F Ctrl Cmd J script_text_editor goto_function Go to Line Ctrl L Cmd L script_text_editor goto_line Toggle Breakpoint F9 Cmd Shift B script_text_editor toggle_breakpoint Remove All Breakpoints Ctrl Shift F9 Cmd Shift F9 script_text_editor remove_all_breakpoints Go to Next Breakpoint Ctrl Cmd script_text_editor goto_next_breakpoint Go to Previous Breakpoint Ctrl Cmd script_text_editor goto_previous_breakpoint Contextual Help Alt F1 Opt Shift Space script_text_editor contextual_help Script Editor Action name Windows Linux macOS Editor setting Find Ctrl F Cmd F script_editor find Find Next F3 F3 script_editor find_next Find Previous Shift F3 Shift F3 script_editor find_previous Find in Files Ctrl Shift F Cmd Shift F script_editor find_in_files Move Up Shift Alt Up Arrow Shift Opt Up Arrow script_editor window_move_up Move Down Shift Alt Down Arrow Shift Opt Down Arrow script_editor window_move_down Next Script Ctrl Shift Cmd Shift script_editor next_script Previous Script Ctrl Shift Cmd Shift script_editor prev_script Reopen Closed Script Ctrl Shift T Cmd Shift T script_editor reopen_closed_script Save Ctrl Alt S Opt Cmd S script_editor save Save All Ctrl Shift Alt S Cmd Shift Opt S script_editor save_all Soft Reload Script Ctrl Shift R Cmd Shift R script_editor reload_script_soft History Previous Alt Left Arrow Opt Left Arrow script_editor history_previous History Next Alt Right Arrow Opt Right Arrow script_editor history_next Close Ctrl W Cmd W script_editor close_file Run Ctrl Shift X Cmd Shift X script_editor run_file Toggle Scripts Panel Ctrl Cmd script_editor toggle_scripts_panel Zoom In Ctrl Cmd script_editor zoom_in Zoom Out Ctrl Cmd script_editor zoom_out Reset Zoom Ctrl 0 Cmd 0 script_editor reset_zoom Editor Output Action name Windows Linux macOS Editor setting Copy Selection Ctrl C Cmd C editor copy_output Clear Output Ctrl Shift K Cmd Shift K editor clear_output Debugger Action name Windows Linux macOS Editor setting Step Into F11 F11 debugger step_into Step Over F10 F10 debugger step_over Continue F12 F12 debugger continue File Dialog Action name Windows Linux macOS Editor setting Go Back Alt Left Arrow Opt Left Arrow file_dialog go_back Go Forward Alt Right Arrow Opt Right Arrow file_dialog go_forward Go Up Alt Up Arrow Opt Up Arrow file_dialog go_up Refresh F5 F5 file_dialog refresh Toggle Hidden Files Ctrl H Cmd H file_dialog toggle_hidden_files Toggle Favorite Alt F Opt F file_dialog toggle_favorite Toggle Mode Alt V Opt V file_dialog toggle_mode Create Folder Ctrl N Cmd N file_dialog create_folder Delete Del Cmd BkSp file_dialog delete Focus Path Ctrl D Cmd D file_dialog focus_path Move Favorite Up Ctrl Up Arrow Cmd Up Arrow file_dialog move_favorite_up Move Favorite Down Ctrl Down Arrow Cmd Down Arrow file_dialog move_favorite_down FileSystem Dock Action name Windows Linux macOS Editor setting Copy Path Ctrl C Cmd C filesystem_dock copy_path Duplicate Ctrl D Cmd D filesystem_dock duplicate Delete Del Cmd BkSp filesystem_dock delete Scene Tree Dock Action name Windows Linux macOS Editor setting Add Child Node Ctrl A Cmd A scene_tree add_child_node Batch Rename Ctrl F2 Cmd F2 scene_tree batch_rename Copy Node Path Ctrl Shift C Cmd Shift C scene_tree copy_node_path Delete Del Cmd BkSp scene_tree delete Force Delete Shift Del Shift Del scene_tree delete_no_confirm Duplicate Ctrl D Cmd D scene_tree duplicate Move Up Ctrl Up Arrow Cmd Up Arrow scene_tree move_up Move Down Ctrl Down Arrow Cmd Down Arrow scene_tree move_down Animation Track Editor Action name Windows Linux macOS Editor setting Duplicate Selection Ctrl D Cmd D animation_editor duplicate_selection Duplicate Transposed Ctrl Shift D Cmd Shift D animation_editor duplicate_selection_transposed Delete Selection Del Cmd BkSp animation_editor delete_selection Go to Next Step Ctrl Right Arrow Cmd Right Arrow animation_editor goto_next_step Go to Previous Step Ctrl Left Arrow Cmd Left Arrow animation_editor goto_prev_step Tile Map Editor Action name Windows Linux macOS Editor setting Select S S tiles_editor selection_tool Cut Selection Ctrl X Cmd X tiles_editor cut Copy Selection Ctrl C Cmd C tiles_editor copy Paste Selection Ctrl V Cmd V tiles_editor paste Delete Selection Del Cmd BkSp tiles_editor delete Cancel Esc Esc tiles_editor cancel Paint D D tiles_editor paint_tool Line L L tiles_editor line_tool Rect R R tiles_editor rect_tool Bucket B B tiles_editor bucket_tool Picker P P tiles_editor picker Eraser E E tiles_editor eraser Flip Horizontally C C tiles_editor flip_tile_horizontal Flip Vertically V V tiles_editor flip_tile_vertical Rotate Left Z Z tiles_editor rotate_tile_left Rotate Right X X tiles_editor rotate_tile_right Tileset Editor Action name Windows Linux macOS Editor setting Next Coordinate PgDown PgDown tileset_editor next_shape Previous Coordinate PgUp PgUp tileset_editor previous_shape Region Mode 1 1 tileset_editor editmode_region Collision Mode 2 2 tileset_editor editmode_collision Occlusion Mode 3 3 tileset_editor editmode_occlusion Navigation Mode 4 4 tileset_editor editmode_navigation Bitmask Mode 5 5 tileset_editor editmode_bitmask Priority Mode 6 6 tileset_editor editmode_priority Icon Mode 7 7 tileset_editor editmode_icon Z Index Mode 8 8 tileset_editor editmode_z_index User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Customizing the interface Godot s interface lives in a single window by default Since Godot 4 0 you can split several elements to separate windows to better make use of multi monitor setups Moving and resizing docks Click and drag on the edge of any dock or panel to resize it horizontally or vertically Resizing a dock in the editor Click the 3 vertical dots icon at the top of any dock to change its location or split it to a separate window by choosing Make Floating in the submenu that appears Moving a dock in the editor To move a floating dock back to the editor window close the dock window using the button in the top right corner of the window or in the top left corner on macOS Alternatively you can press Alt F4 while the split window is focused Splitting the script or shader editor to its own window Note This feature is only available on platforms that support spawning multiple windows Windows macOS and Linux This feature is also not available if Single Window Mode is enabled in the Editor Settings Since Godot 4 1 you can split the script or shader editor to its own window To split the script editor to its own window click the corresponding button in the top right corner of the script editor Splitting the script editor to its own window To split the shader editor to its own window click the corresponding button in the top right corner of the script editor Splitting the shader editor to its own window To go back to the previous state with the script shader editor embedded in the editor window close the split window using the button in the top right corner of the window or in the top left corner on macOS Alternatively you can press Alt F4 while the split window is focused Customizing editor layouts You may want to save and load a dock configuration depending on the kind of task you re working on For instance when working on animating a character it may be more convenient to have docks laid out in a different fashion compared to when you re designing a level For this purpose Godot provides a way to save and restore editor layouts Before saving a layout make changes to the docks you d like to save The following changes are persisted to the saved layout Moving a dock Resizing a dock Making a dock floating Changing a floating dock s position or size FileSystem dock properties split mode display mode sorting order file list display mode selected paths and unfolded paths Note Splitting the script or shader editor to its own window is not persisted as part of a layout After making changes open the Editor menu at the top of the editor then choose Editor Layouts Save Enter a name for the layout then click Save If you ve already saved an editor layout you can choose to override an existing layout using the list After making changes open the Editor menu at the top of the editor then choose Editor Layouts In the dropdown list you will see a list of saved editor layouts plus Default which is a hardcoded editor layout that can t be removed The default layout matches a fresh Godot installation with no changes made to the docks position and size and no floating docks You can remove a layout using the Delete option in the Editor Layouts dropdown Tip If you name the saved layout Default case sensitive the default editor layout will be overwritten Note that the Default does not appear in the list of layouts to overwrite until you overwrite it once but you can still write its name manually You can go back to the standard default layout by removing the Default layout after overriding it This option does not appear if you haven t overridden the default layout yet Editor layouts are saved to a file named editor_layouts cfg in the configuration path of the Editor data paths Customizing editor settings In the Editor menu at the top of the editor you can find an Editor Settings option This opens a window similar to the Project Settings but with settings used by the editor These settings are shared across all projects and are not saved in the project files The Editor Settings window Some commonly changed settings are Interface Editor Editor Language Controls the language the editor displays in To make English tutorials easier to follow you may want to change this to English so that menu names are identical to names referred to by tutorials The language can also be changed in the top right corner of the project manager Interface Editor Display Scale Controls how large UI elements display on screen The default Auto setting finds a suitable value based on your display s DPI and resolution Due to engine limitations it only takes the display provided scaling factor on macOS not on Windows or Linux Interface Editor Single Window Mode If enabled this forces the editor to use a single window This disables certain features such as splitting the script shaders editor to their own window Single window mode can be more stable especially on Linux when using Wayland Interface Theme Preset The editor theme preset to use The Light theme preset may be easier to read if you re outdoors or in a room with sunlight The Black OLED preset can reduce power consumption on OLED displays which are increasingly common in laptops and phones tablets FileSystem Directories Autoscan Project Path This can be set to a folder path that will be automatically scanned for projects in the project manager every time it starts FileSystem Directories Default Project Path Controls the default location where new projects are created in the project manager Editors 3D Emulate Numpad This allows using the top row 0 9 keys in the 3D editor as their equivalent numpad keys It s recommended to enable this option if you don t have a number pad on your keyboard Editors 3D Emulate 3 Button Mouse This allows using the pan zoom and orbit modifiers in the 3D editor even when not holding down any mouse button It s recommended to enable this option if you re using a trackpad See the EditorSettings class reference for a complete description of most editor settings You can also hover an editor setting s name with the mouse in the Editor Settings to show its description User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using the Android editor In 2023 we added an Android port of the editor that can be used to work on new or existing projects on Android devices Note The Android editor is in early access while we continue to refine the experience and bring it up to parity with the Desktop version of the editor See Required Permissions below Android devices support The Android editor requires devices running Android 5 Lollipop or higher with at least OpenGL 3 support This includes not exhaustive Android tablets foldables and large phones Android powered netbooks Chromebooks supporting Android apps Required Permissions The Android editor requires the All files access permission The permission allows the editor to create import read project files from any file locations on the device Without the permission the editor is still functional but has limited access to the device s files and directories Limitations known issues Here are the known limitations and issues of the Android editor No C Mono support No support for external script editors While available the Vulkan Forward renderer is not recommended due to severe performance issues No support for building and exporting an Android APK binary As a workaround you can generate and export a Godot PCK or ZIP file No support for building and exporting binaries for other platforms UX not optimized for Android phones form factor Android Go devices lacks the All files access permission required for device read write access As a workaround when using an Android Go device it s recommended to create new projects only in the Android Documents or Downloads directories The editor doesn t properly resume when Don t keep activities is enabled in the Developer Options See also See the list of open issues on GitHub related to the Android editor for a list of known bugs User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Using the Web editor Since Godot 3 3 there is a Web editor you can use to work on new or existing projects Note The web editor is in a preliminary stage While its feature set may be sufficient for educational purposes it is currently not recommended for production work See Limitations below Browser support The Web editor requires support for WebAssembly s SharedArrayBuffer This is in turn required to support threading in the browser The following desktop browsers support WebAssembly threading and can therefore run the web editor Chrome 68 or later Firefox 79 or later Edge 79 or later Opera and Safari are not supported yet Safari may work in the future once proper threading support is added Mobile browsers are currently not supported The web editor only supports the Compatibility rendering method as there is no stable way to run Vulkan applications on the web yet Note If you use Linux due to poor Firefox WebGL performance it s recommended to use a Chromium based browser instead of Firefox Limitations Due to limitations on the Godot or Web platform side the following features are currently missing No C Mono support No GDExtension support No debugging support This means GDScript debugging profiling live scene editing the Remote Scene tree dock and other features that rely on the debugger protocol will not work No project exporting As a workaround you can download the project source using Project Tools Download Project Source and export it using a native version of the Godot editor The editor won t warn you when closing the tab with unsaved changes No lightmap baking support You can still use existing lightmaps if they were baked with a native version of the Godot editor e g by importing an existing project The following features are unlikely to be supported due to inherent limitations of the Web platform No support for external script editors No support for Android one click deploy See also See the list of open issues on GitHub related to the web editor for a list of known bugs Importing a project To import an existing project the current process is as follows Specify a ZIP file to preload on the HTML5 filesystem using the Preload project ZIP input Run the editor by clicking Start Godot editor The Godot Project Manager should appear after 10 20 seconds On slower machines or connections loading may take up to a minute In the dialog that appears at the middle of the window specify a name for the folder to create then click the Create Folder button it doesn t have to match the ZIP archive s name Click Install Edit and the project will open in the editor Attention It s important to place the project folder somewhere in home web_user If your project folder is placed outside home web_user you will lose your project when closing the editor When you follow the steps described above the project folder will always be located in home web_user projects keeping it safe Editing and running a project Unlike the native version of Godot the web editor is constrained to a single window Therefore it cannot open a new window when running the project Instead when you run the project by clicking the Run button or pressing F5 it will appear to replace the editor window The web editor offers an alternative way to deal with the editor and game windows which are now tabs You can switch between the Editor and Game tabs using the buttons on the top You can also close the running game or editor by clicking the button next to those tabs Where are my project files Due to browser security limitations the editor will save the project files to the browser s IndexedDB storage This storage isn t accessible as a regular folder on your machine but is abstracted away in a database You can download the project files as a ZIP archive by using Project Tools Download Project Source This can be used to export the project using a native Godot editor since exporting from the web editor isn t supported yet In the future it may be possible to use the HTML5 FileSystem API to store the project files on the user s filesystem as the native editor would do However this isn t implemented yet User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Command line tutorial Some developers like using the command line extensively Godot is designed to be friendly to them so here are the steps for working entirely from the command line Given the engine relies on almost no external libraries initialization times are pretty fast making it suitable for this workflow Note On Windows and Linux you can run a Godot binary in a terminal by specifying its relative or absolute path On macOS the process is different due to Godot being contained within an app bundle which is a folder not a file To run a Godot binary from a terminal on macOS you have to cd to the folder where the Godot application bundle is located then run Godot app Contents MacOS Godot followed by any command line arguments If you ve renamed the application bundle from Godot to another name make sure to edit this command line accordingly Command line reference Legend Available in editor builds debug export templates and release export templates Available in editor builds and debug export templates only Only available in editor builds Note that unknown command line arguments have no effect whatsoever The engine will not warn you when using a command line argument that doesn t exist with a given build type General options Command Description h help Display the list of command line options version Display the version string v verbose Use verbose stdout mode q quiet Quiet mode silences stdout messages Errors are still displayed Run options Command Description Separator for user provided arguments Following arguments are not used by the engine but can be read from OS get_cmdline_user_args e editor Start the editor instead of running the scene p project manager Start the Project Manager even if a project is auto detected debug server uri Start the editor debug server protocol host IP port e g tcp 127 0 0 1 6007 quit Quit after the first iteration quit after Quit after the given number of iterations Set to 0 to disable l language locale Use a specific locale locale follows the format language_Script_COUNTRY_VARIANT where language is a 2 or 3 letter language code in lowercase and the rest is optional See Locale codes for more details path directory Path to a project directory must contain a project godot file u upwards Scan folders upwards for project godot file main pack file Path to a pack pck file to load render thread mode Render thread mode unsafe safe separate See Thread Model for more details remote fs address Remote filesystem host IP port address remote fs password password Password for remote filesystem audio driver driver Audio driver Use help first to display the list of available drivers display driver driver Display driver and rendering driver Use help first to display the list of available drivers rendering method renderer Renderer name Requires driver support rendering driver driver Rendering driver depends on display driver Use help first to display the list of available drivers gpu index device_index Use a specific GPU run with verbose to get available device list text driver driver Text driver Fonts BiDi shaping tablet driver driver Pen tablet input driver headless Enable headless mode display driver headless audio driver Dummy Useful for servers and with script write movie file Run the engine in a way that a movie is written usually with avi or png extension fixed fps is forced when enabled but can be used to change movie FPS disable vsync can speed up movie writing but makes interaction more difficult quit after can be used to specify the number of frames to write Display options Command Description f fullscreen Request fullscreen mode m maximized Request a maximized window w windowed Request windowed mode t always on top Request an always on top window resolution W x H Request window resolution position X Y Request window position screen N Request window screen single window Use a single window no separate subwindows xr mode mode Select XR mode default off on Debug options Command Description d debug Debug local stdout debugger b breakpoints Breakpoint list as source line comma separated pairs no spaces use 20 instead profiling Enable profiling in the script debugger gpu profile Show a GPU profile of the tasks that took the most time during frame rendering gpu validation Enable graphics API validation layers for debugging gpu abort Abort on GPU errors usually validation layer errors may help see the problem if your system freezes remote debug uri Remote debug protocol host IP port e g tcp 127 0 0 1 6007 single threaded scene Scene tree runs in single threaded mode Sub thread groups are disabled and run on the main thread debug collisions Show collision shapes when running the scene debug paths Show path lines when running the scene debug navigation Show navigation polygons when running the scene debug avoidance Show navigation avoidance debug visuals when running the scene debug stringnames Print all StringName allocations to stdout when the engine quits frame delay ms Simulate high CPU load delay each frame by ms milliseconds time scale scale Force time scale higher values are faster 1 0 is normal speed disable vsync Forces disabling of vertical synchronization even if enabled in the project settings Does not override driver level V Sync enforcement disable render loop Disable render loop so rendering only occurs when called explicitly from script disable crash handler Disable crash handler when supported by the platform code fixed fps fps Force a fixed number of frames per second This setting disables real time synchronization delta smoothing enable Enable or disable frame delta smoothing enable disable print fps Print the frames per second to the stdout Standalone tools Command Description s script script Run a script check only Only parse for errors and quit use with script import Starts the editor waits for any resources to be imported and then quits Implies editor and quit export release preset path Export the project using the given preset and matching release template The preset name should match one defined in export_presets cfg path should be absolute or relative to the project directory and include the filename for the binary e g builds game exe The target directory should exist Implies import export debug preset path Like export release but use debug template Implies import export pack preset path Like export release but only export the game pack for the given preset The path extension determines whether it will be in PCK or ZIP format Implies import convert 3to4 max_file_kb max_line_size Convert project from Godot 3 x to Godot 4 x validate conversion 3to4 max_file_kb max_line_size Show what elements will be renamed when converting project from Godot 3 x to Godot 4 x doctool path Dump the engine API reference to the given path in XML format merging if existing files are found no docbase Disallow dumping the base types used with doctool gdscript docs path Rather than dumping the engine API generate API reference from the inline documentation in the GDScript files found in path used with doctool build solutions Build the scripting solutions e g for C projects Implies editor and requires a valid project to edit dump gdextension interface Generate GDExtension header file gdnative_interface h in the current folder This file is the base file required to implement a GDExtension dump extension api Generate JSON dump of the Godot API for GDExtension bindings named extension_api json in the current folder validate extension api path Validate an extension API file dumped with the option above from a previous version of the engine to ensure API compatibility If incompatibilities or errors are detected the return code will be non zero benchmark Benchmark the run time and print it to console benchmark file path Benchmark the run time and save it to a given file in JSON format The path should be absolute Path It is recommended to place your Godot editor binary in your PATH environment variable so it can be executed easily from any place by typing godot You can do so on Linux by placing the Godot binary in usr local bin and making sure it is called godot case sensitive To achieve this on Windows or macOS easily you can install Godot using Scoop on Windows or Homebrew on macOS This will automatically make the copy of Godot installed available in the PATH Windows macOS Add Extras bucket scoop bucket add extras Standard editor scoop install godot Editor with C support will be available as godot mono in PATH scoop install godot mono Copy to clipboard Standard editor brew install godot Editor with C support will be available as godot mono in PATH brew install godot mono Copy to clipboard Setting the project path Depending on where your Godot binary is located and what your current working directory is you may need to set the path to your project for any of the following commands to work correctly When running the editor this can be done by giving the path to the project godot file of your project as either the first argument like this godot path_to_your_project project godot other commands and args Copy to clipboard For all commands this can be done by using the path argument godot path path_to_your_project other commands and args Copy to clipboard For example the full command for exporting your game as explained below might look like this godot headless path path_to_your_project export release my_export_preset_name game exe Copy to clipboard When starting from a subdirectory of your project use the upwards argument for Godot to automatically find the project godot file by recursively searching the parent directories For example running a scene as explained below nested in a subdirectory might look like this when your working directory is in the same path godot upwards nested_scene tscn Copy to clipboard Creating a project Creating a project from the command line can be done by navigating the shell to the desired place and making a project godot file mkdir newgame cd newgame touch project godot Copy to clipboard The project can now be opened with Godot Running the editor Running the editor is done by executing Godot with the e flag This must be done from within the project directory or by setting the project path as explained above otherwise the command is ignored and the Project Manager appears godot e Copy to clipboard When passing in the full path to the project godot file the e flag may be omitted If a scene has been created and saved it can be edited later by running the same code with that scene as argument godot e scene tscn Copy to clipboard Erasing a scene Godot is friends with your filesystem and will not create extra metadata files Use rm to erase a scene file Make sure nothing references that scene Otherwise an error will be thrown upon opening the project rm scene tscn Copy to clipboard Running the game To run the game execute Godot within the project directory or with the project path as explained above godot Copy to clipboard Note that passing in the project godot file will always run the editor instead of running the game When a specific scene needs to be tested pass that scene to the command line godot scene tscn Copy to clipboard Debugging Catching errors in the command line can be a difficult task because they scroll quickly For this a command line debugger is provided by adding d It works for running either the game or a single scene godot d Copy to clipboard godot d scene tscn Copy to clipboard Exporting Exporting the project from the command line is also supported This is especially useful for continuous integration setups Note Using the headless command line argument is required on platforms that do not have GPU access such as continuous integration On platforms with GPU access headless prevents a window from spawning while the project is exporting godot must be a Godot editor binary not an export template Also export templates must be installed for the editor or a valid custom export template must be defined in the export preset godot headless export release Linux X11 var builds project godot headless export release Android var builds project apk Copy to clipboard The preset name must match the name of an export preset defined in the project s export_presets cfg file If the preset name contains spaces or special characters such as Windows Desktop it must be surrounded with quotes To export a debug version of the game use the export debug switch instead of export release Their parameters and usage are the same To export only a PCK file use the export pack option followed by the preset name and output path with the file extension instead of export release or export debug The output path extension determines the package s format either PCK or ZIP Warning When specifying a relative path as the path for export release export debug or export pack the path will be relative to the directory containing the project godot file not relative to the current working directory Running a script It is possible to run a gd script from the command line This feature is especially useful in large projects e g for batch conversion of assets or custom import export The script must inherit from SceneTree or MainLoop Here is an example sayhello gd showing how it works usr bin env S godot s extends SceneTree func _init print Hello quit Copy to clipboard And how to run it Prints Hello to standard output godot s sayhello gd Copy to clipboard If no project godot exists at the path current path is assumed to be the current working directory unless path is specified The first line of sayhello gd above is commonly referred to as a shebang If the Godot binary is in your PATH as godot it allows you to run the script as follows in modern Linux distributions as well as macOS Mark script as executable chmod x sayhello gd Prints Hello to standard output sayhello gd Copy to clipboard If the above doesn t work in your current version of Linux or macOS you can always have the shebang run Godot straight from where it is located as follows usr bin godot s Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using an external text editor This page explains how to code using an external text editor Note To code C in an external editor see the C guide to configure an external editor Godot can be used with an external text editor such as Sublime Text or Visual Studio Code Browse to the relevant editor settings Editor Editor Settings Text Editor External Text Editor External section of the Editor Settings There are two text fields the executable path and command line flags The flags allow you to integrate the editor with Godot passing it the file path to open and other relevant arguments Godot will replace the following placeholders in the flags string Field in Exec Flags Is replaced with project The absolute path to the project directory file The absolute path to the file col The column number of the error line The line number of the error Some example Exec Flags for various editors include Editor Exec Flags Geany Kate file line line column col Atom file line JetBrains Rider project line line file Visual Studio Code project goto file line col Vim gVim call cursor line col file Emacs emacs line col file Sublime Text project file line column Note For Visual Studio Code on Windows you will have to point to the code cmd file For Emacs you can call emacsclient instead of emacs if you use the server mode Using External Editor in Debugger Using external editor in debugger is determined by a separate option in settings For details see Script editor debug tools and options Official editor plugins We have official plugins for the following code editors Visual Studio Code Emacs LSP DAP support Godot supports the Language Server Protocol LSP for code completion and the Debug Adapter Protocol DAP for debugging You can check the LSP client list and DAP client list to find if your editor supports them If this is the case you should be able to take advantage of these features without the need of a custom plugin To use these protocols a Godot instance must be running on your current project You should then configure your editor to communicate to the running adapter ports in Godot which by default are 6005 for LSP and 6006 for DAP You can change these ports and other settings in the Editor Settings under the Network Language Server and Network Debug Adapter sections respectively Below are some configuration steps for specific editors Visual Studio Code You need to install the official Visual Studio Code plugin For LSP follow these instructions to change the default LSP port The connection status can be checked on the status bar For DAP specify the debugServer property in your launch json file version 0 2 0 configurations name GDScript Godot type godot request launch project workspaceFolder port 6007 debugServer 6006 Copy to clipboard Emacs Check the official instructions to configure LSP and DAP JetBrains Rider Refer to JetBrains Rider documentation User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Managing editor features Introduction In certain situations it may be desirable to limit what features can be used in the Godot editor For example a UI designer on a team who doesn t need to see 3D features or an educator slowly introducing features to students Godot has a built in system called feature profiles to do this With feature profiles major features and nodes can be hidden from the editor This only hides parts of the interface and does not actually remove support for these features so scenes and scripts relying on those features will still work fine This also means feature profiles are not an optimization technique For information on how to optimize Godot see Performance Creating a profile To manage editor features go to Editor Manage Editor Features This will open the Manage Editor Feature Profiles window By default there will be no profile Click on Create Profile and give it a name You will then see a list of all the features in the Godot editor The first section allows major editor features to be removed such as the 3D editor or scripting editor Below the main features is every class and node in Godot which can be disabled as well Click on a node and all of its properties and options will be listed in the Extra Items box these can all be individually disabled Sharing a profile To share profiles between editors click on the Export button Save the custom profile somewhere as a profile file To use this in another editor open that editor s Manage Editor Feature Profiles window and click import then select the profile file This process is potentially cumbersome however if a large amount of computers need custom profiles As an alternative you can enable self contained mode for Godot which allows putting all editor configuration in the same folder as the editor binary See Self contained mode for details User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Migrating to a new version Godot loosely follows a semantic versioning system where compatibility is assumed between minor and patch releases while major releases can break it As such it is generally not recommended to move projects between major versions during their development especially if you ve been working on them for a significant amount of time Still new features usability improvements or paradigm shifts in engine s internals may incentivize you to upgrade Below is a list of articles that should assist you when upgrading your project between versions Each article would try its best to document every important difference and provide you with a migration path Upgrading from Godot 3 to Godot 4 Upgrading from Godot 4 0 to Godot 4 1 Upgrading from Godot 4 1 to Godot 4 2 Upgrading from Godot 4 2 to Godot 4 3 Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Upgrading from Godot 3 to Godot 4 Should I upgrade to Godot 4 Before beginning the upgrade process it s worth thinking about the advantages and disadvantages that upgrading would bring to your project Advantages of upgrading Along with the new features present in 4 0 upgrading gives the following advantages Many bugs are fixed in 4 0 but cannot be resolved in 3 x for various reasons such as graphics API differences or backwards compatibility 4 x will enjoy a longer support period Godot 3 x will continue to be supported for some time after 4 0 is released but it will eventually stop receiving support See Documentation changelog for a list of pages documenting new features in Godot 4 0 Disadvantages of upgrading If you don t need any features present in Godot 4 0 you may want to stay on Godot 3 x for the following reasons Godot 3 x is tried and true while Godot 4 remains in its early stages Godot 4 0 is expected to contain workflow and performance issues that Godot 3 x doesn t have These issues will be ironed out over time in future Godot 4 x releases Godot 4 has fewer third party tutorials available compared to Godot 3 x If you re new to game engines you may have a better experience using Godot 3 x as a result Godot 4 s baseline hardware requirements such as memory usage are slightly higher both for the editor and exported projects This was required for the implementation of some core optimizations Since Godot 4 includes more features than Godot 3 Godot 4 s binary size for exported projects is larger While this can be mitigated by optimizing a build for size a 4 0 build with a given set of enabled modules will remain larger compared to a 3 x build with the same modules This can be an issue for exporting to the Web as binary size directly influences how fast the engine can initialize regardless of download speed Godot 4 does not and will not have support for GLES2 rendering There is still support for GLES3 rendering using the new OpenGL backend which means that devices without Vulkan support can still run Godot 4 If you are targeting very old hardware such as Intel Sandy Bridge 2nd generation integrated graphics this will prevent the project from running on such hardware after upgrading Software OpenGL implementations can be used to bypass this limitation but they re too slow for gaming Caveats of upgrading Since Godot 4 is a complete rewrite in many aspects some features have unfortunately been lost in the process Some of these features may be restored in future Godot releases Bullet physics was removed in favor of GodotPhysics This only affects 3D projects that used the default physics engine which was Bullet and didn t manually change it to GodotPhysics There are no plans to re add Bullet physics in core but a third party add on could be created for it thanks to GDExtension Rendering in 2D is no longer performed in HDR which means overbright modulate values have no visible effect This is planned to be restored at some point in the future While rendering still happens in HDR in 3D when using the Forward Plus or Forward Mobile backends Viewports cannot return HDR data anymore This is planned to be restored at some point in the future Mono was replaced by NET 6 This means exporting C projects to Android iOS and HTML5 is no longer supported for now Exporting C projects to desktop platforms is still supported and as of 4 2 there s experimental support for exporting to mobile platforms Support for exporting C projects to more platforms will be restored in future 4 x releases as upstream support improves You can find a more complete list of functional regressions by searching for issues labeled regression but not bug on GitHub Preparing before the upgrade optional If you want to be ready to upgrade to Godot 4 in the future consider using Tweener and the Time singleton in your project These classes are both available in Godot 3 5 and later This way you won t be relying on the deprecated Tween node and OS time functions both of which are removed in Godot 4 0 It s also a good idea to rename external shaders so that their extension is gdshader instead of shader Godot 3 x supports both extensions but only gdshader is supported in Godot 4 0 Running the project upgrade tool Warning Make a full backup of your project before upgrading The project upgrade tool will not perform any backups of the project that is being upgraded You can backup a project by using version control or by copying the project folder to another location Using the Project Manager To use the project upgrade tool Open the Godot 4 Project Manager Import the Godot 3 x project using the Import button or use the Scan button to find the project within a folder Double click the imported project or select the project then choose Edit You will see a dialog appearing with two options Convert project godot Only and Convert Full Project After ensuring your project is backed up see the above warning choose Convert Full Project Convert project godot Only is intended to be used for advanced use cases only in case the conversion tool fails Wait until the project conversion process finishes This can take up to a few minutes for large projects with lots of scenes When the Project Manager interface becomes available again double click the project or select the project then choose Edit to open it in the editor If you hit conversion issues due to some project files being too large or long you can use the command line to upgrade the project see below This will allow you to override the converter s size limits Using the command line To use the project upgrade tool from the command line it s recommended to validate the project conversion by running the Godot editor binary with the following arguments max_file_kb max_line_size are optional arguments Remove them if you aren t changing their values path to godot binary path path to project folder validate conversion 3 to4 max_file_kb max_line_size Copy to clipboard If the list of planned upgrades looks good to you run the following command on the Godot editor binary to upgrade project files max_file_kb max_line_size are optional arguments Remove them if you aren t changing their values path to godot binary path path to project folder convert 3 to4 max_file_kb max_line_size Copy to clipboard max_file_kb and max_line_size are optional arguments to specify the maximum size of files to be converted in kilobytes and lines The default limits are 4 MB and 100 000 lines respectively If a file hits either of those limits it will not be upgraded by the project converter This is useful to prevent large resources from slowing down the upgrade to a crawl If you still want large files to be converted by the project upgrade tool increase the size limits when running the project upgrade tool For example running the Godot editor binary with those arguments increases both limits by a 10 factor path to godot binary path path to project folder convert 3 to4 40000 1000000 Copy to clipboard Note Only Godot 3 0 and later projects can be upgraded using the project conversion tool found in the Godot 4 editor It s recommended to ensure that your project is up to date with the latest 3 x stable release before running the project upgrade tool Fixing the project after running the project upgrade tool After upgrading the project you may notice that certain things don t look as they should Scripts will likely contain various errors as well possibly hundreds in large projects This is because the project upgrade tool cannot cater to all situations Therefore a large part of the upgrade process remains manual Automatically renamed nodes and resources The list below refers to nodes which were simply renamed for consistency or clarity in Godot 4 0 The project upgrade tool renames them automatically in your scripts One noteworthy set of renames is 3D nodes which all got a 3D suffix added for consistency with their 2D counterparts For example Area is now Area3D For ease of searching this table lists all nodes and resources that were renamed and are automatically converted excluding the ones which only involved adding a 3D suffix to the old name Old name Godot 3 x New name Godot 4 AnimatedSprite AnimatedSprite2D ARVRCamera XRCamera3D ARVRController XRController3D ARVRAnchor XRAnchor3D ARVRInterface XRInterface ARVROrigin XROrigin3D ARVRPositionalTracker XRPositionalTracker ARVRServer XRServer CubeMesh BoxMesh EditorSpatialGizmo EditorNode3DGizmo EditorSpatialGizmoPlugin EditorNode3DGizmoPlugin GIProbe VoxelGI GIProbeData VoxelGIData GradientTexture GradientTexture1D KinematicBody CharacterBody3D KinematicBody2D CharacterBody2D Light2D PointLight2D LineShape2D WorldBoundaryShape2D Listener AudioListener3D NavigationMeshInstance NavigationRegion3D NavigationPolygonInstance NavigationRegion2D Navigation2DServer NavigationServer2D PanoramaSky Sky Particles GPUParticles3D Particles2D GPUParticles2D ParticlesMaterial ParticleProcessMaterial Physics2DDirectBodyState PhysicsDirectBodyState2D Physics2DDirectSpaceState PhysicsDirectSpaceState2D Physics2DServer PhysicsServer2D Physics2DShapeQueryParameters PhysicsShapeQueryParameters2D Physics2DTestMotionResult PhysicsTestMotionResult2D PlaneShape WorldBoundaryShape3D Position2D Marker2D Position3D Marker3D ProceduralSky Sky RayShape SeparationRayShape3D RayShape2D SeparationRayShape2D ShortCut Shortcut Spatial Node3D SpatialGizmo Node3DGizmo SpatialMaterial StandardMaterial3D Sprite Sprite2D StreamTexture CompressedTexture2D TextureProgress TextureProgressBar VideoPlayer VideoStreamPlayer ViewportContainer SubViewportContainer Viewport SubViewport VisibilityEnabler VisibleOnScreenEnabler3D VisibilityNotifier VisibleOnScreenNotifier3D VisibilityNotifier2D VisibleOnScreenNotifier2D VisibilityNotifier3D VisibleOnScreenNotifier3D VisualServer RenderingServer VisualShaderNodeScalarConstant VisualShaderNodeFloatConstant VisualShaderNodeScalarFunc VisualShaderNodeFloatFunc VisualShaderNodeScalarOp VisualShaderNodeFloatOp VisualShaderNodeScalarClamp VisualShaderNodeClamp VisualShaderNodeVectorClamp VisualShaderNodeClamp VisualShaderNodeScalarInterp VisualShaderNodeMix VisualShaderNodeVectorInterp VisualShaderNodeMix VisualShaderNodeVectorScalarMix VisualShaderNodeMix VisualShaderNodeScalarSmoothStep VisualShaderNodeSmoothStep VisualShaderNodeVectorSmoothStep VisualShaderNodeSmoothStep VisualShaderNodeVectorScalarSmoothStep VisualShaderNodeSmoothStep VisualShaderNodeVectorScalarStep VisualShaderNodeStep VisualShaderNodeScalarSwitch VisualShaderNodeSwitch VisualShaderNodeScalarTransformMult VisualShaderNodeTransformOp VisualShaderNodeScalarDerivativeFunc VisualShaderNodeDerivativeFunc VisualShaderNodeVectorDerivativeFunc VisualShaderNodeDerivativeFunc VisualShaderNodeBooleanUniform VisualShaderNodeBooleanParameter VisualShaderNodeColorUniform VisualShaderNodeColorParameter VisualShaderNodeScalarUniform VisualShaderNodeFloatParameter VisualShaderNodeCubeMapUniform VisualShaderNodeCubeMapParameter VisualShaderNodeTextureUniform VisualShaderNodeTexture2DParameter VisualShaderNodeTextureUniformTriplanar VisualShaderNodeTextureParameterTriplanar VisualShaderNodeTransformUniform VisualShaderNodeTransformParameter VisualShaderNodeVec3Uniform VisualShaderNodeVec3Parameter VisualShaderNodeUniform VisualShaderNodeParameter VisualShaderNodeUniformRef VisualShaderNodeParameterRef Manually renaming methods properties signals and constants Due to how the project upgrade tool works not all API renames can be performed automatically The list below contains all renames that must be performed manually using the script editor If you cannot find a node or resource in the list below refer to the above table to find its new name Tip You can use the Replace in Files dialog to speed up replacement by pressing Ctrl Shift R while the script editor is open However be careful as the Replace in Files dialog doesn t offer any way to undo a replacement Use version control to commit your upgrade work regularly Command line tools such as sd can also be used if you need something more flexible than the editor s Replace in Files dialog If using C remember to search for outdated API usage with PascalCase notation in the project and perform the replacement with PascalCase notation Methods File and Directory classes were replaced by FileAccess and DirAccess which have an entirely different API Several methods are now static which means you can call them directly on FileAccess or DirAccess without having to create an instance of that class Screen and window related methods from the OS singleton such as OS get_screen_size were moved to the DisplayServer singleton Method naming was also changed to use the DisplayServer object _ get set _property form instead For example OS get_screen_size becomes DisplayServer screen_get_size Time and date methods from the OS singleton were moved to the Time singleton The Time singleton is also available in Godot 3 5 and later You may have to replace some instance calls with instantiate The converter should handle this automatically but this relies on custom code that may not work in 100 of situations AcceptDialog s set_autowrap is now set_autowrap_mode AnimationNode s process is now _process note the leading underscore which denotes a virtual method AStar2D and AStar3D s get_points is now get_points_id BaseButton s set_event is now set_shortcut Camera2D s get_v_offset is now get_drag_vertical_offset Camera2D s set_v_offset is now set_drag_vertical_offset CanvasItem s update is now queue_redraw Control s set_tooltip is now set_tooltip_text EditorNode3DGizmoPlugin s create_gizmo is now _create_gizmo note the leading underscore which denotes a virtual method ENetMultiplayerPeer s get_peer_port is now get_peer FileDialog s get_mode is now get_file_mode FileDialog s set_mode is now set_file_mode GraphNode s get_offset is now get_position_offset GridMap s world_to_map is now local_to_map GridMap s map_to_world is now map_to_local Image s get_rect is now get_region ItemList s get_v_scroll is now get_v_scroll_bar MultiPlayerAPI s get_network_connected_peers is now get_peers MultiPlayerAPI s get_network_peer is now get_peer MultiPlayerAPI s get_network_unique_id is now get_unique_id MultiPlayerAPI s has_network_peer is now has_multiplayer_peer PacketPeerUDP s is_listening is now is_bound PacketPeerUDP s listen is now bind ParticleProcessMaterial s set_flag is now set_particle_flag ResourceFormatLoader s get_dependencies is now _get_dependencies note the leading underscore which denotes a virtual method SceneTree s change_scene is now change_scene_to_file Shortcut s is_valid is now has_valid_event TileMap s world_to_map is now local_to_map TileMap s map_to_world is now map_to_local Transform2D s xform is mat vec and xform_inv is vec mat Properties Note If a property is listed here its associated getter and setter methods must also be renamed manually if used in the project For example PathFollow2D and PathFollow3D s set_offset and get_offset must be renamed to set_progress and get_progress respectively Control s margin is now offset Label s percent_visible is now visible_ratio MultiPlayerAPI s refuse_new_network_connections is now refuse_new_connections PathFollow2D and PathFollow3D s offset is now progress TextureProgressBar s percent_visible is now show_percentage The extents property on CSG nodes and VoxelGI will have to be replaced with size with the set value halved as they re no longer half extents This also affects its setter getter methods set_extents and get_extents The Engine editor_hint property was removed in favor of the Engine is_editor_hint method This is because it s read only and properties in Godot are not used for read only values Enums CPUParticles2D s FLAG_MAX is now PARTICLE_FLAG_MAX Signals FileSystemDock s instantiate is now instance CanvasItem s hide is now hidden This rename does not apply to the hide method only the signal Tween s tween_all_completed is now loop_finished EditorSettings changed is now settings_changed Constants Color names are now uppercase and use underscores between words For example Color palegreen is now Color PALE_GREEN MainLoop s NOTIFICATION_ constants were duplicated to Node which means you can remove the MainLoop prefix when referencing them MainLoop s NOTIFICATION_WM_QUIT_REQUEST is now NOTIFICATION_WM_CLOSE_REQUEST Checking project settings Several project settings were renamed and some of them had their enums changed in incompatible ways such as shadow filter quality This means you may need to set some project settings values again Make sure the Advanced toggle is enabled in the project settings dialog so you can see all project settings Checking Environment settings Graphics quality settings were moved from Environment properties to project settings This was done to make run time quality adjustments easier without having to access the currently active Environment resource then modify its properties As a result you will have to configure Environment quality settings in the project settings as old Environment quality settings aren t converted automatically to project settings If you have a graphics settings menu that changed environment properties in Godot 3 x you will have to change its code to call RenderingServer methods that affect environment effects quality Only the base toggle of each environment effect and its visual knobs remain within the Environment resource Updating shaders There have been some changes to shaders that aren t covered by the upgrade tool The shader file extension is no longer supported which means you must rename shader files to gdshader and update references accordingly in scene resource files using an external text editor Some notable renames you will need to perform in shaders are Texture filter and repeat modes are now set on individual uniforms rather than the texture files themselves hint_albedo is now source_color hint_color is now source_color Built in matrix variables were renamed Particles shaders no longer use the vertex processor function Instead they use start and process See Shading language for more information Updating scripts to take backwards incompatible changes into account Some changes performed between Godot 3 x and 4 are not renames but they still break backwards compatibility due to different default behavior The most notable examples of this are Lifecycle functions such as _ready and _process no longer implicitly call parent classes functions that have the same name Instead you must use super at the top of a lifecycle function in the child class so that the parent class function is called first Both String and StringName are now exposed to GDScript This allows for greater optimization as StringName is specifically designed to be used for constant strings that are created once and reused many times These types are not strictly equivalent to each other which means is_same example example returns false Although in most cases they are interchangeable example example returns true sometimes you may have to replace example with example GDScript setter and getter syntax was changed but it s only partially converted by the conversion tool In most cases manual changes are required to make setters and getters working again GDScript signal connection syntax was changed The conversion tool will use the string based syntax which is still present in Godot 4 but it s recommended to switch to the Signal based syntax described on the linked page This way strings are no longer involved which avoids issues with signal name errors that can only be discovered at run time Built in scripts that are tool scripts do not get the tool keyword converted to the tool annotation The Tween node was removed in favor of Tweeners which are also available in Godot 3 5 and later See the original pull request for details randomize is now automatically called on project load so deterministic randomness with the global RandomNumberGenerate instance requires manually setting a seed in a script s _ready function call_group set_group and notify_group are now immediate by default If calling an expensive function this may result in stuttering when used on a group containing a large number of nodes To use deferred calls like before replace call_group with call_group_flags SceneTree GROUP_CALL_DEFERRED and do the same with set_group and notify_group respectively Instead of rotation_degrees the rotation property is exposed to the editor which is automatically displayed as degrees in the Inspector dock This may break animations as the conversion is not handled automatically by the conversion tool AABB s has_no_surface was inverted and renamed to has_surface AABB and Rect2 s has_no_area was inverted and renamed to has_area AnimatedTexture s fps property was replaced by speed_scale which works the same as AnimationPlayer s playback_speed property AnimatedSprite2D and AnimatedSprite3D now allow negative speed_scale values This may break animations if you relied on speed_scale being internally clamped to 0 0 AnimatedSprite2D and AnimatedSprite3D s playing property was removed Use play stop method instead OR configure autoplay animation via the SpriteFrames bottom panel but not both at once Array s slice second parameter end is now exclusive instead of being inclusive For example this means that 1 2 3 slice 0 1 now returns 1 instead of 1 2 BaseButton s signals are now button_up and button_down The pressed property is now button_pressed Camera2D s rotating property was replaced by ignore_rotation which has inverted behavior Camera2D s zoom property was inverted higher values are now more zoomed in instead of less Node s remove_and_skip method was removed If you need to reimplement it in a script you can use the old C implementation as a reference OS get_system_time_secs should be converted to Time get_time_dict_from_system second ResourceSaver s save method now has its arguments swapped around resource Resource path String This also applies to ResourceFormatSaver s _save method A StreamPeerTCP must have poll called on it to update its state instead of relying on get_status automatically polling GH 59582 String s right method has changed behavior it now returns a number of characters from the right of the string rather than the right side of the string from a given position If you need the old behavior you can use substr instead is_connected_to_host was removed from StreamPeerTCP and PacketPeerUDP as per GH 59582 get_status can be used in StreamPeerTCP instead is_socket_connected can be used in PacketPeerUDP instead In _get_property_list the or_lesser property hint string is now or_less In _get_property_list the noslider property hint string is now no_slider VisualShaderNodeVec4Parameter now takes a Vector4 as parameter instead of a Quaternion Removed or replaced nodes resources This lists all nodes that were replaced by another node requiring different configuration The setup must be done from scratch again as the project converter doesn t support updating existing setups Removed node Closest approximation Comment AnimationTreePlayer AnimationTree AnimationTreePlayer was deprecated since Godot 3 1 BakedLightmap LightmapGI See Using Lightmap global illumination BakedLightmapData LightmapGIData BitmapFont FontFile See Using Fonts DynamicFont FontFile DynamicFontData FontFile Navigation2D Node2D Replaced by other 2D Navigation nodes Navigation3D Node3D Replaced by other 3D Navigation nodes OpenSimplexNoise FastNoiseLite Has different parameters and more noise types such as cellular No support for 4D noise as it s absent from the FastNoiseLite library ToolButton Button ToolButton was Button with the Flat property enabled by default YSort Node2D or Control CanvasItem has a new Y Sort Enabled property in 4 0 ProximityGroup Node3D VisibleOnScreenNotifier3D can act as a replacement Portal Node3D Portal and room occlusion culling was replaced by raster occlusion culling OccluderInstance3D node which requires a different setup process Room Node3D RoomManager Node3D RoomGroup Node3D Occluder Node3D Geometry occlusion culling was replaced by raster occlusion culling OccluderInstance3D node which requires a different setup process OccluderShapeSphere Resource If loading an old project the node will be replaced with its Closest approximation automatically even if not using the project upgrade tool Threading changes Threading APIs have changed in 4 0 For example the following code snippet in Godot 3 x must be modified to work in 4 0 3 x var start_success new_thread start self __threaded_background_loader resource_path thread_num 4 0 var start_success new_thread start __threaded_background_loader bind resource_path thread_num Copy to clipboard Thread is_active is no longer used and should be converted to Thread is_alive See also See the changelog for a full list of changes between Godot 3 x and 4 ArrayMesh resource compatibility breakage If you ve saved an ArrayMesh resource to a res or tres file the format used in 4 0 is not compatible with the one used in 3 x You will need to go through the process of importing the source mesh file and saving it as an ArrayMesh resource again List of automatically renamed methods properties signals and constants The editor renames_map_3_to_4 cpp source file lists all automatic renames performed by the project upgrade tool Lines that are commented out refer to API renames that cannot be performed automatically Porting editor settings Godot 3 x and 4 0 use different editor settings files This means their settings can be changed independently from each other If you wish to port over your Godot 3 x settings to Godot 4 open the editor settings folder and copy editor_settings 3 tres to editor_settings 4 tres while the Godot 4 editor is closed Note Many settings names and categories have changed since Godot 3 x Editor settings whose name or category has changed won t carry over to Godot 4 0 you will have to set their values again User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Upgrading from Godot 4 0 to Godot 4 1 For most games and apps made with 4 0 it should be relatively safe to migrate to 4 1 This page intends to cover everything you need to pay attention to when migrating your project Breaking changes If you are migrating from 4 0 to 4 1 the breaking changes listed here might affect you Changes are grouped by areas systems Warning The GDExtension API completely breaks compatibility in 4 1 so it s not included in the table below See the Updating your GDExtension for 4 1 section for more information This article indicates whether each breaking change affects GDScript and whether the C breaking change is binary compatible or source compatible Binary compatible Existing binaries will load and execute successfully without recompilation and the run time behavior won t change Source compatible Source code will compile successfully without changes when upgrading Godot Core Change GDScript Compatible C Binary Compatible C Source Compatible Introduced Basis Method looking_at adds a new use_model_front optional parameter GH 76082 Object Method get_meta_list changes return type from PackedStringArray to Array StringName GH 76418 Transform3D Method looking_at adds a new use_model_front optional parameter GH 76082 UndoRedo Method create_action adds a new backward_undo_ops optional parameter GH 76688 WorkerThreadPool Method wait_for_task_completion changes return type from void to Error GH 77143 Animation Change GDScript Compatible C Binary Compatible C Source Compatible Introduced AnimationNode Method _process adds a new test_only parameter GH 75759 Method blend_input adds a new test_only optional parameter GH 75759 Method blend_node adds a new test_only optional parameter GH 75759 AnimationNodeStateMachinePlayback Method get_travel_path changes return type from PackedStringArray to Array StringName GH 76418 2D nodes Change GDScript Compatible C Binary Compatible C Source Compatible Introduced PathFollow2D Property lookahead removed GH 72842 3D nodes Change GDScript Compatible C Binary Compatible C Source Compatible Introduced Geometry3D Method segment_intersects_convex changes planes parameter type from untyped Array to Array Plane GH 76418 MeshInstance3D Method create_multiple_convex_collisions adds a new settings optional parameter GH 72152 Node3D Method look_at adds a new use_model_front optional parameter GH 76082 Method look_at_from_position adds a new use_model_front optional parameter GH 76082 GUI nodes Change GDScript Compatible C Binary Compatible C Source Compatible Introduced CodeEdit Method add_code_completion_option adds a new location optional parameter GH 75746 RichTextLabel Method push_list adds a new bullet optional parameter GH 75017 Method push_paragraph adds a new justification_flags optional parameter GH 75250 Method push_paragraph adds a new tab_stops optional parameter GH 76401 Tree Method edit_selected adds a new force_edit optional parameter GH 76794 Physics Change GDScript Compatible C Binary Compatible C Source Compatible Introduced Area2D Property priority changes type from float to int GH 72749 Area3D Property priority changes type from float to int GH 72749 PhysicsDirectSpaceState2D Method collide_shape changes return type from Array PackedVector2Array to Array Vector2 GH 75260 PhysicsDirectSpaceState3D Method collide_shape changes return type from Array PackedVector3Array to Array Vector3 GH 75260 Rendering Change GDScript Compatible C Binary Compatible C Source Compatible Introduced RDShaderFile Method get_version_list changes return type from PackedStringArray to Array StringName GH 76418 RenderingDevice Method draw_list_begin changes storage_textures parameter type from untyped Array to Array RID GH 76418 RenderingServer Method global_shader_parameter_get_list changes return type from PackedStringArray to Array StringName GH 76418 SurfaceTool Method add_triangle_fan changes tangents parameter type from untyped Array to Array Plane GH 76418 Navigation Change GDScript Compatible C Binary Compatible C Source Compatible Introduced NavigationAgent2D Method set_velocity replaced with velocity property GH 69988 Property time_horizon split into time_horizon_agents and time_horizon_obstacles GH 69988 NavigationAgent3D Property agent_height_offset renamed to path_height_offset GH 69988 Property ignore_y removed GH 69988 Method set_velocity replaced with velocity property GH 69988 Property time_horizon split into time_horizon_agents and time_horizon_obstacles GH 69988 NavigationObstacle2D Property estimate_radius removed GH 69988 Method get_rid renamed to get_agent_rid GH 69988 NavigationObstacle3D Property estimate_radius removed GH 69988 Method get_rid renamed to get_agent_rid GH 69988 NavigationServer2D Method agent_set_callback renamed to agent_set_avoidance_callback GH 69988 Method agent_set_target_velocity removed GH 69988 Method agent_set_time_horizon split into agent_set_time_horizon_agents and agent_set_time_horizon_obstacles GH 69988 NavigationServer3D Method agent_set_callback renamed to agent_set_avoidance_callback GH 69988 Method agent_set_target_velocity removed GH 69988 Method agent_set_time_horizon split into agent_set_time_horizon_agents and agent_set_time_horizon_obstacles GH 69988 Networking Change GDScript Compatible C Binary Compatible C Source Compatible Introduced WebRTCPeerConnectionExtension Method _create_data_channel changes return type from Object to WebRTCDataChannel GH 78237 Editor plugins Change GDScript Compatible C Binary Compatible C Source Compatible Introduced AnimationTrackEditPlugin Type AnimationTrackEditPlugin removed GH 76413 EditorInterface Type EditorInterface changes inheritance from Node to Object GH 76176 Method set_movie_maker_enabled replaced with movie_maker_enabled property GH 76176 Method is_movie_maker_enabled replaced with movie_maker_enabled property GH 76176 EditorResourcePreviewGenerator Method _generate adds a new metadata parameter GH 64628 Method _generate_from_path adds a new metadata parameter GH 64628 EditorUndoRedoManager Method create_action adds a new backward_undo_ops optional parameter GH 76688 Behavior changes In 4 1 some behavior changes have been introduced which might require you to adjust your project Change Introduced SubViewportContainer When input events should reach SubViewports and their children SubViewportContainer mouse_filter now needs to be MOUSE_FILTER_STOP or MOUSE_FILTER_PASS See GH 79271 for details GH 57894 Multiple layered SubViewportContainer nodes that should all receive mouse input events now need to be replaced by Area2D nodes See GH 79128 for details GH 57894 Viewport Viewport nodes that have Physics Picking enabled now automatically set InputEvents as handled See GH 79897 for workarounds GH 77595 Updating your GDExtension for 4 1 GDExtension is still in beta Until it s marked as stable compatibility may break when upgrading to a new minor version of Godot In order to fix a serious bug in Godot 4 1 we had to break binary compatibility in a big way and source compatibility in a small way This means that GDExtensions made for Godot 4 0 will need to be recompiled for Godot 4 1 using the 4 1 branch of godot cpp with a small change to their source code In Godot 4 0 your entry_symbol function looks something like this GDExtensionBool GDE_EXPORT example_library_init const GDExtensionInterface p_interface const GDExtensionClassLibraryPtr p_library GDExtensionInitialization r_initialization godot GDExtensionBinding InitObject init_obj p_interface p_library r_initialization init_obj register_initializer initialize_example_module init_obj register_terminator uninitialize_example_module init_obj set_minimum_library_initialization_level MODULE_INITIALIZATION_LEVEL_SCENE return init_obj init Copy to clipboard However for Godot 4 1 it should look like GDExtensionBool GDE_EXPORT example_library_init GDExtensionInterfaceGetProcAddress p_get_proc_address const GDExtensionClassLibraryPtr p_library GDExtensionInitialization r_initialization godot GDExtensionBinding InitObject init_obj p_get_proc_address p_library r_initialization init_obj register_initializer initialize_example_module init_obj register_terminator uninitialize_example_module init_obj set_minimum_library_initialization_level MODULE_INITIALIZATION_LEVEL_SCENE return init_obj init Copy to clipboard There are two small changes The first argument changes from const GDExtensionInterface p_interface to GDExtensionInterfaceGetProcAddress p_get_proc_address The constructor for the init_obj variable now receives p_get_proc_address as its first parameter You also need to add an extra compatibility_minimum line to your gdextension file so that it looks something like configuration entry_symbol example_library_init compatibility_minimum 4 1 Copy to clipboard This lets Godot know that your GDExtension has been updated and is safe to load in Godot 4 1 User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Upgrading from Godot 4 1 to Godot 4 2 For most games and apps made with 4 1 it should be relatively safe to migrate to 4 2 This page intends to cover everything you need to pay attention to when migrating your project Breaking changes If you are migrating from 4 1 to 4 2 the breaking changes listed here might affect you Changes are grouped by areas systems Warning The Mesh resource format has changed in 4 2 to allow for vertex and attribute compression This allows for improved rendering performance especially on platforms constrained by memory bandwidth such as mobile It is still possible to load the Godot 4 0 4 1 Mesh formats but it is not possible to load the Godot 4 2 Mesh format in prior Godot versions When opening a Godot project made with a version prior to 4 2 you may be presented with an upgrade dialog that offers two options Restart Upgrade Upgrades the mesh format for all meshes in the project and saves the result to disk Once chosen this option prevents downgrading the project to a Godot version prior to 4 2 Set up a version control system and push your changes before choosing this option Upgrade Only Upgrades the mesh format in memory without writing it to disk This allows downgrading the project to a Godot version older than 4 2 if you need to do so in the future The downside is that loading the project will be slower every time as the mesh format needs to be upgraded every time the project is loaded These increased loading times will also affect the exported project The number and complexity of Mesh resources determines how much loading times are affected If this dialog doesn t appear use Project Tools Upgrade Mesh Surfaces at the top of the editor This article indicates whether each breaking change affects GDScript and whether the C breaking change is binary compatible or source compatible Binary compatible Existing binaries will load and execute successfully without recompilation and the run time behavior won t change Source compatible Source code will compile successfully without changes when upgrading Godot Core Change GDScript Compatible C Binary Compatible C Source Compatible Introduced Node Constant NOTIFICATION_NODE_RECACHE_REQUESTED removed GH 84419 Animation Change GDScript Compatible C Binary Compatible C Source Compatible Introduced AnimationPlayer Method _post_process_key_value moved to base class AnimationMixer GH 80813 Method add_animation_library moved to base class AnimationMixer GH 80813 Method advance moved to base class AnimationMixer GH 80813 Signal animation_finished moved to base class AnimationMixer GH 80813 Signal animation_started moved to base class AnimationMixer GH 80813 Signal animation_libraries_updated moved to base class AnimationMixer GH 80813 Signal animation_list_changed moved to base class AnimationMixer GH 80813 Property audio_max_polyphony moved to base class AnimationMixer GH 80813 Signal caches_cleared moved to base class AnimationMixer GH 80813 Method clear_caches moved to base class AnimationMixer GH 80813 Method find_animation moved to base class AnimationMixer GH 80813 Method find_animation_library moved to base class AnimationMixer GH 80813 Method get_animation moved to base class AnimationMixer GH 80813 Method get_animation_library moved to base class AnimationMixer GH 80813 Method get_animation_library_list moved to base class AnimationMixer GH 80813 Method get_animation_list moved to base class AnimationMixer GH 80813 Method has_animation moved to base class AnimationMixer GH 80813 Method has_animation_library moved to base class AnimationMixer GH 80813 Property method_call_mode renamed to callback_mode_method and moved to base class AnimationMixer GH 80813 Property playback_active renamed to active and moved to base class AnimationMixer GH 80813 Property playback_process_mode renamed to callback_mode_process and moved to base class AnimationMixer GH 80813 Method remove_animation_library moved to base class AnimationMixer GH 80813 Method rename_animation_library moved to base class AnimationMixer GH 80813 Property reset_on_save moved to base class AnimationMixer GH 80813 Property root_node moved to base class AnimationMixer GH 80813 Method set_reset_on_save_enabled moved to base class AnimationMixer GH 80813 Method seek adds a new update_only optional parameter GH 80813 AnimationTree Method _post_process_key_value moved to base class AnimationMixer GH 80813 Property active moved to base class AnimationMixer GH 80813 Method advance moved to base class AnimationMixer GH 80813 Signal animation_finished moved to base class AnimationMixer GH 80813 Signal animation_started moved to base class AnimationMixer GH 80813 Property audio_max_polyphony moved to base class AnimationMixer GH 80813 Method get_root_motion_position moved to base class AnimationMixer GH 80813 Method get_root_motion_position_accumulator moved to base class AnimationMixer GH 80813 Method get_root_motion_rotation moved to base class AnimationMixer GH 80813 Method get_root_motion_rotation_accumulator moved to base class AnimationMixer GH 80813 Method get_root_motion_scale moved to base class AnimationMixer GH 80813 Method get_root_motion_scale_accumulator moved to base class AnimationMixer GH 80813 Property process_callback renamed to callback_mode_process and moved to base class AnimationMixer GH 80813 Property root_motion_track moved to base class AnimationMixer GH 80813 Property tree_root changes type from AnimationNode to AnimationRootNode GH 80813 GUI nodes Change GDScript Compatible C Binary Compatible C Source Compatible Introduced PopupMenu Method add_icon_shortcut adds a new allow_echo optional parameter GH 36493 Method add_shortcut adds a new allow_echo optional parameter GH 36493 Method clear adds a new free_submenus optional parameter GH 79965 RichTextLabel Method add_image adds new key pad tooltip and size_in_percent optional parameters GH 80410 Rendering Change GDScript Compatible C Binary Compatible C Source Compatible Introduced ImporterMesh Method add_surface changes flags parameter type from uint32 to uint64 GH 81138 Method get_surface_format changes return type from uint32 to uint64 GH 81138 MeshDataTool Method commit_to_surface adds a new compression_flags optional parameter GH 81138 Method get_format changes return type from uint32 to uint64 GH 81138 RenderingDevice Enum field BarrierMask BARRIER_MASK_RASTER changes value from 1 to 9 GH 79911 Enum field BarrierMask BARRIER_MASK_ALL_BARRIERS changes value from 7 to 32767 GH 79911 Enum field BarrierMask BARRIER_MASK_NO_BARRIER changes value from 8 to 32768 GH 79911 Method shader_create_from_bytecode adds a new placeholder_rid optional parameter GH 79606 Method shader_get_vertex_input_attribute_ask changes return type from uint32 to uint64 GH 81138 SurfaceTool Method commit changes flags parameter type from uint32 to uint64 GH 81138 Text Change GDScript Compatible C Binary Compatible C Source Compatible Introduced Font Method set_fallbacks replaced with fallbacks property GH 78266 Method get_fallbacks replaced with fallbacks property GH 78266 Method find_variation adds new spacing_top spacing_bottom spacing_space and spacing_glyph optional parameters GH 80954 GraphEdit Change GDScript Compatible C Binary Compatible C Source Compatible Introduced GraphEdit Property arrange_nodes_button_hidden renamed to show_arrange_button GH 81582 Method get_zoom_hbox renamed to get_menu_hbox GH 79308 Property snap_distance renamed to snapping_distance GH 79308 Property use_snap renamed to snapping_enabled GH 79308 GraphNode Property comment removed GH 79307 Signal close_request renamed to delete_request and moved to base class GraphElement GH 79311 Property draggable moved to base class GraphElement GH 79311 Property draggable moved to base class GraphElement GH 79311 Signal dragged moved to base class GraphElement GH 79311 Method get_connection_input_color removed GH 79311 Method get_connection_input_count removed GH 79311 Method get_connection_input_height removed GH 79311 Method get_connection_input_position removed GH 79311 Method get_connection_input_slot removed GH 79311 Method get_connection_input_type removed GH 79311 Method get_connection_output_color removed GH 79311 Method get_connection_output_count removed GH 79311 Method get_connection_output_height removed GH 79311 Method get_connection_output_position removed GH 79311 Method get_connection_output_slot removed GH 79311 Method get_connection_output_type removed GH 79311 Property language removed GH 79311 Signal node_deselected moved to base class GraphElement GH 79311 Signal node_selected moved to base class GraphElement GH 79311 Property overlay removed GH 79311 Property position_offset moved to base class GraphElement GH 79311 Signal position_offset_changed moved to base class GraphElement GH 79311 Signal raise_request moved to base class GraphElement GH 79311 Property resizable moved to base class GraphElement GH 79311 Signal resize_request moved to base class GraphElement GH 79311 Property selectable moved to base class GraphElement GH 79311 Property selected moved to base class GraphElement GH 79311 Property show_close removed GH 79311 Property text_direction removed GH 79311 TileMap Change GDScript Compatible C Binary Compatible C Source Compatible Introduced TileMap Property cell_quadrant_size renamed to rendering_quadrant_size GH 81070 XR Change GDScript Compatible C Binary Compatible C Source Compatible Introduced XRInterface Property environment_blend_mode added GH 81561 Note This change breaks compatibility in C because the new property conflicts with the name of an existing enum and the C bindings generator gives priority to properties so the enum type was renamed from EnvironmentBlendMode to EnvironmentBlendModeEnum User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Upgrading from Godot 4 2 to Godot 4 3 For most games and apps made with 4 2 it should be relatively safe to migrate to 4 3 This page intends to cover everything you need to pay attention to when migrating your project Breaking changes If you are migrating from 4 2 to 4 3 the breaking changes listed here might affect you Changes are grouped by areas systems This article indicates whether each breaking change affects GDScript and whether the C breaking change is binary compatible or source compatible Binary compatible Existing binaries will load and execute successfully without recompilation and the run time behavior won t change Source compatible Source code will compile successfully without changes when upgrading Godot GDExtension Change GDScript Compatible C Binary Compatible C Source Compatible Introduced GDExtension Method close_library removed GH 88418 Method initialize_library removed GH 88418 Method open_library removed GH 88418 Since it was basically impossible to use these methods in any useful way these methods have been removed Use GDExtensionManager load_extension and GDExtensionManager unload_extension instead to correctly load and unload a GDExtension Animation Change GDScript Compatible C Binary Compatible C Source Compatible Introduced Animation Method position_track_interpolate adds a new backward optional parameter GH 86629 Method rotation_track_interpolate adds a new backward optional parameter GH 86629 Method scale_track_interpolate adds a new backward optional parameter GH 86629 Method blend_shape_track_interpolate adds a new backward optional parameter GH 86629 Method value_track_interpolate adds a new backward optional parameter GH 86629 Method track_find_key adds a new limit optional parameter GH 86661 Method track_find_key adds a new backward optional parameter GH 92861 AnimationMixer Method _post_process_key_value changes object parameter type from Object to uint64 GH 86687 Skeleton3D Method add_bone changes return type from void to int32 GH 88791 Signal bone_pose_changed replaced by skeleton_updated GH 90575 BoneAttachment3D Method on_bone_pose_update replaced by on_skeleton_update GH 90575 GUI nodes Change GDScript Compatible C Binary Compatible C Source Compatible Introduced AcceptDialog Method register_text_enter changes parameter line_edit type from Control to LineEdit GH 89419 Method remove_button changes parameter button type from Control to Button GH 89419 Physics Change GDScript Compatible C Binary Compatible C Source Compatible Introduced PhysicsShapeQueryParameters3D Property motion changes type from Vector2 to Vector3 GH 85393 Note In C the enum PhysicsServer3D G6DofJointAxisFlag breaks compatibility because of the way the bindings generator detects the enum prefix New members were added in GH 89851 to the enum that caused the enum members to be renamed Rendering Change GDScript Compatible C Binary Compatible C Source Compatible Introduced RenderingDevice Enum field FinalAction FINAL_ACTION_CONTINUE changes value from 2 to 0 GH 84976 Enum field InitialAction INITIAL_ACTION_CLEAR changes value from 0 to 1 GH 84976 Enum field InitialAction INITIAL_ACTION_CLEAR_REGION_CONTINUE changes value from 2 to 1 GH 84976 Enum field InitialAction INITIAL_ACTION_CONTINUE changes value from 5 to 0 GH 84976 Enum field InitialAction INITIAL_ACTION_DROP changes value from 4 to 2 GH 84976 Enum field InitialAction INITIAL_ACTION_KEEP changes value from 3 to 0 GH 84976 Method buffer_clear removes post_barrier parameter GH 84976 Method buffer_update removes post_barrier parameter GH 84976 Method compute_list_begin removes allow_draw_overlap parameter GH 84976 Method compute_list_end removes post_barrier parameter GH 84976 Method draw_list_begin removes storage_textures parameter GH 84976 Method draw_list_end removes post_barrier parameter GH 84976 Method texture_clear removes post_barrier parameter GH 84976 Method texture_copy removes post_barrier parameter GH 84976 Method texture_resolve_multisample removes post_barrier parameter GH 84976 Method texture_update removes post_barrier parameter GH 84976 RenderingServer Method environment_set_fog adds a new fog_mode optional parameter GH 84792 RenderSceneBuffersRD Method get_color_layer adds a new msaa optional parameter GH 80214 Method get_depth_layer adds a new msaa optional parameter GH 80214 Method get_velocity_layer adds a new msaa optional parameter GH 80214 Method get_color_texture adds a new msaa optional parameter GH 80214 Method get_depth_texture adds a new msaa optional parameter GH 80214 Method get_velocity_texture adds a new msaa optional parameter GH 80214 Note While the values of the enum fields in RenderingDevice InitialAction and RenderingDevice FinalAction changed the only method that consumed them draw_list_begin added a compatibility method which supports the old values So in practice it doesn t break compatibility Note In C the enum RenderingDevice DriverResource breaks compatibility because of the way the bindings generator detects the enum prefix New members were added in GH 83452 to the enum that caused the enum members to be renamed Text Change GDScript Compatible C Binary Compatible C Source Compatible Introduced Font Method find_variation adds a new baseline_offset optional parameter GH 87668 RichTextLabel Method push_meta adds a new underline_mode optional parameter GH 89024 TextServer Method shaped_text_get_word_breaks adds a new optional skip_grapheme_flags parameter GH 90732 TextServerExtension Method _shaped_text_get_word_breaks adds a new skip_grapheme_flags parameter GH 90732 Audio Change GDScript Compatible C Binary Compatible C Source Compatible Introduced AudioStreamPlaybackPolyphonic Method play_stream adds new playback_type and bus optional parameters GH 91382 Navigation Change GDScript Compatible C Binary Compatible C Source Compatible Introduced AStar2D Method get_id_path adds new allow_partial_path optional parameter GH 88047 Method get_point_path adds new allow_partial_path optional parameter GH 88047 AStar3D Method get_id_path adds new allow_partial_path optional parameter GH 88047 Method get_point_path adds new allow_partial_path optional parameter GH 88047 AStarGrid2D Method get_id_path adds new allow_partial_path optional parameter GH 88047 Method get_point_path adds new allow_partial_path optional parameter GH 88047 NavigationRegion2D Property avoidance_layers removed GH 90747 Property constrain_avoidance removed GH 90747 Method get_avoidance_layer_value removed GH 90747 Method set_avoidance_layer_value removed GH 90747 Note The constrain avoidance feature in NavigationRegion2D was experimental and has been discontinued with no replacement TileMap Change GDScript Compatible C Binary Compatible C Source Compatible Introduced TileData Method get_navigation_polygon adds new flip_h flip_v and transpose optional parameters GH 84660 Method get_occluder adds new flip_h flip_v and transpose optional parameters GH 84660 XR Change GDScript Compatible C Binary Compatible C Source Compatible Introduced WebXRInterface Method get_input_source_tracker changes return type from XRPositionalTracker to XRControllerTracker GH 90645 XRServer Method get_tracker changes return type from XRPositionalTracker to XRTracker GH 90645 Editor plugins Change GDScript Compatible C Binary Compatible C Source Compatible Introduced EditorInspectorPlugin Method add_property_editor adds a new label optional parameter GH 92322 EditorPlugin Method add_control_to_bottom_panel adds a new shortcut optional parameter GH 88081 Method add_control_to_dock adds a new shortcut optional parameter GH 88081 EditorSceneFormatImporterFBX Type renamed to EditorSceneFormatImporterFBX2GLTF GH 81746 Behavior changes In 4 3 some behavior changes have been introduced which might require you to adjust your project Core Note Binary serialization was modified to fix some issues with the serialization of scripted Objects and typed Arrays GH 78219 This breaks compat with script encoding decoding Note PackedByteArray is now able to use a more compact base64 encoding for storage But the trade off is that it breaks compatibility meaning that older versions of Godot may not be able to open resources saved by 4 3 GH 89186 To maximize compatibility this new storage format will only be enabled for resources and scenes that contain large PackedByteArrays for now Support for this new format will also be added in patch updates for older versions of Godot Once all supported Godot versions are able to read the new format we will gradually retire the compatibility measures and have all resources and scenes use the new storage format Note In C the Transform3D InterpolateWith implementation was fixed to use the right order of operations applying the rotation before the scale GH 89843 Note In C the Aabb GetSupport implementation was fixed to properly return the support vector GH 88919 Note In C the Variant types ToString implementation now defaults to using the InvariantCulture GH 89547 which means Vector2 1 2 3 4 is formatted using as the decimal separator independently of the language of the operating system that the program is running on Animation Note AnimationMixer replaced its Capture mode with a new Capture feature that works much better than the old one this replaces the existing cache GH 86715 Note AnimationNode has a reworked process for retrieving the semantic time info This ensures that time related behavior works as expected but changes the blending behavior Implementors of the _process virtual method should also note that this method is now deprecated and will be replaced by a new one in the future GH 87171 More information about the changes to Animation can be found in the Migrating Animations from Godot 4 0 to 4 3 article GUI nodes Note The default font outline color was changed from white to black GH 54641 Note The auto_translate property is deprecated in favor of the auto_translate_mode property which is now in Node GH 87530 The default value for auto_translate_mode is AUTO_TRANSLATE_INHERIT which means nodes inherit the auto_translate_mode value from their parent This means existing nodes with the auto_translate property set to true may no longer be translated if they are children of a node with the auto_translate property set to false Multiplayer Note The SceneMultiplayer caching protocol was changed to send the received ID instead of the Node path when sending a node removal confirmation packet GH 90027 This is a breaking change for the high level multiplayer protocol making it incompatible with previous Godot versions Upgrade both your server and client versions to Godot 4 3 to handle this change gracefully Note that high level multiplayer facilities are only ever meant to be compatible with server and client using the same Godot version It is recommended to implement some kind of version checking Rendering Note Decals now convert the modulate color from an sRGB color to a linear color like all other inputs to ensure proper blending GH 89849 Existing projects that were using the decal s modulate property will notice a change in their visuals Note The reverse Z depth buffer technique is now implemented This may break compatibility for some shaders Read the Introducing Reverse Z AKA I m sorry for breaking your shader article for more information and guidance on how to fix common scenarios TileMap Note TileMap layers were moved to individual nodes GH 87379 and GH 89179 Android Note Android permissions are no longer requested automatically because it goes against the recommended best practices GH 87080 Use the request_permission method in OS and the on_request_permissions_result signal on MainLoop to request permissions and wait for the user response User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue 2D Canvas layers Viewport and canvas transforms Rendering 2D lights and shadows 2D meshes 2D sprite animation 2D particle systems 2D antialiasing Custom drawing in 2D 2D Parallax Physics and movement 2D movement overview Tools Using TileSets Using TileMaps Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Canvas layers Viewport and Canvas items CanvasItem is the base for all 2D nodes be it regular 2D nodes such as Node2D or Control Both inherit from CanvasItem You can arrange canvas items in trees Each item will inherit its parent s transform when the parent moves its children move too CanvasItem nodes and nodes inheriting from them are direct or indirect children of a Viewport that displays them The Viewport s property Viewport canvas_transform allows to apply a custom Transform2D transform to the CanvasItem hierarchy it contains Nodes such as Camera2D work by changing that transform To achieve effects like scrolling manipulating the canvas transform property is more efficient than moving the root canvas item and the entire scene with it Usually though we don t want everything in the game or app to be subject to the canvas transform For example Parallax Backgrounds Backgrounds that move slower than the rest of the stage UI Think of a user interface UI or head up display HUD superimposed on our view of the game world We want a life counter score display and other elements to retain their screen positions even when our view of the game world changes Transitions We may want visual effects used for transitions fades blends to remain at a fixed screen location How to solve these problems in a single scene tree CanvasLayers The answer is CanvasLayer which is a node that adds a separate 2D rendering layer for all its children and grand children Viewport children will draw by default at layer 0 while a CanvasLayer will draw at any numeric layer Layers with a greater number will be drawn above those with a smaller number CanvasLayers also have their own transform and do not depend on the transform of other layers This allows the UI to be fixed in screen space while our view on the game world changes An example of this is creating a parallax background This can be done with a CanvasLayer at layer 1 The screen with the points life counter and pause button can also be created at layer 1 Here s a diagram of how it looks CanvasLayers are independent of tree order and they only depend on their layer number so they can be instantiated when needed Note CanvasLayers aren t necessary to control the drawing order of nodes The standard way to ensuring that a node is correctly drawn in front or behind others is to manipulate the order of the nodes in the scene panel Perhaps counterintuitively the topmost nodes in the scene panel are drawn on behind lower ones in the viewport 2D nodes also have the CanvasItem z_index property for controlling their drawing order User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Viewport and canvas transforms Introduction This is an overview of the 2D transforms going on for nodes from the moment they draw their content locally to the time they are drawn onto the screen This overview discusses very low level details of the engine The goal of this tutorial is to teach a way for feeding input events to the Input with a position in the correct coordinate system A more extensive description of all coordinate systems and 2d transforms is available in 2D coordinate systems and 2D transforms Canvas transform As mentioned in the previous tutorial Canvas layers every CanvasItem node remember that Node2D and Control based nodes use CanvasItem as their common root will reside in a Canvas Layer Every canvas layer has a transform translation rotation scale etc that can be accessed as a Transform2D Also covered in the previous tutorial nodes are drawn by default in Layer 0 in the built in canvas To put nodes in a different layer a CanvasLayer node can be used Global canvas transform Viewports also have a Global Canvas transform also a Transform2D This is the master transform and affects all individual Canvas Layer transforms Generally this is primarily used in Godot s CanvasItem Editor Stretch transform Finally viewports have a Stretch Transform which is used when resizing or stretching the screen This transform is used internally as described in Multiple resolutions but can also be manually set on each viewport Input events are multiplied by this transform but lack the ones above To convert InputEvent coordinates to local CanvasItem coordinates the CanvasItem make_input_local function was added for convenience Window transform The root viewport is a Window In order to scale and position the Window s content as described in Multiple resolutions each Window contains a window transform It is for example responsible for the black bars at the Window s sides so that the Viewport is displayed with a fixed aspect ratio Transform order To convert a CanvasItem local coordinate to an actual screen coordinate the following chain of transforms must be applied Transform functions The above graphic shows some available transform functions All transforms are directed from right to left this means multiplying a transform with a coordinate results in a coordinate system further to the left multiplying the affine inverse of a transform results in a coordinate system further to the right GDScript C Called from a CanvasItem canvas_pos get_global_transform local_pos local_pos get_global_transform affine_inverse canvas_pos Copy to clipboard Called from a CanvasItem canvasPos GetGlobalTransform localPos localPos GetGlobalTransform AffineInverse canvasPos Copy to clipboard Finally then to convert a CanvasItem local coordinates to screen coordinates just multiply in the following order GDScript C var screen_coord get_viewport get_screen_transform get_global_transform_with_canvas local_pos Copy to clipboard var screenCoord GetViewport GetScreenTransform GetGlobalTransformWithCanvas localPos Copy to clipboard Keep in mind however that it is generally not desired to work with screen coordinates The recommended approach is to simply work in Canvas coordinates CanvasItem get_global_transform to allow automatic screen resolution resizing to work properly Feeding custom input events It is often desired to feed custom input events to the game With the above knowledge to correctly do this in the focused window it must be done the following way GDScript C var local_pos Vector2 10 20 Local to Control Node2D var ie InputEventMouseButton new ie button_index MOUSE_BUTTON_LEFT ie position get_viewport get_screen_transform get_global_transform_with_canvas local_pos Input parse_input_event ie Copy to clipboard var localPos new Vector2 10 20 Local to Control Node2D var ie new InputEventMouseButton ButtonIndex MouseButton Left Position GetViewport GetScreenTransform GetGlobalTransformWithCanvas localPos Input ParseInputEvent ie Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue 2D lights and shadows Introduction By default 2D scenes in Godot are unshaded with no lights and shadows visible While this is fast to render unshaded scenes can look bland Godot provides the ability to use real time 2D lighting and shadows which can greatly enhance the sense of depth in your project No 2D lights or shadows scene is unshaded 2D lights enabled without shadows 2D lights and shadows enabled Nodes There are several nodes involved in a complete 2D lighting setup CanvasModulate to darken the rest of the scene PointLight2D for omnidirectional or spot lights DirectionalLight2D for sunlight or moonlight LightOccluder2D for light shadow casters Other 2D nodes that receive lighting such as Sprite2D or TileMapLayer CanvasModulate is used to darken the scene by specifying a color that will act as the base ambient color This is the final lighting color in areas that are not reached by any 2D light Without a CanvasModulate node the final scene would look too bright as 2D lights would only brighten the existing unshaded appearance which appears fully lit Sprite2Ds are used to display the textures for the light blobs the background and for the shadow casters PointLight2Ds are used to light the scene The way a light typically works is by adding a selected texture over the rest of the scene to simulate lighting LightOccluder2Ds are used to tell the shader which parts of the scene cast shadows These occluders can be placed as independent nodes or can be part of a TileMapLayer node The shadows appear only on areas covered by the PointLight2D and their direction is based on the center of the Light Note The background color does not receive any lighting If you want light to be cast on the background you need to add a visual representation for the background such as a Sprite2D The Sprite2D s Region properties can be helpful to quickly create a repeating background texture but remember to also set Texture Repeat to Enabled in the Sprite2D s properties Point lights Point lights also called positional lights are the most common element in 2D lighting Point lights can be used to represent light from torches fire projectiles etc PointLight2D offers the following properties to tweak in the inspector Texture The texture to use as a light source The texture s size determines the size of the light The texture may have an alpha channel which is useful when using Light2D s Mix blend mode but it is not required if using the Add default or Subtract blend modes Offset The offset for the light texture Unlike when you move the light node changing the offset does not cause shadows to move Texture Scale The multiplier for the light s size Higher values will make the light extend out further Larger lights have a higher performance cost as they affect more pixels on screen so consider this before increasing a light s size Height The light s virtual height with regards to normal mapping By default the light is very close to surfaces receiving lights This will make lighting hardly visible if normal mapping is used so consider increasing this value Adjusting the light s height only makes a visible difference on surfaces that use normal mapping If you don t have a pre made texture to use in a light you can use this neutral point light texture right click Save Image As Neutral point light texture If you need different falloff you can procedurally create a texture by assigning a New GradientTexture2D on the light s Texture property After creating the resource expand its Fill section and set the fill mode to Radial You will then have to adjust the gradient itself to start from opaque white to transparent white and move its starting location to be in the center Directional light New in Godot 4 0 is the ability to have directional lighting in 2D Directional lighting is used to represent sunlight or moonlight Light rays are casted parallel to each other as if the sun or moon was infinitely far away from the surface that is receiving the light DirectionalLight2D offers the following properties Height The light s virtual height with regards to normal mapping 0 0 parallel to surfaces 1 0 perpendicular to surfaces By default the light is fully parallel with the surfaces receiving lights This will make lighting hardly visible if normal mapping is used so consider increasing this value Adjusting the light s height only makes a visual difference on surfaces that use normal mapping Height does not affect shadows appearance Max Distance The maximum distance from the camera center objects can be before their shadows are culled in pixels Decreasing this value can prevent objects located outside the camera from casting shadows while also improving performance Camera2D zoom is not taken into account by Max Distance which means that at higher zoom values shadows will appear to fade out sooner when zooming onto a given point Note Directional shadows will always appear to be infinitely long regardless of the value of the Height property This is a limitation of the shadow rendering method used for 2D lights in Godot To have directional shadows that are not infinitely long you should disable shadows in the DirectionalLight2D and use a custom shader that reads from the 2D signed distance field instead This distance field is automatically generated from LightOccluder2D nodes present in the scene Common light properties Both PointLight2D and DirectionalLight2D offer common properties which are part of the Light2D base class Enabled Allows toggling the light s visibility Unlike hiding the light node disabling this property will not hide the light s children Editor Only If enabled the light is only visible within the editor It will be automatically disabled in the running project Color The light s color Energy The light s intensity multiplier Higher values result in a brighter light Blend Mode The blending formula used for light computations The default Add is suited for most use cases Subtract can be used for negative lights which are not physically accurate but can be used for special effects The Mix blend mode mixes the value of pixels corresponding to the light s texture with the values of pixels under it by linear interpolation Range Z Min The lowest Z index affected by the light Range Z Max The highest Z index affected by the light Range Layer Min The lowest visual layer affected by the light Range Layer Max The highest visual layer affected by the light Range Item Cull Mask Controls which nodes receive light from this node depending on the other nodes enabled visual layers Occluder Light Mask This can be used to prevent certain objects from receiving light Setting up shadows After enabling the Shadow Enabled property on a PointLight2D or DirectionalLight2D node you will not see any visual difference initially This is because no nodes in your scene have any occluders yet which are used as a basis for shadow casting For shadows to appear in the scene LightOccluder2D nodes must be added to the scene These nodes must also have occluder polygons that are designed to match the sprite s outline Along with their polygon resource which must be set to have any visual effect LightOccluder2D nodes have 2 properties SDF Collision If enabled the occluder will be part of a real time generated signed distance field that can be used in custom shaders When not using custom shaders that read from this SDF enabling this makes no visual difference and has no performance cost so this is enabled by default for convenience Occluder Light Mask This is used in tandem with PointLight2D and DirectionalLight2D s Shadow Item Cull Mask property to control which objects cast shadows for each light This can be used to prevent specific objects from casting shadows There are two ways to create light occluders Automatically generating a light occluder Occluders can be created automatically from Sprite2D nodes by selecting the node clicking the Sprite2D menu at the top of the 2D editor then choosing Create LightOccluder2D Sibling In the dialog that appears an outline will surround your sprite s edges If the outline matches the sprite s edges closely you can click OK If the outline is too far away from the sprite s edges or is eating into the sprite s edges adjust Grow pixels and Shrink pixels then click Update Preview Repeat this operation until you get satisfactory results Manually drawing a light occluder Create a LightOccluder2D node then select the node and click the button at the top of the 2D editor When asked to create a polygon resource answer Yes You can then start drawing an occluder polygon by clicking to create new points You can remove existing points by right clicking them and you can create new points from the existing line by clicking on the line then dragging The following properties can be adjusted on 2D lights that have shadows enabled Color The color of shaded areas By default shaded areas are fully black but this can be changed for artistic purposes The color s alpha channel controls how much the shadow is tinted by the specified color Filter The filter mode to use for shadows The default None is the fastest to render and is well suited for games with a pixel art aesthetic due to its blocky visuals If you want a soft shadow use PCF5 instead PCF13 is even softer but is the most demanding to render PCF13 should only be used for a few lights at once due to its high rendering cost Filter Smooth Controls how much softening is applied to shadows when Filter is set to PCF5 or PCF13 Higher values result in a softer shadow but may cause banding artifacts to be visible especially with PCF5 Item Cull Mask Controls which LightOccluder2D nodes cast shadows depending on their respective Occluder Light Mask properties Hard shadows Soft shadows PCF13 Filter Smooth 1 5 Soft shadows with streaking artifacts due to Filter Smooth being too high PCF5 Filter Smooth 4 Occluder draw order LightOccluder2Ds follows the usual 2D drawing order This is important for 2D lighting as this is how you control whether the occluder should occlude the sprite itself or not If the LightOccluder2D node is a sibling of the sprite the occluder will occlude the sprite itself if it s placed below the sprite in the scene tree If the LightOccluder2D node is a child of the sprite the occluder will occlude the sprite itself if Show Behind Parent is disabled on the LightOccluder2D node which is the default Normal and specular maps Normal maps and specular maps can greatly enhance the sense of depth of your 2D lighting Similar to how these work in 3D rendering normal maps can help make lighting look less flat by varying its intensity depending on the direction of the surface receiving light on a per pixel basis Specular maps further help improve visuals by making some of the light reflect back to the viewer Both PointLight2D and DirectionalLight2D support normal mapping and specular mapping Since Godot 4 0 normal and specular maps can be assigned to any 2D element including nodes that inherit from Node2D or Control A normal map represents the direction in which each pixel is pointing towards This information is then used by the engine to correctly apply lighting to 2D surfaces in a physically plausible way Normal maps are typically created from hand painted height maps but they can also be automatically generated from other textures A specular map defines how much each pixel should reflect light and in which color if the specular map contains color Brighter values will result in a brighter reflection at that given spot on the texture Specular maps are typically created with manual editing using the diffuse texture as a base Tip If you don t have normal or specular maps for your sprites you can generate them using the free and open source Laigter tool To set up normal maps and or specular maps on a 2D node create a new CanvasTexture resource for the property that draws the node s texture For example on a Sprite2D Creating a CanvasTexture resource for a Sprite2D node Expand the newly created resource You can find several properties you will need to adjust Diffuse Texture The base color texture In this property load the texture you re using for the sprite itself Normal Map Texture The normal map texture In this property load a normal map texture you ve generated from a height map see the tip above Specular Texture The specular map texture which controls the specular intensity of each pixel on the diffuse texture The specular map is usually grayscale but it can also contain color to multiply the color of reflections accordingly In this property load a specular map texture you ve created see the tip above Specular Color The color multiplier for specular reflections Specular Shininess The specular exponent to use for reflections Lower values will increase the brightness of reflections and make them more diffuse while higher values will make reflections more localized High values are more suited for wet looking surfaces Texture Filter Can be set to override the texture filtering mode regardless of what the node s property is set to or the Rendering Textures Canvas Textures Default Texture Filter project setting Texture Repeat Can be set to override the texture filtering mode regardless of what the node s property is set to or the Rendering Textures Canvas Textures Default Texture Repeat project setting After enabling normal mapping you may notice that your lights appear to be weaker To resolve this increase the Height property on your PointLight2D and DirectionalLight2D nodes You may also want to increase the lights s Energy property slightly to get closer to how your lighting s intensity looked prior to enabling normal mapping Using additive sprites as a faster alternative to 2D lights If you run into performance issues when using 2D lights it may be worth replacing some of them with Sprite2D nodes that use additive blending This is particularly suited for short lived dynamic effects such as bullets or explosions Additive sprites are much faster to render since they don t need to go through a separate rendering pipeline Additionally it is possible to use this approach with AnimatedSprite2D or Sprite2D AnimationPlayer which allows for animated 2D lights to be created However additive sprites have a few downsides compared to 2D lights The blending formula is inaccurate compared to actual 2D lighting This is usually not a problem in sufficiently lit areas but this prevents additive sprites from correctly lighting up areas that are fully dark Additive sprites cannot cast shadows since they are not lights Additive sprites ignore normal and specular maps used on other sprites To display a sprite with additive blending create a Sprite2D node and assign a texture to it In the inspector scroll down to the CanvasItem Material section unfold it and click the dropdown next to the Material property Choose New CanvasItemMaterial click the newly created material to edit it then set Blend Mode to Add User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request 2D meshes Introduction In 3D meshes are used to display the world In 2D they are rare as images are used more often Godot s 2D engine is a pure two dimensional engine so it can t really display 3D meshes directly although it can be done via Viewport and ViewportTexture See also If you are interested in displaying 3D meshes on a 2D viewport see the Using a SubViewport as a texture tutorial 2D meshes are meshes that contain two dimensional geometry Z can be omitted or ignored instead of 3D You can experiment creating them yourself using SurfaceTool from code and displaying them in a MeshInstance2D node Currently the only way to generate a 2D mesh within the editor is by either importing an OBJ file as a mesh or converting it from a Sprite2D Optimizing pixels drawn This workflow is useful for optimizing 2D drawing in some situations When drawing large images with transparency Godot will draw the whole quad to the screen The large transparent areas will still be drawn This can affect performance especially on mobile devices when drawing very large images generally screen sized or layering multiple images on top of each other with large transparent areas for example when using ParallaxBackground Converting to a mesh will ensure that only the opaque parts will be drawn and the rest will be ignored Converting Sprite2Ds to 2D meshes You can take advantage of this optimization by converting a Sprite2D to a MeshInstance2D Start with an image that contains large amounts of transparency on the edges like this tree Put it in a Sprite2D and select Convert to 2D Mesh from the menu A dialog will appear showing a preview of how the 2D mesh will be created The default values are good enough for many cases but you can change growth and simplification according to your needs Finally push the Convert 2D Mesh button and your Sprite2D will be replaced User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue 2D sprite animation Introduction In this tutorial you ll learn how to create 2D animated characters with the AnimatedSprite2D class and the AnimationPlayer Typically when you create or download an animated character it will come in one of two ways as individual images or as a single sprite sheet containing all the animation s frames Both can be animated in Godot with the AnimatedSprite2D class First we ll use AnimatedSprite2D to animate a collection of individual images Then we will animate a sprite sheet using this class Finally we will learn another way to animate a sprite sheet with AnimationPlayer and the Animation property of Sprite2D Note Art for the following examples by https opengameart org users ansimuz and tgfcoder Individual images with AnimatedSprite2D In this scenario you have a collection of images each containing one of your character s animation frames For this example we ll use the following animation You can download the images here 2d_sprite_animation_assets zip Unzip the images and place them in your project folder Set up your scene tree with the following nodes Note The root node could also be Area2D or RigidBody2D The animation will still be made in the same way Once the animation is completed you can assign a shape to the CollisionShape2D See Physics Introduction for more information Now select the AnimatedSprite2D and in its SpriteFrames property select New SpriteFrames Click on the new SpriteFrames resource and you ll see a new panel appear at the bottom of the editor window From the FileSystem dock on the left side drag the 8 individual images into the center part of the SpriteFrames panel On the left side change the name of the animation from default to run Use the Play buttons on the top right of the Filter Animations input to preview the animation You should now see the animation playing in the viewport However it is a bit slow To fix this change the Speed FPS setting in the SpriteFrames panel to 10 You can add additional animations by clicking the Add Animation button and adding additional images Controlling the animation Once the animation is complete you can control the animation via code using the play and stop methods Here is a brief example to play the animation while the right arrow key is held and stop it when the key is released GDScript C extends CharacterBody2D onready var _animated_sprite AnimatedSprite2D func _process _delta if Input is_action_pressed ui_right _animated_sprite play run else _animated_sprite stop Copy to clipboard using Godot public partial class Character CharacterBody2D private AnimatedSprite2D _animatedSprite public override void _Ready _animatedSprite GetNode AnimatedSprite2D AnimatedSprite2D public override _Process float _delta if Input IsActionPressed ui_right _animatedSprite Play run else _animatedSprite Stop Copy to clipboard Sprite sheet with AnimatedSprite2D You can also easily animate from a sprite sheet with the class AnimatedSprite2D We will use this public domain sprite sheet Right click the image and choose Save Image As to download it and then copy the image into your project folder Set up your scene tree the same way you did previously when using individual images Select the AnimatedSprite2D and in its SpriteFrames property select New SpriteFrames Click on the new SpriteFrames resource This time when the bottom panel appears select Add frames from a Sprite Sheet You will be prompted to open a file Select your sprite sheet A new window will open showing your sprite sheet The first thing you will need to do is to change the number of vertical and horizontal images in your sprite sheet In this sprite sheet we have four images horizontally and two images vertically Next select the frames from the sprite sheet that you want to include in your animation We will select the top four then click Add 4 frames to create the animation You will now see your animation under the list of animations in the bottom panel Double click on default to change the name of the animation to jump Finally check the play button on the SpriteFrames editor to see your frog jump Sprite sheet with AnimationPlayer Another way that you can animate when using a sprite sheet is to use a standard Sprite2D node to display the texture and then animating the change from texture to texture with AnimationPlayer Consider this sprite sheet which contains 6 frames of animation Right click the image and choose Save Image As to download then copy the image into your project folder Our goal is to display these images one after another in a loop Start by setting up your scene tree Note The root node could also be Area2D or RigidBody2D The animation will still be made in the same way Once the animation is completed you can assign a shape to the CollisionShape2D See Physics Introduction for more information Drag the spritesheet into the Sprite s Texture property and you ll see the whole sheet displayed on the screen To slice it up into individual frames expand the Animation section in the Inspector and set the Hframes to 6 Hframes and Vframes are the number of horizontal and vertical frames in your sprite sheet Now try changing the value of the Frame property You ll see that it ranges from 0 to 5 and the image displayed by the Sprite2D changes accordingly This is the property we ll be animating Select the AnimationPlayer and click the Animation button followed by New Name the new animation walk Set the animation length to 0 6 and click the Loop button so that our animation will repeat Now select the Sprite2D node and click the key icon to add a new track Continue adding frames at each point in the timeline 0 1 seconds by default until you have all the frames from 0 to 5 You ll see the frames actually appearing in the animation track Press Play on the animation to see how it looks Controlling an AnimationPlayer animation Like with AnimatedSprite2D you can control the animation via code using the play and stop methods Again here is an example to play the animation while the right arrow key is held and stop it when the key is released GDScript C extends CharacterBody2D onready var _animation_player AnimationPlayer func _process _delta if Input is_action_pressed ui_right _animation_player play walk else _animation_player stop Copy to clipboard using Godot public partial class Character CharacterBody2D private AnimationPlayer _animationPlayer public override void _Ready _animationPlayer GetNode AnimationPlayer AnimationPlayer public override void _Process float _delta if Input IsActionPressed ui_right _animationPlayer Play walk else _animationPlayer Stop Copy to clipboard Note If updating both an animation and a separate property at once for example a platformer may update the sprite s h_flip v_flip properties when a character turns while starting a turning animation it s important to keep in mind that play isn t applied instantly Instead it s applied the next time the AnimationPlayer is processed This may end up being on the next frame causing a glitch frame where the property change was applied but the animation was not If this turns out to be a problem after calling play you can call advance 0 to update the animation immediately Summary These examples illustrate the two classes you can use in Godot for 2D animation AnimationPlayer is a bit more complex than AnimatedSprite2D but it provides additional functionality since you can also animate other properties like position or scale The class AnimationPlayer can also be used with an AnimatedSprite2D Experiment to see what works best for your needs User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request 2D particle systems Intro Particle systems are used to simulate complex physical effects such as sparks fire magic particles smoke mist etc The idea is that a particle is emitted at a fixed interval and with a fixed lifetime During its lifetime every particle will have the same base behavior What makes each particle different from the rest and provides a more organic look is the randomness associated with each parameter In essence creating a particle system means setting base physics parameters and then adding randomness to them Particle nodes Godot provides two different nodes for 2D particles GPUParticles2D and CPUParticles2D GPUParticles2D is more advanced and uses the GPU to process particle effects CPUParticles2D is a CPU driven option with near feature parity with GPUParticles2D but lower performance when using large amounts of particles On the other hand CPUParticles2D may perform better on low end systems or in GPU bottlenecked situations While GPUParticles2D is configured via a ParticleProcessMaterial and optionally with a custom shader the matching options are provided via node properties in CPUParticles2D with the exception of the trail settings You can convert a GPUParticles2D node into a CPUParticles2D node by clicking on the node in the inspector selecting the 2D viewport and selecting GPUParticles2D Convert to CPUParticles2D in the viewport toolbar The rest of this tutorial is going to use the GPUParticles2D node First add a GPUParticles2D node to your scene After creating that node you will notice that only a white dot was created and that there is a warning icon next to your GPUParticles2D node in the scene dock This is because the node needs a ParticleProcessMaterial to function ParticleProcessMaterial To add a process material to your particles node go to Process Material in your inspector panel Click on the box next to Material and from the dropdown menu select New ParticleProcessMaterial Your GPUParticles2D node should now be emitting white points downward Texture A particle system can use a single texture or an animation flipbook A flipbook is a texture that contains several frames of animation that can be played back or chosen at random during emission This is equivalent to a spritesheet for particles The texture is set via the Texture property Using an animation flipbook Particle flipbooks are suited to reproduce complex effects such as smoke fire explosions They can also be used to introduce random texture variation by making every particle use a different texture You can find existing particle flipbook images online or pre render them using external tools such as Blender or EmberGen Example of a particle system that uses a flipbook texture Using an animation flipbook requires additional configuration compared to a single texture For demonstration purposes we ll use this texture with 5 columns and 7 rows right click and choose Save as Credit JoesAlotofthings CC BY 4 0 To use an animation flipbook you must create a new CanvasItemMaterial in the Material section of the GPUParticles2D or CPUParticles2D node Creating a CanvasItemMaterial at the bottom of the particles node inspector In this CanvasItemMaterial enable Particle Animation and set H Frames and V Frames to the number of columns and rows present in your flipbook texture Configuring the CanvasItemMaterial for the example flipbook texture Once this is done the Animation section in ParticleProcessMaterial for GPUParticles2D or in the CPUParticles2D inspector will be effective Tip If your flipbook texture has a black background instead of a transparent background you will also need to set the blend mode to Add instead of Mix for correct display Alternatively you can modify the texture to have a transparent background in an image editor In GIMP this can be done using the Color Color to Alpha menu Time parameters Lifetime The time in seconds that every particle will stay alive When lifetime ends a new particle is created to replace it Lifetime 0 5 Lifetime 4 0 One Shot When enabled a GPUParticles2D node will emit all of its particles once and then never again Preprocess Particle systems begin with zero particles emitted then start emitting This can be an inconvenience when loading a scene and systems like a torch mist etc begin emitting the moment you enter Preprocess is used to let the system process a given number of seconds before it is actually drawn the first time Speed Scale The speed scale has a default value of 1 and is used to adjust the speed of a particle system Lowering the value will make the particles slower while increasing the value will make the particles much faster Explosiveness If lifetime is 1 and there are 10 particles it means a particle will be emitted every 0 1 seconds The explosiveness parameter changes this and forces particles to be emitted all together Ranges are 0 Emit particles at regular intervals default value 1 Emit all particles simultaneously Values in the middle are also allowed This feature is useful for creating explosions or sudden bursts of particles Randomness All physics parameters can be randomized Random values range from 0 to 1 The formula to randomize a parameter is initial_value param_value param_value randomness Copy to clipboard Fixed FPS This setting can be used to set the particle system to render at a fixed FPS For instance changing the value to 2 will make the particles render at 2 frames per second Note this does not slow down the particle system itself Note Godot 4 3 does not currently support physics interpolation for 2D particles As a workaround disable physics interpolation for the particles node by setting Node Physics Interpolation Mode at the bottom of the inspector Fract Delta This can be used to turn Fract Delta on or off Drawing parameters Visibility Rect The visibility rectangle controls the visibility of the particles on screen If this rectangle is outside of the viewport the engine will not render the particles on screen The rectangle s W and H properties respectively control its Width and its Height The X and Y properties control the position of the upper left corner of the rectangle relative to the particle emitter You can have Godot generate a Visibility Rect automatically using the toolbar above the 2d view To do so select the GPUParticles2D node and Click Particles Generate Visibility Rect Godot will simulate the Particles2D node emitting particles for a few seconds and set the rectangle to fit the surface the particles take You can control the emit duration with the Generation Time sec option The maximum value is 25 seconds If you need more time for your particles to move around you can temporarily change the preprocess duration on the Particles2D node Local Coords By default this option is on and it means that the space that particles are emitted to is relative to the node If the node is moved all particles are moved with it If disabled particles will emit to global space meaning that if the node is moved already emitted particles are not affected Draw Order This controls the order in which individual particles are drawn Index means particles are drawn according to their emission order default Lifetime means they are drawn in order of remaining lifetime ParticleProcessMaterial settings Direction This is the base direction at which particles emit The default is Vector3 1 0 0 which makes particles emit to the right However with the default gravity settings particles will go straight down For this property to be noticeable you need an initial velocity greater than 0 Here we set the initial velocity to 40 You ll notice that particles emit toward the right then go down because of gravity Spread This parameter is the angle in degrees which will be randomly added in either direction to the base Direction A spread of 180 will emit in all directions 180 For spread to do anything the Initial Velocity parameter must be greater than 0 Flatness This property is only useful for 3D particles Gravity The gravity applied to every particle Initial Velocity Initial velocity is the speed at which particles will be emitted in pixels sec Speed might later be modified by gravity or other accelerations as described further below Angular Velocity Angular velocity is the initial angular velocity applied to particles Spin Velocity Spin velocity is the speed at which particles turn around their center in degrees sec Orbit Velocity Orbit velocity is used to make particles turn around their center Linear Acceleration The linear acceleration applied to each particle Radial Acceleration If this acceleration is positive particles are accelerated away from the center If negative they are absorbed towards it Tangential Acceleration This acceleration will use the tangent vector to the center Combining with radial acceleration can do nice effects Damping Damping applies friction to the particles forcing them to stop It is especially useful for sparks or explosions which usually begin with a high linear velocity and then stop as they fade Angle Determines the initial angle of the particle in degrees This parameter is mostly useful randomized Scale Determines the initial scale of the particles Color Used to change the color of the particles being emitted Hue Variation The Variation value sets the initial hue variation applied to each particle The Variation Random value controls the hue variation randomness ratio Animation Note Particle flipbook animation is only effective if the CanvasItemMaterial used on the GPUParticles2D or CPUParticles2D node has been configured accordingly To set up the particle flipbook for linear playback set the Speed Min and Speed Max values to 1 Setting up particle animation for playback during the particle s lifetime By default looping is disabled If the particle is done playing before its lifetime ends the particle will keep using the flipbook s last frame which may be fully transparent depending on how the flipbook texture is designed If looping is enabled the animation will loop back to the first frame and resume playing Depending on how many images your sprite sheet contains and for how long your particle is alive the animation might not look smooth The relationship between particle lifetime animation speed and number of images in the sprite sheet is this Note At an animation speed of 1 0 the animation will reach the last image in the sequence just as the particle s lifetime ends A n i m a t i o n F P S N u m b e r o f i m a g e s L i f e t i m e If you wish the particle flipbook to be used as a source of random particle textures for every particle keep the speed values at 0 and set Offset Max to 1 instead Setting up particle animation for random offset on emission Note that the GPUParticles2D node s Fixed FPS also affects animation playback For smooth animation playback it s recommended to set it to 0 so that the particle is simulated on every rendered frame If this is not an option for your use case set Fixed FPS to be equal to the effective framerate used by the flipbook animation see above for the formula Emission Shapes ParticleProcessMaterials allow you to set an Emission Mask which dictates the area and direction in which particles are emitted These can be generated from textures in your project Ensure that a ParticleProcessMaterial is set and the GPUParticles2D node is selected A Particles menu should appear in the Toolbar Open it and select Load Emission Mask Then select which texture you want to use as your mask A dialog box with several settings will appear Emission Mask Three types of emission masks can be generated from a texture Solid Pixels Particles will spawn from any area of the texture excluding transparent areas Border Pixels Particles will spawn from the outer edges of the texture Directed Border Pixels Similar to Border Pixels but adds extra information to the mask to give particles the ability to emit away from the borders Note that an Initial Velocity will need to be set in order to utilize this Emission Colors Capture from Pixel will cause the particles to inherit the color of the mask at their spawn points Once you click OK the mask will be generated and set to the ParticleProcessMaterial under the Emission Shape section All of the values within this section have been automatically generated by the Load Emission Mask menu so they should generally be left alone Note An image should not be added to Point Texture or Color Texture directly The Load Emission Mask menu should always be used instead User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue 2D antialiasing See also Godot also supports antialiasing in 3D rendering This is covered on the 3D antialiasing page Introduction Due to their limited resolution scenes rendered in 2D can exhibit aliasing artifacts These artifacts usually manifest in the form of a staircase effect on geometry edges and are most noticeable when using nodes such as Line2D Polygon2D or TextureProgressBar Custom drawing in 2D can also have aliasing artifacts for methods that don t support antialiasing In the example below you can notice how edges have a blocky appearance Image is scaled by 2 with nearest neighbor filtering to make aliasing more noticeable To combat this Godot supports several methods of enabling antialiasing on 2D rendering Antialiasing property in Line2D and custom drawing This is the recommended method as it has a lower performance impact in most cases Line2D has an Antialiased property which you can enable in the inspector Also several methods for Custom drawing in 2D support an optional antialiased parameter which can be set to true when calling the function These methods do not require MSAA to be enabled which makes their baseline performance cost low In other words there is no permanent added cost if you re not drawing any antialiased geometry at some point The downside of these antialiasing methods is that they work by generating additional geometry If you re generating complex 2D geometry that s updated every frame this may be a bottleneck Also Polygon2D TextureProgressBar and several custom drawing methods don t feature an antialiased property For these nodes you can use 2D multisample antialiasing instead Multisample antialiasing MSAA Before enabling MSAA in 2D it s important to understand what MSAA will operate on MSAA in 2D follows similar restrictions as in 3D While it does not introduce any blurriness its scope of application is limited The main applications of 2D MSAA are Geometry edges such as line and polygon drawing Sprite edges only for pixels touching one of the texture s edges This works for both linear and nearest neighbor filtering Sprite edges created using transparency on the image are not affected by MSAA The downside of MSAA is that it only operates on edges This is because MSAA increases the number of coverage samples but not the number of color samples However since the number of color samples did not increase fragment shaders are still run for each pixel only once As a result MSAA will not affect the following kinds of aliasing in any way Aliasing within nearest neighbor filtered textures pixel art Aliasing caused by custom 2D shaders Specular aliasing when using Light2D Aliasing in font rendering MSAA can be enabled in the Project Settings by changing the value of the Rendering Anti Aliasing Quality MSAA 2D setting It s important to change the value of the MSAA 2D setting and not MSAA 3D as these are entirely separate settings Comparison between no antialiasing left and various MSAA levels right The top left corner contains a Line2D node the top right corner contains 2 TextureProgressBar nodes The bottom contains 8 pixel art sprites with 4 of them touching the edges green background and 4 of them not touching the edges Godot logo User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Custom drawing in 2D Introduction Godot has nodes to draw sprites polygons particles text and many other common game development needs However if you need something specific not covered with the standard nodes you can make any 2D node for example Control or Node2D based draw on screen using custom commands Custom drawing in a 2D node is really useful Here are some use cases Drawing shapes or logic that existing nodes can t do such as an image with trails or a special animated polygon Drawing a large number of simple objects such as a grid or a board for a 2d game Custom drawing avoids the overhead of using a large number of nodes possibly lowering memory usage and improving performance Making a custom UI control There are plenty of controls available but when you have unusual needs you will likely need a custom control Drawing Add a script to any CanvasItem derived node like Control or Node2D Then override the _draw function GDScript C extends Node2D func _draw pass Your draw commands here Copy to clipboard using Godot public partial class MyNode2D Node2D public override void _Draw Your draw commands here Copy to clipboard Draw commands are described in the CanvasItem class reference There are plenty of them and we will see some of them in the examples below Updating The _draw function is only called once and then the draw commands are cached and remembered so further calls are unnecessary If re drawing is required because a variable or something else changed call CanvasItem queue_redraw in that same node and a new _draw call will happen Here is a little more complex example where we have a texture variable that can be modified at any time and using a setter it forces a redraw of the texture when modified GDScript C extends Node2D export var texture Texture2D set value texture value queue_redraw func _draw draw_texture texture Vector2 Copy to clipboard using Godot public partial class MyNode2D Node2D private Texture2D _texture Export public Texture2D Texture get return _texture set _texture value QueueRedraw public override void _Draw DrawTexture _texture new Vector2 Copy to clipboard To see it in action you can set the texture to be the Godot icon on the editor by dragging and dropping the default icon svg from the FileSystem tab to the Texture property on the Inspector tab When changing the Texture property value while the previous script is running the texture will also change automatically In some cases we may need to redraw every frame For this call queue_redraw from the _process method like this GDScript C extends Node2D func _draw pass Your draw commands here func _process _delta queue_redraw Copy to clipboard using Godot public partial class MyNode2D Node2D public override void _Draw Your draw commands here public override void _Process double delta QueueRedraw Copy to clipboard Coordinates and line width alignment The drawing API uses the CanvasItem s coordinate system not necessarily pixel coordinates This means _draw uses the coordinate space created after applying the CanvasItem s transform Additionally you can apply a custom transform on top of it by using draw_set_transform or draw_set_transform_matrix When using draw_line you should consider the width of the line When using a width that is an odd size the position of the start and end points should be shifted by 0 5 to keep the line centered as shown below GDScript C func _draw draw_line Vector2 1 5 1 0 Vector2 1 5 4 0 Color GREEN 1 0 draw_line Vector2 4 0 1 0 Vector2 4 0 4 0 Color GREEN 2 0 draw_line Vector2 7 5 1 0 Vector2 7 5 4 0 Color GREEN 3 0 Copy to clipboard public override void _Draw DrawLine new Vector2 1 5f 1 0f new Vector2 1 5f 4 0f Colors Green 1 0f DrawLine new Vector2 4 0f 1 0f new Vector2 4 0f 4 0f Colors Green 2 0f DrawLine new Vector2 7 5f 1 0f new Vector2 7 5f 4 0f Colors Green 3 0f Copy to clipboard The same applies to the draw_rect method with filled false GDScript C func _draw draw_rect Rect2 1 0 1 0 3 0 3 0 Color GREEN draw_rect Rect2 5 5 1 5 2 0 2 0 Color GREEN false 1 0 draw_rect Rect2 9 0 1 0 5 0 5 0 Color GREEN draw_rect Rect2 16 0 2 0 3 0 3 0 Color GREEN false 2 0 Copy to clipboard public override void _Draw DrawRect new Rect2 1 0f 1 0f 3 0f 3 0f Colors Green DrawRect new Rect2 5 5f 1 5f 2 0f 2 0f Colors Green false 1 0f DrawRect new Rect2 9 0f 1 0f 5 0f 5 0f Colors Green DrawRect new Rect2 16 0f 2 0f 3 0f 3 0f Colors Green false 2 0f Copy to clipboard Antialiased drawing Godot offers method parameters in draw_line to enable antialiasing but not all custom drawing methods offer this antialiased parameter For custom drawing methods that don t provide an antialiased parameter you can enable 2D MSAA instead which affects rendering in the entire viewport This provides high quality antialiasing but a higher performance cost and only on specific elements See 2D antialiasing for more information Here is a comparison of a line of minimal width width 1 drawn with antialiased false antialiased true and antialiased false with 2D MSAA 2x 4x and 8x enabled Tools Drawing your own nodes might also be desired while running them in the editor This can be used as a preview or visualization of some feature or behavior To do this you can use the tool annotation on both GDScript and C See the example below and Running code in the editor for more information Example 1 drawing a custom shape We will now use the custom drawing functionality of the Godot Engine to draw something that Godot doesn t provide functions for We will recreate the Godot logo but with code only using drawing functions You will have to code a function to perform this and draw it yourself Note The following instructions use a fixed set of coordinates that could be too small for high resolution screens larger than 1080p If that is your case and the drawing is too small consider increasing your window scale in Menu Project Project settings display window stretch scale to adjust the project to a higher resolution a 2 or 4 scale tends to work well Drawing a custom polygon shape While there is a dedicated node to draw custom polygons Polygon2D we will use in this case exclusively lower level drawing functions to combine them on the same node and be able to create more complex shapes later on First we will define a set of points or X and Y coordinates that will form the base of our shape GDScript C extends Node2D var coords_head Array 22 952 83 271 28 385 98 623 53 168 107 647 72 998 107 647 99 546 98 623 105 048 83 271 105 029 55 237 110 740 47 082 102 364 36 104 94 050 40 940 85 189 34 445 85 963 24 194 73 507 19 930 68 883 28 936 59 118 28 936 54 494 19 930 42 039 24 194 42 814 34 445 33 951 40 940 25 637 36 104 17 262 47 082 22 973 55 237 Copy to clipboard using Godot public partial class MyNode2D Node2D private float _coordsHead 22 952f 83 271f 28 385f 98 623f 53 168f 107 647f 72 998f 107 647f 99 546f 98 623f 105 048f 83 271f 105 029f 55 237f 110 740f 47 082f 102 364f 36 104f 94 050f 40 940f 85 189f 34 445f 85 963f 24 194f 73 507f 19 930f 68 883f 28 936f 59 118f 28 936f 54 494f 19 930f 42 039f 24 194f 42 814f 34 445f 33 951f 40 940f 25 637f 36 104f 17 262f 47 082f 22 973f 55 237f Copy to clipboard This format while compact is not the one that Godot understands to draw a polygon In a different scenario we could have to load these coordinates from a file or calculate the positions while the application is running so some transformation may be needed To transform these coordinates into the right format we will create a new method float_array_to_Vector2Array Then we will override the _ready function which Godot will call only once at the start of the execution to load those coordinates into a variable GDScript C var head PackedVector2Array func float_array_to_Vector2Array coords Array PackedVector2Array Convert the array of floats into a PackedVector2Array var array PackedVector2Array for coord in coords array append Vector2 coord 0 coord 1 return array func _ready head float_array_to_Vector2Array coords_head Copy to clipboard private Vector2 _head private Vector2 FloatArrayToVector2Array float coords Convert the array of floats into an array of Vector2 int size coords GetUpperBound 0 Vector2 array new Vector2 size 1 for int i 0 i size i array i new Vector2 coords i 0 coords i 1 return array public override void _Ready _head FloatArrayToVector2Array _coordsHead Copy to clipboard To finally draw our first shape we will use the method draw_polygon and pass the points as an array of Vector2 coordinates and its color like this GDScript C func _draw We are going to paint with this color var godot_blue Color Color 478cbf We pass the PackedVector2Array to draw the shape draw_polygon head godot_blue Copy to clipboard public override void _Draw We are going to paint with this color Color godotBlue new Color 478cbf We pass the array of Vector2 to draw the shape DrawPolygon _head new Color godotBlue Copy to clipboard When running it you should see something like this Note the lower part of the logo looks segmented this is because a low amount of points were used to define that part To simulate a smooth curve we could add more points to our array or maybe use a mathematical function to interpolate a curve and create a smooth shape from code see example 2 Polygons will always connect its last defined point to its first one in order to have a closed shape Drawing connected lines Drawing a sequence of connected lines that don t close down to form a polygon is very similar to the previous method We will use a connected set of lines to draw Godot s logo mouth First we will define the list of coordinates that form the mouth shape like this GDScript C var coords_mouth 22 817 81 100 38 522 82 740 39 001 90 887 54 465 92 204 55 641 84 260 72 418 84 177 73 629 92 158 88 895 90 923 89 556 82 673 105 005 81 100 Copy to clipboard private float _coordsMouth 22 817f 81 100f 38 522f 82 740f 39 001f 90 887f 54 465f 92 204f 55 641f 84 260f 72 418f 84 177f 73 629f 92 158f 88 895f 90 923f 89 556f 82 673f 105 005f 81 100f Copy to clipboard We will load these coordinates into a variable and define an additional variable with the configurable line thickness GDScript C var mouth PackedVector2Array var _mouth_width float 4 4 func _ready head float_array_to_Vector2Array coords_head mouth float_array_to_Vector2Array coords_mouth Copy to clipboard private Vector2 _mouth private float _mouthWidth 4 4f public override void _Ready _head FloatArrayToVector2Array _coordsHead _mouth FloatArrayToVector2Array _coordsMouth Copy to clipboard And finally we will use the method draw_polyline to actually draw the line like this GDScript C func _draw We will use white to draw the line var white Color Color WHITE var godot_blue Color Color 478cbf draw_polygon head godot_blue We draw the while line on top of the previous shape draw_polyline mouth white _mouth_width Copy to clipboard public override void _Draw We will use white to draw the line Color white Colors White Color godotBlue new Color 478cbf DrawPolygon _head new Color godotBlue We draw the while line on top of the previous shape DrawPolyline _mouth white _mouthWidth Copy to clipboard You should get the following output Unlike draw_polygon polylines can only have a single unique color for all its points the second argument This method has 2 additional arguments the width of the line which is as small as possible by default and enabling or disabling the anti aliasing it is disabled by default The order of the _draw calls is important like with the Node positions on the tree hierarchy the different shapes will be drawn from top to bottom resulting in the latest shapes hiding earlier ones if they overlap In this case we want the mouth drawn over the head so we put it afterwards Notice how we can define colors in different ways either with a hexadecimal code or a predefined color name Check the class Color for other constants and ways to define Colors Drawing circles To create the eyes we are going to add 4 additional calls to draw the eye shapes in different sizes colors and positions To draw a circle you position it based on its center using the draw_circle method The first parameter is a Vector2 with the coordinates of its center the second is its radius and the third is its color GDScript C func _draw var white Color Color WHITE var godot_blue Color Color 478cbf var grey Color Color 414042 draw_polygon head godot_blue draw_polyline mouth white _mouth_width Four circles for the 2 eyes 2 white 2 grey draw_circle Vector2 42 479 65 4825 9 3905 white draw_circle Vector2 85 524 65 4825 9 3905 white draw_circle Vector2 43 423 65 92 6 246 grey draw_circle Vector2 84 626 66 008 6 246 grey Copy to clipboard public override void _Draw Color white Colors White Color godotBlue new Color 478cbf Color grey new Color 414042 DrawPolygon _head new Color godotBlue DrawPolyline _mouth white _mouthWidth Four circles for the 2 eyes 2 white 2 grey DrawCircle new Vector2 42 479f 65 4825f 9 3905f white DrawCircle new Vector2 85 524f 65 4825f 9 3905f white DrawCircle new Vector2 43 423f 65 92f 6 246f grey DrawCircle new Vector2 84 626f 66 008f 6 246f grey Copy to clipboard When executing it you should have something like this For partial unfilled arcs portions of a circle shape between certain arbitrary angles you can use the method draw_arc Drawing lines To draw the final shape the nose we will use a line to approximate it draw_line can be used to draw a single segment by providing its start and end coordinates as arguments like this GDScript C func _draw var white Color Color WHITE var godot_blue Color Color 478cbf var grey Color Color 414042 draw_polygon head godot_blue draw_polyline mouth white _mouth_width draw_circle Vector2 42 479 65 4825 9 3905 white draw_circle Vector2 85 524 65 4825 9 3905 white draw_circle Vector2 43 423 65 92 6 246 grey draw_circle Vector2 84 626 66 008 6 246 grey Draw a short but thick white vertical line for the nose draw_line Vector2 64 273 60 564 Vector2 64 273 74 349 white 5 8 Copy to clipboard public override void _Draw Color white Colors White Color godotBlue new Color 478cbf Color grey new Color 414042 DrawPolygon _head new Color godotBlue DrawPolyline _mouth white _mouthWidth DrawCircle new Vector2 42 479f 65 4825f 9 3905f white DrawCircle new Vector2 85 524f 65 4825f 9 3905f white DrawCircle new Vector2 43 423f 65 92f 6 246f grey DrawCircle new Vector2 84 626f 66 008f 6 246f grey Draw a short but thick white vertical line for the nose DrawLine new Vector2 64 273f 60 564f new Vector2 64 273f 74 349f white 5 8f Copy to clipboard You should now be able to see the following shape on screen Note that if multiple unconnected lines are going to be drawn at the same time you may get additional performance by drawing all of them in a single call using the draw_multiline method Drawing text While using the Label Node is the most common way to add text to your application the low level _draw function includes functionality to add text to your custom Node drawing We will use it to add the name GODOT under the robot head We will use the draw_string method to do it like this GDScript C var default_font Font ThemeDB fallback_font func _draw var white Color Color WHITE var godot_blue Color Color 478cbf var grey Color Color 414042 draw_polygon head godot_blue draw_polyline mouth white _mouth_width draw_circle Vector2 42 479 65 4825 9 3905 white draw_circle Vector2 85 524 65 4825 9 3905 white draw_circle Vector2 43 423 65 92 6 246 grey draw_circle Vector2 84 626 66 008 6 246 grey draw_line Vector2 64 273 60 564 Vector2 64 273 74 349 white 5 8 Draw GODOT text below the logo with the default font size 22 draw_string default_font Vector2 20 130 GODOT HORIZONTAL_ALIGNMENT_CENTER 90 22 Copy to clipboard private Font _defaultFont ThemeDB FallbackFont public override void _Draw Color white Colors White Color godotBlue new Color 478cbf Color grey new Color 414042 DrawPolygon _head new Color godotBlue DrawPolyline _mouth white _mouthWidth DrawCircle new Vector2 42 479f 65 4825f 9 3905f white DrawCircle new Vector2 85 524f 65 4825f 9 3905f white DrawCircle new Vector2 43 423f 65 92f 6 246f grey DrawCircle new Vector2 84 626f 66 008f 6 246f grey DrawLine new Vector2 64 273f 60 564f new Vector2 64 273f 74 349f white 5 8f Draw GODOT text below the logo with the default font size 22 DrawString _defaultFont new Vector2 20f 130f GODOT HorizontalAlignment Center 90 22 Copy to clipboard Here we first load into the defaultFont variable the configured default theme font a custom one can be set instead and then we pass the following parameters font position text horizontal alignment width and font size You should see the following on your screen Additional parameters as well as other methods related to text and characters can be found on the CanvasItem class reference Show the drawing while editing While the code so far is able to draw the logo on a running window it will not show up on the 2D view on the editor In certain cases you would also like to show your custom Node2D or control on the editor to position and scale it appropriately like most other nodes do To show the logo directly on the editor without running it you can use the tool annotation to request the custom drawing of the node to also appear while editing like this GDScript C tool extends Node2D Copy to clipboard using Godot Tool public partial class MyNode2D Node2D Copy to clipboard You will need to save your scene rebuild your project for C only and reload the current scene manually at the menu option Scene Reload Saved Scene to refresh the current node in the 2D view the first time you add or remove the tool annotation Animation If we wanted to make the custom shape change at runtime we could modify the methods called or its arguments at execution time or apply a transform For example if we want the custom shape we just designed to rotate we could add the following variable and code to the _ready and _process methods GDScript C extends Node2D export var rotation_speed float 1 In radians per second func _ready rotation 0 func _process delta float rotation rotation_speed delta Copy to clipboard Export public float RotationSpeed get set 1 0f In radians per second public override void _Ready Rotation 0 public override void _Process double delta Rotation RotationSpeed float delta Copy to clipboard The problem with the above code is that because we have created the points approximately on a rectangle starting from the upper left corner the 0 0 coordinate and extending to the right and down we see that the rotation is done using the top left corner as pivot A position transform change on the node won t help us here as the rotation transform is applied first While we could rewrite all of the points coordinates to be centered around 0 0 including negative coordinates that would be a lot of work One possible way to work around this is to use the lower level draw_set_transform method to fix this issue translating all points in the CanvasItem s own space and then moving it back to its original place with a regular node transform either in the editor or in code like this GDScript C func _ready rotation 0 position Vector2 60 60 func _draw draw_set_transform Vector2 60 60 Copy to clipboard public override void _Ready Rotation 0 Position new Vector2 60 60 public override void _Draw DrawSetTransform new Vector2 60 0f 60 0f Copy to clipboard This is the result rotating around a pivot now on 60 60 If what we wanted to animate was a property inside the _draw call we must remember to call queue_redraw to force a refresh as otherwise it would not be updated on screen For example this is how we can make the robot appear to open and close its mouth by changing the width of its mouth line follow a sinusoidal sin curve GDScript C var _mouth_width float 4 4 var _max_width float 7 var _time float 0 func _process delta float _time delta _mouth_width abs sin _time _max_width queue_redraw func _draw draw_polyline mouth white _mouth_width Copy to clipboard private float _mouthWidth 4 4f private float _maxWidth 7f private float _time 0f public override void _Process double delta _time float delta _mouthWidth Mathf Abs Mathf Sin _time _maxWidth QueueRedraw public override void _Draw DrawPolyline _mouth white _mouthWidth Copy to clipboard It will look somewhat like this when run Please note that _mouth_width is a user defined property like any other and it or any other used as a drawing argument can be animated using more standard and high level methods such as a Tween or an AnimationPlayer Node The only difference is that a queue_redraw call is needed to apply those changes so they get shown on screen Example 2 drawing a dynamic line The previous example was useful to learn how to draw and modify nodes with custom shapes and animations This could have some advantages such as using exact coordinates and vectors for drawing rather than bitmaps which means they will scale well when transformed on screen In some cases similar results could be achieved composing higher level functionality with nodes such as sprites or AnimatedSprites loading SVG resources which are also images defined with vectors and the AnimationPlayer node In other cases that will not be possible because we will not know what the resulting graphical representation will be before running the code Here we will see how to draw a dynamic line whose coordinates are not known beforehand and are affected by the user s input Drawing a straight line between 2 points Let s assume we want to draw a straight line between 2 points the first one will be fixed on the upper left corner 0 0 and the second will be defined by the cursor position on screen We could draw a dynamic line between those 2 points like this GDScript C extends Node2D var point1 Vector2 Vector2 0 0 var width int 10 var color Color Color GREEN var _point2 Vector2 func _process _delta var mouse_position get_viewport get_mouse_position if mouse_position _point2 _point2 mouse_position queue_redraw func _draw draw_line point1 _point2 color width Copy to clipboard using Godot using System public partial class MyNode2DLine Node2D public Vector2 Point1 get set new Vector2 0f 0f public int Width get set 10 public Color Color get set Colors Green private Vector2 _point2 public override void _Process double delta Vector2 mousePosition GetViewport GetMousePosition if mousePosition _point2 _point2 mousePosition QueueRedraw public override void _Draw DrawLine Point1 _point2 Color Width Copy to clipboard In this example we obtain the position of the mouse in the default viewport every frame with the method get_mouse_position If the position has changed since the last draw request a small optimization to avoid redrawing on every frame we will schedule a redraw Our _draw method only has one line requesting the drawing of a green line of width 10 pixels between the top left corner and that obtained position The width color and position of the starting point can be configured with with the corresponding properties It should look like this when run Drawing an arc between 2 points The above example works but we may want to join those 2 points with a different shape or function other than a straight line Let s try now creating an arc a portion of a circumference between both points Exporting the line starting point segments width color and antialiasing will allow us to modify those properties very easily directly from the editor inspector panel GDScript C extends Node2D export var point1 Vector2 Vector2 0 0 export_range 1 1000 var segments int 100 export var width int 10 export var color Color Color GREEN export var antialiasing bool false var _point2 Vector2 Copy to clipboard using Godot using System public partial class MyNode2DLine Node2D Export public Vector2 Point1 get set new Vector2 0f 0f Export public float Length get set 350f Export PropertyHint Range 1 1000 public int Segments get set 100 Export public int Width get set 10 Export public Color Color get set Colors Green Export public bool AntiAliasing get set false private Vector2 _point2 Copy to clipboard To draw the arc we can use the method draw_arc There are many arcs that pass through 2 points so we will chose for this example the semicircle that has its center in the middle point between the 2 initial points Calculating this arc will be more complex than in the case of the line GDScript C func _draw Calculate the arc parameters var center Vector2 Vector2 _point2 x point1 x 2 _point2 y point1 y 2 var radius float point1 distance_to _point2 2 var start_angle float _point2 point1 angle var end_angle float point1 _point2 angle if end_angle 0 end_angle is likely negative normalize it end_angle TAU Finally draw the arc draw_arc center radius start_angle end_angle segments color width antialiasing Copy to clipboard public override void _Draw Calculate the arc parameters Vector2 center new Vector2 _point2 X Point1 X 2 0f _point2 Y Point1 Y 2 0f float radius Point1 DistanceTo _point2 2 0f float startAngle _point2 Point1 Angle float endAngle Point1 _point2 Angle if endAngle 0 0f endAngle is likely negative normalize it endAngle Mathf Tau Finally draw the arc DrawArc center radius startAngle endAngle Segments Color Width AntiAliasing Copy to clipboard The center of the semicircle will be the middle point between both points The radius will be half the distance between both points The start and end angles will be the angles of the vector from point1 to point2 and vice versa Note we had to normalize the end_angle in positive values because if end_angle is less than start_angle the arc will be drawn counter clockwise which we don t want in this case the arc would be upside down The result should be something like this with the arc going down and between the points Feel free to play with the parameters in the inspector to obtain different results change the color the width the antialiasing and increase the number of segments to increase the curve smoothness at the cost of extra performance User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue 2D Parallax Introduction Parallax is an effect used to simulate depth by having textures move at different speeds relative to the camera Godot provides the Parallax2D node to achieve this effect It can still be easy to get tripped up though so this page provides in depth descriptions of some properties and how to fix some common mistakes Note This page only covers how to use Parallax2D This node is still experimental so the implementation might change in future versions of Godot However it is still recommended to use over the ParallaxLayer and ParallaxBackground nodes Scroll scale The backbone of the parallax effect is the scroll_scale property It works as a scroll speed multiplier allowing layers to move at a different speed than the camera for each axis set A value of 1 makes the parallax node scroll at the same speed as the camera If you want your image to look further away when scrolling use a value lower than 1 with 0 bringing it to a complete stop If you want something to appear closer to the camera use a value higher than 1 making it scroll faster The scene above is comprised of five layers Some good scroll_scale values might be 0 7 1 Forest 0 5 1 Hills 0 3 1 Lower Clouds 0 2 1 Higher Clouds 0 1 1 Sky The video below displays how these values affect scrolling while in game A scene with five layers scrolling at different speeds Infinite repeat Parallax2D provides a bonus effect that gives textures the illusion of repeating infinitely repeat_size tells the node to snap its position forward or back when the camera scrolls by the set value This effect is achieved by adding a single repeat to all the child canvas items offset by the value While the camera scrolls between the image and its repeat it invisibly snaps back giving the appearance of a looping image Being a delicate effect it s easy for unfamiliar users to make mistakes with their setup Let s go over the how and why of a few common problems users encounter Poor sizing The infinite repeat effect is easiest to work with when you have an image designed to repeat seamlessly and is the same size or larger than your viewport before setting the repeat_size If you aren t able to obtain assets that are designed for this task there are some other things you can do to better prepare your image in regards to size Here is an example of a texture that is too small for its viewport We can see that the viewport size is 500x300 but the texture is 288x208 If we set the repeat_size to the size of our image the infinite repeat effect doesn t scroll properly because the original texture doesn t cover the viewport If we set the repeat_size to the size of the viewport we have a large gap What can we do Make the viewport smaller The simplest answer is to make the viewport the same size or smaller than your textures Click on Project Project Settings Window and change the viewport height and width to match your background Scale the Parallax2D If you re not aiming for a pixel perfect style or don t mind a little blurriness you may opt to scale the textures larger to fit your screen Set the scale of the Parallax2D and all child textures scale with it Scale the child nodes Similar to scaling the Parallax2D you can scale your Sprite2D nodes to be large enough to cover the screen Keep in mind that some settings like Parallax2D repeat_size and Sprite2D region_rect do not take scaling into account so it s necessary to adjust these values based on the scale Repeat the textures You can also start off on the right foot by preparing child nodes earlier in the process If you have a Sprite2D you d like to repeat but is too small you can do the following to repeat it set texture_repeat to CanvasItem TEXTURE_REPEAT_ENABLED set region_enabled to true set the region_rect to a multiple of the size of your texture large enough to cover the viewport Below you can see that repeating the image twice makes it large enough to cover the screen Poor positioning It s common to see users mistakenly set all of their textures to be centered at 0 0 This creates problems with the infinite repeat effect and should be avoided The infinite repeat canvas starts at 0 0 and expands down and to the right to the size of the repeat_size value If the textures are centered on the 0 0 crossing the infinite repeat canvas is only partly covered so it only partly repeats Would increasing repeat_times fix this Increasing repeat_times technically would work in some scenarios but is a brute force solution and not the problem it is designed to solve we ll go over this in a bit A better fix is to understand how the repeat effect works and set up the parallax textures appropriately to begin with First check to see if any textures are spilling over onto the negative parts of the canvas Make sure the textures used in the parallax nodes fit inside the infinite repeat canvas starting at 0 0 That way if Parallax2D repeat_size is set correctly it should look something like this with one single loop of the image the same size or larger than the viewport If you think of how the image scrolls across the screen it starts by displaying what s inside the red rectangle determined by repeat_size and when it reaches what s inside the yellow rectangle it zips the image forward to give the illusion of scrolling forever If you have the image positioned away from the infinite repeat canvas when the camera reaches the yellow rectangle half of the image is cut off before it jumps forward like in the image below Scroll offset If your parallax textures are already working correctly but you prefer it to start at a different point Parallax2D comes with a scroll_offset property used to offset where the infinite repeat canvas starts As an example if your image is 288x208 setting the scroll_offset to 144 0 or 144 0 allows it to begin halfway across the image Repeat times Ideally following this guide your parallax textures are large enough to cover the screen even when zoomed out Until now we have had a perfectly fitting 288x208 texture inside of a 288x208 viewport However problems occur when we zoom out by setting the Camera2D zoom to 0 5 0 5 Even though everything is correctly set for the viewport at the default zoom level zooming out makes it smaller than the viewport breaking the infinite repeat effect This is where repeat_times can help out Setting a value of 3 one extra repeat behind and in front it is now large enough to accommodate the infinite repeat effect If these textures were meant to be repeated vertically we would have specified a y value for the repeat_size The repeat_times would automatically add a repeat above and below as well This is only a horizontal parallax so it leaves an empty block above and below the image How do we solve this We need to get creative In this example we stretch the sky higher and grass sprite lower The textures now support the normal zoom level and zooming out to half size Split screen Most tutorials for making a split screen game in Godot begin by writing a small script to assign the Viewport world_2d of the first SubViewport to the second so they have a shared display Questions often pop up about how to share a parallax effect between both screens The parallax effect fakes a perspective by moving the positions of different textures in relation to the camera This is understandably problematic if you have multiple cameras because your textures can t be in two places at once This is still achievable by cloning the parallax nodes into the second or third or fourth SubViewport Here s how a setup looks for a two player game Of course now both backgrounds show in both SubViewports What we want is for each parallax to only show in their corresponding viewport We can achieve this by doing the following Leave all parallax nodes at their default visibility_layer of 1 Set the first SubViewport s canvas_cull_mask to only layers 1 and 2 Do the same for the second SubViewport but use layers 1 and 3 Give your parallax nodes in the first SubViewport a common parent and set its visibility_layer to 2 Do the same for the second SubViewport s parallax nodes but use a layer of 3 How does this work If a canvas item has a visibility_layer that doesn t match the SubViewport s canvas_cull_mask it will hide all children even if they do We use this to our advantage letting the SubViewports cut off rendering of parallax nodes whose parent doesn t have a supported visibility_layer Previewing in the editor Prior to 4 3 the recommendation was to place every layer in their own ParallaxBackground enable the follow_viewport_enabled property and scale the individual layer This method has always been tricky to get right but is still achievable by using a CanvasLayer instead of a ParallaxBackground Note Another recommendation is KoBeWi s Parallax2D Preview addon It provides a few different preview modes and is very handy User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue 2D movement overview Introduction Every beginner has been there How do I move my character Depending on the style of game you re making you may have special requirements but in general the movement in most 2D games is based on a small number of designs We ll use CharacterBody2D for these examples but the principles will apply to other node types Area2D RigidBody2D as well Setup Each example below uses the same scene setup Start with a CharacterBody2D with two children Sprite2D and CollisionShape2D You can use the Godot icon icon png for the Sprite2D s texture or use any other 2D image you have Open Project Project Settings and select the Input Map tab Add the following input actions see InputEvent for details 8 way movement In this scenario you want the user to press the four directional keys up left down right or W A S D and move in the selected direction The name 8 way movement comes from the fact that the player can move diagonally by pressing two keys at the same time Add a script to the character body and add the following code GDScript C extends CharacterBody2D export var speed 400 func get_input var input_direction Input get_vector left right up down velocity input_direction speed func _physics_process delta get_input move_and_slide Copy to clipboard using Godot public partial class Movement CharacterBody2D Export public int Speed get set 400 public void GetInput Vector2 inputDirection Input GetVector left right up down Velocity inputDirection Speed public override void _PhysicsProcess double delta GetInput MoveAndSlide Copy to clipboard In the get_input function we use Input get_vector to check for the four key events and sum return a direction vector We can then set our velocity by multiplying this direction vector which has a length of 1 by our desired speed Tip If you ve never used vector math before or need a refresher you can see an explanation of vector usage in Godot at Vector math Note If the code above does nothing when you press the keys double check that you ve set up input actions correctly as described in the Setup part of this tutorial Rotation movement This type of movement is sometimes called Asteroids style because it resembles how that classic arcade game worked Pressing left right rotates the character while up down moves it forward or backward in whatever direction it s facing GDScript C extends CharacterBody2D export var speed 400 export var rotation_speed 1 5 var rotation_direction 0 func get_input rotation_direction Input get_axis left right velocity transform x Input get_axis down up speed func _physics_process delta get_input rotation rotation_direction rotation_speed delta move_and_slide Copy to clipboard using Godot public partial class Movement CharacterBody2D Export public int Speed get set 400 Export public float RotationSpeed get set 1 5f private float _rotationDirection public void GetInput _rotationDirection Input GetAxis left right Velocity Transform X Input GetAxis down up Speed public override void _PhysicsProcess double delta GetInput Rotation _rotationDirection RotationSpeed float delta MoveAndSlide Copy to clipboard Here we ve added two variables to track our rotation direction and speed The rotation is applied directly to the body s rotation property To set the velocity we use the body s transform x which is a vector pointing in the body s forward direction and multiply that by the speed Rotation movement mouse This style of movement is a variation of the previous one This time the direction is set by the mouse position instead of the keyboard The character will always look at the mouse pointer The forward back inputs remain the same however GDScript C extends CharacterBody2D export var speed 400 func get_input look_at get_global_mouse_position velocity transform x Input get_axis down up speed func _physics_process delta get_input move_and_slide Copy to clipboard using Godot public partial class Movement CharacterBody2D Export public int Speed get set 400 public void GetInput LookAt GetGlobalMousePosition Velocity Transform X Input GetAxis down up Speed public override void _PhysicsProcess double delta GetInput MoveAndSlide Copy to clipboard Here we re using the Node2D look_at method to point the player towards the mouse s position Without this function you could get the same effect by setting the angle like this GDScript C rotation get_global_mouse_position angle_to_point position Copy to clipboard var rotation GetGlobalMousePosition AngleToPoint Position Copy to clipboard Click and move This last example uses only the mouse to control the character Clicking on the screen will cause the player to move to the target location GDScript C extends CharacterBody2D export var speed 400 var target position func _input event Use is_action_pressed to only accept single taps as input instead of mouse drags if event is_action_pressed click target get_global_mouse_position func _physics_process delta velocity position direction_to target speed look_at target if position distance_to target 10 move_and_slide Copy to clipboard using Godot public partial class Movement CharacterBody2D Export public int Speed get set 400 private Vector2 _target public override void _Input InputEvent event Use IsActionPressed to only accept single taps as input instead of mouse drags if event IsActionPressed click _target GetGlobalMousePosition public override void _PhysicsProcess double delta Velocity Position DirectionTo _target Speed LookAt _target if Position DistanceTo _target 10 MoveAndSlide Copy to clipboard Note the distance_to check we make prior to movement Without this test the body would jitter upon reaching the target position as it moves slightly past the position and tries to move back only to move too far and repeat Uncommenting the look_at line will also turn the body to point in its direction of motion if you prefer Tip This technique can also be used as the basis of a following character The target position can be that of any object you want to move to Summary You may find these code samples useful as starting points for your own projects Feel free to use them and experiment with them to see what you can make You can download this sample project here 2d_movement_starter zip User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using TileSets Introduction A tilemap is a grid of tiles used to create a game s layout There are several benefits to using TileMapLayer nodes to design your levels First they let you draw a layout by painting tiles onto a grid which is much faster than placing individual Sprite2D nodes one by one Second they allow for larger levels because they are optimized for drawing large numbers of tiles Finally they allow you to add greater functionality to your tiles with collision occlusion and navigation shapes To use TileMapLayer nodes you will need to create a TileSet first A TileSet is a collection of tiles that can be placed in a TileMapLayer node After creating a TileSet you will be able to place them using the TileMap editor To follow this guide you will need an image containing your tiles where every tile has the same size large objects can be split into several tiles This image is called a tilesheet Tiles do not have to be square they can be rectangular hexagonal or isometric pseudo 3D perspective Creating a new TileSet Using a tilesheet This demonstration will use the following tiles taken from Kenney s Abstract Platformer pack We ll use this particular tilesheet from the set Tilesheet with 64 64 tiles Credit Kenney Create a new TileMapLayer node then select it and create a new TileSet resource in the inspector Creating a new TileSet resource within the TileMapLayer node After creating the TileSet resource click the value to unfold it in the inspector The default tile shape is Square but you can also choose Isometric Half Offset Square or Hexagon depending on the shape of your tile images If using a tile shape other than Square you may also need to adjust the Tile Layout and Tile Offset Axis properties Lastly enabling the Rendering UV Clipping property may be useful if you wish tiles to be clipped by their tile coordinates This ensures tiles cannot draw outside their allocated area on the tilesheet Set the tile size to 64 64 in the inspector to match the example tilesheet Setting the tile size to 64 64 to match the example tilesheet If relying on automatic tiles creation like we re about to do here you must set the tile size before creating the atlas The atlas will determine which tiles from the tilesheet can be added to a TileMapLayer node as not every part of the image may be a valid tile Open the TileSet panel at the bottom of the editor then click and drag the tilesheet image onto the panel You will be asked whether to create tiles automatically Answer Yes Automatically creating tiles based on tilesheet image content This will automatically create tiles according to the tile size you specified earlier in the TileSet resource This greatly speeds up initial tile setup Note When using automatic tile generation based on image contents parts of the tilesheet that are fully transparent will not have tiles generated If there are tiles from the tilesheet you do not wish to be present in atlas choose the Eraser tool at the top of the tileset preview then click the tiles you wish to remove Using the Eraser tool to remove unwanted tiles from the TileSet atlas You can also right click a tile and choose Delete as an alternative to the Eraser tool Tip Like in the 2D and TileMap editors you can pan across the TileSet panel using the middle or right mouse buttons and zoom using the mouse wheel or buttons in the top left corner If you wish to source tiles from several tilesheet images for a single TileSet create additional atlases and assign textures to each of them before continuing It is also possible to use one image per tile this way although using tilesheets is recommended for better usability You can adjust properties for the atlas in the middle column Adjusting TileSet atlas properties in the dedicated inspector part of the TileSet panel The following properties can be adjusted on the atlas ID The identifier unique within this TileSet used for sorting Name The human readable name for the atlas Use a descriptive name here for organizational purposes such as terrain decoration etc Margins The margins on the image s edges that should not be selectable as tiles in pixels Increasing this can be useful if you download a tilesheet image that has margins on the edges e g for attribution Separation The separation between each tile on the atlas in pixels Increasing this can be useful if the tilesheet image you re using contains guides such as outlines between every tile Texture Region Size The size of each tile on the atlas in pixels In most cases this should match the tile size defined in the TileMapLayer property although this is not strictly necessary Use Texture Padding If checked adds a 1 pixel transparent edge around each tile to prevent texture bleeding when filtering is enabled It s recommended to leave this enabled unless you re running into rendering issues due to texture padding Note that changing texture margin separation and region size may cause tiles to be lost as some of them would be located outside the atlas image s coordinates To regenerate tiles automatically from the tilesheet use the three vertical dots menu button at the top of the TileSet editor and choose Create Tiles in Non Transparent Texture Regions Recreating tiles automatically after changing atlas properties Using a collection of scenes Since Godot 4 0 you can place actual scenes as tiles This allows you to use any collection of nodes as a tile For example you could use scene tiles to place gameplay elements such as shops the player may be able to interact with You could also use scene tiles to place AudioStreamPlayer2Ds for ambient sounds particle effects and more Warning Scene tiles come with a greater performance overhead compared to atlases as every scene is instanced individually for every placed tile It s recommended to use only scene tiles when necessary To draw sprites in a tile without any kind of advanced manipulation use atlases instead For this example we ll create a scene containing a CPUParticles2D root node Save this scene to a scene file separate from the scene containing the TileMapLayer then switch to the scene containing the TileMapLayer node Open the TileSet editor and create a new Scenes Collection in the left column Creating a scenes collection in the TileSet editor After creating a scenes collection you can enter a descriptive name for the scenes collection in the middle column if you wish Select this scenes collection then create a new scene slot Creating a scene tile after selecting the scenes collection in the TileSet editor Select this scene slot in the right column then use Quick Load or Load to load the scene file containing the particles Creating a scene slot then loading a scene file into it in the TileSet editor You now have a scene tile in your TileSet Once you switch to the TileMap editor you ll be able to select it from the scenes collection and paint it like any other tile Merging several atlases into a single atlas Using multiple atlases within a single TileSet resource can sometimes be useful but it can also be cumbersome in certain situations especially if you re using one image per tile Godot allows you to merge several atlases into a single atlas for easier organization To do so you must have more than one atlas created in the TileSet resource Use the three vertical dots menu button located at the bottom of the list of atlases then choose Open Atlas Merging Tool Opening the atlas merging tool after creating multiple atlases This will open a dialog in which you can select several atlases by holding Shift or Ctrl then clicking on multiple elements Using the atlas merging tool dialog Choose Merge to merge the selected atlases into a single atlas image which translates to a single atlas within the TileSet The unmerged atlases will be removed within the TileSet but the original tilesheet images will be kept on the filesystem If you don t want the unmerged atlases to be removed from the TileSet resource choose Merge Keep Original Atlases instead Tip TileSet features a system of tile proxies Tile proxies are a mapping table that allows notifying the TileMap using a given TileSet that a given set of tile identifiers should be replaced by another one Tile proxies are automatically set up when merging different atlases but they can also be set manually thanks to the Manage Tile Proxies dialog you can access using the three vertical dots menu mentioned above Manually creating tile proxies may be useful when you changed an atlas ID or want to replace all tiles from an atlas by the ones from another atlas Note that when editing a TileMap you can replace all cells by their corresponding mapped value Adding collision navigation and occlusion to the TileSet We ve now successfully created a basic TileSet We could start using in the TileMapLayer node now but it currently lacks any form of collision detection This means the player and other objects could walk straight through the floor or walls If you use 2D navigation you ll also need to define navigation polygons for tiles to generate a navigation mesh that agents can use for pathfinding Lastly if you use 2D lights and shadows or GPUParticles2D you may also want your TileSet to be able to cast shadows and collide with particles This requires defining occluder polygons for solid tiles on the TileSet To be able to define collision navigation and occlusion shapes for each tile you will need to create a physics navigation or occlusion layer for the TileSet resource first To do so select the TileMapLayer node click the TileSet property value in the inspector to edit it then unfold Physics Layers and choose Add Element Creating a physics layer in the TileSet resource inspector within the TileMapLayer node If you also need navigation support now is a good time to create a navigation layer Creating a navigation layer in the TileSet resource inspector within the TileMapLayer node If you need support for light polygon occluders now is a good time to create an occlusion layer Creating an occlusion layer in the TileSet resource inspector within the TileMapLayer node Note Future steps in this tutorial are tailored to creating collision polygons but the procedure for navigation and occlusion is very similar Their respective polygon editors behave in the same way so these steps are not repeated for brevity The only caveat is that the tile s occlusion polygon property is part of a Rendering subsection in the atlas inspector Make sure to unfold this section so you can edit the polygon After creating a physics layer you have access to the Physics Layer section in the TileSet atlas inspector Opening the collision editor while in Select mode You can quickly create a rectangle collision shape by pressing F while the TileSet editor is focused If the keyboard shortcut doesn t work try clicking in the empty area around the polygon editor to focus it Using default rectangle collision shape by pressing F In this tile collision editor you have access to all the 2D polygon editing tools Use the toolbar above the polygon to toggle between creating a new polygon editing an existing polygon and removing points on the polygon The three vertical dots menu button offers additional options such as rotating and flipping the polygon Create new points by clicking and dragging a line between two points Remove a point by right clicking it or using the Remove tool described above and left clicking Pan in the editor by middle clicking or right clicking Right click panning can only be used in areas where there is no point nearby You can use the default rectangle shape to quickly create a triangle shaped collision shape by removing one of the points Creating a triangle collision shape by right clicking one of the corners to remove it You can also use the rectangle as a base for more complex shapes by adding more points Drawing a custom collision for a complex tile shape Tip If you have a large tileset specifying the collision for each tile individually could take a lot of time This is especially true as TileMaps tend to have many tiles with common collision patterns such as solid blocks or 45 degree slopes To apply a similar collision shape to several tiles quickly use functionality to assign properties to multiple tiles at once Assigning custom metadata to the TileSet s tiles You can assign custom data on a per tile basis using custom data layers This can be useful to store information specific to your game such as the damage that a tile should deal when the player touches it or whether a tile can be destroyed using a weapon The data is associated with the tile in the TileSet all instances of the placed tile will use the same custom data If you need to create a variant of a tile that has different custom data this can be done by creating an alternative tile and changing the custom data for the alternative tile only Creating a custom data layer in the TileSet resource inspector within the TileMapLayer node Example of configured custom data layers with game specific properties You can reorder custom data without breaking existing metadata the TileSet editor will update automatically after reordering custom data properties With the custom data layers example shown above we re assigning a tile to have the damage_per_second metadata set to 25 and the destructible metadata to false Editing custom data in the TileSet editor while in Select mode Tile property painting can also be used for custom data Assigning custom data in the TileSet editor using tile property painting Creating terrain sets autotiling Note This functionality was implemented in a different form as autotiling in Godot 3 x Terrains are essentially a more powerful replacement of autotiles Unlike autotiles terrains can support transitions from one terrain to another as a tile may define several terrains at once Unlike before where autotiles were a specific kind of tiles terrains are only a set of properties assigned to atlas tiles These properties are then used by a dedicated TileMap painting mode that selects tiles featuring terrain data in a smart way This means any terrain tile can be either painted as terrain or as a single tile like any other A polished tileset generally features variations that you should use on corners or edges of platforms floors etc While these can be placed manually this quickly becomes tedious Handling this situation with procedurally generated levels can also be difficult and require a lot of code Godot offers terrains to perform this kind of tile connections automatically This allows you to have the correct tile variants automatically used Terrains are grouped into terrain sets Each terrain set is assigned a mode from Match Corners and Sides Match Corners and Match sides They define how terrains are matched to each other in a terrain set Note The above modes correspond to the previous bitmask modes autotiles used in Godot 3 x 2 2 3 3 or 3 3 minimal This is also similar to what the Tiled editor features Select the TileMapLayer node go to the inspector and create a new terrain set within the TileSet resource Creating a terrain set in the TileSet resource inspector within the TileMapLayer node After creating a terrain set you must create one or more terrains within the terrain set Creating a terrain within the terrain set In the TileSet editor switch to Select mode and click a tile In the middle column unfold the Terrains section then assign a terrain set ID and a terrain ID for the tile 1 means no terrain set or no terrain which means you must set Terrain Set to 0 or greater before you can set Terrain to 0 or greater Note Terrain set IDs and terrain IDs are independent from each other They also start from 0 not 1 Configuring terrain on a single tile in the TileSet editor s Select mode After doing so you can now configure the Terrain Peering Bits section which becomes visible in the middle column The peering bits determine which tile will be placed depending on neighboring tiles 1 is a special value which refers to empty space For example if a tile has all its bits set to 0 or greater it will only appear if all 8 neighboring tiles are using a tile with the same terrain ID If a tile has its bits set to 0 or greater but the top left top and top right bits are set to 1 it will only appear if there is empty space on top of it including diagonally Configuring terrain peering bits on a single tile in the TileSet editor s Select mode An example configuration for a full tilesheet may look as follows Example full tilesheet for a sidescrolling game Example full tilesheet for a sidescrolling game with terrain peering bits visible Assigning properties to multiple tiles at once There are two ways to assign properties to multiple tiles at once Depending on your use cases one method may be faster than the other Using multiple tile selection If you wish to configure various properties on several tiles at once choose the Select mode at the top of the TileSet editor After doing this you can select multiple tiles on the right column by holding Shift then clicking on tiles You can also perform rectangle selection by holding down the left mouse button then dragging the mouse Lastly you can deselect tiles that were already selected without affecting the rest of the selection by holding Shift then clicking on a selected tile You can then assign properties using the inspector in the middle column of the TileSet editor Only properties that you change here will be applied to all selected tiles Like in the editor s inspector properties that differ on selected tiles will remain different until you edit them With numerical and color properties you will also see a preview of the property s value on all tiles in the atlas after editing a property Selecting multiple tiles using the Select mode then applying properties Using tile property painting If you wish to apply a single property to several tiles at once you can use the property painting mode for this purpose Configure a property to be painted in the middle column then click on tiles or hold down the left mouse button in the right column to paint properties onto tiles Painting tile properties using the TileSet editor Tile property painting is especially useful with properties that are time consuming to set manually such as collision shapes Painting a collision polygon then left clicking tiles to apply it Creating alternative tiles Sometimes you want to use a single tile image found only once within the atlas but configured in different ways For example you may want to use the same tile image but rotated flipped or modulated with a different color This can be done using alternative tiles Tip Since Godot 4 2 you don t have to create alternative tiles to rotate or flip tiles anymore You can rotate any tile while placing it in the TileMap editor by using the rotation flip buttons in the TileMap editor toolbar To create an alternative tile right click a base tile in the atlas displayed by the TileSet editor then choose Create an Alternative Tile Creating an alternative tile by right clicking a base tile in the TileSet editor If currently in Select mode the alternative tile will already be selected for editing If not currently in Select mode you can still create alternative tiles but you will need to switch to Select mode and select the alternative tile to edit it If you don t see the alternative tile pan over to the right of the atlas image as alternative tiles always appear on the right of base tiles of a given atlas in the TileSet editor Configuring an alternative tile after clicking it in the TileSet editor After selecting an alternative tile you can change any properties using the middle column like you would on a base tile However the list of exposed properties is different compared to base tiles Alternative ID The unique numerical identifier for this alternative tile Changing it will break existing TileMaps so be careful This ID also controls the sorting in the list of alternative tiles displayed in the editor Rendering Flip H If true the tile is horizontally flipped Rendering Flip V If true the tile is vertically flipped Rendering Transpose If true the tile is rotated 90 degrees counter clockwise and then flipped vertically In practice this means that to rotate a tile by 90 degrees clockwise without flipping it you should enable Flip H and Transpose To rotate a tile by 180 degrees clockwise enable Flip H and Flip V To rotate a tile by 270 degrees clockwise enable Flip V and Transpose Rendering Texture Origin The origin to use for drawing the tile This can be used to visually offset the tile compared to the base tile Rendering Modulate The color multiplier to use when rendering the tile Rendering Material The material to use for this tile This can be used to apply a different blend mode or custom shaders to a single tile Z Index The sorting order for this tile Higher values will make the tile render in front of others on the same layer Y Sort Origin The vertical offset to use for tile sorting based on its Y coordinate in pixels This allows using layers as if they were on different height for top down games Adjusting this can help alleviate issues with sorting certain tiles Only effective if Y Sort Enabled is true on the TileMapLayer node under CanvasItem Ordering You can create an additional alternative tile variant by clicking the large icon next to the alternative tile This is equivalent to selecting the base tile and right clicking it to choose Create an Alternative Tile again Note When creating an alternative tile none of the properties from the base tile are inherited You must set properties again on the alternative tile if you wish those to be identical on the base tile and the alternative tile User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using TileMaps See also This page assumes you have created or downloaded a TileSet already If not please read Using TileSets first as you will need a TileSet to create a TileMap Introduction A tilemap is a grid of tiles used to create a game s layout There are several benefits to using TileMapLayer nodes to design your levels First they make it possible to draw the layout by painting the tiles onto a grid which is much faster than placing individual Sprite2D nodes one by one Second they allow for much larger levels because they are optimized for drawing large numbers of tiles Finally you can add collision occlusion and navigation shapes to tiles adding greater functionality to the TileMap Specifying the TileSet in the TileMapLayer If you ve followed the previous page on Using TileSets you should have a TileSet resource that is built in to the TileMapLayer node This is good for prototyping but in a real world project you will generally have multiple levels reusing the same tileset The recommended way to reuse the same TileSet in several TileMapLayer nodes is to save the TileSet to an external resource To do so click the dropdown next to the TileSet resource and choose Save Saving the built in TileSet resource to an external resource file Multiple TileMapLayers and settings When working with tilemaps it s generally advised that you use multiple TileMapLayer nodes when appropriate Using multiple layers can be advantageous for example this allows you to distinguish foreground tiles from background tiles for better organization You can place one tile per layer at a given location which allows you to overlap several tiles together if you have more than one layer Each TileMapLayer node has several properties you can adjust Enabled If true the layer is visible in the editor and when running the project TileSet The tileset used by the TileMapLayer node Rendering Y Sort Origin The vertical offset to use for Y sorting on each tile in pixels Only effective if Y Sort Enabled under CanvasItem settings is true X Draw Order Reversed Reverses the order tiles are drawn on the X axis Requires that Y Sort Enabled under CanvasItem settings is true Rendering Quadrant Size A quadrant is a group of tiles drawn together on a single CanvasItem for optimization purposes This setting defines the length of a square s side in the map s coordinate system The quadrant size does not apply to a Y sorted TileMapLayer since tiles are grouped by Y position in that case Physics Collision Enabled Enables or disables collision Use Kinematic Bodies When true TileMapLayer collision shapes will be instantiated as kinematic bodies Collision Visibility Mode Whether or not the TileMapLayer s collision shapes are visible If set to default then it depends on the show collision debug settings Navigation Navigation Enabled Whether or not navigation regions are enabled Navigation Visible Whether or not the TileMapLayer s navigation meshes are visible If set to default then it depends on the show navigation debug settings Tip TileMap built in navigation has many practical limitations that result in inferior pathfinding performance and pathfollowing quality After designing the TileMap consider baking it to a more optimized navigation mesh and disabling the TileMap NavigationLayer using a NavigationRegion2D or the NavigationServer2D See Using navigation meshes for additional information Warning 2D navigation meshes can not be layered or stacked on top of each other like visuals or physic shapes Attempting to stack navigation meshes on the same navigation map will result in merge and logical errors that break the pathfinding Reordering layers You can reorder layers by drag and dropping their node in the Scene tab You can also switch between which TileMapLayer node you re working on by using the buttons in the top right corner of the TileMap editor Note You can create rename or reorder layers in the future without affecting existing tiles Be careful though as removing a layer will also remove all tiles that were placed on the layer Opening the TileMap editor Select the TileMapLayer node then open the TileMap panel at the bottom of the editor Opening the TileMap panel at the bottom of the editor The TileMapLayer node must be selected first Selecting tiles to use for painting First if you ve created additional layers above make sure you ve selected the layer you wish to paint on Selecting a layer to paint on in the TileMap editor Tip In the 2D editor the layers you aren t currently editing from the same TileMapLayer node will appear grayed out while in the TileMap editor You can disable this behavior by clicking the icon next to the layer selection menu Highlight Selected TileMap Layer tooltip You can skip the above step if you haven t created additional layers as the first layer is automatically selected when entering the TileMap editor Before you can place tiles in the 2D editor you must select one or more tiles in the TileMap panel located at the bottom of the editor To do so click a tile in the TileMap panel or hold down the mouse button to select multiple tiles Selecting a tile in the TileMap editor by clicking it Tip Like in the 2D and TileSet editors you can pan across the TileMap panel using the middle or right mouse buttons and zoom using the mouse wheel or buttons in the top left corner You can also hold down Shift to append to the current selection When selecting more than one tile multiple tiles will be placed every time you perform a painting operation This can be used to paint structures composed of multiple tiles in a single click such as large platforms or trees The final selection does not have to be contiguous if there is empty space between selected tiles it will be left empty in the pattern that will be painted in the 2D editor Selecting multiple tiles in the TileMap editor by holding down the left mouse button If you ve created alternative tiles in your TileSet you can select them for painting on the right of the base tiles Selecting an alternative tile in the TileMap editor Lastly if you ve created a scenes collection in the TileSet you can place scene tiles in the TileMap Placing a scene tile containing particles using the TileMap editor Painting modes and tools Using the toolbar at the top of the TileMap editor you can choose between several painting modes and tools These modes affect operation when clicking in the 2D editor not the TileMap panel itself From left to right the painting modes and tools you can choose are Selection Select tiles by clicking a single tile or by holding down the left mouse button to select multiple with a rectangle in the 2D editor Note that empty space cannot be selected if you create a rectangle selection only non empty tiles will be selected To append to the current selection hold Shift then select a tile To remove from the current selection hold Ctrl then select a tile The selection can then be used in any other painting mode to quickly create copies of an already placed pattern You can remove the selected tiles from the TileMap by pressing Del You can toggle this mode temporarily while in Paint mode by holding Ctrl then performing a selection Tip You can copy and paste tiles that were already placed by performing a selection pressing Ctrl C then pressing Ctrl V The selection will be pasted after left clicking You can press Ctrl V another time to perform more copies this way Right click or press Escape to cancel pasting Paint The standard Paint mode allows you to place tiles by clicking or holding down the left mouse button If you right click the currently selected tile will be erased from the tilemap In other words it will be replaced by empty space If you have selected multiple tiles in the TileMap or using the Selection tool they will be placed every time you click or drag the mouse while holding down the left mouse button Tip While in Paint mode you can draw a line by holding Shift before holding down the left mouse button then dragging the mouse to the line s end point This is identical to using the Line tool described below You can also draw a rectangle by holding Ctrl and Shift before holding down the left mouse button then dragging the mouse to the rectangle s end point This is identical to using the Rectangle tool described below Lastly you can pick existing tiles in the 2D editor by holding Ctrl then clicking on a tile or holding and dragging the mouse This will switch the currently painted tile s to the tile s you ve just clicked This is identical to using the Picker tool described below Line After selecting Line Paint mode you can draw in a line that is always 1 tile thick no matter its orientation If you right click while in Line Paint mode you will erase in a line If you have selected multiple tiles in the TileMap or using the Selection tool you can place them in a repeating pattern across the line You can toggle this mode temporarily while in Paint or Eraser mode by holding Shift then drawing Using the line tool after selecting two tiles to draw platforms diagonally Rectangle After selecting Rectangle Paint mode you can draw in an axis aligned rectangle If you right click while in Rectangle Paint mode you will erase in an axis aligned rectangle If you have selected multiple tiles in the TileMap or using the Selection tool you can place them in a repeating pattern within the rectangle You can toggle this mode temporarily while in Paint or Eraser mode by holding Ctrl and Shift then drawing Bucket Fill After selecting Bucket Fill mode you can choose whether painting should be limited to contiguous areas only by toggling the Contiguous checkbox that appears on the right of the toolbar If you enable Contiguous the default only matching tiles that touch the current selection will be replaced This contiguous check is performed horizontally and vertically but not diagonally If you disable Contiguous all tiles with the same ID in the entire TileMap will be replaced by the currently selected tile If selecting an empty tile with Contiguous unchecked all tiles in the rectangle that encompasses the TileMap s effective area will be replaced instead If you right click while in Bucket Fill mode you will replace matching tiles with empty tiles If you have selected multiple tiles in the TileMap or using the Selection tool you can place them in a repeating pattern within the filled area Using the Bucket Fill tool Picker After selecting Picker mode you can pick existing tiles in the 2D editor by holding Ctrl then clicking on a tile This will switch the currently painted tile to the tile you ve just clicked You can also pick multiple tiles at once by holding down the left mouse button and forming a rectangle selection Only non empty tiles can be picked You can toggle this mode temporarily while in Paint mode by holding Ctrl then clicking or dragging the mouse Eraser This mode is combined with any other painting mode Paint Line Rectangle Bucket Fill When eraser mode is enabled tiles will be replaced by empty tiles instead of drawing new lines when left clicking You can toggle this mode temporarily while in any other mode by right clicking instead of left clicking Painting randomly using scattering While painting you can optionally enable randomization When enabled a random tile will be chosen between all the currently selected tiles when painting This is supported with the Paint Line Rectangle and Bucket Fill tools For effective paint randomization you must select multiple tiles in the TileMap editor or use scattering both approaches can be combined If Scattering is set to a value greater than 0 there is a chance that no tile will be placed when painting This can be used to add occasional non repeating detail to large areas such as adding grass or crumbs on a large top down TileMap Example when using Paint mode Selecting from several times to randomly choose then painting by holding down the left mouse button Example when using Bucket Fill mode Using Bucket Fill tool with a single tile but with randomization and scattering enabled Note Eraser mode does not take randomization and scattering into account All tiles within the selection are always removed Saving and loading premade tile placements using patterns While you can copy and paste tiles while in Select mode you may wish to save premade patterns of tiles to place together in a go This can be done on a per TileMap basis by choosing the Patterns tab of the TileMap editor To create a new pattern switch to Select mode perform a selection and press Ctrl C Click on empty space within the Patterns tab a blue focus rectangle should appear around the empty space then press Ctrl V Creating a new pattern from a selection in the TileMap editor To use an existing pattern click its image in the Patterns tab switch to any painting mode then left click somewhere in the 2D editor Placing an existing pattern using the TileMap editor Like multi tile selections patterns will be repeated if used with the Line Rectangle or Bucket Fill painting modes Note Despite being edited in the TileMap editor patterns are stored in the TileSet resource This allows reusing patterns in different TileMapLayer nodes after loading a TileSet resource saved to an external file Handling tile connections automatically using terrains To use terrains the TileMapLayer node must feature at least one terrain set and a terrain within this terrain set See Creating terrain sets autotiling if you haven t created a terrain set for the TileSet yet There are 3 kinds of painting modes available for terrain connections Connect where tiles are connected to surrounding tiles on the same TileMapLayer Path where tiles are connected to tiles painted in the same stroke until the mouse button is released Tile specific overrides to resolve conflicts or handle situations not covered by the terrain system The Connect mode is easier to use but Path is more flexible as it allows for more artist control during painting For instance Path can allow roads to be directly adjacent to each other without being connected to each other while Connect will force both roads to be connected Selecting Connect mode in the TileMap editor s Terrains tab Selecting Path mode in the TileMap editor s Terrains tab Lastly you can select specific tiles from the terrain to resolve conflicts in certain situations Painting with specific tiles in the TileMap editor s Terrains tab Any tile that has at least one of its bits set to a value set to the corresponding terrain ID will appear in the list of tiles to choose from Handling missing tiles If you remove tiles in the TileSet that are referenced in a TileMap the TileMap will display a placeholder to indicate that an invalid tile ID is placed Missing tiles in the TileMap editor due to the TileSet reference being broken These placeholders are not visible in the running project but the tile data is still persisted to disk This allows you to safely close and reopen such scenes Once you re add a tile with the matching ID the tiles will appear with the new tile s appearance Note Missing tile placeholders may not be visible until you select the TileMapLayer node and open the TileMap editor User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue 3D Introduction to 3D Using 3D transforms Procedural geometry 3D text Rendering 3D rendering limitations Standard Material 3D and ORM Material 3D 3D lights and shadows Using decals Physical light and camera units Particle systems 3D High dynamic range lighting Global illumination Environment and post processing Volumetric fog and fog volumes 3D antialiasing Optimization Using MultiMeshInstance3D Mesh level of detail LOD Visibility ranges HLOD Occlusion culling Resolution scaling Variable rate shading Tools Prototyping levels with CSG Using GridMaps Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Introduction to 3D Creating a 3D game can be challenging That extra Z coordinate makes many of the common techniques that helped to make 2D games simpler no longer work To aid in this transition it is worth mentioning that Godot uses similar APIs for 2D and 3D Most nodes are the same and are present in both 2D and 3D versions In fact it is worth checking the 3D platformer tutorial or the 3D kinematic character tutorials which are almost identical to their 2D counterparts Godot Third Person Shooter TPS Demo available on the Github repository or the Asset Library In 3D math is a little more complex than in 2D so also checking the Vector math entry in the wiki which was especially created for game developers not mathematicians or engineers will help pave the way for you to develop 3D games efficiently 3D workspace Editing 3D scenes is done in the 3D workspace This workspace can be selected manually but it will be automatically selected when a Node3D node is selected Similar to 2D the tabs below the workspace selector are used to change between currently opened scenes or create a new one using the plus button The left and right docks should be familiar from editor introduction Below the scene selector the main toolbar is visible and beneath the main toolbar is the 3D viewport Main toolbar Some buttons in the main toolbar are the same as those in the 2D workspace A brief explanation is given with the shortcut if the mouse cursor is hovered over a button for one second Some buttons may have additional functionality if another keypress is performed A recap of main functionality of each button with its default shortcut is provided below from left to right Select Mode Q Allows selection of nodes in the viewport Left clicking on a node to select one Left clicking and dragging a rectangle selects all nodes within the rectangle s boundaries once released Holding Shift while selecting adds more nodes to the selection Clicking on a selected node while holding Shift deselects the node In this mode you can use the gizmos to perform movement or rotation Move Mode W Enables move or translate mode for the selected nodes See Space and manipulation gizmos for more details Rotate Mode E Enables rotation mode for the selected nodes See Space and manipulation gizmos for more details Scale Mode R Enables scaling and displays scaling gizmos in different axes for the selected nodes See Space and manipulation gizmos for more details Show the list of selectable nodes at the clicked position As the description suggests this provides a list of selectable nodes at the clicked position as a context menu if there is more than one node in the clicked area Lock Ctrl L the selected nodes preventing selection and movement in the viewport Clicking the button again or using Ctrl Shift L unlocks the selected nodes Locked nodes can only be selected in the scene tree They can easily be identified with a padlock next to their node names in the scene tree Clicking on this padlock also unlocks the nodes Group selected nodes Ctrl G This allows selection of the root node if any of the children are selected Using Ctrl G ungroups them Additionally clicking the ungroup button in the scene tree performs the same action Use Local Space T If enabled gizmos of a node are drawn using the current node s rotation angle instead of the global viewport axes Use Snap Y If enabled movement and rotation snap to grid Snapping can also temporarily be activated using Ctrl while performing the action The settings for changing snap options are explained below Project Camera Override This action temporarily replaces the active camera in the level e g the camera following the player with the camera in the editor s viewport allowing you to move freely and inspect the level s different parts while game is running Toggle preview sunlight If no DirectionalLight3D exist in the scene a preview of sunlight can be used as a light source See Preview environment and light for more details Toggle preview environment If no WorldEnvironment exists in the scene a preview of the environment can be used as a placeholder See Preview environment and light for more details Edit Sun and Environment Settings three dots Opens the menu to configure preview sunlight and environment settings See Preview environment and light for more details Transform menu It has three options Snap Object to Floor Snaps an object to a solid floor Transform Dialog Opens a dialog to adjust transform parameters translate rotate scale and transform manually Snap Settings Allows you to change transform rotate snap in degrees and scale snap in percent settings View menu Controls the view options and enables additional viewports In this menu you can also show hide grids which are set to 1x1 meter by default and the origin where the blue green and red axis lines intersect Moreover specific types of gizmos can be toggled in this menu An open eye means that the gizmo is visible a closed eye means it is hidden A half open eye means that it is also visible through opaque surfaces Clicking on Settings in this view menu opens a window to change the Vertical Field of View VFOV parameter in degrees Z Near and Z Far values Next to the View menu additional buttons may be visible In the toolbar image at the beginning of this chapter an additional Mesh button appears because a MeshInstance3D is selected This menu provides some quick actions or tools to work on a specific node or selection View menu of viewport Below the Select tool in the 3D viewport clicking on the three dots opens the View menu for the viewport Hiding all shown gizmos in the editor s 3D view can also be performed through this menu This menu also displays the current view type and enables quick adjustment of the viewport s viewing angle Additionally it offers options to modify the appearance of nodes within the viewport Coordinate system Godot uses the metric system for everything in 3D with 1 unit being equal to 1 meter Physics and other areas are tuned for this scale Therefore attempting to use a different scale is usually a bad idea unless you know what you are doing When working with 3D assets it s always best to work in the correct scale set the unit to metric in your 3D modeling software Godot allows scaling post import and while this works in most cases in rare situations it may introduce floating point precision issues and thus glitches or artifacts in delicate areas such as rendering or physics Make sure your artists always work in the right scale The Y coordinate is used for up As for the horizontal X Z axes Godot uses a right handed coordinate system This means that for most objects that need alignment such as lights or cameras the Z axis is used as a pointing towards direction This convention roughly means that X is sides Y is up down Z is front back See this chart for comparison with other 3D software Image by Freya Holmér Space and manipulation gizmos Moving rotating and scaling objects in the 3D view is done through the manipulator gizmos Each axis is represented by a color Red Green Blue represent X Y Z respectively This convention applies to the grid and other gizmos too and also to the shader language ordering of components for Vector3 Color etc Some useful keybindings To snap placement or rotation press Ctrl while moving scaling or rotating To center the view on the selected object press F In the viewport the arrows can be clicked and held to move the object on an axis The arcs can be clicked and held to rotate the object To lock one axis and move the object freely in the other two axes the colored rectangles can be clicked held and dragged If the transform mode is changed from Select Mode to Scale Mode the arrows will be replaced by cubes which can be dragged to scale an object as if the object is being moved Navigating the 3D environment In 3D environments it is often important to adjust the viewpoint or angle from which you are viewing the scene In Godot navigating the 3D environment in the viewport or spatial editor can be done in multiple ways The default 3D scene navigation controls are similar to Blender aiming to have some sort of consistency in the free software pipeline but options are included to customize mouse buttons and behavior to be similar to other tools in the Editor Settings To change the controls to Maya or Modo controls you can navigate to Editor Settings Editors 3D Then under Navigation search for Navigation Scheme Using the default settings the following shortcuts control how one can navigate in the viewport Pressing the middle mouse button and dragging the mouse allows you to orbit around the center of what is on the screen It is also possible to left click and hold the manipulator gizmo located on the top right of the viewport to orbit around the center Left clicking on one of the colored circles will set the view to the chosen orthogonal and the viewport s view menu will be updated accordingly If the Perspective view is enabled on the viewport can be seen on the viewport s View menu not the View menu on the main toolbar holding down the right mouse button on the viewport or pressing Shift F switches to free look mode In this mode you can move the mouse to look around use the W A S D keys to fly around the view E to go up and Q to go down To disable this mode release the right mouse button or press Shift F again In the free look mode you can temporarily increase the flying speed using Shift or decrease it using Alt To change and keep the speed modifier use mouse wheel up or mouse wheel down to increase or decrease it respectively In orthogonal mode holding the right mouse button will pan the view instead Use Keypad 5 to toggle between perspective and orthogonal view Using Blender style transform shortcuts Since Godot 4 2 you can enable Blender style shortcuts for translating rotating and scaling nodes In Blender these shortcuts are G for translating R for rotating S for scaling After pressing a shortcut key while focusing on the 3D editor viewport move the mouse or enter a number to move the selected node s by the specified amount in 3D units You can constrain movement to a specific axis by specifying the axis as a letter then the distance if entering a value with the keyboard For instance to move the selection upwards by 2 5 units enter the following sequence in order Y is upwards in Godot G Y 2 5 Enter To use Blender style transform shortcuts in Godot go to the Editor Settings Shortcuts tab then in the Spatial Editor section Bind Begin Translate Transformation to G Bind Begin Rotate Transformation to R Bind Begin Scale Transformation to S Finally unbind Scale Mode so that its shortcut won t conflict with Begin Rotate Transformation Tip More shortcuts can be found on the 3D Spatial Editor page Node3D node Node2D is the base node for 2D Control is the base node for everything GUI Following this reasoning the 3D engine uses the Node3D node for everything 3D Node3Ds have a local transform which is relative to the parent node as long as the parent node is also of or inherits from the type Node3D This transform can be accessed as a 3 4 Transform3D or as 3 Vector3 members representing location Euler rotation X Y and Z angles and scale 3D content Unlike 2D where loading image content and drawing is straightforward 3D is a little more difficult The content needs to be created with special 3D tools also called Digital Content Creation tools or DCCs and exported to an exchange file format to be imported in Godot This is required since 3D formats are not as standardized as images Manually authored models using 3D modeling software It is possible to import 3D models in Godot created in external tools Depending on the format you can import entire scenes exactly as they look in the 3D modeling software including animation skeletal rigs blend shapes or as simple resources See also See Importing 3D scenes for more on importing Generated geometry It is possible to create custom geometry by using the ArrayMesh resource directly Simply create your arrays and use the ArrayMesh add_surface_from_arrays function A helper class is also available SurfaceTool which provides a more straightforward API and helpers for indexing generating normals tangents etc In any case this method is meant for generating static geometry models that will not be updated often as creating vertex arrays and submitting them to the 3D API has a significant performance cost Note To learn about prototyping inside Godot or using external tools see Prototyping levels with CSG Immediate geometry If instead you need to generate simple geometry that will be updated often Godot provides a special ImmediateMesh resource that can be used in a MeshInstance3D node This provides an OpenGL 1 x style immediate mode API to create points lines triangles etc 2D in 3D While Godot packs a powerful 2D engine many types of games use 2D in a 3D environment By using a fixed camera either orthogonal or perspective that does not rotate nodes such as Sprite3D and AnimatedSprite3D can be used to create 2D games that take advantage of mixing with 3D backgrounds more realistic parallax lighting shadow effects etc The disadvantage is of course that added complexity and reduced performance in comparison to plain 2D as well as the lack of reference of working in pixels Environment Besides editing a scene it is often common to edit the environment Godot provides a WorldEnvironment node that allows changing the background color mode as in put a skybox and applying several types of built in post processing effects Environments can also be overridden in the Camera Preview environment and light By default any 3D scene that doesn t have a WorldEnvironment node or a DirectionalLight3D will have a preview turned on for what it s missing to light the scene The preview light and environment will only be visible in the scene while in the editor If you run the scene or export the project they will not affect the scene The preview light and environment can be turned on or off from the top menu by clicking on their respective icon The three dots dropdown menu next to those icons can be used to adjust the properties of the preview environment and light if they are enabled The same preview sun and environment is used for every scene in the same project So only make adjustments that would apply to all of the scenes you will need a preview light and environment for Cameras No matter how many objects are placed in the 3D space nothing will be displayed unless a Camera3D is also added to the scene Cameras can work in either orthogonal or perspective projections Cameras are associated with and only display to a parent or grandparent viewport Since the root of the scene tree is a viewport cameras will display on it by default but if sub viewports either as render target or picture in picture are desired they need their own children cameras to display When dealing with multiple cameras the following rules are enforced for each viewport If no cameras are present in the scene tree the first one that enters it will become the active camera Further cameras entering the scene will be ignored unless they are set as current If a camera has the current property set it will be used regardless of any other camera in the scene If the property is set it will become active replacing the previous camera If an active camera leaves the scene tree the first camera in tree order will take its place Lights The background environment emits some ambient light which appears on surfaces Still without any light sources placed in the scene the scene will appear quite dark unless the background environment is very bright Most outdoor scenes have a directional light the sun or moon while indoor scenes typically have several positional lights lamps torches See 3D lights and shadows for more information on setting up lights in Godot User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using 3D transforms Introduction If you have never made 3D games before working with rotations in three dimensions can be confusing at first Coming from 2D the natural way of thinking is along the lines of Oh it s just like rotating in 2D except now rotations happen in X Y and Z At first this seems easy For simple games this way of thinking may even be enough Unfortunately it s often incorrect Angles in three dimensions are most commonly referred to as Euler Angles Euler angles were introduced by mathematician Leonhard Euler in the early 1700s This way of representing 3D rotations was groundbreaking at the time but it has several shortcomings when used in game development which is to be expected from a guy with a funny hat The idea of this document is to explain why as well as outlining best practices for dealing with transforms when programming 3D games Problems of Euler angles While it may seem intuitive that each axis has a rotation the truth is that it s just not practical Axis order The main reason for this is that there isn t a unique way to construct an orientation from the angles There isn t a standard mathematical function that takes all the angles together and produces an actual 3D rotation The only way an orientation can be produced from angles is to rotate the object angle by angle in an arbitrary order This could be done by first rotating in X then Y and then in Z Alternatively you could first rotate in Y then in Z and finally in X Anything works but depending on the order the final orientation of the object will not necessarily be the same Indeed this means that there are several ways to construct an orientation from 3 different angles depending on the order of the rotations Following is a visualization of rotation axes in X Y Z order in a gimbal from Wikipedia As you can see the orientation of each axis depends on the rotation of the previous one You may be wondering how this affects you Let s look at a practical example Imagine you are working on a first person controller e g an FPS game Moving the mouse left and right controls your view angle parallel to the ground while moving it up and down moves the player s view up and down In this case to achieve the desired effect rotation must be applied first in the Y axis up in this case since Godot uses a Y Up orientation followed by rotation in the X axis If we were to apply rotation in the X axis first and then in Y the effect would be undesired Depending on the type of game or effect desired the order in which you want axis rotations to be applied may differ Therefore applying rotations in X Y and Z is not enough you also need a rotation order Interpolation Another problem with using Euler angles is interpolation Imagine you want to transition between two different camera or enemy positions including rotations One logical way to approach this is to interpolate the angles from one position to the next One would expect it to look like this But this does not always have the expected effect when using angles The camera actually rotated the opposite direction There are a few reasons this may happen Rotations don t map linearly to orientation so interpolating them does not always result in the shortest path i e to go from 270 to 0 degrees is not the same as going from 270 to 360 even though the angles are equivalent Gimbal lock is at play first and last rotated axis align so a degree of freedom is lost See Wikipedia s page on Gimbal Lock for a detailed explanation of this problem Say no to Euler angles The result of all this is that you should not use the rotation property of Node3D nodes in Godot for games It s there to be used mainly in the editor for coherence with the 2D engine and for simple rotations generally just one axis or even two in limited cases As much as you may be tempted don t use it Instead there is a better way to solve your rotation problems Introducing transforms Godot uses the Transform3D datatype for orientations Each Node3D node contains a transform property which is relative to the parent s transform if the parent is a Node3D derived type It is also possible to access the world coordinate transform via the global_transform property A transform has a Basis transform basis sub property which consists of three Vector3 vectors These are accessed via the transform basis property and can be accessed directly by transform basis x transform basis y and transform basis z Each vector points in the direction its axis has been rotated so they effectively describe the node s total rotation The scale as long as it s uniform can also be inferred from the length of the axes A basis can also be interpreted as a 3x3 matrix and used as transform basis x y A default basis unmodified is akin to GDScript C var basis Basis Contains the following default values basis x Vector3 1 0 0 Vector pointing along the X axis basis y Vector3 0 1 0 Vector pointing along the Y axis basis z Vector3 0 0 1 Vector pointing along the Z axis Copy to clipboard Due to technical limitations on structs in C the default constructor will contain zero values for all fields var defaultBasis new Basis GD Print defaultBasis prints 0 0 0 0 0 0 0 0 0 Instead we can use the Identity property var identityBasis Basis Identity GD Print identityBasis X prints 1 0 0 GD Print identityBasis Y prints 0 1 0 GD Print identityBasis Z prints 0 0 1 The Identity basis is equivalent to var basis new Basis Vector3 Right Vector3 Up Vector3 Back GD Print basis prints 1 0 0 0 1 0 0 0 1 Copy to clipboard This is also an analog of a 3x3 identity matrix Following the OpenGL convention X is the Right axis Y is the Up axis and Z is the Forward axis Together with the basis a transform also has an origin This is a Vector3 specifying how far away from the actual origin 0 0 0 this transform is Combining the basis with the origin a transform efficiently represents a unique translation rotation and scale in space One way to visualize a transform is to look at an object s 3D gizmo while in local space mode The gizmo s arrows show the X Y and Z axes in red green and blue respectively of the basis while the gizmo s center is at the object s origin For more information on the mathematics of vectors and transforms please read the Vector math tutorials Manipulating transforms Of course transforms are not as straightforward to manipulate as angles and have problems of their own It is possible to rotate a transform either by multiplying its basis by another this is called accumulation or by using the rotation methods GDScript C var axis Vector3 1 0 0 Or Vector3 RIGHT var rotation_amount 0 1 Rotate the transform around the X axis by 0 1 radians transform basis Basis axis rotation_amount transform basis shortened transform basis transform basis rotated axis rotation_amount Copy to clipboard Transform3D transform Transform Vector3 axis new Vector3 1 0 0 Or Vector3 Right float rotationAmount 0 1f Rotate the transform around the X axis by 0 1 radians transform Basis new Basis axis rotationAmount transform Basis shortened transform Basis transform Basis Rotated axis rotationAmount Transform transform Copy to clipboard A method in Node3D simplifies this GDScript C Rotate the transform around the X axis by 0 1 radians rotate Vector3 1 0 0 0 1 shortened rotate_x 0 1 Copy to clipboard Rotate the transform around the X axis by 0 1 radians Rotate new Vector3 1 0 0 0 1f shortened RotateX 0 1f Copy to clipboard This rotates the node relative to the parent node To rotate relative to object space the node s own transform use the following GDScript C Rotate around the object s local X axis by 0 1 radians rotate_object_local Vector3 1 0 0 0 1 Copy to clipboard Rotate around the object s local X axis by 0 1 radians RotateObjectLocal new Vector3 1 0 0 0 1f Copy to clipboard Precision errors Doing successive operations on transforms will result in a loss of precision due to floating point error This means the scale of each axis may no longer be exactly 1 0 and they may not be exactly 90 degrees from each other If a transform is rotated every frame it will eventually start deforming over time This is unavoidable There are two different ways to handle this The first is to orthonormalize the transform after some time maybe once per frame if you modify it every frame GDScript C transform transform orthonormalized Copy to clipboard transform transform Orthonormalized Copy to clipboard This will make all axes have 1 0 length again and be 90 degrees from each other However any scale applied to the transform will be lost It is recommended you not scale nodes that are going to be manipulated scale their children nodes instead such as MeshInstance3D If you absolutely must scale the node then re apply it at the end GDScript C transform transform orthonormalized transform transform scaled scale Copy to clipboard transform transform Orthonormalized transform transform Scaled scale Copy to clipboard Obtaining information You might be thinking at this point Ok but how do I get angles from a transform The answer again is you don t You must do your best to stop thinking in angles Imagine you need to shoot a bullet in the direction your player is facing Just use the forward axis commonly Z or Z GDScript C bullet transform transform bullet speed transform basis z BULLET_SPEED Copy to clipboard bullet Transform transform bullet LinearVelocity transform Basis Z BulletSpeed Copy to clipboard Is the enemy looking at the player Use the dot product for this see the Vector math tutorial for an explanation of the dot product GDScript C Get the direction vector from player to enemy var direction enemy transform origin player transform origin if direction dot enemy transform basis z 0 enemy im_watching_you player Copy to clipboard Get the direction vector from player to enemy Vector3 direction enemy Transform Origin player Transform Origin if direction Dot enemy Transform Basis Z 0 enemy ImWatchingYou player Copy to clipboard Strafe left GDScript C Remember that X is right if Input is_action_pressed strafe_left translate_object_local transform basis x Copy to clipboard Remember that X is right if Input IsActionPressed strafe_left TranslateObjectLocal Transform Basis X Copy to clipboard Jump GDScript C Keep in mind Y is up axis if Input is_action_just_pressed jump velocity y JUMP_SPEED move_and_slide Copy to clipboard Keep in mind Y is up axis if Input IsActionJustPressed jump velocity Y JumpSpeed MoveAndSlide Copy to clipboard All common behaviors and logic can be done with just vectors Setting information There are of course cases where you want to set information to a transform Imagine a first person controller or orbiting camera Those are definitely done using angles because you do want the transforms to happen in a specific order For such cases keep the angles and rotations outside the transform and set them every frame Don t try to retrieve and reuse them because the transform is not meant to be used this way Example of looking around FPS style GDScript C accumulators var rot_x 0 var rot_y 0 func _input event if event is InputEventMouseMotion and event button_mask 1 modify accumulated mouse rotation rot_x event relative x LOOKAROUND_SPEED rot_y event relative y LOOKAROUND_SPEED transform basis Basis reset rotation rotate_object_local Vector3 0 1 0 rot_x first rotate in Y rotate_object_local Vector3 1 0 0 rot_y then rotate in X Copy to clipboard accumulators private float _rotationX 0f private float _rotationY 0f public override void _Input InputEvent event if event is InputEventMouseMotion mouseMotion modify accumulated mouse rotation _rotationX mouseMotion Relative X LookAroundSpeed _rotationY mouseMotion Relative Y LookAroundSpeed reset rotation Transform3D transform Transform transform Basis Basis Identity Transform transform RotateObjectLocal Vector3 Up _rotationX first rotate about Y RotateObjectLocal Vector3 Right _rotationY then rotate about X Copy to clipboard As you can see in such cases it s even simpler to keep the rotation outside then use the transform as the final orientation Interpolating with quaternions Interpolating between two transforms can efficiently be done with quaternions More information about how quaternions work can be found in other places around the Internet For practical use it s enough to understand that pretty much their main use is doing a closest path interpolation As in if you have two rotations a quaternion will smoothly allow interpolation between them using the closest axis Converting a rotation to quaternion is straightforward GDScript C Convert basis to quaternion keep in mind scale is lost var a Quaternion transform basis var b Quaternion transform2 basis Interpolate using spherical linear interpolation SLERP var c a slerp b 0 5 find halfway point between a and b Apply back transform basis Basis c Copy to clipboard Convert basis to quaternion keep in mind scale is lost var a transform Basis GetQuaternion var b transform2 Basis GetQuaternion Interpolate using spherical linear interpolation SLERP var c a Slerp b 0 5f find halfway point between a and b Apply back transform Basis new Basis c Copy to clipboard The Quaternion type reference has more information on the datatype it can also do transform accumulation transform points etc though this is used less often If you interpolate or apply operations to quaternions many times keep in mind they need to be eventually normalized Otherwise they will also suffer from numerical precision errors Quaternions are useful when doing camera path etc interpolations as the result will always be correct and smooth Transforms are your friend For most beginners getting used to working with transforms can take some time However once you get used to them you will appreciate their simplicity and power Don t hesitate to ask for help on this topic in any of Godot s online communities and once you become confident enough please help others User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Procedural geometry There are many ways to procedurally generate geometry in Godot In this tutorial series we will explore a few of them Each technique has its own benefits and drawbacks so it is best to understand each one and how it can be useful in a given situation Using the ArrayMesh Using the MeshDataTool Using the SurfaceTool Using ImmediateMesh Note All the procedural geometry generation methods described here run on the CPU Godot doesn t support generating geometry on the GPU yet What is geometry Geometry is a fancy way of saying shape In computer graphics geometry is typically represented by an array of positions called vertices In Godot geometry is represented by Meshes What is a Mesh Many things in Godot have mesh in their name the Mesh the ArrayMesh the ImmediateMesh the MeshInstance3D the MultiMesh and the MultiMeshInstance3D While they are all related they have slightly different uses Meshes and ArrayMeshes are resources that are drawn using a MeshInstance3D node Resources like Meshes and ArrayMeshes cannot be added to the scene directly A MeshInstance3D represents one instance of a mesh in your scene You can reuse a single mesh in multiple MeshInstance3Ds to draw it in different parts of your scene with different materials or transformations scale rotation position etc If you are going to draw the same object many times it can be helpful to use a MultiMesh with a MultiMeshInstance3D MultiMeshInstance3Ds draw meshes thousands of times very cheaply by taking advantage of hardware instancing The drawback with using a MultiMeshInstance3D is that each of your mesh s surfaces are limited to one material for all instances It uses an instance array to store different colors and transformations for each instance but all the instances of each surface use the same material What a Mesh is A Mesh is composed of one or more surfaces A surface is an array composed of multiple sub arrays containing vertices normals UVs etc Normally the process of constructing surfaces and meshes is hidden from the user in the RenderingServer but with ArrayMeshes the user can construct a Mesh manually by passing in an array containing the surface information Surfaces Each surface has its own material Alternatively you can override the material for all surfaces in the Mesh when you use a MeshInstance3D using the material_override property Surface array The surface array is an array of length ArrayMesh ARRAY_MAX Each position in the array is filled with a sub array containing per vertex information For example the array located at ArrayMesh ARRAY_NORMAL is a PackedVector3Array of vertex normals See Mesh ArrayType for more information The surface array can be indexed or non indexed Creating a non indexed array is as easy as not assigning an array at the index ArrayMesh ARRAY_INDEX A non indexed array stores unique vertex information for every triangle meaning that when two triangles share a vertex the vertex is duplicated in the array An indexed surface array only stores vertex information for each unique vertex and then also stores an array of indices which maps out how to construct the triangles from the vertex array In general using an indexed array is faster but it means you have to share vertex data between triangles which is not always desired e g when you want per face normals Tools Godot provides different ways of accessing and working with geometry More information on each will be provided in the following tutorials ArrayMesh The ArrayMesh resource extends Mesh to add a few different quality of life functions and most importantly the ability to construct a Mesh surface through scripting For more information about the ArrayMesh please see the ArrayMesh tutorial MeshDataTool The MeshDataTool is a resource that converts Mesh data into arrays of vertices faces and edges that can be modified at runtime For more information about the MeshDataTool please see the MeshDataTool tutorial SurfaceTool The SurfaceTool allows the creation of Meshes using an OpenGL 1 x immediate mode style interface For more information about the SurfaceTool please see the SurfaceTool tutorial ImmediateMesh ImmediateMesh is a mesh that uses an immediate mode style interface like SurfaceTool to draw objects The difference between ImmediateMesh and the SurfaceTool is that ImmediateMesh is drawn directly with code dynamically while the SurfaceTool is used to generate a Mesh that you can do whatever you want with ImmediateMesh is useful for prototyping because of its straightforward API but it is slow because the geometry is rebuilt each time you make a change It is most useful for adding simple geometry for visual debugging e g by drawing lines to visualize physics raycasts etc For more information about ImmediateMesh please see the ImmediateMesh tutorial Which one should I use Which approach you use depends on what you are trying to do and what kind of procedure you are comfortable with Both SurfaceTool and ArrayMesh are excellent for generating static geometry meshes that don t change over time Using an ArrayMesh is slightly faster than using a SurfaceTool but the API is a little more challenging Additionally SurfaceTool has a few quality of life methods such as generate_normals and index ImmediateMesh is more limited than both ArrayMesh and SurfaceTool However if you need the geometry to change every frame anyway it provides a much easier interface that can be slightly faster than generating an ArrayMesh every frame The MeshDataTool is not fast but it gives you access to all kinds of properties of the mesh that you don t get with the others edges faces etc It is incredibly useful when you need that sort of data to transform the mesh but it is not a good idea to use it if that extra information is not needed The MeshDataTool is best used if you are going to be using an algorithm that requires access to the face or edge array Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using the ArrayMesh This tutorial will present the basics of using an ArrayMesh To do so we will use the function add_surface_from_arrays which takes up to five parameters The first two are required while the last three are optional The first parameter is the PrimitiveType an OpenGL concept that instructs the GPU how to arrange the primitive based on the vertices given i e whether they represent triangles lines points etc See Mesh PrimitiveType for the options available The second parameter arrays is the actual Array that stores the mesh information The array is a normal Godot array that is constructed with empty brackets It stores a Packed Array e g PackedVector3Array PackedInt32Array etc for each type of information that will be used to build the surface Common elements of arrays are listed below together with the position they must have within arrays See Mesh ArrayType for a full list Index Mesh ArrayType Enum Array type 0 ARRAY_VERTEX PackedVector3Array or PackedVector2Array 1 ARRAY_NORMAL PackedVector3Array 2 ARRAY_TANGENT PackedFloat32Array or PackedFloat64Array of groups of 4 floats The first 3 floats determine the tangent and the last float the binormal direction as 1 or 1 3 ARRAY_COLOR PackedColorArray 4 ARRAY_TEX_UV PackedVector2Array or PackedVector3Array 5 ARRAY_TEX_UV2 PackedVector2Array or PackedVector3Array 10 ARRAY_BONES PackedFloat32Array of groups of 4 floats or PackedInt32Array of groups of 4 ints Each group lists indexes of 4 bones that affects a given vertex 11 ARRAY_WEIGHTS PackedFloat32Array or PackedFloat64Array of groups of 4 floats Each float lists the amount of weight the corresponding bone in ARRAY_BONES has on a given vertex 12 ARRAY_INDEX PackedInt32Array In most cases when creating a mesh we define it by its vertex positions So usually the array of vertices at index 0 is required while the index array at index 12 is optional and will only be used if included It is also possible to create a mesh with only the index array and no vertex array but that s beyond the scope of this tutorial All the other arrays carry information about the vertices They are optional and will only be used if included Some of these arrays e g ARRAY_COLOR use one entry per vertex to provide extra information about vertices They must have the same size as the vertex array Other arrays e g ARRAY_TANGENT use four entries to describe a single vertex These must be exactly four times larger than the vertex array For normal usage the last three parameters in add_surface_from_arrays are typically left empty Setting up the ArrayMesh In the editor create a MeshInstance3D and add an ArrayMesh to it in the Inspector Normally adding an ArrayMesh in the editor is not useful but in this case it allows us to access the ArrayMesh from code without creating one Next add a script to the MeshInstance3D Under _ready create a new Array GDScript C var surface_array Copy to clipboard var surfaceArray new Godot Collections Array Copy to clipboard This will be the array that we keep our surface information in it will hold all the arrays of data that the surface needs Godot will expect it to be of size Mesh ARRAY_MAX so resize it accordingly GDScript C var surface_array surface_array resize Mesh ARRAY_MAX Copy to clipboard var surfaceArray new Godot Collections Array surfaceArray Resize int Mesh ArrayType Max Copy to clipboard Next create the arrays for each data type you will use GDScript C var verts PackedVector3Array var uvs PackedVector2Array var normals PackedVector3Array var indices PackedInt32Array Copy to clipboard var verts new List Vector3 var uvs new List Vector2 var normals new List Vector3 var indices new List int Copy to clipboard Once you have filled your data arrays with your geometry you can create a mesh by adding each array to surface_array and then committing to the mesh GDScript C surface_array Mesh ARRAY_VERTEX verts surface_array Mesh ARRAY_TEX_UV uvs surface_array Mesh ARRAY_NORMAL normals surface_array Mesh ARRAY_INDEX indices No blendshapes lods or compression used mesh add_surface_from_arrays Mesh PRIMITIVE_TRIANGLES surface_array Copy to clipboard surfaceArray int Mesh ArrayType Vertex verts ToArray surfaceArray int Mesh ArrayType TexUV uvs ToArray surfaceArray int Mesh ArrayType Normal normals ToArray surfaceArray int Mesh ArrayType Index indices ToArray var arrMesh Mesh as ArrayMesh if arrMesh null No blendshapes lods or compression used arrMesh AddSurfaceFromArrays Mesh PrimitiveType Triangles surfaceArray Copy to clipboard Note In this example we used Mesh PRIMITIVE_TRIANGLES but you can use any primitive type available from mesh Put together the full code looks like GDScript C extends MeshInstance3D func _ready var surface_array surface_array resize Mesh ARRAY_MAX PackedVector Arrays for mesh construction var verts PackedVector3Array var uvs PackedVector2Array var normals PackedVector3Array var indices PackedInt32Array Insert code here to generate mesh Assign arrays to surface array surface_array Mesh ARRAY_VERTEX verts surface_array Mesh ARRAY_TEX_UV uvs surface_array Mesh ARRAY_NORMAL normals surface_array Mesh ARRAY_INDEX indices Create mesh surface from mesh array No blendshapes lods or compression used mesh add_surface_from_arrays Mesh PRIMITIVE_TRIANGLES surface_array Copy to clipboard public partial class MyMeshInstance3D MeshInstance3D public override void _Ready var surfaceArray new Godot Collections Array surfaceArray Resize int Mesh ArrayType Max C arrays cannot be resized or expanded so use Lists to create geometry var verts new List Vector3 var uvs new List Vector2 var normals new List Vector3 var indices new List int Insert code here to generate mesh Convert Lists to arrays and assign to surface array surfaceArray int Mesh ArrayType Vertex verts ToArray surfaceArray int Mesh ArrayType TexUV uvs ToArray surfaceArray int Mesh ArrayType Normal normals ToArray surfaceArray int Mesh ArrayType Index indices ToArray var arrMesh Mesh as ArrayMesh if arrMesh null Create mesh surface from mesh array No blendshapes lods or compression used arrMesh AddSurfaceFromArrays Mesh PrimitiveType Triangles surfaceArray Copy to clipboard The code that goes in the middle can be whatever you want Below we will present some example code for generating a sphere Generating geometry Here is sample code for generating a sphere Although the code is presented in GDScript there is nothing Godot specific about the approach to generating it This implementation has nothing in particular to do with ArrayMeshes and is just a generic approach to generating a sphere If you are having trouble understanding it or want to learn more about procedural geometry in general you can use any tutorial that you find online GDScript C extends MeshInstance3D var rings 50 var radial_segments 50 var radius 1 func _ready Insert setting up the PackedVector Arrays here Vertex indices var thisrow 0 var prevrow 0 var point 0 Loop over rings for i in range rings 1 var v float i rings var w sin PI v var y cos PI v Loop over segments in ring for j in range radial_segments 1 var u float j radial_segments var x sin u PI 2 0 var z cos u PI 2 0 var vert Vector3 x radius w y radius z radius w verts append vert normals append vert normalized uvs append Vector2 u v point 1 Create triangles in ring using indices if i 0 and j 0 indices append prevrow j 1 indices append prevrow j indices append thisrow j 1 indices append prevrow j indices append thisrow j indices append thisrow j 1 prevrow thisrow thisrow point Insert committing to the ArrayMesh here Copy to clipboard public partial class MyMeshInstance3D MeshInstance3D private int _rings 50 private int _radialSegments 50 private float _radius 1 public override void _Ready Insert setting up the surface array and lists here Vertex indices var thisRow 0 var prevRow 0 var point 0 Loop over rings for var i 0 i _rings 1 i var v float i _rings var w Mathf Sin Mathf Pi v var y Mathf Cos Mathf Pi v Loop over segments in ring for var j 0 j _radialSegments 1 j var u float j _radialSegments var x Mathf Sin u Mathf Pi 2 var z Mathf Cos u Mathf Pi 2 var vert new Vector3 x _radius w y _radius z _radius w verts Add vert normals Add vert Normalized uvs Add new Vector2 u v point 1 Create triangles in ring using indices if i 0 j 0 indices Add prevRow j 1 indices Add prevRow j indices Add thisRow j 1 indices Add prevRow j indices Add thisRow j indices Add thisRow j 1 prevRow thisRow thisRow point Insert committing to the ArrayMesh here Copy to clipboard Saving Finally we can use the ResourceSaver class to save the ArrayMesh This is useful when you want to generate a mesh and then use it later without having to re generate it GDScript C Saves mesh to a tres file with compression enabled ResourceSaver save mesh res sphere tres ResourceSaver FLAG_COMPRESS Copy to clipboard Saves mesh to a tres file with compression enabled ResourceSaver Save Mesh res sphere tres ResourceSaver SaverFlags Compress Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using the MeshDataTool The MeshDataTool is not used to generate geometry But it is helpful for dynamically altering geometry for example if you want to write a script to tessellate simplify or deform meshes The MeshDataTool is not as fast as altering arrays directly using ArrayMesh However it provides more information and tools to work with meshes than the ArrayMesh does When the MeshDataTool is used it calculates mesh data that is not available in ArrayMeshes such as faces and edges which are necessary for certain mesh algorithms If you do not need this extra information then it may be better to use an ArrayMesh Note MeshDataTool can only be used on Meshes that use the PrimitiveType Mesh PRIMITIVE_TRIANGLES We initialize the MeshDataTool from an ArrayMesh by calling create_from_surface If there is already data initialized in the MeshDataTool calling create_from_surface will clear it for you Alternatively you can call clear yourself before re using the MeshDataTool In the examples below assume an ArrayMesh called mesh has already been created See ArrayMesh tutorial for an example of mesh generation GDScript var mdt MeshDataTool new mdt create_from_surface mesh 0 Copy to clipboard create_from_surface uses the vertex arrays from the ArrayMesh to calculate two additional arrays one for edges and one for faces for a total of three arrays An edge is a connection between any two vertices Each edge in the edge array contains a reference to the two vertices it is composed of and up to two faces that it is contained within A face is a triangle made up of three vertices and three corresponding edges Each face in the face array contains a reference to the three vertices and three edges it is composed of The vertex array contains edge face normal color tangent uv uv2 bone and weight information connected with each vertex To access information from these arrays you use a function of the form get_ GDScript mdt get_vertex_count Returns number of vertices in vertex array mdt get_vertex_faces 0 Returns array of faces that contain vertex 0 mdt get_face_normal 1 Calculates and returns face normal of the second face mdt get_edge_vertex 10 1 Returns the second vertex comprising the edge at index 10 Copy to clipboard What you choose to do with these functions is up to you A common use case is to iterate over all vertices and transform them in some way GDScript for i in range get_vertex_count var vert mdt get_vertex i vert 2 0 Scales the vertex by doubling size mdt set_vertex i vert Copy to clipboard These modifications are not done in place on the ArrayMesh If you are dynamically updating an existing ArrayMesh first delete the existing surface before adding a new one using commit_to_surface GDScript mesh clear_surfaces Deletes all of the mesh s surfaces mdt commit_to_surface mesh Copy to clipboard Below is a complete example that turns a spherical mesh called mesh into a randomly deformed blob complete with updated normals and vertex colors See ArrayMesh tutorial for how to generate the base mesh GDScript extends MeshInstance3D var fnl FastNoiseLite new var mdt MeshDataTool new func _ready fnl frequency 0 7 mdt create_from_surface mesh 0 for i in range mdt get_vertex_count var vertex mdt get_vertex i normalized Push out vertex by noise vertex vertex fnl get_noise_3dv vertex 0 5 0 75 mdt set_vertex i vertex Calculate vertex normals face by face for i in range mdt get_face_count Get the index in the vertex array var a mdt get_face_vertex i 0 var b mdt get_face_vertex i 1 var c mdt get_face_vertex i 2 Get vertex position using vertex index var ap mdt get_vertex a var bp mdt get_vertex b var cp mdt get_vertex c Calculate face normal var n bp cp cross ap bp normalized Add face normal to current vertex normal This will not result in perfect normals but it will be close mdt set_vertex_normal a n mdt get_vertex_normal a mdt set_vertex_normal b n mdt get_vertex_normal b mdt set_vertex_normal c n mdt get_vertex_normal c Run through vertices one last time to normalize normals and set color to normal for i in range mdt get_vertex_count var v mdt get_vertex_normal i normalized mdt set_vertex_normal i v mdt set_vertex_color i Color v x v y v z mesh clear_surfaces mdt commit_to_surface mesh Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using the SurfaceTool The SurfaceTool provides a useful interface for constructing geometry The interface is similar to the ImmediateMesh class You set each per vertex attribute e g normal uv color and then when you add a vertex it captures the attributes The SurfaceTool also provides some useful helper functions like index and generate_normals Attributes are added before each vertex is added GDScript C st set_normal Overwritten by normal below st set_normal Added to next vertex st set_color Added to next vertex st add_vertex Captures normal and color above st set_normal Normal never added to a vertex Copy to clipboard st SetNormal Overwritten by normal below st SetNormal Added to next vertex st SetColor Added to next vertex st AddVertex Captures normal and color above st SetNormal Normal never added to a vertex Copy to clipboard When finished generating your geometry with the SurfaceTool call commit to finish generating the mesh If an ArrayMesh is passed to commit then it appends a new surface to the end of the ArrayMesh While if nothing is passed in commit returns an ArrayMesh GDScript C st commit mesh Or var mesh st commit Copy to clipboard st Commit mesh Or var mesh st Commit Copy to clipboard Code creates a triangle with indices GDScript C var st SurfaceTool new st begin Mesh PRIMITIVE_TRIANGLES Prepare attributes for add_vertex st set_normal Vector3 0 0 1 st set_uv Vector2 0 0 Call last for each vertex adds the above attributes st add_vertex Vector3 1 1 0 st set_normal Vector3 0 0 1 st set_uv Vector2 0 1 st add_vertex Vector3 1 1 0 st set_normal Vector3 0 0 1 st set_uv Vector2 1 1 st add_vertex Vector3 1 1 0 Commit to a mesh var mesh st commit Copy to clipboard var st new SurfaceTool st Begin Mesh PrimitiveType Triangles Prepare attributes for AddVertex st SetNormal new Vector3 0 0 1 st SetUV new Vector2 0 0 Call last for each vertex adds the above attributes st AddVertex new Vector3 1 1 0 st SetNormal new Vector3 0 0 1 st SetUV new Vector2 0 1 st AddVertex new Vector3 1 1 0 st SetNormal new Vector3 0 0 1 st SetUV new Vector2 1 1 st AddVertex new Vector3 1 1 0 Commit to a mesh var mesh st Commit Copy to clipboard You can optionally add an index array either by calling add_index and adding vertices to the index array or by calling index which shrinks the vertex array to remove duplicate vertices GDScript C Creates a quad from four corner vertices add_index does not need to be called before add_vertex st add_index 0 st add_index 1 st add_index 2 st add_index 1 st add_index 3 st add_index 2 Alternatively st index Copy to clipboard Creates a quad from four corner vertices AddIndex does not need to be called before AddVertex st AddIndex 0 st AddIndex 1 st AddIndex 2 st AddIndex 1 st AddIndex 3 st AddIndex 2 Alternatively st Index Copy to clipboard Similarly if you have an index array but you want each vertex to be unique e g because you want to use unique normals or colors per face instead of per vertex you can call deindex GDScript C st deindex Copy to clipboard st Deindex Copy to clipboard If you don t add custom normals yourself you can add them using generate_normals which should be called after generating geometry and before committing the mesh using commit or commit_to_arrays Calling generate_normals true will flip the resulting normals As a side note generate_normals only works if the primitive type is set to Mesh PRIMITIVE_TRIANGLES You may notice that normal mapping or other material properties look broken on the generated mesh This is because normal mapping requires the mesh to feature tangents which are separate from normals You can either add custom tangents manually or generate them automatically with generate_tangents This method requires that each vertex have UVs and normals set already GDScript C st generate_normals st generate_tangents Copy to clipboard st GenerateNormals st GenerateTangents Copy to clipboard By default when generating normals they will be calculated on a per face basis If you want smooth vertex normals when adding vertices call add_smooth_group add_smooth_group needs to be called while building the geometry e g before the call to add_vertex if non indexed or add_index if indexed User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using ImmediateMesh The ImmediateMesh is a convenient tool to create dynamic geometry using an OpenGL 1 x style API Which makes it both approachable to use and efficient for meshes which need to be updated every frame Generating complex geometry several thousand vertices with this tool is inefficient even if it s done only once Instead it is designed to generate simple geometry that changes every frame First you need to create a MeshInstance3D and add an ImmediateMesh to it in the Inspector Next add a script to the MeshInstance3D The code for the ImmediateMesh should go in the _process function if you want it to update each frame or in the _ready function if you want to create the mesh once and not update it If you only generate a surface once the ImmediateMesh is just as efficient as any other kind of mesh as the generated mesh is cached and reused To begin generating geometry you must call surface_begin surface_begin takes a PrimitiveType as an argument PrimitiveType instructs the GPU how to arrange the primitive based on the vertices given whether it is triangles lines points etc A complete list can be found under the Mesh class reference page Once you have called surface_begin you are ready to start adding vertices You add vertices one at a time First you add vertex specific attributes such as normals or UVs using surface_set_ e g surface_set_normal Then you call surface_add_vertex to add a vertex with those attributes For example GDScript Add a vertex with normal and uv surface_set_normal Vector3 0 1 0 surface_set_uv Vector2 1 1 surface_add_vertex Vector3 0 0 1 Copy to clipboard Only attributes added before the call to surface_add_vertex will be included in that vertex If you add an attribute twice before calling surface_add_vertex only the second call will be used Finally once you have added all your vertices call surface_end to signal that you have finished generating the surface You can call surface_begin and surface_end multiple times to generate multiple surfaces for the mesh The example code below draws a single triangle in the _ready function GDScript extends MeshInstance3D func _ready Begin draw mesh surface_begin Mesh PRIMITIVE_TRIANGLES Prepare attributes for add_vertex mesh surface_set_normal Vector3 0 0 1 mesh surface_set_uv Vector2 0 0 Call last for each vertex adds the above attributes mesh surface_add_vertex Vector3 1 1 0 mesh surface_set_normal Vector3 0 0 1 mesh surface_set_uv Vector2 0 1 mesh surface_add_vertex Vector3 1 1 0 mesh surface_set_normal Vector3 0 0 1 mesh surface_set_uv Vector2 1 1 mesh surface_add_vertex Vector3 1 1 0 End drawing mesh surface_end Copy to clipboard The ImmediateMesh can also be used across frames Each time you call surface_begin and surface_end you are adding a new surface to the ImmediateMesh If you want to recreate the mesh from scratch each frame call clear_surfaces before calling surface_begin GDScript extends MeshInstance3D func _process delta Clean up before drawing mesh clear_surfaces Begin draw mesh surface_begin Mesh PRIMITIVE_TRIANGLES Draw mesh End drawing mesh surface_end Copy to clipboard The above code will dynamically create and draw a single surface each frame User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue 3D text Introduction In a project there may be times when text needs to be created as part of a 3D scene and not just in the HUD Godot provides 2 methods to do this the Label3D node and the TextMesh resource for a MeshInstance3D node Additionally Godot makes it possible to position Control nodes according to a 3D point s position on the camera This can be used as an alternative to true 3D text in situations where Label3D and TextMesh aren t flexible enough See also You can see 3D text in action using the 3D Labels and Texts demo project This page does not cover how to display a GUI scene within a 3D environment For information on how to achieve that see the GUI in 3D demo project Label3D Label3D behaves like a Label node but in 3D space Unlike the Label node this Label3D node does not inherit properties of a GUI theme However its look remains customizable and uses the same font subresource as Control nodes including support for MSDF font rendering Advantages Label3D is faster to generate than TextMesh While both use a caching mechanism to only render new glyphs once Label3D will still be faster to re generate especially for long text This can avoid stuttering during gameplay on low end CPUs or mobile Label3D can use bitmap fonts and dynamic fonts with and without MSDF or mipmaps This makes it more flexible on that aspect compared to TextMesh especially for rendering fonts with self intersecting outlines or colored fonts emoji See also See Using Fonts for guidelines on configuring font imports Limitations By default Label3D has limited interaction with a 3D environment It can be occluded by geometry and lit by light sources if the Shaded flag is enabled However it will not cast shadows even if Cast Shadow is set to On in the Label3D s GeometryInstance3D properties This is because the node internally generates a quad mesh one glyph per quad with transparent textures and has the same limitations as Sprite3D Transparency sorting issues can also become apparent when several Label3Ds overlap especially if they have outlines This can be mitigated by setting the Label3D s transparency mode to Alpha Cut at the cost of less smooth text rendering The Opaque Pre Pass transparency mode can preserve text smoothness while allowing the Label3D to cast shadows but some transparency sorting issues will remain See Transparency sorting section in the 3D rendering limitations page for more information Text rendering quality can also suffer when the Label3D is viewed at a distance To improve text rendering quality enable mipmaps on the font or switch the font to use MSDF rendering TextMesh The TextMesh resource has similarities to Label3D They both display text in a 3D scene and will use the same font subresource However instead of generating transparent quads TextMesh generates 3D geometry that represents the glyphs contours and has the properties of a mesh As a result a TextMesh is shaded by default and automatically casts shadows onto the environment A TextMesh can also have a material applied to it including custom shaders Here is an example of a texture and how it s applied to the mesh You can use the texture below as a reference for the generated mesh s UV map Advantages TextMesh has a few advantages over Label3D TextMesh can use a texture to modify text color on a per side basis TextMesh geometry can have actual depth to it giving glyphs a 3D look TextMesh can use custom shaders unlike Label3D Limitations There are some limitations to TextMesh No built in outline support unlike Label3D This can be simulated using custom shaders though Only dynamic fonts are supported ttf otf woff woff2 Bitmap fonts in the fnt or font formats are not supported Fonts with self intersecting outlines will not render correctly If you notice rendering issues on fonts downloaded from websites such as Google Fonts try downloading the font from the font author s official website instead Antialiasing the text rendering requires a full scene antialiasing method to be enabled such as MSAA FXAA and temporal antialiasing TAA If no antialiasing method is enabled text will appear grainy especially at a distance See 3D antialiasing for more information Projected Label node or any other Control There is a last solution that is more complex to set up but provides the most flexibility projecting a 2D node onto 3D space This can be achieved using the return value of unproject_position method on a Camera3D node in a script s _process function This return value should then be used to set the position property of a Control node See the 3D waypoints demo for an example of this Advantages Any Control node can be used including Label RichTextLabel or even nodes such as Button This allows for powerful formatting and GUI interaction The script based approach allows for complete freedom in positioning For example this makes it considerably easier to pin Controls to the screen s edges when they go off screen for in game 3D markers Control theming is obeyed This allows for easier customization that globally applies to the project Limitations Projected Controls cannot be occluded by 3D geometry in any way You can use a RayCast to fully hide the control if its target position is occluded by a collider but this doesn t allow for partially hiding the control behind a wall Changing text size depending on distance by adjusting the Control s scale property is possible but it needs to be done manually Label3D and TextMesh automatically take care of this at the cost of less flexibility can t set a minimum maximum text size in pixels Handling resolution and aspect ratio changes must be taken into account in the script which can be challenging Should I use Label3D TextMesh or a projected Control In most scenarios Label3D is recommended as it s easier to set up and provides higher rendering quality especially if 3D antialiasing is disabled For advanced use cases TextMesh is more flexible as it allows styling the text with custom shaders Custom shaders allow for modifying the final geometry such as curving the text along a surface Since the text is actual 3D geometry the text can optionally have depth to it and can also contribute to global illumination If you need features such as BBCode or Control theming support then using a projected RichTextLabel node is the only way to go User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue 3D rendering limitations Introduction Due to their focus on performance real time rendering engines have many limitations Godot s renderer is no exception To work effectively with those limitations you need to understand them Texture size limits On desktops and laptops textures larger than 8192 8192 may not be supported on older devices You can check your target GPU s limitations on GPUinfo org Mobile GPUs are typically limited to 4096 4096 textures Also some mobile GPUs don t support repeating non power of two sized textures Therefore if you want your texture to display correctly on all platforms you should avoid using textures larger than 4096 4096 and use a power of two size if the texture needs to repeat To limit the size of a specific texture that may be too large to render you can set the Process Size Limit import option to a value greater than 0 This will reduce the texture s dimensions on import preserving aspect ratio without affecting the source file Color banding When using the Forward or Forward Mobile rendering methods Godot s 3D engine renders internally in HDR However the rendering output will be tonemapped to a low dynamic range so it can be displayed on the screen This can result in visible banding especially when using untextured materials For performance reasons color precision is also lower when using the Forward Mobile rendering method compared to Forward When using the Compatibility rendering method HDR is not used and the color precision is the lowest of all rendering methods This also applies to 2D rendering where banding may be visible when using smooth gradient textures There are two main ways to alleviate banding If using the Forward or Forward Mobile rendering methods enable Use Debanding in the advanced Project Settings This applies a fullscreen debanding shader as a post processing effect and is very cheap Alternatively bake some noise into your textures This is mainly effective in 2D e g for vignetting effects In 3D you can also use a custom debanding shader to be applied on your materials This technique works even if your project is rendered with low color precision which means it will work when using the Mobile and Compatibility rendering methods Color banding comparison contrast increased for more visibility See also See Banding in Games A Noisy Rant PDF for more details about banding and ways to combat it Depth buffer precision To sort objects in 3D space rendering engines rely on a depth buffer also called Z buffer This buffer has a finite precision 24 bit on desktop platforms sometimes 16 bit on mobile platforms for performance reasons If two different objects end up on the same buffer value then Z fighting will occur This will materialize as textures flickering back and forth as the camera moves or rotates To make the depth buffer more precise over the rendered area you should increase the Camera node s Near property However be careful if you set it too high players will be able to see through nearby geometry You should also decrease the Camera node s Far property to the lowest permissible value for your use case though keep in mind it won t impact precision as much as the Near property If you only need high precision when the player can see far away you could change it dynamically based on the game conditions For instance if the player enters an airplane the Near property can be temporarily increased to avoid Z fighting in the distance It can then be decreased once the player leaves the airplane Depending on the scene and viewing conditions you may also be able to move the Z fighting objects further apart without the difference being visible to the player Z fighting comparison before and after tweaking the scene by offsetting the Label3D away from the floor Transparency sorting In Godot transparent materials are drawn after opaque materials Transparent objects are sorted back to front before being drawn based on the Node3D s position not the vertex position in world space Due to this overlapping objects may often be sorted out of order To fix improperly sorted objects tweak the material s Render Priority property or the node s Sorting Offset Render Priority will force specific materials to appear in front of or behind other transparent materials while Sorting Offset will move the object forward or backward for the purpose of sorting Even then these may not always be sufficient Some rendering engines feature order independent transparency techniques to alleviate this but this is costly on the GPU Godot currently doesn t provide this feature There are still several ways to avoid this problem Only make materials transparent if you actually need it If a material only has a small transparent part consider splitting it into a separate material This will allow the opaque part to cast shadows and will also improve performance If your texture mostly has fully opaque and fully transparent areas you can use alpha testing instead of alpha blending This transparency mode is faster to render and doesn t suffer from transparency issues Enable Transparency Transparency to Alpha Scissor in StandardMaterial3D and adjust Transparency Alpha Scissor Threshold accordingly if needed Note that MSAA will not antialias the texture s edges unless alpha antialiasing is enabled in the material s properties However FXAA TAA and supersampling will be able to antialias the texture s edges regardless of whether alpha antialiasing is enabled on the material If you need to render semi transparent areas of the texture alpha scissor isn t suitable Instead setting the StandardMaterial3D s Transparency Transparency property to Depth Pre Pass can sometimes work at a performance cost You can also try the Alpha Hash mode If you want a material to fade with distance use the StandardMaterial3D distance fade mode Pixel Dither or Object Dither instead of Pixel Alpha This will make the material opaque which also speeds up rendering Transparency sorting comparison alpha blended materials on the left alpha scissor materials on the right Multi sample antialiasing See also Antialiasing is explained in detail on the 3D antialiasing page Multi sample antialiasing MSAA takes multiple coverage samples at the edges of polygons when rendering objects It does not increase the number of color samples used to render a scene Here s what this means in practice Edges of meshes will be smoothed out nicely as well as supersampling would Transparent materials that use alpha testing 1 bit transparency won t be smoothed out Specular aliasing sparkles that appear on reflective surfaces won t be reduced There are several ways to work around this limitation depending on your performance budget To make specular aliasing less noticeable open the Project Settings and enable Rendering Quality Screen Space Filters Screen Space Roughness Limiter This filter has a moderate cost on performance so it should only be enabled if you actually need it Enable fast approximate antialiasing FXAA in addition to or instead of MSAA Since FXAA is a screen space antialiasing method it will smooth out anything As a downside FXAA also makes the scene appear blurrier especially at resolutions below 1440p FXAA also lacks temporal information which means its impact on specular aliasing is limited Enable temporal antialiasing TAA in addition to or instead of MSAA Since TAA is a screen space antialiasing method it will smooth out anything As a downside TAA also makes the scene appear blurrier especially at resolutions below 1440p TAA provides superior quality compared to FXAA and can effectively combat specular aliasing However TAA has a greater performance cost compared to FXAA and TAA can introduce ghosting artifacts with fast movement Render the scene at a higher resolution by increasing the Scaling 3D Scale project setting above 1 0 This technique is called supersample antialiasing SSAA and is very slow Its use is generally only recommended for offline rendering User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Standard Material 3D and ORM Material 3D Introduction StandardMaterial3D and ORMMaterial3D Occlusion Roughness Metallic are default 3D materials that aim to provide most of the features artists look for in a material without the need for writing shader code However they can be converted to shader code if additional functionality is needed This tutorial explains the parameters present in both materials There are 4 ways to add these materials to an object A material can be added in the Material property of the mesh It can be added in the Material property of the node using the mesh such as a MeshInstance3D node the Material Override property of the node using the mesh and the Material Overlay If you add a material to the mesh itself every time that mesh is used it will have that material If you add a material to the node using the mesh the material will only be used by that node it will also override the material property of the mesh If a material is added in the Material Override property of the node it will only be used by that node It will also override the regular material property of the node and the material property of the mesh The Material Overlay property will render a material over the current one being used by the mesh As an example this can be used to put a transparent shield effect on a mesh BaseMaterial 3D settings StandardMaterial3D has many settings that determine the look of a material All of these are under the BaseMaterial3D category ORM materials are almost exactly the same with one difference Instead of separate settings and textures for occlusion roughness and metallic there is a single ORM texture The different color channels of that texture are used for each parameter Programs such as Substance Painter and Armor Paint will give you the option to export in this format for these two programs it s with the export preset for unreal engine which also uses ORM textures Transparency By default materials in Godot are opaque This is fast to render but it means the material can t be seen through even if you use a transparent texture in the Albedo Texture property or set Albedo Color to a transparent color To be able to see through a material the material needs to be made transparent Godot offers several transparency modes Disabled Material is opaque This is the fastest to render with all rendering features supported Alpha Material is transparent Semi transparent areas are drawn with blending This is slow to render but it allows for partial transparency also known as translucency Materials using alpha blending also can t cast shadows and are not visible in screen space reflections Alpha is a good fit for particle effects and VFX Alpha Scissor Material is transparent Semi transparent areas whose opacity is below Alpha Scissor Threshold are not drawn above this opacity these are drawn as opaque This is faster to render than Alpha and doesn t exhibit transparency sorting issues The downside is that this results in all or nothing transparency with no intermediate values possible Materials using alpha scissor can cast shadows Alpha Scissor is ideal for foliage and fences since these have hard edges and require correct sorting to look good Alpha Hash Material is transparent Semi transparent areas are drawn using dithering This is also all or nothing transparency but dithering helps represent partially opaque areas with limited precision depending on viewport resolution Materials using alpha hash can cast shadows Alpha Hash is suited for realistic looking hair although stylized hair may work better with alpha scissor Depth Pre Pass This renders the object s fully opaque pixels via the opaque pipeline first then renders the rest with alpha blending This allows transparency sorting to be mostly correct albeit not fully so as partially transparent regions may still exhibit incorrect sorting Materials using depth prepass can cast shadows Note Godot will automatically force the material to be transparent with alpha blending if any of these conditions is met Setting the transparency mode to Alpha as described here Setting a blend mode other than the default Mix Enabling Refraction Proximity Fade or Distance Fade Comparison between alpha blending left and alpha scissor right transparency Warning Alpha blended transparency has several limitations Alpha blended materials are significantly slower to render especially if they overlap Alpha blended materials may exhibit sorting issues when transparent surfaces overlap each other This means that surfaces may render in the incorrect order with surfaces in the back appearing to be in front of those which are actually closer to the camera Alpha blended materials don t cast shadows although they can receive shadows Alpha blended materials don t appear in any reflections other than reflection probes Screen space reflections and sharp SDFGI reflections don t appear on alpha blended materials When SDFGI is enabled rough reflections are used as a fallback regardless of material roughness Before using the Alpha transparency mode always consider whether another transparency mode is more suited for your needs Alpha Antialiasing Note This property is only visible when the transparency mode is Alpha Scissor or Alpha Hash While alpha scissor and alpha hash materials are faster to render than alpha blended materials they exhibit hard edges between opaque and transparent regions While it s possible to use post processing based antialiasing techniques such as FXAA and TAA this is not always desired as these techniques tend to make the final result look blurrier or exhibit ghosting artifacts There are 3 alpha antialiasing modes available Disabled No alpha antialiasing Edges of transparent materials will appear aliased unless a post processing based antialiasing solution is used Alpha Edge Blend Results in a smooth transition between opaque and transparent areas Also known as alpha to coverage Alpha Edge Clip Results in a sharp but still antialiased transition between opaque and transparent areas Also known as alpha to coverage alpha to one When the alpha antialiasing mode is set to Alpha Edge Blend or Alpha Edge Clip a new Alpha Antialiasing Edge property becomes visible below in the inspector This property controls the threshold below which pixels should be made transparent While you ve already defined an alpha scissor threshold when using Alpha Scissor only this additional threshold is used to smoothly transition between opaque and transparent pixels Alpha Antialiasing Edge must always be set to a value that is strictly below the alpha scissor threshold The default of 0 3 is a sensible value with an alpha scissor of threshold of 0 5 but remember to adjust this alpha antialiasing edge when modifying the alpha scissor threshold If you find the antialiasing effect not effective enough try increasing Alpha Antialiasing Edge while making sure it s below Alpha Scissor Threshold if the material uses alpha scissor On the other hand if you notice the texture s appearance visibly changing as the camera moves closer to the material try decreasing Alpha Antialiasing Edge Important For best results MSAA 3D should be set to at least 2 in the Project Settings when using alpha antialiasing This is because this feature relies on alpha to coverage which is a feature provided by MSAA Without MSAA a fixed dithering pattern is applied on the material s edges which isn t very effective at smoothing out edges although it can still help a little Blend Mode Controls the blend mode for the material Keep in mind that any mode other than Mix forces the object to go through the transparent pipeline Mix Default blend mode alpha controls how much the object is visible Add The final color of the object is added to the color of the screen nice for flares or some fire like effects Sub The final color of the object is subtracted from the color of the screen Mul The final color of the object is multiplied with the color of the screen Cull Mode Determines which side of the object is not drawn when backfaces are rendered Back The back of the object is culled when not visible default Front The front of the object is culled when not visible Disabled Used for objects that are double sided no culling is performed Note By default Blender has backface culling disabled on materials and will export materials to match how they render in Blender This means that materials in Godot will have their cull mode set to Disabled This can decrease performance since backfaces will be rendered even when they are being culled by other faces To resolve this enable Backface Culling in Blender s Materials tab then export the scene to glTF again Depth Draw Mode Specifies when depth rendering must take place Opaque Only default Depth is only drawn for opaque objects Always Depth draw is drawn for both opaque and transparent objects Never No depth draw takes place do not confuse this with the No Depth Test option below Depth Pre Pass For transparent objects an opaque pass is made first with the opaque parts then transparency is drawn above Use this option with transparent grass or tree foliage No Depth Test In order for close objects to appear over far away objects depth testing is performed Disabling it has the result of objects appearing over or under everything else Disabling this makes the most sense for drawing indicators in world space and works very well with the Render Priority property of Material see the bottom of this page Shading Shading mode Godot has a more or less uniform cost per pixel thanks to the depth pre pass All lighting calculations are made by running the lighting shader on every pixel As these calculations are costly performance can be brought down considerably in some corner cases such as drawing several layers of transparency which is common in particle systems Switching to the Unshaded shading mode may help improve performance in these cases especially when the camera is close to particles Additionally on low end or mobile devices switching to unshaded rendering can considerably increase rendering performance Keep in mind that when unshaded rendering is enabled lights will not affect the material at all Note Per Vertex shading is listed as an option in the shading mode property However per vertex shading is currently unimplemented and will act identical to per pixel shading Support for per vertex shading is planned to be reimplemented in a future Godot release Diffuse Mode Specifies the algorithm used by diffuse scattering of light when hitting the object The default is Burley Other modes are also available Burley Default mode the original Disney Principled PBS diffuse algorithm Lambert Is not affected by roughness Lambert Wrap Extends Lambert to cover more than 90 degrees when roughness increases Works great for hair and simulating cheap subsurface scattering This implementation is energy conserving Toon Provides a hard cut for lighting with smoothing affected by roughness It is recommended you disable sky contribution from your environment s ambient light settings or disable ambient light in the StandardMaterial3D to achieve a better effect Specular Mode Specifies how the specular blob will be rendered The specular blob represents the shape of a light source reflected in the object SchlickGGX The most common blob used by PBR 3D engines nowadays Blinn Common in previous generation engines Not worth using nowadays but left here for the sake of compatibility Phong Same as above Toon Creates a toon blob which changes size depending on roughness Disabled Sometimes the blob gets in the way Begone Disable Ambient Light Makes the object not receive any kind of ambient lighting that would otherwise light it Disable Fog Makes the object unaffected by depth based or volumetric fog This is useful for particles or other additively blended materials that would otherwise show the shape of the mesh even in places where it would be invisible without the fog Vertex Color This setting allows choosing what is done by default to vertex colors that come from your 3D modeling application By default they are ignored Use as Albedo Choosing this option means vertex color is used as albedo color Is sRGB Most 3D modeling software will likely export vertex colors as sRGB so toggling this option on will help them look correct Albedo Albedo is the base color for the material on which all the other settings operate When set to Unshaded this is the only color that is visible In previous versions of Godot this channel was named Diffuse The change of name mainly happened because in PBR Physically Based Rendering this color affects many more calculations than just the diffuse lighting path Albedo color and texture can be used together as they are multiplied Alpha channel in albedo color and texture is also used for the object transparency If you use a color or texture with alpha channel make sure to either enable transparency or alpha scissoring for it to work Metallic Godot uses a metallic model over competing models due to its simplicity This parameter defines how reflective the material is The more reflective the less diffuse ambient light affects the material and the more light is reflected This model is called energy conserving The Specular parameter is a general amount for the reflectivity unlike Metallic this is not energy conserving so leave it at 0 5 and don t touch it unless you need to The minimum internal reflectivity is 0 04 so it s impossible to make a material completely unreflective just like in real life Roughness Roughness affects the way reflection happens A value of 0 makes it a perfect mirror while a value of 1 completely blurs the reflection simulating natural microsurfacing Most common types of materials can be achieved with the right combination of Metallic and Roughness Emission Emission specifies how much light is emitted by the material keep in mind this does not include light surrounding geometry unless VoxelGI or SDFGI are used This value is added to the resulting final image and is not affected by other lighting in the scene Normal map Normal mapping allows you to set a texture that represents finer shape detail This does not modify geometry only the incident angle for light In Godot only the red and green channels of normal maps are used for better compression and wider compatibility Note Godot requires the normal map to use the X Y and Z coordinates this is known as OpenGL style If you ve imported a material made to be used with another engine it may be DirectX style in which case the normal map needs to be converted so its Y axis is flipped More information about normal maps including a coordinate order table for popular engines can be found here Rim Some fabrics have small micro fur that causes light to scatter around it Godot emulates this with the Rim parameter Unlike other rim lighting implementations which just use the emission channel this one actually takes light into account no light means no rim This makes the effect considerably more believable Rim size depends on roughness and there is a special parameter to specify how it must be colored If Tint is 0 the color of the light is used for the rim If Tint is 1 then the albedo of the material is used Using intermediate values generally works best Clearcoat The Clearcoat parameter is used to add a secondary pass of transparent coat to the material This is common in car paint and toys In practice it s a smaller specular blob added on top of the existing material Anisotropy This changes the shape of the specular blob and aligns it to tangent space Anisotropy is commonly used with hair or to make materials such as brushed aluminum more realistic It works especially well when combined with flowmaps Ambient Occlusion It is possible to specify a baked ambient occlusion map This map affects how much ambient light reaches each surface of the object it does not affect direct light by default While it is possible to use Screen Space Ambient Occlusion SSAO to generate ambient occlusion nothing beats the quality of a well baked AO map It is recommended to bake ambient occlusion whenever possible Height Setting a height map on a material produces a ray marched search to emulate the proper displacement of cavities along the view direction This only creates an illusion of depth and does not add real geometry for a height map shape used for physics collision such as terrain see HeightMapShape3D It may not work for complex objects but it produces a realistic depth effect for textures For best results Height should be used together with normal mapping Subsurface Scattering This effect emulates light that penetrates an object s surface is scattered and then comes out It is useful to create realistic skin marble colored liquids etc Back Lighting This controls how much light from the lit side visible to light is transferred to the dark side opposite from the light This works well for thin objects such as plant leaves grass human ears etc Refraction When refraction is enabled Godot attempts to fetch information from behind the object being rendered This allows distorting the transparency in a way similar to refraction in real life Remember to use a transparent albedo texture or reduce the albedo color s alpha channel to make refraction visible as refraction relies on transparency to have a visible effect Refraction also takes the material roughness into account Higher roughness values will make the objects behind the refraction look blurrier which simulates real life behavior If you can t see behind the object when refraction is enabled and albedo transparency is reduced decrease the material s Roughness value A normal map can optionally be specified in the Refraction Texture property to allow distorting the refraction s direction on a per pixel basis Note Refraction is implemented as a screen space effect and forces the material to be transparent This makes the effect relatively fast but this results in some limitations Transparency sorting issues may occur The refractive material cannot refract onto itself or onto other transparent materials A refractive material behind another transparent material will be invisible Off screen objects cannot appear in the refraction This is most noticeable with high refraction strength values Opaque materials in front of the refractive material will appear to have refracted edges even though they shouldn t Detail Godot allows using secondary albedo and normal maps to generate a detail texture which can be blended in many ways By combining this with secondary UV or triplanar modes many interesting textures can be achieved There are several settings that control how detail is used Mask The detail mask is a black and white image used to control where the blending takes place on a texture White is for the detail textures Black is for the regular material textures different shades of gray are for partial blending of the material textures and detail textures Blend Mode These four modes control how the textures are blended together Mix Combines pixel values of both textures At black only show the material texture at white only show the detail texture Values of gray create a smooth blend between the two Add Adds pixel values of one Texture with the other Unlike mix mode both textures are completely mixed at white parts of a mask and not at gray parts The original texture is mostly unchanged at black Sub Subtracts pixel values of one texture with the other The second texture is completely subtracted at white parts of a mask with only a little subtraction in black parts gray parts being different levels of subtraction based on the exact texture Mul Multiplies the RGB channel numbers for each pixel from the top texture with the values for the corresponding pixel from the bottom texture Albedo This is where you put an albedo texture you want to blend If nothing is in this slot it will be interpreted as white by default Normal This is where you put a normal texture you want to blend If nothing is in this slot it will be interpreted as a flat normal map This can still be used even if the material does not have normal map enabled UV1 and UV2 Godot supports two UV channels per material Secondary UV is often useful for ambient occlusion or emission baked light UVs can be scaled and offset which is useful when using repeating textures Triplanar Mapping Triplanar mapping is supported for both UV1 and UV2 This is an alternative way to obtain texture coordinates sometimes called Autotexture Textures are sampled in X Y and Z and blended by the normal Triplanar mapping can be performed in either world space or object space In the image below you can see how all primitives share the same material with world triplanar so the brick texture continues smoothly between them World Triplanar When using triplanar mapping it is computed in object local space This option makes it use world space instead Sampling Filter The filtering method for the textures used by the material See this page for a full list of options and their description Repeat if the textures used by the material repeat and how they repeat See this page for a full list of options and their description Shadows Do Not Receive Shadows Makes the object not receive any kind of shadow that would otherwise be cast onto it Use Shadow to Opacity Lighting modifies the alpha so shadowed areas are opaque and non shadowed areas are transparent Useful for overlaying shadows onto a camera feed in AR Billboard Billboard Mode Enables billboard mode for drawing materials This controls how the object faces the camera Disabled Billboard mode is disabled Enabled Billboard mode is enabled The object s Z axis will always face the camera s viewing plane Y Billboard The object s X axis will always be aligned with the camera s viewing plane Particle Billboard Most suited for particle systems because it allows specifying flipbook animation The Particles Anim section is only visible when the billboard mode is Particle Billboard Billboard Keep Scale Enables scaling a mesh in billboard mode Grow Grows the object vertices in the direction pointed by their normals This is commonly used to create cheap outlines Add a second material pass make it black and unshaded reverse culling Cull Front and add some grow Transform Fixed Size This causes the object to be rendered at the same size no matter the distance This is useful mostly for indicators no depth test and high render priority and some types of billboards Use Point Size This option is only effective when the geometry rendered is made of points generally it s made of triangles when imported from 3D modeling software If so then those points can be resized see below Point Size When drawing points specify the point size in pixels Transmission This controls how much light from the lit side visible to light is transferred to the dark side opposite from the light This works well for thin objects such as plant leaves grass human ears etc Proximity and Distance Fade Godot allows materials to fade by proximity to each other as well as depending on the distance from the viewer Proximity fade is useful for effects such as soft particles or a mass of water with a smooth blending to the shores Distance fade is useful for light shafts or indicators that are only present after a given distance Keep in mind enabling proximity fade or distance fade with Pixel Alpha mode enables alpha blending Alpha blending is more GPU intensive and can cause transparency sorting issues Alpha blending also disables many material features such as the ability to cast shadows Note To hide a character when they get too close to the camera consider using Pixel Dither or better Object Dither which is even faster than Pixel Dither Pixel Alpha mode The actual transparency of a pixel of the object changes with distance to the camera This is the most effect but forces the material into the transparency pipeline which leads for example to no shadows Pixel Dither mode What this does is sort of approximate the transparency by only having a fraction of the pixels rendered Object Dither mode Like the previous mode but the calculated transparency is the same across the entire object s surface Material Settings Render priority The rendering order of objects can be changed although this is mostly useful for transparent objects or opaque objects that perform depth draw but no color draw such as cracks on the floor Objects are sorted by an opaque transparent queue then render_priority with higher priority being drawn later Transparent objects are also sorted by depth Depth testing overrules priority Priority alone cannot force opaque objects to be drawn over each other Next Pass Setting next_pass on a material will cause an object to be rendered again with that next material Materials are sorted by an opaque transparent queue then render_priority with higher priority being drawn later Depth will test equal between both materials unless the grow setting or other vertex transformations are used Multiple transparent passes should use render_priority to ensure correct ordering User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue 3D lights and shadows Introduction Light sources emit light that mixes with the materials and produces a visible result Light can come from several types of sources in a scene From the material itself in the form of the emission color though it does not affect nearby objects unless baked or screen space indirect lighting is enabled Light nodes DirectionalLight3D OmniLight3D and SpotLight3D Ambient light in the Environment or Reflection probes Global illumination LightmapGI VoxelGI or SDFGI The emission color is a material property You can read more about it in the Standard Material 3D and ORM Material 3D tutorial See also You can compare various types of lights in action using the 3D Lights and Shadows demo project Light nodes There are three types of light nodes DirectionalLight3D OmniLight3D and SpotLight3D Let s take a look at the common parameters for lights Each property has a specific function Color Base color for emitted light Energy Energy multiplier This is useful for saturating lights or working with High dynamic range lighting Indirect Energy Secondary multiplier used with indirect light light bounces This works with Using Lightmap global illumination VoxelGI or SDFGI Volumetric Fog Energy Secondary multiplier used with volumetric fog This only has an effect when volumetric fog is enabled Negative Light becomes subtractive instead of additive It s sometimes useful to manually compensate some dark corners Specular Affects the intensity of the specular blob in objects affected by this light At zero this light becomes a pure diffuse light Bake Mode Sets the bake mode for the light See Using Lightmap global illumination Cull Mask Objects that are in the selected layers below will be affected by this light Note that objects disabled via this cull mask will still cast shadows If you don t want disabled objects to cast shadows adjust the Cast Shadow property on the GeometryInstance3D to the desired value See also See Physical light and camera units if you wish to use real world units to configure your lights intensity and color temperature Light number limits When using the Forward renderer Godot uses a clustering approach for real time lighting As many lights as desired can be added as long as performance allows However there s still a default limit of 512 clustered elements that can be present in the current camera view A clustered element is an omni light a spot light a decal or a reflection probe This limit can be increased by adjusting the Rendering Limits Cluster Builder Max Clustered Elements advanced project setting When using the Forward Mobile renderer there is a limitation of 8 OmniLights 8 SpotLights per mesh resource There is also a limit of 256 OmniLights 256 SpotLights that can be rendered in the current camera view These limits currently cannot be changed When using the Compatibility renderer up to 8 OmniLights 8 SpotLights can be rendered per mesh resource This limit can be increased in the advanced Project Settings by adjusting Rendering Limits OpenGL Max Renderable Lights and or Rendering Limits OpenGL Max Lights Per Object at the cost of performance and longer shader compilation times The limit can also be decreased to reduce shader compilation times and improve performance slightly With all rendering methods up to 8 DirectionalLights can be visible at a time However each additional DirectionalLight with shadows enabled will reduce the effective shadow resolution of each DirectionalLight This is because directional shadow atlas is shared between all lights If the rendering limit is exceeded lights will start popping in and out during camera movement which can be distracting Enabling Distance Fade on light nodes can help reduce this issue while also improving performance Splitting your meshes into smaller portions can also help especially for level geometry which also improves culling efficiency If you need to render more lights than possible in a given rendering backend consider using baked lightmaps with lights bake mode set to Static This allows lights to be fully baked which also makes them much faster to render You can also use emissive materials with any global illumination technique as a replacement for light nodes that emit light over a large area Shadow mapping Lights can optionally cast shadows This gives them greater realism light does not reach occluded areas but it can incur a bigger performance cost There is a list of generic shadow parameters each also has a specific function Enabled Check to enable shadow mapping in this light Opacity Areas occluded are darkened by this opacity factor Shadows are fully opaque by default but this can be changed to make shadows translucent for a given light Bias When this parameter is too low self shadowing occurs When too high shadows separate from the casters Tweak to what works best for you Normal Bias When this parameter is too low self shadowing occurs When too high shadows appear misaligned from the casters Tweak to what works best for you Transmittance Bias When this parameter is too low self shadowing occurs on materials that have transmittance enabled When too high shadows will not affect materials that have transmittance enabled consistently Tweak to what works best for you Reverse Cull Face Some scenes work better when shadow mapping is rendered with face culling inverted Blur Multiplies the shadow blur radius for this light This works with both traditional shadow mapping and contact hardening shadows lights with Angular Distance or Size greater than 0 0 Higher values result in softer shadows which will also appear to be more temporally stable for moving objects The downside of increasing shadow blur is that it will make the grainy pattern used for filtering more noticeable See also Shadow filter mode Tweaking shadow bias Below is an image of what tweaking bias looks like Default values work for most cases but in general it depends on the size and complexity of geometry If the Shadow Bias or Shadow Normal Bias is set too low for a given light the shadow will be smeared onto the objects This will cause the light s intended appearance to darken and is called shadow acne On the other hand if the Shadow Bias or Shadow Normal Bias is set too high for a given light the shadow may appear to be disconnected from the object This is called peter panning In general increasing Shadow Normal Bias is preferred over increasing Shadow Bias Increasing Shadow Normal Bias does not cause as much peter panning as increasing Shadow Bias but it can still resolve most shadow acne issues efficiently The downside of increasing Shadow Normal Bias is that it can make shadows appear thinner for certain objects Any sort of bias issues can be fixed by increasing the shadow map resolution at the cost of decreased performance Note Tweaking shadow mapping settings is an art there are no one size fits all settings To achieve the best visuals you may need to use different shadow bias values on a per light basis Note on Appearance Changes When enabling shadows on a light be aware that the light s appearance might change compared to when it s rendered without shadows in the compatibility renderer Due to limitations with older mobile devices shadows are implemented using a multi pass rendering approach so lights with shadows are rendered in sRGB space instead of linear space This change in rendering space can sometimes drastically alter the light s appearance To achieve a similar appearance to an unshadowed light you may need to adjust the light s energy setting Directional light This is the most common type of light and represents a light source very far away such as the sun It is also the cheapest light to compute and should be used whenever possible although it s not the cheapest shadow map to compute but more on that later Directional light models an infinite number of parallel light rays covering the whole scene The directional light node is represented by a big arrow which indicates the direction of the light rays However the position of the node does not affect the lighting at all and can be anywhere Every face whose front side is hit by the light rays is lit while the others stay dark Unlike most other light types directional lights don t have specific parameters The directional light also offers a Angular Distance property which determines the light s angular size in degrees Increasing this above 0 0 will make shadows softer at greater distances from the caster while also affecting the sun s appearance in procedural sky materials This is called a contact hardening shadow also known as PCSS For reference the angular distance of the Sun viewed from the Earth is approximately 0 5 This kind of shadow is expensive so check the recommendations in PCSS recommendations if setting this value above 0 0 on lights with shadows enabled Directional shadow mapping To compute shadow maps the scene is rendered only depth from an orthogonal point of view that covers the whole scene or up to the max distance There is however a problem with this approach because objects closer to the camera receive low resolution shadows that may appear blocky To fix this a technique named Parallel Split Shadow Maps PSSM is used This splits the view frustum in 2 or 4 areas Each area gets its own shadow map This allows small areas close to the viewer to have the same shadow resolution as a huge far away area When shadows are enabled for DirectionalLight3D the default shadow mode is PSSM with 4 splits In scenarios where an object is large enough to appear in all four splits it results in increased draw calls Specifically such an object will be rendered five times in total once for each of the four shadow splits and once for the final scene rendering This can impact performance understanding this behavior is important for optimizing your scene and managing performance expectations With this shadows become more detailed To control PSSM a number of parameters are exposed Each split distance is controlled relative to the camera far or shadow Max Distance if greater than 0 0 0 0 is the eye position and 1 0 is where the shadow ends at a distance Splits are in between Default values generally work well but tweaking the first split a bit is common to give more detail to close objects like a character in a third person game Always make sure to set a shadow Max Distance according to what the scene needs A lower maximum distance will result in better looking shadows and better performance as fewer objects will need to be included in shadow rendering You can also adjust Fade Start to control how aggressive the shadow fade out should be at a distance For scenes where the Max Distance fully covers the scene at any given camera position you can increase Fade Start to 1 0 to prevent the shadow from fading at a distance This should not be done in scenes where Max Distance doesn t fully cover the scene as the shadow will appear to be suddenly cut off at a distance Sometimes the transition between a split and the next can look bad To fix this the Blend Splits option can be turned on which sacrifices detail and performance in exchange for smoother transitions The Shadow Normal Bias parameter can be used to fix special cases of self shadowing when objects are perpendicular to the light The only downside is that it makes the shadow a bit thinner Consider increasing Shadow Normal Bias before increasing Shadow Bias in most situations Lastly Pancake Size is a property that can be adjusted to fix missing shadows when using large objects with unsubdivided meshes Only change this value if you notice missing shadows that are not related to shadow biasing issues Omni light Omni light is a point source that emits light spherically in all directions up to a given radius In real life light attenuation is an inverse function which means omni lights don t have a radius This is a problem because it means computing several omni lights would become demanding To solve this a Range parameter is introduced together with an attenuation function These two parameters allow tweaking how this works visually in order to find aesthetically pleasing results A Size parameter is also available in OmniLight3D Increasing this value will make the light fade out slower and shadows appear blurrier when far away from the caster This can be used to simulate area lights to an extent This is called a contact hardening shadow also known as PCSS This kind of shadow is expensive so check the recommendations in PCSS recommendations if setting this value above 0 0 on lights with shadows enabled Omni shadow mapping Omni light shadow mapping is relatively straightforward The main issue that needs to be considered is the algorithm used to render it Omni Shadows can be rendered as either Dual Paraboloid or Cube mapped Dual Parabolid renders quickly but can cause deformations while Cube is more correct but slower The default is Cube but consider changing it to Dual Parabolid for lights where it doesn t make much of a visual difference If the objects being rendered are mostly irregular and subdivided Dual Paraboloid is usually enough In any case as these shadows are cached in a shadow atlas more on that at the end it may not make a difference in performance for most scenes Omni lights with shadows enabled can make use of projectors The projector texture will multiply the light s color by the color at a given point on the texture As a result lights will usually appear to be darker once a projector texture is assigned you can increase Energy to compensate for this Omni light projector textures require a special 360 panorama mapping similar to PanoramaSkyMaterial textures With the projector texture below the following result is obtained Tip If you ve acquired omni projectors in the form of cubemap images you can use this web based conversion tool to convert them to a single panorama image Spot light Spot lights are similar to omni lights except they emit light only into a cone or cutoff They are useful to simulate flashlights car lights reflectors spots etc This type of light is also attenuated towards the opposite direction it points to Spot lights share the same Range Attenuation and Size as OmniLight3D and add two extra parameters Angle The aperture angle of the light Angle Attenuation The cone attenuation which helps soften the cone borders Spot shadow mapping Spots feature the same parameters as omni lights for shadow mapping Rendering spot shadow maps is significantly faster compared to omni lights as only one shadow texture needs to be rendered instead of rendering 6 faces or 2 in dual parabolid mode Spot lights with shadows enabled can make use of projectors The projector texture will multiply the light s color by the color at a given point on the texture As a result lights will usually appear to be darker once a projector texture is assigned you can increase Energy to compensate for this Unlike omni light projectors a spot light projector texture doesn t need to follow a special format to look correct It will be mapped in a way similar to a decal With the projector texture below the following result is obtained Note Spot lights with wide angles will have lower quality shadows than spot lights with narrow angles as the shadow map is spread over a larger surface At angles wider than 89 degrees spot light shadows will stop working entirely If you need shadows for wider lights use an omni light instead Shadow atlas Unlike Directional lights which have their own shadow texture omni and spot lights are assigned to slots of a shadow atlas This atlas can be configured in the advanced Project Settings Rendering Lights And Shadows Positional Shadow The resolution applies to the whole shadow atlas This atlas is divided into four quadrants Each quadrant can be subdivided to allocate any number of shadow maps the following is the default subdivision The shadow atlas allocates space as follows The biggest shadow map size when no subdivision is used represents a light the size of the screen or bigger Subdivisions smaller maps represent shadows for lights that are further away from view and proportionally smaller Every frame the following procedure is performed for all lights Check if the light is on a slot of the right size If not re render it and move it to a larger smaller slot Check if any object affecting the shadow map has changed If it did re render the light If neither of the above has happened nothing is done and the shadow is left untouched If the slots in a quadrant are full lights are pushed back to smaller slots depending on size and distance If all slots in all quadrants are full some lights will not be able to render shadows even if shadows are enabled on them The default shadow allocation strategy allows rendering up to 88 lights with shadows enabled in the camera frustum 4 4 16 64 The first and most detailed quadrant can store 4 shadows The second quadrant can store 4 other shadows The third quadrant can store 16 shadows with less detail The fourth and least detailed quadrant can store 64 shadows with even less detail Using a higher number of shadows per quadrant allows supporting a greater amount of total lights with shadows enabled while also improving performance as shadows will be rendered at a lower resolution for each light However increasing the number of shadows per quadrant comes at the cost of lower shadow quality In some cases you may want to use a different allocation strategy For example in a top down game where all lights are around the same size you may want to set all quadrants to have the same subdivision so that all lights have shadows of similar quality level Balancing performance and quality Shadow rendering is a critical topic in 3D rendering performance It s important to make the right choices here to avoid creating bottlenecks Directional shadow quality settings can be changed at run time by calling the appropriate RenderingServer methods Positional omni spot shadow quality settings can be changed at run time on the root Viewport Shadow map size High shadow resolutions result in sharper shadows but at a significant performance cost It should also be noted that sharper shadows are not always more realistic In most cases this should be kept at its default value of 4096 or decreased to 2048 for low end GPUs If positional shadows become too blurry after decreasing the shadow map size you can counteract this by adjusting the shadow atlas quadrants to contain fewer shadows This will allow each shadow to be rendered at a higher resolution Shadow filter mode Several shadow map quality settings can be chosen here The default Soft Low is a good balance between performance and quality for scenes with detailed textures as the texture detail will help make the dithering pattern less noticeable However in projects with less detailed textures the shadow dithering pattern may be more visible To hide this pattern you can either enable Temporal antialiasing TAA AMD FidelityFX Super Resolution 2 2 FSR2 Fast approximate antialiasing FXAA or increase the shadow filter quality to Soft Medium or higher The Soft Very Low setting will automatically decrease shadow blur to make artifacts from the low sample count less visible Conversely the Soft High and Soft Ultra settings will automatically increase shadow blur to better make use of the increased sample count 16 bits versus 32 bit By default Godot uses 16 bit depth textures for shadow map rendering This is recommended in most cases as it performs better without a noticeable difference in quality If 16 Bits is disabled 32 bit depth textures will be used instead This can result in less artifacting in large scenes and large lights with shadows enabled However the difference is often barely visible yet this can have a significant performance cost Light shadow distance fade OmniLight3D and SpotLight3D offer several properties to hide distant lights This can improve performance significantly in large scenes with dozens of lights or more Enabled Controls whether distance fade a form of LOD is enabled The light will fade out over Begin Length after which it will be culled and not sent to the shader at all Use this to reduce the number of active lights in a scene and thus improve performance Begin The distance from the camera at which the light begins to fade away in 3D units Shadow The distance from the camera at which the shadow begins to fade away in 3D units This can be used to fade out shadows sooner compared to the light further improving performance Only available if shadows are enabled for the light Length The distance over which the light and shadow fades in 3D units The light becomes slowly more transparent over this distance and is completely invisible at the end Higher values result in a smoother fade out transition which is more suited when the camera moves fast PCSS recommendations Percentage closer soft shadows PCSS provide a more realistic shadow mapping appearance with the penumbra size varying depending on the distance between the caster and the surface receiving the shadow This comes at a high performance cost especially for directional lights To avoid performance issues it s recommended to Only use a handful of lights with PCSS shadows enabled at a given time The effect is generally most visible on large bright lights Secondary light sources that are more faint usually don t benefit much from using PCSS shadows Provide a setting for users to disable PCSS shadows On directional lights this can be done by setting the DirectionalLight3D s light_angular_distance property to 0 0 in a script On positional lights this can be done by setting the OmniLight3D or SpotLight3D s light_size property to 0 0 in a script Projector filter mode The way projectors are rendered also has an impact on performance The Rendering Textures Light Projectors Filter advanced project setting lets you control how projector textures should be filtered Nearest Linear do not use mipmaps which makes them faster to render However projectors will look grainy at distance Nearest Linear Mipmaps will look smoother at a distance but projectors will look blurry when viewed from oblique angles This can be resolved by using Nearest Linear Mipmaps Anisotropic which is the highest quality mode but also the most expensive If your project has a pixel art style consider setting the filter to one of the Nearest values so that projectors use nearest neighbor filtering Otherwise stick to Linear User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using decals Note Decals are only supported in the Clustered Forward and Forward Mobile rendering backends not the Compatibility backend If using the Compatibility backend consider using Sprite3D as an alternative for projecting decals onto mostly flat surfaces Decals are projected textures that apply on opaque or transparent surfaces in 3D This projection happens in real time and doesn t rely on mesh generation This allows you to move decals every frame with only a small performance impact even when applied on complex meshes While decals cannot add actual geometry detail onto the projected surface decals can still make use of physically based rendering to provide similar properties to full blown PBR materials On this page you ll learn How to set up decals in the 3D editor How to create decals during gameplay in a 3D scene such as bullet impacts How to balance decal configuration between performance and quality See also The Godot demo projects repository contains a 3D decals demo If you re looking to write arbitrary 3D text on top of a surface use 3D text placed close to a surface instead of a Decal node Use cases Static decoration Sometimes the fastest way to add texture detail to a scene is to use decals This is especially the case for organic detail such as patches of dirt or sand scattered on a large surface Decals can help break up texture repetition in scenes and make patterns look more natural On a smaller scale decals can also be used to create detail variations for objects For example decals can be used to add nuts and bolts on top of hard surface geometry Since decals can inject their own PBR properties on top of the projected surfaces they can also be used to create footprints or wet puddles Dirt added on top of level geometry using decals Dynamic gameplay elements Decals can represent temporary or persistent gameplay effects such as bullet impacts and explosion scorches Using an AnimationPlayer node or a script decals can be made to fade over time and then be removed using queue_free to improve performance Blob shadows Blob shadows are frequently used in mobile projects or to follow a retro art style as real time lighting tends to be too expensive on low end mobile devices However when relying on baked lightmaps with fully baked lights dynamic objects will not cast any shadow from those lights This makes dynamic objects in lightmapped scenes look flat in comparison to real time lighting with dynamic objects almost looking like they re floating Thanks to blob shadows dynamic objects can still cast an approximative shadow Not only this helps with depth perception in the scene but this can also be a gameplay element especially in 3D platformers The blob shadow s length can be extended to let the player know where they will land if they fall straight down Even with real time lighting blob shadows can still be useful as a form of ambient occlusion for situations where SSAO is too expensive or too unstable due to its screen space nature For example vehicles underside shadows are well represented using blob shadows Blob shadow under object comparison Quick start guide Creating decals in the editor Create a Decal node in the 3D editor In the inspector expand the Textures section and load a texture in Textures Albedo Move the Decal node towards an object then rotate it so the decal is visible and in the right orientation If the decal appears mirrored try to rotate it by 180 degrees You can double check whether it s in the right orientation by increasing Parameters Normal Fade to 0 5 This will prevent the Decal from being projected on surfaces that are not facing the decal If your decal is meant to affect static objects only configure it to prevent affecting dynamic objects or vice versa To do so change the decal s Cull Mask property to exclude certain layers After doing this modify your dynamic objects MeshInstance3D nodes to change their visibility layers For instance you can move them from layer 1 to layer 2 then disable layer 2 in the decal s Cull Mask property Decal node properties Extents The size of the decal The Y axis determines the length of the decal s projection Keep the projection length as short as possible to improve culling opportunities therefore improving performance Textures Albedo The albedo diffuse color map to use for the decal In most situations this is the texture you want to set first If using a normal or ORM map an albedo map must be set to provide an alpha channel This alpha channel will be used as a mask to determine how much the normal ORM maps will affect the underlying surface Normal The normal map to use for the decal This can be used to increase perceived detail on the decal by modifying how light reacts to it The impact of this texture is multiplied by the albedo texture s alpha channel but not Albedo Mix ORM The Occlusion Roughness Metallic map to use for the decal This is an optimized format for storing PBR material maps Ambient Occlusion map is stored in the red channel roughness map in the green channel metallic map in the blue channel The impact of this texture is multiplied by the albedo texture s alpha channel but not Albedo Mix Emission The emission texture to use for the decal Unlike Albedo this texture will appear to glow in the dark Parameters Emission Energy The brightness of the emission texture Modulate Multiplies the color of the albedo and emission textures Use this to tint decals e g for paint decals or to increase variation by randomizing each decal s modulation Albedo Mix The opacity of the albedo texture Unlike using an albedo texture with a more transparent alpha channel decreasing this value below 1 0 does not reduce the impact of the normal ORM texture on the underlying surface Set this to 0 0 when creating normal ORM only decals such as footsteps or wet puddles Normal Fade Fades the Decal if the angle between the Decal s AABB and the target surface becomes too large A value of 0 0 projects the decal regardless of angle while a value of 0 999 limits the decal to surfaces that are nearly perpendicular Setting Normal Fade to a value greater than 0 0 has a small performance cost due to the added normal angle computations Vertical Fade Upper Fade The curve over which the decal will fade as the surface gets further from the center of the AABB towards the decal s projection angle Only positive values are valid Lower Fade The curve over which the decal will fade as the surface gets further from the center of the AABB away from the decal s projection angle Only positive values are valid Distance Fade Enabled Controls whether distance fade a form of LOD is enabled The decal will fade out over Begin Length after which it will be culled and not sent to the shader at all Use this to reduce the number of active decals in a scene and thus improve performance Begin The distance from the camera at which the decal begins to fade away in 3D units Length The distance over which the decal fades in 3D units The decal becomes slowly more transparent over this distance and is completely invisible at the end Higher values result in a smoother fade out transition which is more suited when the camera moves fast Cull Mask Cull Mask Specifies which VisualInstance3D layers this decal will project on By default decals affect all layers This is used so you can specify which types of objects receive the decal and which do not This is especially useful so you can ensure that dynamic objects don t accidentally receive a Decal intended for the terrain under them Decal rendering order By default decals are ordered based on the size of their AABB and the distance to the camera AABBs that are closer to the camera are rendered first which means that decal rendering order can sometimes appear to change depending on camera position if some decals are positioned at the same location To resolve this you can adjust the Sorting Offset property in the VisualInstance3D section of the Decal node inspector This offset is not a strict priority order but a guideline that the renderer will use as the AABB size still affects how decal sorting works Therefore higher values will always result in the decal being drawn above other decals with a lower sorting offset If you want to ensure a decal is always rendered on top of other decals you need to set its Sorting Offset property to a positive value greater than the AABB length of the largest decal that may overlap it To make this decal drawn behind other decals instead set the Sorting Offset to the same negative value VisualInstance3D Sorting Offset comparison on Decals Tweaking performance and quality Decal rendering performance is mostly determined by their screen coverage but also their number In general a few large decals that cover up most of the screen will be more expensive to render than many small decals that are scattered around To improve rendering performance you can enable the Distance Fade property as described above This will make distant decals fade out when they are far away from the camera and may have little to no impact on the final scene rendering Using node groups you can also prevent non essential decorative decals from spawning based on user configuration The way decals are rendered also has an impact on performance The Rendering Textures Decals Filter advanced project setting lets you control how decal textures should be filtered Nearest Linear does not use mipmaps However decals will look grainy at a distance Nearest Linear Mipmaps will look smoother at a distance but decals will look blurry when viewed from oblique angles This can be resolved by using Nearest Linear Mipmaps Anisotropic which provides the highest quality but is also slower to render If your project has a pixel art style consider setting the filter to one of the Nearest values so that decals use nearest neighbor filtering Otherwise stick to Linear Limitations Decals cannot affect material properties other than the ones listed above such as height for parallax mapping For performance reasons decals use purely fixed rendering logic This means decals cannot use custom shaders However custom shaders on the projected surfaces are able to read the information that is overridden by decals on top of them such as roughness and metallic When using the Forward renderer Godot uses a clustering approach for decal rendering As many decals as desired can be added as long as performance allows However there s still a default limit of 512 clustered elements that can be present in the current camera view A clustered element is an omni light a spot light a decal or a reflection probe This limit can be increased by adjusting the Rendering Limits Cluster Builder Max Clustered Elements advanced project setting When using the Forward Mobile backend only 8 decals can be applied on each individual Mesh resource If there are more decals affecting a single mesh not all of them will be rendered on the mesh User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Physical light and camera units Why use physical light and camera units Godot uses arbitrary units for many physical properties that apply to light like color energy camera field of view and exposure By default these properties use arbitrary units because using accurate physical units comes with a few tradeoffs that aren t worth it for many games As Godot favors ease of use by default physical light units are disabled by default Advantages of physical units If you aim for photorealism in your project using real world units as a basis can help make things easier to adjust References for real world materials lights and scene brightness are wildly available on websites such as Physically Based Using real world units in Godot can also be useful when porting a scene from other 3D software that uses physical light units such as Blender Disadvantages of physical units The biggest disadvantage of using physical light units is you will have to pay close attention to the dynamic range in use at a given time You can run into floating point precision errors when mixing very high light intensities with very low light intensities In practice this means that you will have to manually manage your exposure settings to ensure that you aren t over exposing or under exposing your scene too much Auto exposure can help you balance the light in a scene to bring it into a normal range but it can t recover lost precision from a dynamic range that is too high Using physical light and camera units will not automatically make your project look better Sometimes moving away from realism can actually make a scene look better to the human eye Also using physical units requires a greater amount of rigor compared to non physical units Most benefits of physical units can only be obtained if the units are correctly set to match real world reference Note Physical light units are only available in 3D rendering not 2D Setting up physical light units Physical light units can be enabled separately from physical camera units To enable physical light units correctly there are 4 steps required Enable the project setting Configure the camera Configure the environment Configure Light3D nodes Since physical light and camera units only require a handful of calculations to handle unit conversion enabling them doesn t have any noticeable performance impact on the CPU However on the GPU side physical camera units currently enforce depth of field This has a moderate performance impact To alleviate this performance impact depth of field quality can be decreased in the advanced Project Settings Enable the project setting Open the Project Settings enable the Advanced toggle then enable Rendering Lights And Shadows Use Physical Light Units Restart the editor Configure the camera Warning When physical light units are enabled and if you have a WorldEnvironment node in your scene i e the editor Environment is disabled you must have a CameraAttributes resource assigned to the WorldEnvironment node Otherwise the 3D editor viewport will appear extremely bright if you have a visible DirectionalLight3D node On the Camera3D node you can add a CameraAttributes resource to its Attributes property This resource is used to control the camera s depth of field and exposure When using CameraAttributesPhysical its focal length property is also used to adjust the camera s field of view When physical light units are enabled the following additional properties become available in CameraAttributesPhysical s Exposure section Aperture The size of the aperture of the camera measured in f stops An f stop is a unitless ratio between the focal length of the camera and the diameter of the aperture A high aperture setting will result in a smaller aperture which leads to a dimmer image and sharper focus A low aperture results in a wide aperture which lets in more light resulting in a brighter less focused image Shutter Speed The time for shutter to open and close measured in inverse seconds 1 N A lower value will let in more light leading to a brighter image while a higher value will let in less light leading to a darker image When getting or setting this property with a script the unit is in seconds instead of inverse seconds Sensitivity The sensitivity of camera sensors measured in ISO A higher sensitivity results in a brighter image When auto exposure is enabled this can be used as a method of exposure compensation Doubling the value will increase the exposure value measured in EV100 by 1 stop Multiplier A non physical exposure multiplier Higher values will increase the scene s brightness This can be used for post processing adjustments or for animation purposes The default Aperture value of 16 f stops is appropriate for outdoors at daytime i e for use with a default DirectionalLight3D For indoor lighting a value between 2 and 4 is more appropriate Typical shutter speed used in photography and movie production is 1 50 0 02 seconds Night time photography generally uses a shutter around 1 10 0 1 seconds while sports photography uses a shutter speed between 1 250 0 004 seconds and 1 1000 0 001 seconds to reduce motion blur In real life sensitivity is usually set between 50 ISO and 400 ISO for daytime outdoor photography depending on weather conditions Higher values are used for indoor or night time photography Note Unlike real life cameras the adverse effects of increasing ISO sensitivity or decreasing shutter speed such as visible grain or light trails are not simulated in Godot See Setting up physical camera units for a description of CameraAttributesPhysical properties that are also available when not using physical light units Configure the environment Warning The default configuration is designed for daytime outdoor scenes Night time and indoor scenes will need adjustments to the DirectionalLight3D and WorldEnvironment background intensity to look correct Otherwise positional lights will be barely visible at their default intensity If you haven t added a WorldEnvironment and Camera3D node to the current scene yet do so now by clicking the 3 vertical dots at the top of the 3D editor viewport Click Add Sun to Scene open the dialog again then click Add Environment to Scene After enabling physical light units a new property becomes available to edit in the Environment resource Background Intensity The background sky s intensity in nits candelas per square meter This also affects ambient and reflected light if their respective modes are set to Background If a custom Background Energy is set this energy is multiplied by the intensity Configure the light nodes After enabling physical light units 2 new properties become available in Light3D nodes Intensity The light s intensity in lux DirectionalLight3D or lumens OmniLight3D SpotLight3D If a custom Energy is set this energy is multiplied by the intensity Temperature The light s color temperature defined in Kelvin If a custom Color is set this color is multiplied by the color temperature OmniLight3D SpotLight3D intensity Lumens are a measure of luminous flux which is the total amount of visible light emitted by a light source per unit of time For SpotLight3Ds we assume that the area outside the visible cone is surrounded by a perfect light absorbing material Accordingly the apparent brightness of the cone area does not change as the cone increases and decreases in size A typical household lightbulb can range from around 600 lumens to 1200 lumens A candle is about 13 lumens while a streetlight can be approximately 60000 lumens DirectionalLight3D intensity Lux is a measure pf luminous flux per unit area it is equal to one lumen per square metre Lux is the measure of how much light hits a surface at a given time With DirectionalLight3D on a clear sunny day a surface in direct sunlight may receive approximately 100000 lux A typical room in a home may receive approximately 50 lux while the moonlit ground may receive approximately 0 1 lux Color temperature 6500 Kelvin is white Higher values result in colder bluer colors while lower values result in warmer more orange colors The sun on a cloudy day is approximately 6500 Kelvin On a clear day the sun is between 5500 to 6000 Kelvin On a clear day at sunrise or sunset the sun ranges to around 1850 Kelvin Color temperature chart from 1 000 Kelvin left to 12 500 Kelvin right Other Light3D properties such as Energy and Color remain editable for animation purposes and when you occasionally need to create lights with non realistic properties Setting up physical camera units Physical camera units can be enabled separately from physical light units After adding a CameraAttributesPhysical resource to the Camera Attributes property of a Camera3D nodes some properties such as FOV will no longer be editable Instead these properties are now governed by the CameraAttributesPhysical s properties such as focal length and aperture CameraAttributesPhysical offers the following properties in its Frustum section Focus Distance Distance from camera of object that will be in focus measured in meters Internally this will be clamped to be at least 1 millimeter larger than the Focal Length Focal Length Distance between camera lens and camera aperture measured in millimeters Controls field of view and depth of field A larger focal length will result in a smaller field of view and a narrower depth of field meaning fewer objects will be in focus A smaller focal length will result in a wider field of view and a larger depth of field which means more objects will be in focus This property overrides the Camera3D s FOV and Keep Aspect properties making them read only in the inspector Near Far The near and far clip distances in meters These behave the same as the Camera3D properties of the same name Lower Near values allow the camera to display objects that are very close at the cost of potential precision Z fighting issues in the distance Higher Far values allow the camera to see further away also at the cost of potential precision Z fighting issues in the distance The default focal length of 35 mm corresponds to a wide angle lens It still results in a field of view that is noticeably narrower compared to the default practical vertical FOV of 75 degrees This is because non gaming use cases such as filmmaking and photography favor using a narrower field of view for a more cinematic appearance Common focal length values used in filmmaking and photography are Fisheye ultrawide angle Below 15 mm Nearly no depth of field visible Wide angle Between 15 mm and 50 mm Reduced depth of field Standard Between 50 mm and 100 mm Standard depth of field Telephoto Greater than 100 mm Increased depth of field Like when using the Keep Height aspect mode the effective field of view depends on the viewport s aspect ratio with wider aspect ratios automatically resulting in a wider horizontal field of view Automatic exposure adjustment based on the camera s average brightness level can also be enabled in the Auto Exposure section with the following properties Min Sensitivity The darkest brightness the camera is allowed to get to measured in EV100 Max Sensitivity The brightest the camera is allowed to get to measured in EV100 Speed The speed of the auto exposure effect Affects the time needed for the camera to perform auto exposure Higher values allow for faster transitions but the resulting adjustments may look distracting depending on the scene Scale The scale of the auto exposure effect Affects the intensity of auto exposure EV100 is an exposure value EV measured at an ISO sensitivity of 100 See this table for common EV100 values found in real life User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Particle systems 3D This section of the tutorial covers 3D GPU accelerated particle systems Most of the things discussed here apply to CPU particles as well Introduction You can use particle systems to simulate complex physical effects like fire sparks smoke magical effects and many more They are very well suited for creating dynamic and organic behavior and adding life to your scenes The idea is that a particle is emitted at a fixed interval and with a fixed lifetime During its lifetime every particle will have the same base behavior What makes each particle different from the others and creates the organic look is the randomness that you can add to most of its parameters and behaviors Every particle system you create in Godot consists of two main parts particles and emitters Particles A particle is the visible part of a particle system It s what you see on the screen when a particle system is active The tiny specks of dust the flames of a fire the glowing orbs of a magical effect You can have anywhere between a couple hundred and tens of thousands of particles in a single system You can randomize a particle s size its speed and movement direction and change its color over the course of its lifetime When you think of a fire you can think of all the little embers flying away from it as individual particles Emitters An emitter is what s creating the particles Emitters are usually not visible but they can have a shape That shape controls where and how particles are spawned for example whether they should fill a room like dust or shoot away from a single point like a fountain Going back to the fire example an emitter would be the heat at the center of the fire that creates the embers and the flames Node overview All 3D particle nodes available in Godot There are two types of 3D particle systems in Godot GPUParticles3D which are processed on the GPU and CPUParticles3D which are processed on the CPU CPU particle systems are less flexible than their GPU counterpart but they work on a wider range of hardware and provide better support for older devices and mobile phones Because they are processed on the CPU they are not as performant as GPU particle systems and can t render as many individual particles In addition they currently do not have all the available options GPU particles have for control GPU particle systems run on the GPU and can render hundreds of thousands of particles on modern hardware You can write custom particle shaders for them which makes them very flexible You can also make them interact with the environment by using attractor and collision nodes There are three particle attractor nodes GPUParticlesAttractorBox3D GPUParticlesAttractorSphere3D and GPUParticlesAttractorVectorField3D An attractor node applies a force to all particles in its reach and pulls them closer or pushes them away based on the direction of that force There are several particle collision nodes GPUParticlesCollisionBox3D and GPUParticlesCollisionSphere3D are the simple ones You can use them to create basic shapes like boxes a floor or a wall that particles collide with The other two nodes provide more complex collision behavior The GPUParticlesCollisionSDF3D is useful when you want indoor scenes to collide with particles without having to create all the individual box and sphere colliders by hand If you want particles to collide with large outdoor scenes you would use the GPUParticlesCollisionHeightField3D node It creates a heightmap of your world and the objects in it and uses that for large scale particle collisions Basic usage Creating a 3D particle system 3D Particle system properties Process material properties Particle flags Spawn Accelerations Display Collision Sub emitter Advanced topics Particle sub emitters 3D Particle trails Particle turbulence 3D Particle attractors 3D Particle collisions Complex emission shapes Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request High dynamic range lighting Introduction Normally an artist does all the 3D modeling then all the texturing looks at their awesome looking model in the 3D modeling software and says looks fantastic ready for integration then goes into the game lighting is setup and the game runs So at what point does all this HDR business come into play To understand the answer we need to look at how displays behave Your display outputs linear light ratios from some maximum to some minimum intensity Modern game engines perform complex math on linear light values in their respective scenes So what s the problem The display has a limited range of intensity depending on the display type The game engine renders to an unlimited range of intensity values however While maximum intensity means something to an sRGB display it has no bearing in the game engine there is only a potentially infinitely wide range of intensity values generated per frame of rendering This means that some transformation of the scene light intensity also known as scene referred light ratios need to be transformed and mapped to fit within the particular output range of the chosen display This can be most easily understood if we consider virtually photographing our game engine scene through a virtual camera Here our virtual camera would apply a particular camera rendering transform to the scene data and the output would be ready for display on a particular display type Note Godot does not support high dynamic range output yet It can only perform lighting in HDR and tonemap the result to a low dynamic range image For advanced users it is still possible to get a non tonemapped image of the viewport with full HDR data which can then be saved to an OpenEXR file Computer displays Almost all displays require a nonlinear encoding for the code values sent to them The display in turn using its unique transfer characteristic decodes the code value into linear light ratios of output and projects the ratios out of the uniquely colored lights at each reddish greenish and blueish emission site For a majority of computer displays the specifications of the display are outlined in accordance with IEC 61966 2 1 also known as the 1996 sRGB specification This specification outlines how an sRGB display is to behave including the color of the lights in the LED pixels as well as the transfer characteristics of the input OETF and output EOTF Not all displays use the same OETF and EOTF as a computer display For example television broadcast displays use the BT 1886 EOTF However Godot currently only supports sRGB displays The sRGB standard is based around the nonlinear relationship between the current to light output of common desktop computing CRT displays The mathematics of a scene referred model require that we multiply the scene by different values to adjust the intensities and exposure to different light ranges The transfer function of the display can t appropriately render the wider dynamic range of the game engine s scene output using the simple transfer function of the display A more complex approach to encoding is required Scene linear asset pipelines Working in scene linear sRGB is more complex than pressing a single switch First imported image assets must be converted to linear light ratios on import Even when linearized those assets may not be perfectly well suited for use as textures depending on how they were generated There are two ways to do this sRGB transfer function to display linear ratios on image import This is the easiest method of using sRGB assets but it s not the most ideal One issue with this is loss of quality Using 8 bits per channel to represent linear light ratios is not sufficient to quantize the values correctly These textures may also be compressed later which can exacerbate the problem Hardware sRGB transfer function to display linear conversion The GPU will do the conversion after reading the texel using floating point This works fine on PC and consoles but most mobile devices don t support it or they don t support it on compressed texture formats iOS for example Scene linear to display referred nonlinear After all the rendering is done the scene linear render requires transforming to a suitable output such as an sRGB display To do this enable sRGB conversion in the current Environment more on that below Keep in mind that the sRGB Display Linear and Display Linear sRGB conversions must always be both enabled Failing to enable one of them will result in horrible visuals suitable only for avant garde experimental indie games Parameters of HDR HDR settings can be found in the Environment resource Most of the time these are found inside a WorldEnvironment node or set in a Camera node For more information see Environment and post processing User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Global illumination Introduction to global illumination Using Voxel global illumination Signed distance field global illumination SDFGI Using Lightmap global illumination Reflection probes Faking global illumination Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Introduction to global illumination What is global illumination Global illumination is a catch all term used to describe a system of lighting that uses both direct light light that comes directly from a light source and indirect light light that bounces from a surface In a 3D rendering engine global illumination is one of the most important elements to achieving realistic lighting Global illumination aims to mimic how light behaves in real life such as light bouncing on surfaces and light being emitted from emissive materials In the example below the entire scene is illuminated by an emissive material the white square at the top The white wall and ceiling on the back is tinted red and green close to the walls as the light bouncing on the colored walls is being reflected back onto the rest of the scene Global illumination is composed of several key concepts Indirect diffuse lighting This is the lighting that does not change depending on the camera s angle There are two main sources of indirect diffuse lighting Light bouncing on surfaces This bounced lighting is multiplied with the material s albedo color The bounced lighting can then be reflected by other surfaces with decreasing impact due to light attenuation In real life light bounces an infinite number of times However for performance reasons this can t be simulated in a game engine Instead the number of bounces is typically limited to 1 or 2 or up to 16 when baking lightmaps A greater number of bounces will lead to more realistic light falloff in shaded areas at the cost of lower performance or greater bake times Emissive materials can also emit light that can be bounced on surfaces This acts as a form of area lighting Instead of having an infinitely small point emit light using an OmniLight3D or SpotLight3D node an area of a determined size will emit light using its own surface Direct diffuse lighting is already handled by the light nodes themselves which means that global illumination algorithms only try to represent indirect lighting Different global illumination techniques offer varying levels of accuracy to represent indirect diffuse lighting See the comparison table at the bottom of this page for more information To provide more accurate ambient occlusion for small objects screen space ambient occlusion SSAO can be enabled in the environment settings SSAO has a significant performance cost so make sure to disable it when targeting low end hardware Note Indirect diffuse lighting may be a source of color banding in scenes with no detailed textures This results in light gradients not being smooth but having a visible stepping effect instead See the Color banding section in the 3D rendering limitations documentation for ways to reduce this effect Specular lighting Specular lighting is also referred to as reflections This is the lighting that changes in intensity depending on the camera s angle This specular lighting can be direct or indirect Most global illumination techniques offer a way to render specular lighting However the degree of accuracy at which specular lighting is rendered varies greatly from technique to technique See the comparison table at the bottom of this page for more information To provide more accurate reflections for small objects screen space reflections SSR can be enabled in the environment settings SSR has a significant performance cost even more so than SSAO so make sure to disable it when targeting low end hardware Which global illumination technique should I use When determining a global illumination GI technique to use there are several criteria to keep in mind Performance Real time GI techniques are usually more expensive compared to semi real time or baked techniques Note that most of the cost in GI rendering is spent on the GPU rather than the CPU Visuals On top of not performing the best real time GI techniques generally don t provide the best visual output This is especially the case in a mostly static scene where the dynamic nature of real time GI is not easily noticeable If maximizing visual quality is your goal baked techniques will often look better and will result in fewer light leaks Real time ability Some GI techniques are fully real time whereas others are only semi real time or aren t real time at all Semi real time techniques have restrictions that fully real time techniques don t For instance dynamic objects may not contribute emissive lighting to the scene Non real time techniques do not support any form of dynamic GI so it must be faked using other techniques if needed such as placing positional lights near emissive surfaces Real time ability also affects the GI technique s viability in procedurally generated levels User work needed Some GI techniques are fully automatic whereas others require careful planning and manual work on the user s side Depending on your time budget some GI techniques may be preferable to others Here s a comparison of all the global illumination techniques available in Godot Performance In order of performance from fastest to slowest ReflectionProbe ReflectionProbes with their update mode set to Always are much more expensive than probes with their update mode set to Once the default Suited for integrated graphics when using the Once update mode Available when using the Forward Mobile backend Will be available in the Compatibility backend in later releases LightmapGI Lights can be baked with indirect lighting only or fully baked on a per light basis to further improve performance Hybrid setups can be used such as having a real time directional light and fully baked positional lights Directional information can be enabled before baking to improve visuals at a small performance cost and at the cost of larger file sizes Suited for integrated graphics Available when using the Forward Mobile backend Will be available in the Compatibility backend in later releases VoxelGI The bake s number of subdivisions can be adjusted to balance between performance and quality The VoxelGI rendering quality can be adjusted in the Project Settings The rendering can optionally be performed at half resolution and then linearly scaled to improve performance significantly Not available when using the Forward Mobile or Compatibility backends Screen space indirect lighting SSIL The SSIL quality and number of blur passes can be adjusted in the Project Settings By default SSIL rendering is performed at half resolution and then linearly scaled to ensure a reasonable performance level Not available when using the Forward Mobile or Compatibility backends SDFGI The number of cascades can be adjusted to balance performance and quality The number of rays thrown per frame can be adjusted in the Project Settings The rendering can optionally be performed at half resolution and then linearly scaled to improve performance significantly Not available when using the Forward Mobile or Compatibility backends Visuals For comparison here s a 3D scene with no global illumination options used A 3D scene without any form of global illumination only constant environment lighting The box and sphere near the camera are both dynamic objects Here s how Godot s various global illumination techniques compare VoxelGI Good reflections and indirect lighting but beware of leaks Due to its voxel based nature VoxelGI will exhibit light leaks if walls and floors are too thin It s recommended to make sure all solid surfaces are at least as thick as one voxel Streaking artifacts may also be visible on sloped surfaces In this case tweaking the bias properties or rotating the VoxelGI node can help combat this VoxelGI in action SDFGI Good reflections and indirect lighting but beware of leaks and visible cascade shifts GI level of detail varies depending on the distance between the camera and surface Leaks can be reduced significantly by enabling the Use Occlusion property This has a small performance cost but it often results in fewer leaks compared to VoxelGI Cascade shifts may be visible when the camera moves fast This can be made less noticeable by adjusting the cascade sizes or using fog SDFGI in action Screen space indirect lighting SSIL Good secondary source of indirect lighting but no reflections SSIL is designed to be used as a complement to another GI technique such as VoxelGI SDFGI or LightmapGI SSIL works best for small scale details as it cannot provide accurate indirect lighting for large structures on its own SSIL can provide real time indirect lighting in situations where other GI techniques fail to capture small scale details or dynamic objects Its screen space nature will result in some artifacts especially when objects enter and leave the screen SSIL works using the last frame s color before post processing which means that emissive decals and custom shaders are included as long as they re present on screen SSIL in action without any other GI technique Notice the emissive lighting around the yellow box LightmapGI Excellent indirect lighting decent reflections optional This is the only technique where the number of light bounces can be pushed above 2 up to 16 When directional information is enabled spherical harmonics SH are used to provide blurry reflections LightmapGI in action Only indirect lighting is baked here but direct light can also be baked ReflectionProbe Good reflections but poor indirect lighting Indirect lighting can be disabled set to a constant color spread throughout the probe or automatically read from the probe s environment and applied as a cubemap This essentially acts as local ambient lighting Reflections and indirect lighting are blended with other nearby probes ReflectionProbe in action without any other GI technique Notice the reflective sphere Real time ability VoxelGI Fully real time Indirect lighting and reflections are fully real time Dynamic objects can receive GI and contribute to it with their emissive surfaces Custom shaders can also emit their own light which will be emitted accurately Viable for procedurally generated levels if they are generated in advance and not during gameplay Baking requires several seconds or more to complete but it can be done from both the editor and an exported project SDFGI Semi real time Cascades are generated in real time making SDFGI viable for procedurally generated levels including when structures are generated during gameplay Dynamic objects can receive GI but not contribute to it Emissive lighting will only update when an object enters a cascade so it may still work for slow moving objects Screen space indirect lighting SSIL Fully real time SSIL works with both static and dynamic lights It also works with both static and dynamic occluders including emissive materials LightmapGI Baked and therefore not real time Both indirect lighting and SH reflections are baked and can t be changed at run time Real time GI must be simulated via other means such as real time positional lights Dynamic objects receive indirect lighting via light probes which can be placed automatically or manually by the user LightmapProbe node Not viable for procedurally generated levels as baking lightmaps is only possible from the editor ReflectionProbe Optionally real time By default reflections update when the probe is moved They update as often as possible if the update mode is set to Always which is expensive Indirect lighting must be configured manually by the user but can be changed at run time without causing an expensive computation to happen behind the scenes This makes ReflectionProbes viable for procedurally generated levels User work needed VoxelGI One or more VoxelGI nodes need to be created and baked Adjusting extents correctly is required to get good results Additionally rotating the node and baking again can help combat leaks or streaking artifacts in certain situations Bake times are fast usually below 10 seconds for a scene of medium complexity SDFGI Very little SDFGI is fully automatic it only needs to be enabled in the Environment resource The only manual work required is to set MeshInstances bake mode property correctly No node needs to be created and no baking is required Screen space indirect lighting SSIL Very little SSIL is fully automatic it only needs to be enabled in the Environment resource No node needs to be created and no baking is required LightmapGI Requires UV2 setup and baking Static meshes must be reimported with UV2 and lightmap generation enabled On a dedicated GPU bake times are relatively fast thanks to the GPU based lightmap baking usually below 1 minute for a scene of medium complexity ReflectionProbe Placed manually by the user Summary If you are unsure about which GI technique to use For desktop games it s a good idea to start with SDFGI first as it requires the least amount of setup Move to other GI techniques later if needed To improve performance on low end GPUs and integrated graphics consider adding an option to disable SDFGI or VoxelGI in your game s settings SDFGI can be disabled in the Environment resource and VoxelGI can be disabled by hiding the VoxelGI node s To further improve visuals on high end setups add an option to enable SSIL in your game s settings For mobile games LightmapGI and ReflectionProbes are the only supported options See also Alternatives to GI techniques See also You can compare global illumination techniques in action using the Global Illumination demo project Which global illumination mode should I use on meshes and lights Regardless of which global illumination technique you use there is no universally better global illumination mode Still here are some recommendations for meshes For static level geometry use the Static global illumination mode default For small dynamic geometry and players enemies use the Disabled global illumination mode Small dynamic geometry will not be able to contribute a significant amount of indirect lighting due to the geometry being smaller than a voxel If you need indirect lighting for small dynamic objects it can be simulated using an OmniLight3D or SpotLight3D node parented to the object For large dynamic level geometry such as a moving train use the Dynamic global illumination mode Note that this only has an effect with VoxelGI as SDFGI and LightmapGI do not support global illumination with dynamic objects Here are some recommendations for light bake modes For static level lighting use the Static bake mode The Static mode is also suitable for dynamic lights that don t change much during gameplay such as a flickering torch For short lived dynamic effects such as a weapon use the Disabled bake mode to improve performance For long lived dynamic effects such as a rotating alarm light use the Dynamic bake mode to improve quality default Note that this only has an effect with VoxelGI and SDFGI as LightmapGI does not support global illumination with dynamic lights Alternatives to GI techniques If none of the GI techniques mentioned above fits it s still possible to simulate GI by placing additional lights manually This requires more manual work but it can offer good performance and good visuals if done right This approach is still used in many modern games to this day When targeting low end hardware in situations where using LightmapGI is not viable such as procedurally generated levels relying on environment lighting alone or a constant ambient light factor may be a necessity This may result in flatter visuals but adjusting the ambient light color and sky contribution still makes it possible to achieve acceptable results in most cases User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using Voxel global illumination VoxelGI is a form of fully real time global illumination intended to be used for small medium scale 3D scenes VoxelGI is fairly demanding on the GPU so it s best used when targeting dedicated graphics cards Important VoxelGI is only supported when using the Forward Plus rendering backend not the Forward Mobile or Compatibility backends See also Not sure if VoxelGI is suited to your needs See Which global illumination technique should I use for a comparison of GI techniques available in Godot 4 Visual comparison VoxelGI disabled VoxelGI enabled Setting up VoxelGI Make sure your static level geometry is imported with the Light Baking option set to Static or Static Lightmaps in the Import dock For manually added MeshInstance3D nodes make sure the Global Illumination Mode property is set to Static in the inspector Create a VoxelGI node in the Scene tree dock Move the VoxelGI node to the center of the area you want it to cover by dragging the manipulation gizmo in the 3D viewport Then adjust the VoxelGI s extents by dragging the red points in the 3D viewport or enter values in the inspector Make sure the VoxelGI s extents aren t unnecessarily large or quality will suffer Select the VoxelGI node and click Bake at the top of the 3D editor viewport This will take at least a few seconds to complete depending on the number of VoxelGI subdivisions and scene complexity If at least one mesh contained within the VoxelGI s extents has its global illumination mode set to Static you should see indirect lighting appear within the scene Note To avoid bloating text based scene files with large amounts of binary data make sure the VoxelGIData resource is always saved to an external binary file This file must be saved with a res binary resource extension instead of tres text based resource Using an external binary resource for VoxelGIData will keep your text based scene small while ensuring it loads and saves quickly VoxelGI node properties The following properties can be adjusted in the VoxelGI node inspector before baking Subdiv Higher values result in more precise indirect lighting at the cost of lower performance longer bake times and increased storage requirements Extents Represents the size of the box in which indirect lighting should be baked Extents are centered around the VoxelGI node s origin The following properties can be adjusted in the VoxelGIData resource that is contained within a VoxelGI node after it has been baked Dynamic Range The maximum brightness that can be represented in indirect lighting Higher values make it possible to represent brighter indirect light at the cost of lower precision which can result in visible banding If in doubt leave this unchanged Energy The indirect lighting s overall energy This also effects the energy of direct lighting emitted by meshes with emissive materials Bias Optional bias added to lookups into the voxel buffer at run time This helps avoid self occlusion artifacts Normal Bias Similar to Bias but offsets the lookup into the voxel buffer by the surface normal This also helps avoid self occlusion artifacts Higher values reduce self reflections visible in non rough materials at the cost of more visible light leaking and flatter looking indirect lighting To prioritize hiding self reflections over lighting quality set Bias to 0 0 and Normal Bias to a value between 1 0 and 2 0 Propagation The energy factor to use for bounced indirect lighting Higher values will result in brighter more diffuse lighting which may end up looking too flat When Use Two Bounces is enabled you may want to decrease Propagation to compensate for the overall brighter indirect lighting Use Two Bounces If enabled lighting will bounce twice instead of just once This results in more realistic looking indirect lighting and makes indirect lighting visible in reflections as well Enabling this generally has no noticeable performance cost Interior If enabled environment sky lighting will not be taken into account by VoxelGI This should be enabled in indoor scenes to avoid light leaking from the environment VoxelGI interaction with lights and objects To ensure correct visuals when using VoxelGI you must configure your meshes and lights global illumination properties according to their purpose in the scene static or dynamic There are 3 global illumination modes available for meshes Disabled The mesh won t be taken into account for VoxelGI baking The mesh will receive indirect lighting from the scene but it will not contribute indirect lighting to the scene Static default The mesh will be taken into account for VoxelGI baking The mesh will both receive and contribute indirect lighting to the scene If the mesh is changed in any way after baking the VoxelGI node must be baked again Otherwise indirect lighting will look incorrect Dynamic The mesh won t be taken into account for VoxelGI baking but it will still receive and contribute indirect lighting to the scene in real time This option is much slower compared to Static Only use the Dynamic global illumination mode on large meshes that will change significantly during gameplay Additionally there are 3 bake modes available for lights DirectionalLight3D OmniLight3D and SpotLight3D Disabled The light won t be taken into account for VoxelGI baking The light won t contribute indirect lighting to the scene Static The light will be taken into account for VoxelGI baking The light will contribute indirect lighting to the scene If the light is changed in any way after baking the VoxelGI node must be baked again or indirect lighting will look incorrect If in doubt use this mode for level lighting Dynamic default The light won t be taken into account for VoxelGI baking but it will still contribute indirect lighting to the scene in real time This option is slower compared to Static Only use the Dynamic global illumination mode on lights that will change significantly during gameplay Note The amount of indirect energy emitted by a light depends on its color energy and indirect energy properties To make a specific light emit more or less indirect energy without affecting the amount of direct light emitted by the light adjust the Indirect Energy property in the Light3D inspector See also See Which global illumination mode should I use on meshes and lights for general usage recommendations Adjusting VoxelGI performance and quality Since VoxelGI is relatively demanding it will perform best on systems with recent dedicated GPUs On older dedicated GPUs and integrated graphics tweaking the settings is necessary to achieve reasonable performance In the Project Settings Rendering Global Illumination section VoxelGI quality can also be adjusted in two ways Voxel Gi Quality If set to Low instead of High voxel cone tracing will only use 4 taps instead of 6 This speeds up rendering at the cost of less pronounced ambient occlusion Gi Use Half Resolution If enabled both VoxelGI and SDFGI will have their GI buffer rendering at halved resolution For instance when rendering in 3840 2160 the GI buffer will be computed at a 1920 1080 resolution Enabling this option saves a lot of GPU time but it can introduce visible aliasing around thin details Note that the Advanced toggle must be enabled in the project settings dialog for the above settings to be visible Additionally VoxelGI can be disabled entirely by hiding the VoxelGI node This can be used for comparison purposes or to improve performance on low end systems Reducing VoxelGI light leaks and artifacts After baking VoxelGI you may notice indirect light is leaking at some spots in your level geometry This can be remedied in several ways For both light leaking and artifacts try moving or rotating the VoxelGI node then bake it again To combat light leaking in general ensure your level geometry is fully sealed This is best done in the 3D modeling software used to design the level but primitive MeshInstance3D nodes with their global illumination mode set to Static can also be used To combat light leaking with thin geometry it s recommended to make the geometry in question thicker If this is not possible then add a primitive MeshInstance3D node with its global illumination mode set to Static Bake VoxelGI again then hide the primitive MeshInstance3D node it will still be taken into account by VoxelGI For optimal results the MeshInstance3D should have a material whose color matches the original thin geometry To combat artifacts that can appear on reflective surfaces try increasing Bias and or Normal Bias in the VoxelGIData resource as described above Do not increase these values too high or light leaking will become more pronounced If you notice VoxelGI nodes popping in and out of existence as the camera moves this is most likely because the engine is rendering too many VoxelGI instances at once Godot is limited to rendering 8 VoxelGI nodes at once which means up to 8 instances can be in the camera view before some of them will start flickering Additionally for performance reasons Godot can only blend between 2 VoxelGI nodes at a given pixel on the screen If you have more than 2 VoxelGI nodes overlapping global illumination may appear to flicker as the camera moves or rotates User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Signed distance field global illumination SDFGI Signed distance field global illumination SDFGI is a novel technique available in Godot 4 0 It provides semi real time global illumination that scales to any world size and works with procedurally generated levels SDFGI supports dynamic lights but not dynamic occluders or dynamic emissive surfaces Therefore SDFGI provides better real time ability than baked lightmaps but worse real time ability than VoxelGI From a performance standpoint SDFGI is one of the most demanding global illumination techniques in Godot Like with VoxelGI there are still many settings available to tweak its performance requirements at the cost of quality Important SDFGI is only supported when using the Forward Plus rendering backend not the Forward Mobile or Compatibility backends See also Not sure if SDFGI is suited to your needs See Which global illumination technique should I use for a comparison of GI techniques available in Godot 4 Visual comparison SDFGI disabled SDFGI enabled Setting up SDFGI In Godot SDFGI is the global illumination technique with the fewest required steps to enable Make sure your MeshInstance nodes have their Global Illumination Mode property set to Static in the inspector For imported 3D scenes the bake mode can be configured in the Import dock after selecting the 3D scene file in the FileSystem dock Add a WorldEnvironment node and create an Environment resource for it Edit the Environment resource scroll down to the SDFGI section and unfold it Enable SDFGI Enabled SDFGI will automatically follow the camera when it moves so you do not need to configure extents unlike VoxelGI Environment SDFGI properties In the Environment resource there are several properties available to adjust SDFGI appearance and quality Use Occlusion If enabled SDFGI will throw additional rays to find and reduce light leaks This has a performance cost so only enable this property if you actually need it Read Sky Light If enabled the environment lighting is represented in the global illumination This should be enabled in outdoor scenes and disabled in fully indoor scenes Bounce Feedback By default indirect lighting only bounces once when using SDFGI Setting this value above 0 0 will cause SDFGI to bounce more than once which provides more realistic indirect lighting at a small performance cost Sensible values are usually between 0 3 and 1 0 depending on the scene Note that in some scenes values above 0 5 can cause infinite feedback loops to happen causing the scene to become extremely bright in a few seconds time If your indirect lighting looks splotchy consider increasing this value above 0 0 to get more uniform looking lighting If your lighting ends up looking too bright as a result decrease Energy to compensate Cascades Higher values result in more detailed GI information and or greater maximum distance but are significantly more expensive on the CPU and GPU The performance cost of having more cascades especially increases when the camera moves fast so consider decreasing this to 4 or lower if your camera moves fast Min Cell Size The minimum SDFGI cell size to use for the nearest most detailed cascade Lower values result in more accurate indirect lighting and reflection at the cost of lower performance Adjusting this setting also affects Cascade 0 Distance and Max Distance automatically Cascade 0 Distance The distance at which the nearest most detailed cascade ends Greater values make the nearest cascade transition less noticeable at the cost of reducing the level of detail in the nearest cascade Adjusting this setting also affects Min Cell Size and Max Distance automatically Max Distance Controls how far away the signed distance field will be computed for the least detailed cascade SDFGI will not have any effect past this distance This value should always be set below the Camera s Far value as there is no benefit in computing SDFGI past the viewing distance Adjusting this setting also affects Min Cell Size and Cascade 0 Distance automatically Y Scale Controls how far apart SDFGI probes are spread vertically By default vertical spread is the same as horizontal However since most game scenes aren t highly vertical setting the Y Scale to 75 or even 50 can provide better quality and reduce light leaks without impacting performance Energy The brightness multiplier for SDFGI s indirect lighting Normal Bias The normal bias to use for SDFGI s probe ray bounces Unlike Probe Bias this only increases the value in relation to the mesh s normals This makes the bias adjustment more nuanced and avoids increasing the bias too much for no reason Increase this value if you notice striping artifacts in indirect lighting or reflections Probe Bias The bias to use for SDFGI s probe ray bounces Increase this value if you notice striping artifacts in indirect lighting or reflections SDFGI interaction with lights and objects The amount of indirect energy emitted by a light is governed by its color energy and indirect energy properties To make a specific light emit more or less indirect energy without affecting the amount of direct light emitted by the light adjust the Indirect Energy property in the Light3D inspector To ensure correct visuals when using SDFGI you must configure your meshes and lights global illumination properties according to their purpose in the scene static or dynamic There are 3 global illumination modes available for meshes Disabled The mesh won t be taken into account in SDFGI generation The mesh will receive indirect lighting from the scene but it will not contribute indirect lighting to the scene Static default The mesh will be taken into account in SDFGI generation The mesh will both receive and contribute indirect lighting to the scene If the mesh is changed in any way after SDFGI is generated the camera must move away from the object then move back close to it for SDFGI to regenerate Alternatively SDFGI can be toggled off and back on If neither is done indirect lighting will look incorrect Dynamic not supported with SDFGI The mesh won t be taken into account in SDFGI generation The mesh will receive indirect lighting from the scene but it will not contribute indirect lighting to the scene This acts identical to the Disabled bake mode when using SDFGI Additionally there are 3 bake modes available for lights DirectionalLight3D OmniLight3D and SpotLight3D Disabled The light won t be taken into account for SDFGI baking The light won t contribute indirect lighting to the scene Static The light will be taken into account for SDFGI baking The light will contribute indirect lighting to the scene If the light is changed in any way after baking indirect lighting will look incorrect until the camera moves away from the light and back which causes SDFGI to be baked again will look incorrect If in doubt use this mode for level lighting Dynamic default The light won t be taken into account for SDFGI baking but it will still contribute indirect lighting to the scene in real time This option is slower compared to Static Only use the Dynamic global illumination mode on lights that will change significantly during gameplay Note The amount of indirect energy emitted by a light depends on its color energy and indirect energy properties To make a specific light emit more or less indirect energy without affecting the amount of direct light emitted by the light adjust the Indirect Energy property in the Light3D inspector See also See Which global illumination mode should I use on meshes and lights for general usage recommendations Adjusting SDFGI performance and quality Since SDFGI is relatively demanding it will perform best on systems with recent dedicated GPUs On older dedicated GPUs and integrated graphics tweaking the settings is necessary to achieve reasonable performance In the Project Settings Rendering Global Illumination section SDFGI quality can also be adjusted in several ways Sdfgi Probe Ray Count Higher values result in better quality at the cost of higher GPU usage If this value is set too low this can cause surfaces to have visible splotches of indirect lighting on them due to the number of rays thrown being very low Sdfgi Frames To Converge Higher values result in better quality but GI will take more time to fully converge The effect of this setting is especially noticeable when first loading a scene or when lights with a bake mode other than Disabled are moving fast If this value is set too low this can cause surfaces to have visible splotches of indirect lighting on them due to the number of rays thrown being very low If your scene s lighting doesn t have fast moving lights that contribute to GI consider setting this to 30 to improve quality without impacting performance Sdfgi Frames To Update Light Lower values result in moving lights being reflected faster at the cost of higher GPU usage If your scene s lighting doesn t have fast moving lights that contribute to GI consider setting this to 16 to improve performance Gi Use Half Resolution If enabled both SDFGI and VoxelGI will have their GI buffer rendering at halved resolution For instance when rendering in 3840 2160 the GI buffer will be computed at a 1920 1080 resolution Enabling this option saves a lot of GPU time but it can introduce visible aliasing around thin details SDFGI rendering performance also depends on the number of cascades and the cell size chosen in the Environment resource see above SDFGI caveats SDFGI has some downsides due to its cascaded nature When the camera moves cascade shifts may be visible in indirect lighting This can be alleviated by adjusting the cascade size but also by adding fog which will make distant cascade shifts less noticeable Additionally performance will suffer if the camera moves too fast This can be fixed in two ways Ensuring the camera doesn t move too fast in any given situation Temporarily disabling SDFGI in the Environment resource if the camera needs to be moved at a high speed then enabling SDFGI once the camera speed slows down When SDFGI is enabled it will also take some time for global illumination to be fully converged 25 frames by default This can create a noticeable transition effect while GI is still converging To hide this you can use a ColorRect node that spans the whole viewport and fade it out when switching scenes using an AnimationPlayer node The signed distance field is only updated when the camera moves in and out of a cascade This means that if geometry is modified in the distance the global illumination appearance will be correct once the camera gets closer However if a nearby object with a bake mode set to Static or Dynamic is moved such as a door the global illumination will appear incorrect until the camera moves away from the object SDFGI s sharp reflections are only visible on opaque materials Transparent materials will only use rough reflections even if the material s roughness is lower than 0 2 User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using Lightmap global illumination Baked lightmaps are a workflow for adding indirect or fully baked lighting to a scene Unlike the VoxelGI and SDFGI approaches baked lightmaps work fine on low end PCs and mobile devices as they consume almost no resources at run time Also unlike VoxelGI and SDFGI baked lightmaps can optionally be used to store direct lighting which provides even further performance gains Unlike VoxelGI and SDFGI baked lightmaps are completely static Once baked they can t be modified at all They also don t provide the scene with reflections so using Reflection probes together with it on interiors or using a Sky on exteriors is a requirement to get good quality As they are baked they have fewer problems than VoxelGI and SDFGI regarding light bleeding and indirect light will often look better The downside is that baking lightmaps takes longer compared to baking VoxelGI While baking VoxelGI can be done in a matter of seconds baking lightmaps can take several minutes if not more This can slow down iteration speed significantly so it is recommended to bake lightmaps only when you actually need to see changes in lighting Since Godot 4 0 lightmaps are baked on the GPU making light baking faster if you have a mid range or high end dedicated GPU Baking lightmaps will also reserve baked materials UV2 slot which means you can no longer use it for other purposes in materials either in the built in Standard Material 3D and ORM Material 3D or in custom shaders Despite their lack of flexibility baked lightmaps typically offer both the best quality and performance at the same time in mostly static scenes This makes lightmaps still popular in game development despite lightmaps being the oldest technique for global illumination in video games See also Not sure if LightmapGI is suited to your needs See Which global illumination technique should I use for a comparison of GI techniques available in Godot 4 Visual comparison LightmapGI disabled LightmapGI enabled with indirect light baked only Direct light is still real time allowing for subtle changes during gameplay LightmapGI enabled with direct and indirect light baked Best performance but lower quality visuals Notice the blurrier sun shadow in the top right corner Here are some comparisons of how LightmapGI vs VoxelGI look Notice that lightmaps are more accurate but also suffer from the fact that lighting is on an unwrapped texture so transitions and resolution may not be that good VoxelGI looks less accurate as it s an approximation but smoother overall SDFGI is also less accurate compared to LightmapGI However SDFGI can support large open worlds without any need for baking Setting up Warning Baking lightmaps in the Android and web editors is not supported due to graphics API limitations on those devices On Android and web platforms only rendering lightmaps that were baked on a desktop PC is supported First of all before the lightmapper can do anything the objects to be baked need a UV2 layer and a texture size A UV2 layer is a set of secondary texture coordinates that ensures any face in the object has its own place in the UV map Faces must not share pixels in the texture There are a few ways to ensure your object has a unique UV2 layer and texture size Unwrap on scene import recommended In most scenarios this is the best approach to use The only downside is that on large models unwrapping can take a while on import Nonetheless Godot will cache the UV2 across reimports so it will only be regenerated when needed Select the imported scene in the filesystem dock then go to the Import dock There the following option can be modified The Meshes Light Baking option must be set to Static Lightmaps VoxelGI SDFGI LightmapGI When unwrapping on import you can adjust the texture size using the Meshes Lightmap Texel Size option Lower values will result in more detailed lightmaps possibly resulting in higher visual quality at the cost of longer bake times and larger lightmap file sizes The default value of 0 2 is suited for small medium sized scenes but you may want to increase it to 0 5 or even more for larger scenes This is especially the case if you re baking indirect lighting only as indirect light is low frequency data which means it doesn t need high resolution textures to be accurately represented The effect of setting this option is that all meshes within the scene will have their UV2 maps properly generated Warning When reusing a mesh within a scene keep in mind that UVs will be generated for the first instance found If the mesh is re used with different scales and the scales are wildly different more than half or twice this will result in inefficient lightmaps To avoid this adjust the Lightmap Scale property in the GeometryInstance3D section of a MeshInstance3D node This lets you increase the level of lightmap detail for specific MeshInstance3D nodes but not decrease it Also the unwrap_cache files should not be ignored in version control as these files guarantee that UV2 reimports are consistent across platforms and engine versions Unwrap from within Godot Warning If this Mesh menu operation is used on an imported 3D scene the generated UV2 will be lost when the scene is reloaded Godot has an option to unwrap meshes and visualize the UV channels After selecting a MeshInstance3D node it can be found in the Mesh menu at the top of the 3D editor viewport This will generate a second set of UV2 coordinates which can be used for baking It will also set the texture size automatically Unwrap from your 3D modeling software The last option is to do it from your favorite 3D app This approach is generally not recommended but it s explained so that you know it exists The main advantage is that on complex objects that you may want to re import a lot the texture generation process can be quite costly within Godot so having it unwrapped before import can be faster Simply do an unwrap on the second UV2 layer Then import the 3D scene normally Remember you will need to set the texture size on the mesh after import If you use external meshes on import the size will be kept Be wary that most unwrappers in 3D modeling software are not quality oriented as they are meant to work quickly You will mostly need to use seams or other techniques to create better unwrapping Generating UV2 for primitive meshes Note This option is only available for primitive meshes such as BoxMesh CylinderMesh PlaneMesh etc Enabling UV2 on primitive meshes allows you to make them receive and contribute to baked lighting This can be used in certain lighting setups For instance you could hide a torus that has an emissive material after baking lightmaps to create an area light that follows the shape of a torus By default primitive meshes do not have UV2 generated to save resources as these meshes may be created during gameplay You can edit a primitive mesh in the inspector and enable Add UV2 to make the engine procedurally generate UV2 for a primitive mesh The default UV2 Padding value is tuned to avoid most lightmap bleeding without wasting too much space on the edges If you notice lightmap bleeding on a specific primitive mesh only you may have to increase UV2 Padding Lightmap Size Hint represents the size taken by a single mesh on the lightmap texture which varies depending on the mesh s size properties and the UV2 Padding value Lightmap Size Hint should not be manually changed as any modifications will be lost when the scene is reloaded Checking UV2 In the Mesh menu mentioned before the UV2 texture coordinates can be visualized If something is failing double check that the meshes have these UV2 coordinates Setting up the scene Before anything is done a LightmapGI node needs to be added to a scene This will enable light baking on all nodes and sub nodes in that scene even on instanced scenes A sub scene can be instanced several times as this is supported by the baker Each instance will be assigned a lightmap of its own To avoid issues with inconsistent lightmap texel scaling make sure to respect the rule about mesh scaling mentioned before Setting up meshes For a MeshInstance3D node to take part in the baking process it needs to have its bake mode set to Static Meshes that have their bake mode set to Disabled or Dynamic will be ignored by the lightmapper When auto generating lightmaps on scene import this is enabled automatically Setting up lights Lights are baked with indirect light only by default This means that shadowmapping and lighting are still dynamic and affect moving objects but light bounces from that light will be baked Lights can be disabled no bake or be fully baked direct and indirect This can be controlled from the Bake Mode menu in lights The modes are Disabled The light is ignored when baking lightmaps This is the mode to use for dynamic lighting effects such as explosions and weapon effects Warning Hiding a light has no effect on the resulting lightmap bake This means you must use the Disabled bake mode instead of hiding the Light node by disabling its Visible property Dynamic This is the default mode and is a compromise between performance and real time friendliness Only indirect lighting will be baked Direct light and shadows are still real time as they would be without LightmapGI This mode allows performing subtle changes to a light s color energy and position while still looking fairly correct For example you can use this to create flickering static torches that have their indirect light baked Static Both indirect and direct lighting will be baked Since static surfaces can skip lighting and shadow computations entirely this mode provides the best performance along with smooth shadows that never fade based on distance The real time light will not affect baked surfaces anymore but it will still affect dynamic objects When using the All bake mode on a light dynamic objects will not cast real time shadows onto baked surfaces so you need to use a different approach such as blob shadows instead Blob shadows can be implemented with a Decal node The light will not be adjustable at all during gameplay Moving the light or changing its color or energy will not have any effect on static surfaces Since bake modes can be adjusted on a per light basis it is possible to create hybrid baked light setups One popular option is to use a real time DirectionalLight with its bake mode set to Dynamic and use the Static bake mode for OmniLights and SpotLights This provides good performance while still allowing dynamic objects to cast real time shadows in outdoor areas Fully baked lights can also make use of light nodes Size omni spot or Angular Distance directional properties This allows for shadows with realistic penumbra that increases in size as the distance between the caster and the shadow increases This also has a lower performance cost compared to real time PCSS shadows as only dynamic objects have real time shadows rendered on them Baking To begin the bake process click the Bake Lightmaps button at the top of the 3D editor viewport when selecting the LightmapGI node This can take from seconds to minutes or hours depending on scene size bake method and quality selected Warning Baking lightmaps is a process that can require a lot of video memory especially if the resulting texture is large Due to internal limitations the engine may also crash if the generated texture size is too large even on systems with a lot of video memory To avoid crashes make sure the lightmap texel size in the Import dock is set to a high enough value Tweaks Quality Four bake quality modes are provided Low Medium High and Ultra Higher quality takes more time but result in a better looking lightmap with less noise The difference is especially noticeable with emissive materials or areas that get little to no direct lighting Each bake quality mode can be further adjusted in the Project Settings Bounces The number of bounces to use for indirect lighting The default value 3 is a good compromise between bake times and quality Higher values will make light bounce around more times before it stops which makes indirect lighting look smoother but also possibly brighter depending on materials and geometry Bounce Indirect Energy The global multiplier to use when baking lights indirect energy This multiplies each light s own Indirect Energy value Values different from 1 0 are not physically accurate but can be used for artistic effect Directional If enabled stores directional information for lightmaps This improves normal mapped materials appearance for baked surfaces especially with fully baked lights since they also have direct light baked The downside is that directional lightmaps are slightly more expensive to render They also require more time to bake and result in larger file sizes Interior If enabled environment lighting will not be sourced Use this for purely indoor scenes to avoid light leaks Use Texture for Bounces If enabled a texture with the lighting information will be generated to speed up the generation of indirect lighting at the cost of some accuracy The geometry might exhibit extra light leak artifacts when using low resolution lightmaps or UVs that stretch the lightmap significantly across surfaces Leave this enabled if unsure Use Denoiser If enabled uses a denoising algorithm to make the lightmap significantly less noisy This increases bake times and can occasionally introduce artifacts but the result is often worth it See Denoising for more information Denoiser Strength The strength of denoising step applied to the generated lightmaps Higher values are more effective at removing noise but can reduce shadow detail for static shadows Only effective if denoising is enabled and the denoising method is JNLM OIDN does not have a denoiser strength setting Bias The offset value to use for shadows in 3D units You generally don t need to change this value except if you run into issues with light bleeding or dark spots in your lightmap after baking This setting does not affect real time shadows casted on baked surfaces for lights with Dynamic bake mode Max Texture Size The maximum texture size for the generated texture atlas Higher values will result in fewer slices being generated but may not work on all hardware as a result of hardware limitations on texture sizes Leave this at its default value of 16384 if unsure Environment Mode Controls how environment lighting is sourced when baking lightmaps The default value of Scene is suited for levels with visible exterior parts For purely indoor scenes set this to Disabled to avoid light leaks and speed up baking This can also be set to Custom Sky or Custom Color to use environment lighting that differs from the actual scene s environment sky Gen Probes Subdiv See Dynamic objects Data Light Data See Lightmap data Balancing bake times with quality Since high quality bakes can take very long up to dozens of minutes for large complex scenes it is recommended to use lower quality settings at first Then once you are confident with your scene s lighting setup raise the quality settings and perform a final bake before exporting your project Reducing the lightmap resolution by increasing Lightmap Texel Size on the imported 3D scenes will also speed up baking significantly However this will require you to reimport all lightmapped 3D scenes before you can bake lightmaps again Denoising Since baking lightmaps relies on raytracing there will always be visible noise in the raw baked lightmap Noise is especially visible in areas that are difficult to reach by bounced light such as indoor areas with small openings where the sunlight can enter Noise can be reduced by increasing bake quality but doing so will increase bake times significantly Comparison between denoising disabled and enabled with the default JNLM denoiser To combat noise without increasing bake times too much a denoiser can be used A denoiser is an algorithm that runs on the final baked lightmap detects patterns of noise and softens them while attempting to best preserve detail Godot offers two denoising algorithms JNLM Non Local Means with Joint Filtering JNLM is the default denoising method and is included in Godot It uses a simple but efficient denoising algorithm known as non local means JNLM runs on the GPU using a compute shader and is compatible with any GPU that can run Godot 4 s Vulkan based rendering methods No additional setup is required JNLM s denoising can be adjusted using the Denoiser Strength property that is visible when Use Denoiser enabled Higher values can be more effective at removing noise at the cost of suppressing shadow detail for static shadows Comparison between JNLM denoiser strength values Higher values can reduce detail OIDN Open Image Denoise Unlike JNLM OIDN uses a machine learning approach to denoising lightmaps It features a model specifically trained to remove noise from lightmaps while preserving more shadow detail in most scenes compared to JNLM OIDN can run on the GPU if hardware acceleration is configured With a modern high end GPU this can provide a speedup of over 50 over CPU based denoising On AMD GPUs HIP must be installed and configured On NVIDIA GPUs CUDA must be installed and configured This may automatically be done by the NVIDIA installer but on Linux CUDA libraries may not be installed by default Double check that the CUDA packages from your Linux distribution are installed On Intel GPUs SYCL must be installed and configured If hardware acceleration is not available OIDN will fall back to multithreaded CPU based denoising To confirm whether GPU based denoising is working use a GPU utilization monitor while baking lightmaps and look at the GPU utilization percentage and VRAM utilization while the denoising step is shown in the Godot editor The nvidia smi command line tool can be useful for this OIDN is not included with Godot due to its relatively large download size You can download precompiled OIDN binary packages from its website Extract the package to a location on your PC then specify the path to the oidnDenoise executable in the Editor Settings FileSystem Tools OIDN OIDN Denoise Path This executable is located within the bin folder of the binary package you extracted After specifying the path to the OIDN denoising executable change the denoising method in the project settings by setting Rendering Lightmapping Denoiser to OIDN This will affect all lightmap bakes on this project after the setting is changed Note The denoising method is configured in the project settings instead of the editor settings This is done so that different team members working on the same project are assured to be using the same denoising method for consistent results Comparison between JNLM and OIDN denoisers Notice how OIDN better preserves detail and reduces seams across different objects Dynamic objects Unlike VoxelGI and SDFGI dynamic objects receive indirect lighting differently compared to static objects This is because lightmapping is only performed on static objects To display indirect lighting on dynamic objects a 3D probe system is used with light probes being spread throughout the scene When baking lightmaps the lightmapper will calculate the amount of indirect light received by the probe Direct light is not stored within light probes even for lights that have their bake mode set to Static as dynamic objects continue to be lit in real time There are 2 ways to add light probes to a scene Automatic Set Gen Probes Subdiv to a value other than Disabled then bake lightmaps The default is 8 but you can choose a greater value to improve precision at the cost of longer bake times and larger output file size Manual In addition or as an alternative to generating probes automatically you can add light probes manually by adding LightmapProbe nodes to the scene This can be used to improve lighting detail in areas frequently travelled by dynamic objects After placing LightmapProbe nodes in the scene you must bake lightmaps again for them to be effective Note After baking lightmaps you will notice white spheres in the 3D scene that represent how baked lighting will affect dynamic objects These spheres do not appear in the running project If you want to hide these spheres in the editor toggle View Gizmos LightmapGI at the top of the 3D editor a closed eye icon indicates the gizmo is hidden Lightmap data The Data Light Data property in the LightmapGI node contains the lightmap data after baking Textures are saved to disk but this also contains the capture data for dynamic objects which can be heavy If you are using a scene in tscn format you should save this resource to an external binary lmbake file to avoid bloating the tscn scene with binary data encoded in Base64 Tip The generated EXR file can be viewed and even edited using an image editor to perform post processing if needed However keep in mind that changes to the EXR file will be lost when baking lightmaps again Reducing LightmapGI artifacts If you notice LightmapGI nodes popping in and out of existence as the camera moves this is most likely because the engine is rendering too many LightmapGI instances at once Godot is limited to rendering 8 LightmapGI nodes at once which means up to 8 instances can be in the camera view before some of them will start flickering User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Reflection probes Note Reflection probes are only supported in the Clustered Forward and Forward Mobile rendering backends not the Compatibility backend As stated in the Standard Material 3D and ORM Material 3D objects can show reflected and or diffuse light Reflection probes are used as a source of reflected and ambient light for objects inside their area of influence They can be used to provide more accurate reflections than VoxelGI and SDFGI while being fairly cheap on system resources Since reflection probes can also store ambient light they can be used as a low end alternative to VoxelGI and SDFGI when baked lightmaps aren t viable e g in procedurally generated levels Reflection probes can also be used at the same time as screen space reflections to provide reflections for off screen objects In this case Godot will blend together the screen space reflections and reflections from reflection probes See also Not sure if ReflectionProbe is suited to your needs See Which global illumination technique should I use for a comparison of GI techniques available in Godot 4 Visual comparison Reflection probe disabled Environment sky is used as a fallback Reflection probe enabled Reflection probe enabled with LightmapGI used at the same time The lightmap appears in the reflection By combining reflection probes with screen space reflections you can get the best of both worlds high quality reflections for general room structure that remain present when off screen while also having real time reflections for small details Reflections in a room using ReflectionProbe only Notice how small details don t have any reflections Reflections in a room using screen space reflections only Notice how the reflection on the sides of the room s walls is partly missing due to being off screen Reflections in a room using ReflectionProbe and screen space reflections together The screen space reflections are blended with the reflection probe acting as a fallback in situations where the reflection probe fails to display any reflection Setting up a ReflectionProbe Add a ReflectionProbe node Configure the ReflectionProbe s extents in the inspector to fit your scene To get reasonably accurate reflections you should generally have one ReflectionProbe node per room sometimes more for large rooms Tip Remember that ReflectionProbe extents don t have to be square and you can even rotate the ReflectionProbe node to fit rooms that aren t aligned with the X Z grid Use this to your advantage to better cover rooms without having to place too many ReflectionProbe nodes ReflectionProbe properties Update Mode Controls when the reflection probe updates Once only renders the scene once every time the ReflectionProbe is moved This makes it much faster to render compared to the Always update mode which forces the probe to re render everything around it every frame Leave this property on Once default unless you need the reflection probe to update every frame Intensity The brightness of the reflections and ambient lighting This usually doesn t need to be changed from its default value of 1 0 but you can decrease it 1 0 if you find that reflections look too strong Max Distance Controls the maximum distance used by the ReflectionProbe s internal camera The distance is always at least equal to the Extents but this can be increased to make objects located outside the extents visible in reflections This property does not affect the maximum distance at which the ReflectionProbe itself is visible Extents The area that will be affected by the ReflectionProbe s lighting and reflections Origin Offset The origin to use for the internal camera used for reflection probe rendering This must always be constrained within the Extents If needed adjust this to prevent the reflection from being obstructed by a solid object located exactly at the center of the ReflectionProbe Box Projection Controls whether parallax correction should be used when rendering the reflection probe This adjusts the reflection s appearance depending on the camera s position relative to the reflection probe This has a small performance cost but the quality increase is often worth it in box shaped rooms Note that this effect doesn t work quite as well in rooms with less regular shapes such as ellipse shaped rooms Interior If enabled ambient lighting will not be sourced from the environment sky and the background sky won t be rendered onto the reflection probe Enable Shadows Controls whether real time light shadows should be rendered within the reflection probe Enable this to improve reflection quality at the cost of performance This should be left disabled for reflection probes with the Always mode as it s very expensive to render reflections with shadows every frame Fully baked light shadows are not affected by this setting and will be rendered in the reflection probe regardless Cull Mask Controls which objects are visible in the reflection This can be used to improve performance by excluding small objects from the reflection This can also be used to prevent an object from having self reflection artifacts in situations where Origin Offset can t be used Mesh LOD Threshold The automatic level of detail threshold to use for rendering meshes within the reflection This only affects meshes that have automatic LODs generated for them Higher values can improve performance by using less detailed geometry especially for objects that are far away from the reflection s origin The visual difference of using less detailed objects is usually not very noticeable during gameplay especially in rough reflections The Ambient category features several properties to adjust ambient lighting rendered by the ReflectionProbe Mode If set to Disabled no ambient light is added by the probe If set to Environment the ambient light color is automatically sampled from the environment sky if Interior is disabled and the reflection s average color If set to Constant Color the color specified in the Color property is used instead The Constant Color mode can be used as an approximation of area lighting Color The color to use when the ambient light mode is set to Constant Mode Color Energy The multiplier to use for the ambient light custom Color This only has an effect when the ambient light mode is Custom Color ReflectionProbe blending To make transitions between reflection sources smoother Godot supports automatic probe blending Up to 4 ReflectionProbes can be blended together at a given location A ReflectionProbe will also fade out smoothly back to environment lighting when it isn t touching any other ReflectionProbe node SDFGI and VoxelGI will blend in smoothly with ReflectionProbes if used This allows placing ReflectionProbes strategically to get more accurate or fully real time reflections where needed while still having rough reflections available in the VoxelGI or SDFGI s area of influence To make several ReflectionProbes blend with each other you need to have part of each ReflectionProbe overlap each other s area The extents should only overlap as little possible with other reflection probes to improve rendering performance typically a few units in 3D space Limitations When using the Forward renderer Godot uses a clustering approach for reflection probe rendering As many reflection probes as desired can be added as long as performance allows However there s still a default limit of 512 clustered elements that can be present in the current camera view A clustered element is an omni light a spot light a decal or a reflection probe This limit can be increased by adjusting the Rendering Limits Cluster Builder Max Clustered Elements advanced project setting When using the Forward Mobile backend only 8 reflection probes can be applied on each individual Mesh resource If there are more reflection probes affecting a single mesh not all of them will be rendered on the mesh Similarly when using the Compatibility backend up to 2 reflection probes can be applied per mesh If more than 2 reflection probes affect a single mesh additional probes will not be rendered User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Faking global illumination Why fake global illumination Godot provides several global illumination GI techniques all with their advantages and drawbacks Nonetheless it remains possible to avoid using any GI technique and use a handmade approach instead There are a few reasons for using a handmade approach to global illumination instead of VoxelGI SDFGI or baked lightmaps You need to have good rendering performance but can t afford going through a potentially cumbersome lightmap baking process You need an approach to GI that is fully real time and works in procedurally generated levels You need an approach to GI that is fully real time and does not suffer from significant light leaks The approaches described below only cover indirect diffuse lighting not specular lighting For specular lighting consider using ReflectionProbes which are usually cheap enough to be used in conjunction with this fake GI approach See also Not sure if faking global illumination with lights is suited to your needs See Which global illumination technique should I use for a comparison of GI techniques available in Godot 4 Faking DirectionalLight3D global illumination While the sky provides its own directional lighting the scene s main DirectionalLight3D node typically emits a large amount of light When using a GI technique this light would be reflected on solid surfaces and would bounce back on most outdoors shaded surfaces We can fake this by adding a second DirectionalLight3D node with the following changes Rotate the light by 180 degrees This allows it to represent lighting bounced by the main DirectionalLight3D node Set Shadows to Off This reduces the secondary light s performance burden while also allowing shaded areas to receive some lighting which is what we want here Set Energy to 10 40 of the original value There is no perfect value so experiment with various energy values depending on the light and your typical material colors Set Specular to 0 0 Indirect lighting shouldn t emit visible specular lobes so we need to disable specular lighting entirely for the secondary light Note This approach works best in scenes that are mostly outdoors When going indoors the secondary DirectionalLight3D s light will still be visible as this light has shadows disabled This can be worked around by smoothly decreasing the secondary DirectionalLight3D s energy when entering an indoor area and doing the opposite when leaving the indoor area For instance this can be achieved using an Area3D node and AnimationPlayer Faking positional light global illumination It s possible to follow the same approach as DirectionalLight3D for positional lights OmniLight3D and SpotLight3D However this will require more manual work as this operation needs to be repeated for every positional light node in the scene to look good In an ideal scenario additional OmniLight3Ds should be added at every location where a significant amount of light hits a bright enough surface However due to time constraints this isn t always easily feasible especially when performing procedural level generation If you re in a hurry you can place a secondary OmniLight3D node at the same position as the main OmniLight3D node You can add this node as a child of the main OmniLight3D node to make it easy to move and hide both nodes at the same time In the secondary OmniLight3D node perform the following changes Increase the light s Range by 25 50 This allows the secondary light to lighten what was previously not lit by the original light Set Shadows to Off This reduces the secondary light s performance burden while also allowing shaded areas to receive some lighting which is what we want here Set Energy to 10 40 of the original value There is no perfect value so experiment with various energy values depending on the light and its surroundings Set Specular to 0 Indirect lighting shouldn t emit visible specular lobes so we need to disable specular lighting entirely for the secondary light For SpotLight3D the same trick can be used In this case the secondary OmniLight3D should be placed in a way that reflects where most light will be bounced This is usually close to the SpotLight3D s primary impact location In the example below a SpotLight3D node is used to light up the room s floor However since there is no indirect lighting the rest of the room remains entirely dark In real life the room s walls and ceiling would be lit up by light bouncing around Using an OmniLight3D node positioned between the SpotLight3D s origin and the floor allows simulating this effect User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Environment and post processing Godot 4 provides a redesigned Environment resource as well as a new post processing system with many available effects right out of the box Note As of Godot 4 Environment performance quality settings are defined in the project settings instead of in the Environment resource This makes global adjustments easier as you no longer have to tweak Environment resources individually to suit various hardware configurations Note that most Environment performance quality settings are only visible after enabling the Advanced toggle in the Project Settings Environment The Environment resource stores all the information required for controlling the 2D and 3D rendering environment This includes the sky ambient lighting tone mapping effects and adjustments By itself it does nothing but you can enable it by using it in one of the following locations in order of priority Camera3D node high priority An Environment can be set to a Camera3D node It will have priority over any other setting This is mostly useful when you want to override an existing environment but in general it s a better idea to use the option below WorldEnvironment node medium priority recommended The WorldEnvironment node can be added to any scene but only one can exist per active scene tree Adding more than one will result in a warning Any Environment added has higher priority than the default Environment explained below This means it can be overridden on a per scene basis which makes it quite useful Preview environment and sun low priority Note Since Godot 4 the preview environment and sun system replace the default_env tres file that was used in Godot 3 projects If no WorldEnvironment node or DirectionalLight3D node is present in the current scene the editor will display a preview environment and sun instead This can be disabled using the buttons at the top of the 3D editor Clicking on the 3 vertical dots on the right will display a dialog which allows you to customize the appearance of the preview environment The preview sun and sky is only visible in the editor not in the running project Using the buttons at the bottom of the dialog you can add the preview sun and sky into the scene as nodes Tip If you hold Shift while clicking Add Sun to Scene or Add Environment to Scene in the preview environment editor this will add both a preview sun and environment to the current scene as if you clicked both buttons separately Use this to speed up project setup and prototyping Camera attributes Note In Godot 4 exposure and depth of field information was split from the Environment resource into a separate CameraAttributes resource This allows adjusting those properties independently of other Environment settings more easily The CameraAttributes resource stores exposure and depth of field information It also allows enabling automatic exposure adjustments depending on scene brightness There are two kinds of CameraAttribute resources available CameraAttributesPractical Features are exposed using arbitrary units which are easier to reason about for most game use cases CameraAttributesPhysical Features are exposed using real world units similar to a digital camera For example field of view is set using a focal length in millimeters instead of a value in degrees Recommended when physical accuracy is important such as for photorealistic rendering Both CameraAttribute resource types allow you to use the same features but they are configured differently If you don t know which one to choose use CameraAttributesPractical Note Using a CameraAttributesPhysical on a Camera3D node will lock out FOV and aspect adjustments in that Camera3D as field of view is adjusted in the CameraAttributesPhysical resource instead If used in a WorldEnvironment the CameraAttributesPhysical will not override any Camera3D in the scene A CameraAttributes resource can be added to a Camera3D or a WorldEnvironment node When the current camera has a CameraAttributes set it will override the one set in WorldEnvironment if any In most situations setting the CameraAttributes resource on the Camera3D node instead of the WorldEnvironment is recommended Unlike WorldEnvironment assigning the CameraAttributes resource to the Camera3D node prevents depth of field from displaying in the 3D editor viewport unless the camera is being previewed Environment options The following is a detailed description of all environment options and how they are intended to be used Background The Background section contains settings on how to fill the background parts of the screen where objects were not drawn The background not only serves the purpose of displaying an image or color By default it also affects how objects are affected by ambient and reflected light This is called image based lighting IBL As a result the background sky may greatly impact your scene s overall appearance even if the sky is never directly visible on screen This should be taken into account when tweaking lighting in your scene There are several background modes available Clear Color uses the default clear color defined in the project settings The background will be a constant color Custom Color is like Clear Color but with a custom color value Sky lets you define a background sky material see below By default objects in the scene will reflect this sky material and absorb ambient light from it Canvas displays the 2D scene as a background to the 3D scene This can be used to make environment effects visible on 2D rendering such as glow in 2D Keep does not draw any sky keeping what was present on previous frames instead This improves performance in purely indoor scenes but creates a hall of mirrors visual glitch if the sky is visible at any time Sky materials When using the Sky background mode or the ambient reflected light mode is set to Sky a Sky subresource becomes available to edit in the Environment resource Editing this subresource allows you to create a SkyMaterial resource within the Sky There are 3 built in sky materials to choose from PanoramaSkyMaterial Use a 360 degree panorama sky image 2 1 aspect ratio recommended To benefit from high dynamic range the panorama image must be in an HDR compatible format such as hdr or exr rather than a standard dynamic range format like png or jpg ProceduralSkyMaterial Use a procedurally generated sky with adjustable ground sun sky and horizon colors This is the type of sky used in the editor preview The sun s position is automatically derived from the first 4 DirectionalLight3D nodes present in the scene There can be up to 4 suns at a given time PhysicalSkyMaterial Use a physically based procedural sky with adjustable scattering parameters The sun s position is automatically derived from the first DirectionalLight3D node present in the scene PhysicalSkyMaterial is slightly more expensive to render compared to ProceduralSkyMaterial There can be up to 1 sun at a given time Panorama sky images are sometimes called HDRIs High Dynamic Range Images You can find freely licensed HDRIs on Poly Haven Note HDR PanoramaSkyMaterial textures with very bright spots such as real life photos with the sun visible may result in visible sparkles on ambient and specular reflections This is caused by the texture s peak exposure being too high To resolve this select the panorama texture in the FileSystem dock go to the Import dock enable HDR Clamp Exposure then click Reimport If you need a custom sky material e g for procedural clouds you can create a custom sky shader Ambient light Ambient light as defined here is a type of light that affects every piece of geometry with the same intensity It is global and independent of lights that might be added to the scene Ambient light is one of the two components of image based lighting Unlike reflected light ambient light does not vary depending on the camera s position and viewing angle There are several types of ambient light to choose from Background Source ambient light from the background such as the sky custom color or clear color default Ambient light intensity will vary depending on the sky image s contents which can result in more visually appealing ambient lighting A sky must be set as background for this mode to be visible Disabled Do not use any ambient light Useful for purely indoor scenes Color Use a constant color for ambient light ignoring the background sky Ambient light intensity will be the same on all sides which may result in the scene s lighting looking more flat Useful for indoor scenes where pitch black shadows may be too dark or to maximize performance on low end devices Sky Source ambient light from a specified sky even if the background is set to a mode other than Sky If the background mode is already Sky this mode behaves identically to Background When the ambient light mode is set to Sky or Background and background is set to Sky it s possible to blend between the ambient color and sky using the Sky Contribution property This value is set to 1 0 by default which means that only the ambient sky is used The ambient color is ignored unless Sky Contribution is decreased below 1 0 Here is a comparison of how different ambient light affects a scene Finally there is an Energy setting which is a multiplier It s useful when working with HDR In general you should only rely on ambient light alone for simple scenes or large exteriors You may also do so to boost performance Ambient light is fast to render but it doesn t provide the best lighting quality It s better to generate ambient light from ReflectionProbe VoxelGI or SDFGI as these will simulate how indirect light propagates more accurately Below is a comparison in terms of quality between using a flat ambient color and a VoxelGI Using one of the methods described above will replace constant ambient lighting with ambient lighting from the probes Reflected light Reflected light also called specular light is the other of the two components of image based lighting Reflected light can be set to one of 3 modes Background Reflect from the background such as the sky custom color or clear color default Disabled Do not reflect any light from the environment Useful for purely indoor scenes or to maximize performance on low end devices Sky Reflect from the background sky even if the background is set to a mode other than Sky If the background mode is already Sky this mode behaves identically to Background Fog Note This section refers to non volumetric fog only It is possible to use both non volumetric fog and Volumetric fog and fog volumes at the same time Fog as in real life makes distant objects fade away into a uniform color There are two kinds of fog in Godot Depth Fog This one is applied based on the distance from the camera Height Fog This one is applied to any objects below or above a certain height regardless of the distance from the camera Both of these fog types can have their curve tweaked making their transition more or less sharp Two properties can be tweaked to make the fog effect more interesting The first is Sun Amount which makes use of the Sun Color property of the fog When looking towards a directional light usually a sun the color of the fog will be changed simulating the sunlight passing through the fog The second is Transmit Enabled which simulates more realistic light transmittance In practice it makes light stand out more across the fog Note Fog can cause banding to appear on the viewport especially at higher density levels See Color banding for guidance on reducing banding Volumetric Fog Volumetric fog provides a realistic fog effect to the scene with fog color being affected by the lights that traverse the fog See also See Volumetric fog and fog volumes for documentation on setting up volumetric fog Tonemap Tonemap selects the tonemapping curve that will be applied to the scene from a list of standard curves used in the film and game industries Tonemapping operators other than Linear are used to make light and dark areas more homogeneous while also avoiding clipping of bright highlights The tone mapping options are Mode The tone mapping mode to use Linear The default tonemapping mode This is the fastest and simplest tonemapping operator but it causes bright lighting to look blown out with noticeable clipping in the output colors Reinhardt Performs a variation on rendered pixels colors by this formula color color 1 color This avoids clipping bright highlights but the resulting image can look a bit dull Filmic This avoids clipping bright highlights with a resulting image that usually looks more vivid than Reinhardt ACES Academy Color Encoding System tonemapper ACES is slightly more expensive than other options but it handles bright lighting in a more realistic fashion by desaturating it as it becomes brighter ACES typically has a more contrasted output compared to Reinhardt and Filmic ACES is the recommended option when aiming for photorealistic visuals This tonemapping mode was called ACES Fitted in Godot 3 x Exposure Tone mapping exposure which simulates amount of light received over time default 1 0 Higher values result in an overall brighter appearance If the scene appears too dark as a result of a tonemapping operator or whitepoint change try increasing this value slightly White Tone mapping whitepoint which simulates where in the scale white is located default 1 0 For photorealistic lighting recommended values are between 6 0 and 8 0 Higher values result in less blown out highlights but make the scene appear slightly darker as a whole Mid and post processing effects The Environment resource supports many popular mid and post processing effects Note Screen space effects such as SSR SSAO SSIL and glow do not operate on geometry that is located outside the camera view or is occluded by other opaque geometry Consider this when tweaking their settings to avoid distracting changes during gameplay Screen Space Reflections SSR This feature is only available when using the Forward backend not Mobile or Compatibility While Godot supports several sources of reflection data such as Reflection probes they may not provide enough detail for all situations Scenarios where screen space reflections make the most sense are when objects are in contact with each other object over floor over a table floating on water etc On top of providing more detail screen space reflections also work in real time while other types of reflections are usually precomputed This can be used to make characters cars etc reflect on surrounding surfaces when moving around Screen space reflections can be used at the same time as other reflection sources to benefit from detailed reflections when possible while having a fallback when screen space reflections cannot be used for example to reflect off screen objects A few user controlled parameters are available to better tweak the technique Max Steps Determines the length of the reflection The bigger this number the more costly it is to compute Fade In Allows adjusting the fade in curve which is useful to make the contact area softer Fade Out Allows adjusting the fade out curve so the step limit fades out softly Depth Tolerance Can be used to allow screen space rays to pass behind objects The rays will treat each object as if it has this depth in determining if it can pass behind the object Higher values will make screen space reflections exhibit fewer breakups at the cost of some objects creating physically incorrect reflections Keep in mind that screen space reflections only work for reflecting opaque geometry Transparent materials won t be reflected as they don t write to the depth buffer This also applies to shaders that use hint_screen_texture or hint_depth_texture uniforms Screen Space Ambient Occlusion SSAO This feature is only available when using the Forward backend not Mobile or Compatibility As mentioned in the Ambient section areas where light from light nodes does not reach either because it s outside the radius or shadowed are lit with ambient light Godot can simulate this using VoxelGI ReflectionProbe the Sky or a constant ambient color The problem however is that all the methods proposed previously act more on a larger scale large regions than at the smaller geometry level Constant ambient color and Sky are the same everywhere while GI and Reflection probes have more local detail but not enough to simulate situations where light is not able to fill inside hollow or concave features This can be simulated with Screen Space Ambient Occlusion As you can see in the image below its purpose is to make sure concave areas are darker simulating a narrower path for the light to enter It is a common mistake to enable this effect turn on a light and not be able to appreciate it This is because SSAO only acts on ambient light It does not affect direct light This is why in the image above the effect is less noticeable under the direct light on the left If you want to force SSAO to work with direct light too use the Light Affect parameter Even though this is not physically correct some artists like how it looks SSAO looks best when combined with a real source of indirect light like VoxelGI Tweaking SSAO is possible with several parameters Radius The distance at which objects can occlude each other when calculating screen space ambient occlusion Higher values will result in occlusion over a greater distance at the cost of performance and quality Intensity The primary screen space ambient occlusion intensity Acts as a multiplier for the screen space ambient occlusion effect A higher value results in darker occlusion Since SSAO is a screen space effect it s recommended to remain conservative with this value SSAO that is too strong can be distracting during gameplay Power The distribution of occlusion A higher value results in darker occlusion similar to Intensity but with a sharper falloff Detail Sets the strength of the additional level of detail for the screen space ambient occlusion effect A high value makes the detail pass more prominent but it may contribute to aliasing in your final image Horizon The threshold for considering whether a given point on a surface is occluded or not represented as an angle from the horizon mapped into the 0 0 1 0 range A value of 1 0 results in no occlusion Sharpness The amount that the screen space ambient occlusion effect is allowed to blur over the edges of objects Setting too high will result in aliasing around the edges of objects Setting too low will make object edges appear blurry Light Affect The screen space ambient occlusion intensity in direct light In real life ambient occlusion only applies to indirect light which means its effects can t be seen in direct light Values higher than 0 will make the SSAO effect visible in direct light Values above 0 0 are not physically accurate but some artists prefer this effect Screen Space Indirect Lighting SSIL This feature is only available when using the Forward backend not Mobile or Compatibility SSIL provides indirect lighting for small details or dynamic geometry that other global illumination techniques cannot cover This applies to bounced diffuse lighting but also emissive materials When SSIL is enabled on its own the effect may not be that noticeable which is intended Instead SSIL is meant to be used as a complement to other global illumination techniques such as VoxelGI SDFGI and LightmapGI SSIL also provides a subtle ambient occlusion effect similar to SSAO but with less detail This feature only provides indirect lighting It is not a full global illumination solution This makes it different from screen space global illumination SSGI offered by other 3D engines SSIL can be combined with SSR and or SSAO for greater visual quality at the cost of performance Tweaking SSIL is possible with several parameters Radius The distance that bounced lighting can travel when using the screen space indirect lighting effect A larger value will result in light bouncing further in a scene but may result in under sampling artifacts which look like long spikes surrounding light sources Intensity The brightness multiplier for the screen space indirect lighting effect A higher value will result in brighter light Sharpness The amount that the screen space indirect lighting effect is allowed to blur over the edges of objects Setting too high will result in aliasing around the edges of objects Setting too low will make object edges appear blurry Normal Rejection Amount of normal rejection used when calculating screen space indirect lighting Normal rejection uses the normal of a given sample point to reject samples that are facing away from the current pixel Normal rejection is necessary to avoid light leaking when only one side of an object is illuminated However normal rejection can be disabled if light leaking is desirable such as when the scene mostly contains emissive objects that emit light from faces that cannot be seen from the camera Signed Distance Field Global Illumination SDFGI This feature is only available when using the Forward backend not Mobile or Compatibility Signed distance field global illumination SDFGI is a form of real time global illumination It is not a screen space effect which means it can provide global illumination for off screen elements unlike SSIL See also See Signed distance field global illumination SDFGI for instructions on setting up this global illumination technique Glow Note When using the Compatibility rendering method glow uses a different implementation with some properties being unavailable and hidden from the inspector Levels Normalized Strength Blend Mode Mix Map and Map Strength This implementation is optimized to run on low end devices and is less flexible as a result In photography and film when light amount exceeds the maximum luminance brightness supported by the media it generally bleeds outwards to darker regions of the image This is simulated in Godot with the Glow effect By default even if the effect is enabled it will be weak or invisible One of two conditions need to happen for it to actually show The light in a pixel surpasses the HDR Threshold where 0 is all light surpasses it and 1 0 is light over the tonemapper White value Normally this value is expected to be at 1 0 but it can be lowered to allow more light to bleed There is also an extra parameter HDR Scale that allows scaling making brighter or darker the light surpassing the threshold The Bloom property has a value greater than 0 0 As it increases it sends the whole screen to the glow processor at higher amounts Both will cause the light to start bleeding out of the brighter areas Once glow is visible it can be controlled with a few extra parameters Intensity is an overall scale for the effect it can be made stronger or weaker 0 0 removes it Strength is how strong the gaussian filter kernel is processed Greater values make the filter saturate and expand outwards In general changing this is not needed as the size can be adjusted more efficiently with the Levels The Blend Mode of the effect can also be changed Additive is the strongest one as it only adds the glow effect over the image with no blending involved In general it s too strong to be used but can look good with low intensity Bloom produces a dream like effect Screen ensures glow never brightens more than itself and it works great as an all around Softlight is the default and weakest one producing only a subtle color disturbance around the objects This mode works best on dark scenes Replace can be used to blur the whole screen or debug the effect It only shows the glow effect without the image below Mix mixes the glow effect with the main image This can be used for greater artistic control The mix factor is controlled by the Mix property which appears above the blend mode only when the blend mode is set to Mix High mix factor values will appear to darken the image unless Bloom is increased To change the glow effect size and shape Godot provides Levels Smaller levels are strong glows that appear around objects while large levels are hazy glows covering the whole screen The real strength of this system though is to combine levels to create more interesting glow patterns Finally the glow effect can be controlled using a glow map which is a texture that determines how bright glow should be on each part of the screen This texture can optionally be colored to tint the glow effect to the glow map s color The texture is stretched to fit the viewport so using an aspect ratio that matches your viewport s most common aspect ratio such as 16 9 is recommended to avoid visible distortion There are 2 main use cases for a glow map texture Create a lens dirt effect using a dirt pattern texture Make glow less strong on specific parts of the screen by using a gradient texture Using glow in 2D There are 2 ways to use glow in 2D Since Godot 4 2 you can enable HDR for 2D rendering when using the Forward and Mobile rendering methods This has a performance cost but it allows for a greater dynamic range This also allows you to control which objects glow using their individual Modulate or Self Modulate properties use the RAW mode in the color picker Enabling HDR can also reduce banding in the 2D rendering output To enable HDR in 2D open the Project Settings enable Rendering Viewport HDR 2D then restart the editor If you want to maximize performance you can leave HDR disabled for 2D rendering However you will have less control on which objects glow Enable glow set the environment background mode to Canvas then decrease Glow HDR Threshold so that pixels that are not overbright will still glow To prevent UI elements from glowing make them children of a CanvasLayer node You can control which layers are affected by glow using the Background Canvas Max Layer property of the Environment resource Example of using glow in a 2D scene HDR 2D is enabled while coins and the bullet have their Modulate property increased to overbright values using the RAW mode in the color picker Warning The 2D renderer renders in linear color space if the Rendering Viewport HDR 2D project setting is enabled so source_color must also be used for uniform samplers that are used as color input in canvas_item shaders If this is not done the texture will appear washed out If 2D HDR is disabled source_color will keep working correctly in canvas_item shaders so it s recommend to use it when relevant either way Using glow to blur the screen Glow can be used to blur the whole viewport which is useful for background blur when a menu is open Only 3D rendering will be affected unless the environment s background mode is set to Canvas To prevent UI elements from being blurred when using the Canvas background mode make them children of a CanvasLayer node You can control which layers are affected by this blurring effect using the Background Canvas Max Layer property of the Environment resource To use glow as a blurring solution Enable Normalized and adjust levels according to preference Increasing higher level indices will result in a more blurred image It s recommended to leave a single glow level at 1 0 and leave all other glow levels at 0 0 but this is not required Note that the final appearance will vary depending on viewport resolution Set Intensity to 1 0 and Bloom to 1 0 Set the blend mode to Replace and HDR Luminance Cap to 1 0 Example of using glow to blur the 2D rendering in the menu s background Adjustments At the end of processing Godot offers the possibility to do some standard image adjustments Basic BCS adjustments The first adjustment is being able to change the typical Brightness Contrast and Saturation properties Color correction using a 1D gradient The second adjustment is by supplying a color correction gradient This can be done by assigning a GradientTexture1D resource to the Color Correction property or by loading a texture containing a horizontal gradient The leftmost part of the gradient represents black in the source image whereas the rightmost part of the gradient represents white in the source image A linear black to white gradient like the following one will produce no effect But creating custom ones will allow to map each channel to a different color Color correction using a 3D LUT A 3D look up texture LUT can also be used for color correction This is a special texture used to modify each color channel separately from one another red green blue This image can be of any resolution but since color correction is low frequency data sticking to low resolutions is recommended for performance reasons A LUT texture s resolution is typically 17 17 17 33 33 33 51 51 51 or 65 65 65 the odd size allows for better interpolation For this to work the look up texture s import mode must be set to Texture3D in the Import dock instead of being imported as a regular Texture2D Make sure to configure the number of horizontal and vertical slices to import as well If you don t do this the LUT texture will not affect the viewport correctly when used You can preview how the 3D texture was imported by double clicking it in the FileSystem dock then going to the inspector to flip through the texture s layers You can use this neutral 33 33 33 LUT template as a base right click and choose Save as With the above LUT template after changing its import mode to Texture3D set its number of Horizontal slices to 33 in the Import dock then click Reimport If you load this LUT into the Color Correction property you won t see any visible difference for now since this texture is designed to be a neutral starting point This LUT template can be modified in an image editor to provide a different mood to the image A common workflow is to place the LUT image next to a screenshot of the project s 3D viewport then use an image editor to modify both the LUT image and the screenshot at the same time The LUT can then be saved and applied to the game engine to perform the same color correction in real time For example modifying the LUT template in an image editor to give it a sepia look results in the image on the right Note Adjustments and color correction are applied after tonemapping This means the tonemapping properties defined above still have an effect when adjustments are enabled Camera attribute options Depth of Field Far Blur This effect simulates focal distance on cameras It blurs objects behind a given range It has an initial Distance with a Transition region in world units The Amount parameter controls the amount of blur For larger blurs tweaking the depth of field quality in the advanced project settings may be needed to avoid artifacts Depth of Field Near Blur This effect simulates focal distance on cameras It blurs objects close to the camera acts in the opposite direction as far blur It has an initial Distance with a Transition region in world units The Amount parameter controls the amount of blur For larger blurs tweaking the Quality may be needed in order to avoid artifacts It is common to use both blurs together to focus the viewer s attention on a given object or create a so called tilt shift effect Note When using CameraAttributesPhysical instead of CameraAttributesPractical depth of field is automatically computed from the camera attributes focus distance focal length and aperture Exposure This multiplies the overall scene brightness visible from the camera Higher values result in a visually brighter scene Auto Exposure This feature is only available when using the Forward backend not Mobile or Compatibility Even though in most cases lighting and texturing are heavily artist controlled Godot supports a basic high dynamic range implementation with the auto exposure mechanism This is generally used to add realism when combining interior areas with low light and bright outdoor areas Auto exposure simulates the camera or eye in an effort to adapt between light and dark locations and their different amounts of light Note Auto exposure needs to evaluate the scene s brightness every frame which has a moderate performance cost Therefore it s recommended to leave Auto Exposure disabled if it doesn t make much of a difference in your scene The simplest way to use auto exposure is to make sure outdoor lights or other strong lights have energy beyond 1 0 This is done by tweaking their Energy multiplier on the Light itself To make it consistent the Sky usually needs to use the energy multiplier too to match with the directional light Normally values between 3 0 and 6 0 are enough to simulate indoor outdoor conditions By combining Auto Exposure with Glow post processing pixels that go over the tonemap White will bleed to the glow buffer creating the typical bloom effect in photography The user controllable values in the Auto Exposure section come with sensible defaults but you can still tweak them Scale Value to scale the lighting Higher values produce brighter images and lower values produce darker ones Min Sensitivity Min Exposure Value Minimum luminance that auto exposure will aim to adjust for in ISO when using CameraAttributesPractical or in EV100 when using CameraAttributesPhysical Luminance is the average of the light in all the pixels of the screen Max Sensitivity Max Exposure Value Maximum luminance that auto exposure will aim to adjust for in ISO when using CameraAttributesPractical or in EV100 when using CameraAttributesPhysical Speed Speed at which luminance corrects itself The higher the value the faster luminance correction happens High values may be more suited to fast paced games but can be distracting in some scenarios When using CameraAttributesPractical exposure is set using sensitivity defined in ISO instead of an exposure value in EV100 Typical ISO values are between 50 and 3200 with higher values resulting in higher final exposure In real life daytime photography generally uses ISO values between 100 and 800 See also See Physical light and camera units if you wish to use real world units to configure your camera s exposure field of view and depth of field User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Volumetric fog and fog volumes Note Volumetric fog is only supported in the Clustered Forward rendering backend not Forward Mobile or Compatibility As described in Environment and post processing Godot supports various visual effects including two types of fog traditional non volumetric fog and volumetric fog Traditional fog affects the entire scene at once and cannot be customized with Fog shaders Volumetric fog can be used at the same time as non volumetric fog if desired On this page you ll learn How to set up volumetric fog in Godot What fog volumes are and how they differ from global volumetric fog See also You can see how volumetric fog works in action using the Volumetric Fog demo project Here is a comparison between traditional fog which does not interact with lighting and volumetric fog which is able to interact with lighting Volumetric fog properties After enabling volumetric fog in the WorldEnvironment node s Environment resource you can edit the following properties Density The base exponential density of the volumetric fog Set this to the lowest density you want to have globally FogVolumes can be used to add to or subtract from this density in specific areas A value of 0 0 disables global volumetric fog while allowing FogVolumes to display volumetric fog in specific areas Fog rendering is exponential as in real life Albedo The Color of the volumetric fog when interacting with lights Mist and fog have an albedo close to white Color 1 1 1 1 while smoke has a darker albedo Emission The emitted light from the volumetric fog Even with emission volumetric fog will not cast light onto other surfaces Emission is useful to establish an ambient color As the volumetric fog effect uses single scattering only fog tends to need a little bit of emission to soften the harsh shadows Emission Energy The brightness of the emitted light from the volumetric fog GI Inject Scales the strength of Global Illumination used in the volumetric fog s albedo color A value of 0 0 means that Global Illumination will not impact the volumetric fog This has a small performance cost when set above 0 0 Anisotropy The direction of scattered light as it goes through the volumetric fog A value close to 1 0 means almost all light is scattered forward A value close to 0 0 means light is scattered equally in all directions A value close to 1 0 means light is scattered mostly backward Fog and mist scatter light slightly forward while smoke scatters light equally in all directions Length The distance over which the volumetric fog is computed Increase to compute fog over a greater range decrease to add more detail when a long range is not needed For best quality fog keep this as low as possible Detail Spread The distribution of size down the length of the froxel buffer A higher value compresses the froxels closer to the camera and places more detail closer to the camera Ambient Inject Scales the strength of ambient light used in the volumetric fog A value of 0 0 means that ambient light will not impact the volumetric fog This has a small performance cost when set above 0 0 Sky Affect Controls how much volumetric fog should be drawn onto the background sky If set to 0 0 volumetric fog won t affect sky rendering at all including FogVolumes Two additional properties are offered in the Temporal Reprojection section Temporal Reprojection Enabled Enables temporal reprojection in the volumetric fog Temporal reprojection blends the current frame s volumetric fog with the last frame s volumetric fog to smooth out jagged edges The performance cost is minimal however it does lead to moving FogVolumes and Light3Ds ghosting and leaving a trail behind them When temporal reprojection is enabled try to avoid moving FogVolumes or Light3Ds too fast Short lived dynamic lighting effects should have Volumetric Fog Energy set to 0 0 to avoid ghosting Temporal Reprojection Amount The amount by which to blend the last frame with the current frame A higher number results in smoother volumetric fog but makes ghosting much worse A lower value reduces ghosting but can result in the per frame temporal jitter becoming visible Note Unlike non volumetric fog volumetric fog has a finite range This means volumetric fog cannot entirely cover a large world as it will eventually stop being rendered in the distance If you wish to hide distant areas from the player it s recommended to enable both non volumetric fog and volumetric fog at the same time and adjust their density accordingly Light interaction with volumetric fog To simulate fog light scattering behavior in real life all light types will interact with volumetric fog How much each light will affect volumetric fog can be adjusted using the Volumetric Fog Energy property on each light Enabling shadows on a light will also make those shadows visible on volumetric fog If fog light interaction is not desired for artistic reasons this can be globally disabled by setting Volumetric Fog Albedo to a pure black color in the Environment resource Fog light interaction can also be disabled for specific lights by setting its Volumetric Fog Energy to 0 Doing so will also improve performance slightly by excluding the light from volumetric fog computations Using volumetric fog as a volumetric lighting solution While not physically accurate it is possible to tune volumetric fog s settings to work as volumetric lighting solution This means that unlit parts of the environment will not be darkened anymore by fog but light will still be able to make fog brighter in specific areas This can be done by setting volumetric fog density to the lowest permitted value greater than zero 0 0001 then increasing the Volumetric Fog Energy property on lights to much higher values than the default to compensate Values between 10000 and 100000 usually work well for this Balancing performance and quality There are a few project settings available to adjust volumetric fog performance and quality Rendering Environment Volumetric Fog Volume Size Base size used to determine size of froxel buffer in the camera X axis and Y axis The final size is scaled by the aspect ratio of the screen so actual values may differ from what is set Set a larger size for more detailed fog set a smaller size for better performance Rendering Environment Volumetric Fog Volume Depth Number of slices to use along the depth of the froxel buffer for volumetric fog A lower number will be more efficient but may result in artifacts appearing during camera movement Rendering Environment Volumetric Fog Use Filter Enables filtering of the volumetric fog effect prior to integration This substantially blurs the fog which reduces fine details but also smooths out harsh edges and aliasing artifacts Disable when more detail is required Note Volumetric fog can cause banding to appear on the viewport especially at higher density levels See Color banding for guidance on reducing banding Using fog volumes for local volumetric fog Sometimes you want fog to be constrained to specific areas Conversely you may want to have global volumetric fog but fog should be excluded from certain areas Both approaches can be followed using FogVolume nodes Here s a quick start guide to using FogVolumes Make sure Volumetric Fog is enabled in the Environment properties If global volumetric fog is undesired set its Density to 0 0 Create a FogVolume node Assign a new FogMaterial to the FogVolume node s Material property In the FogMaterial set Density to a positive value to increase density within the FogVolume or a negative value to subtract the density from global volumetric fog Configure the FogVolume s extents and shape as needed Note Thin fog volumes may appear to flicker when the camera moves or rotates This can be alleviated by increasing the Rendering Environment Volumetric Fog Volume Depth project setting at a performance cost or by decreasing Length in the Environment volumetric fog properties at no performance cost but at the cost of lower fog range Alternatively the FogVolume can be made thicker and use a lower density in the Material FogVolume properties Extents The size of the FogVolume when Shape is Ellipsoid Cone Cylinder or Box If Shape is Cone or Cylinder the cone cylinder will be adjusted to fit within the extents Non uniform scaling of cone cylinder shapes via the Extents property is not supported but you can scale the FogVolume node instead Shape The shape of the FogVolume This can be set to Ellipsoid Cone Cylinder Box or World acts as global volumetric fog Material The material used by the FogVolume Can be either a built in FogMaterial or a custom ShaderMaterial Fog shaders After choosing New FogMaterial in the Material property you can adjust the following properties in FogMaterial Density The density of the FogVolume Denser objects are more opaque but may suffer from under sampling artifacts that look like stripes Negative values can be used to subtract fog from other FogVolumes or global volumetric fog Albedo The single scattering Color of the FogVolume Internally member albedo is converted into single scattering which is additively blended with other FogVolumes and global volumetric fog s Albedo Emission The Color of the light emitted by the FogVolume Emitted light will not cast light or shadows on other objects but can be useful for modulating the Color of the FogVolume independently from light sources Height Falloff The rate by which the height based fog decreases in density as height increases in world space A high falloff will result in a sharp transition while a low falloff will result in a smoother transition A value of 0 0 results in uniform density fog The height threshold is determined by the height of the associated FogVolume Edge Fade The hardness of the edges of the FogVolume A higher value will result in softer edges while a lower value will result in harder edges Density Texture The 3D texture that is used to scale the member density of the FogVolume This can be used to vary fog density within the FogVolume with any kind of static pattern For animated effects consider using a custom fog shader You can import any image as a 3D texture by changing its import type in the Import dock Using 3D noise density textures Since Godot 4 1 there is a NoiseTexture3D resource that can be used to procedurally generate 3D noise This is well suited to FogMaterial density textures which can result in more detailed fog effects Screenshot taken with Volume Size project setting set to 192 to make high frequency detail more visible in the fog To do so select the Density Texture property and choose New NoiseTexture3D Edit this NoiseTexture3D by clicking it then click Noise at the bottom of the NoiseTexture3D properties and choose New FastNoiseLite Adjust the noise texture s width height and depth according to your fog volume s dimensions To improve performance it s recommended to use low texture sizes 64 64 64 or lower as high frequency detail is difficult to notice in a FogVolume If you wish to represent more detailed density variations you will need to increase Rendering Environment Volumetric Fog Volume Size in the project settings which has a performance cost Note NoiseTexture3D s Color Ramp affects FogMaterial density textures but since only the texture s red channel is sampled only the color ramp s red channel will affect the resulting density However using a color ramp will not tint the fog volume according to the texture You would need to use a custom shader that reads a Texture3D to achieve this Custom FogVolume shaders This page only covers the built in settings offered by FogMaterial If you need to customize fog behavior within a FogVolume node such as creating animated fog FogVolume nodes appearance can be customized using Fog shaders Faking volumetric fog using quads In some cases it may be better to use specially configured QuadMeshes as an alternative to volumetric fog Quads work with any rendering method including Forward Mobile and Compatibility Quads do not require temporal reprojection to look smooth which makes them suited to fast moving dynamic effects such as lasers They can also represent small details which volumetric fog cannot do efficiently Quads generally have a lower performance cost than volumetric fog This approach has a few downsides though The fog effect has less realistic falloff especially if the camera enters the fog Transparency sorting issues may occur when sprites overlap Performance will not necessarily be better than volumetric fog if there are lots of sprites close to the camera To create a QuadMesh based fog sprite Create a MeshInstance3D node with a QuadMesh resource in the Mesh property Set the size as desired Create a new StandardMaterial3D in the mesh s Material property In the StandardMaterial3D set Shading Shading Mode to Unshaded Billboard Mode to Enabled enable Proximity Fade and set Distance Fade to Pixel Alpha Set the Albedo Texture to the texture below right click and choose Save as After setting the albedo texture go to the Import dock select the texture and change its compression mode to Lossless to improve quality The fog s color is set using the Albedo Color property its density is set using the color s alpha channel For best results you will have to adjust Proximity Fade Distance and Distance Fade Max Distance depending on the size of your QuadMesh Optionally billboarding may be left disabled if you place the quad in a way where all of its corners are in solid geometry This can be useful for fogging large planes that the camera cannot enter such as bottomless pits User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue 3D antialiasing See also Godot also supports antialiasing in 2D rendering This is covered on the 2D antialiasing page Introduction Due to their limited resolution scenes rendered in 3D can exhibit aliasing artifacts These artifacts commonly manifest as a staircase effect on surface edges edge aliasing and as flickering and or sparkles on reflective surfaces specular aliasing In the example below you can notice how edges have a blocky appearance The vegetation is also flickering in and out and thin lines on top of the box have almost disappeared Image is scaled by 2 with nearest neighbor filtering to make aliasing more noticeable To combat this various antialiasing techniques can be used in Godot These are detailed below See also You can compare antialiasing algorithms in action using the 3D Antialiasing demo project Multisample antialiasing MSAA This technique is the historical way of dealing with aliasing MSAA is very effective on geometry edges especially at higher levels MSAA does not introduce any blurriness whatsoever MSAA is available in 3 levels 2 4 8 Higher levels are more effective at antialiasing edges but are significantly more demanding In games with modern visuals sticking to 2 or 4 MSAA is highly recommended as 8 MSAA is usually too demanding The downside of MSAA is that it only operates on edges This is because MSAA increases the number of coverage samples but not the number of color samples However since the number of color samples did not increase fragment shaders are still run for each pixel only once Therefore MSAA does not reduce transparency aliasing for materials using the Alpha Scissor transparency mode 1 bit transparency MSAA is also ineffective on specular aliasing To mitigate aliasing on alpha scissor materials alpha antialiasing also called alpha to coverage can be enabled on specific materials in the StandardMaterial3D or ORMMaterial3D properties Alpha to coverage has a moderate performance cost but it s effective at reducing aliasing on transparent materials without introducing any blurriness MSAA can be enabled in the Project Settings by changing the value of the Rendering Anti Aliasing Quality MSAA 3D setting It s important to change the value of the MSAA 3D setting and not MSAA 2D as these are entirely separate settings Comparison between no antialiasing left and various MSAA levels right Note that alpha antialiasing is not used here Temporal antialiasing TAA This is only available in the Clustered Forward backend not the Forward Mobile or Compatibility backends Temporal antialiasing works by converging the result of previously rendered frames into a single high quality frame This is a continuous process that works by jittering the position of all vertices in the scene every frame This jittering is done to capture sub pixel detail and should be unnoticeable except in extreme situations This technique is commonly used in modern games as it provides the most effective form of antialiasing against specular aliasing and other shader induced artifacts TAA also provides full support for transparency antialiasing TAA introduces a small amount of blur when enabled in still scenes but this blurring effect becomes more pronounced when the camera is moving Another downside of TAA is that it can exhibit ghosting artifacts behind moving objects Rendering at a higher framerate will allow TAA to converge faster therefore making those ghosting artifacts less visible Temporal antialiasing can be enabled in the Project Settings by changing the value of the Rendering Anti Aliasing Quality Use TAA setting Comparison between no antialiasing left and TAA right AMD FidelityFX Super Resolution 2 2 FSR2 Since Godot 4 2 there is built in support for AMD FidelityFX Super Resolution 2 2 This is an upscaling method compatible with all recent GPUs from any vendor FSR2 is normally designed to improve performance by lowering the internal 3D rendering resolution then upscaling to the output resolution However unlike FSR1 FSR2 also provides temporal antialiasing This means FSR2 can be used at native resolution for high quality antialiasing with the input resolution being equal to the output resolution In this situation enabling FSR2 will actually decrease performance but it will significantly improve rendering quality Using FSR2 at native resolution is more demanding than using TAA at native resolution so its use is only recommended if you have significant GPU headroom On the bright side FSR2 provides better antialiasing coverage with less blurriness compared to TAA especially in motion Comparison between no antialiasing left and FSR2 at native resolution right Note By default the FSR Sharpness project setting is set to 0 2 higher values result in less sharpening For the purposes of comparison FSR sharpening has been disabled by setting it to 2 0 on the above screenshot Fast approximate antialiasing FXAA This is only available in the Clustered Forward and Forward Mobile backends not the Compatibility backend Fast approximate antialiasing is a post processing antialiasing solution It is faster to run than any other antialiasing technique and also supports antialiasing transparency However since it lacks temporal information it will not do much against specular aliasing This technique is still sometimes used in mobile games However on desktop platforms FXAA generally fell out of fashion in favor of temporal antialiasing which is much more effective against specular aliasing Nonetheless exposing FXAA as an in game option may still be worthwhile for players with low end GPUs FXAA introduces a moderate amount of blur when enabled more than TAA when still but less than TAA when the camera is moving FXAA can be enabled in the Project Settings by changing the value of the Rendering Anti Aliasing Quality Screen Space AA setting to FXAA Comparison between no antialiasing left and FXAA right Supersample antialiasing SSAA This is only available in the Clustered Forward and Forward Mobile backends not the Compatibility backend Supersampling provides the highest quality of antialiasing possible but it s also the most expensive It works by shading every pixel in the scene multiple times This allows SSAA to antialias edges transparency and specular aliasing at the same time without introducing potential ghosting artifacts The downside of SSAA is its extremely high cost This cost generally makes SSAA difficult to use for game purposes but you may still find supersampling useful for offline rendering Supersample antialiasing is performed by increasing the Rendering Scaling 3D Scale advanced project setting above 1 0 while ensuring Rendering Scaling 3D Mode is set to Bilinear the default Since the scale factor is defined per axis a scale factor of 1 5 will result in 2 25 SSAA while a scale factor of 2 0 will result in 4 SSAA Since Godot uses the hardware s own bilinear filtering to perform the downsampling the result will look crisper at integer scale factors namely 2 0 Comparison between no antialiasing left and various SSAA levels right Warning Supersampling also has high video RAM requirements since it needs to render in the target resolution then downscale to the window size For example displaying a project in 3840 2160 4K resolution with 4 SSAA will require rendering the scene in 7680 4320 8K resolution which is 4 times more pixels If you are using a high window size such as 4K you may find that increasing the resolution scale past a certain value will cause a heavy slowdown or even a crash due to running out of VRAM Screen space roughness limiter This is only available in the Clustered Forward and Forward Mobile backends not the Compatibility backend This is not an edge antialiasing method but it is a way of reducing specular aliasing in 3D The screen space roughness limiter works best on detailed geometry While it has an effect on roughness map rendering itself its impact is limited there The screen space roughness limiter is enabled by default it doesn t require any manual setup It has a small performance impact so consider disabling it if your project isn t affected by specular aliasing much Texture roughness limiter on import Like the screen space roughness limiter this is not an edge antialiasing method but it is a way of reducing specular aliasing in 3D Roughness limiting on import works by specifying a normal map to use as a guide for limiting roughness This is done by selecting the roughness map in the FileSystem dock then going to the Import dock and setting Roughness Mode to the color channel the roughness map is stored in typically Green then setting the path to the material s normal map Remember to click Reimport at the bottom of the Import dock after setting the path to the normal map Since this processing occurs purely on import it has no performance cost whatsoever However its visual impact is limited Limiting roughness on import only helps reduce specular aliasing within textures not the aliasing that occurs on geometry edges on detailed meshes Which antialiasing technique should I use There is no one size fits all antialiasing technique Since antialiasing is often demanding on the GPU or can introduce unwanted blurriness you ll want to add a setting to allow players to disable antialiasing For projects with a photorealistic art direction TAA is generally the most suitable option While TAA can introduce ghosting artifacts there is no other technique that combats specular aliasing as well as TAA does The screen space roughness limiter helps a little but is far less effective against specular aliasing overall If you have spare GPU power you can use FSR2 at native resolution for a better looking form of temporal antialiasing compared to standard TAA For projects with a low amount of reflective surfaces such as a cartoon artstyle MSAA can work well MSAA is also a good option if avoiding blurriness and temporal artifacts is important such as in competitive games When targeting low end platforms such as mobile or integrated graphics FXAA is usually the only viable option 2 MSAA may be usable in some circumstances but higher MSAA levels are unlikely to run smoothly on mobile GPUs Godot allows using multiple antialiasing techniques at the same time This is usually unnecessary but it can provide better visuals on high end GPUs or for non real time rendering For example to make moving edges look better when TAA is enabled you can also enable MSAA at the same time User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Using MultiMeshInstance3D Introduction In a normal scenario you would use a MeshInstance3D node to display a 3D mesh like a human model for the main character but in some cases you would like to create multiple instances of the same mesh in a scene You could duplicate the same node multiple times and adjust the transforms manually This may be a tedious process and the result may look mechanical Also this method is not conducive to rapid iterations MultiMeshInstance3D is one of the possible solutions to this problem MultiMeshInstance3D as the name suggests creates multiple copies of a MeshInstance over a surface of a specific mesh An example would be having a tree mesh populate a landscape mesh with trees of random scales and orientations Setting up the nodes The basic setup requires three nodes the MultiMeshInstance3D node and two MeshInstance3D nodes One node is used as the target the surface mesh that you want to place multiple meshes on In the tree example this would be the landscape The other node is used as the source the mesh that you want to have duplicated In the tree case this would be the tree itself In our example we would use a Node3D node as the root node of the scene Your scene tree would look like this Note For simplicity s sake this tutorial uses built in primitives Now you have everything ready Select the MultiMeshInstance3D node and look at the toolbar you should see an extra button called MultiMesh next to View Click it and select Populate surface in the dropdown menu A new window titled Populate MultiMesh will pop up MultiMesh settings Below are descriptions of the options Target Surface The mesh used as the target surface on which to place copies of your source mesh Source Mesh The mesh you want duplicated on the target surface Mesh Up Axis The axis used as the up axis of the source mesh Random Rotation Randomizing the rotation around the up axis of the source mesh Random Tilt Randomizing the overall rotation of the source mesh Random Scale Randomizing the scale of the source mesh Scale The scale of the source mesh that will be placed over the target surface Amount The amount of mesh instances placed over the target surface Select the target surface In the tree case this should be the landscape node The source mesh should be the tree node Adjust the other parameters according to your preference Press Populate and multiple copies of the source mesh will be placed over the target mesh If you are satisfied with the result you can delete the mesh instance used as the source mesh The end result should look like this To change the result repeat the previous steps with different parameters User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Mesh level of detail LOD Level of detail LOD is one of the most important ways to optimize rendering performance in a 3D project along with Occlusion culling On this page you ll learn How mesh LOD can improve your 3D project s rendering performance How to set up mesh LOD in Godot How to measure mesh LOD s effectiveness in your project and alternatives you can explore if it doesn t meet your expectations See also You can see how mesh LOD works in action using the Occlusion Culling and Mesh LOD demo project Introduction Historically level of detail in 3D games involved manually authoring meshes with lower geometry density then configuring the distance thresholds at which these lower detailed meshes should be drawn This approach is still used today when increased control is needed However in projects that have a large amount of detailed 3D assets setting up LOD manually can be a very time consuming process As a result automatic mesh decimation and LOD configuration is becoming increasingly popular Godot provides a way to automatically generate less detailed meshes for LOD usage on import then use those LOD meshes when needed automatically This is completely transparent to the user The meshoptimizer library is used for LOD mesh generation behind the scenes Mesh LOD works with any node that draws 3D meshes This includes MeshInstance3D MultiMeshInstance3D GPUParticles3D and CPUParticles3D Visual comparison Here is an example of LOD meshes generated on import Lower detailed meshes will be used when the camera is far away from the object From most detailed left to least detailed right shaded view Here s the same image with wireframe rendering to make the decimation easier to see From most detailed left to least detailed right wireframe view See also If you need to manually configure level of detail with artist created meshes use Visibility ranges HLOD instead of automatic mesh LOD Generating mesh LOD By default mesh LOD generation happens automatically for imported 3D scenes glTF blend Collada FBX Once LOD meshes are generated they will automatically be used when rendering the scene You don t need to configure anything manually However mesh LOD generation does not automatically happen for imported 3D meshes OBJ This is because OBJ files are not imported as full 3D scenes by default but only as individual mesh resources to load into a MeshInstance3D node or GPUParticles3D CPUParticles3D To make an OBJ file have mesh LOD generated for it select it in the FileSystem dock go to the Import dock change its Import As option to Scene then click Reimport Changing the import type on an OBJ file in the Import dock This will require restarting the editor after clicking Reimport Note The mesh LOD generation process is not perfect and may occasionally introduce rendering issues especially in skinned meshes Mesh LOD generation can also take a while on complex meshes If mesh LOD causes a specific mesh to look broken you can disable LOD generation for it in the Import dock This will also speed up resource importing This can be done globally in the 3D scene s import options or on a per mesh basis using the Advanced Import Settings dialog See Importing 3D scenes for more information Comparing mesh LOD visuals and performance To disable mesh LOD in the editor for comparison purposes use the Disable Mesh LOD advanced debug draw mode This can be done using the menu in the top left corner of the 3D viewport labeled Perspective or Orthogonal depending on camera mode Disabling mesh LOD in the 3D viewport s top left menu Enable View Frame Time in the same menu to view FPS in the top right corner Also enable View Information in the same menu to view the number of primitives vertices indices rendered in the bottom right corner If mesh LOD is working correctly in your scene and your camera is far away enough from the mesh you should notice the number of drawn primitives decreasing and FPS increasing when mesh LOD is left enabled unless you are CPU bottlenecked To see mesh LOD decimation in action change the debug draw mode to Display Wireframe in the menu specified above then adjust the Rendering Mesh LOD LOD Change Threshold Pixels project setting Configuring mesh LOD performance and quality You can adjust how aggressive mesh LOD transitions should be in the root viewport by changing the Rendering Mesh LOD LOD Change Threshold Pixels project setting To change this value at run time set mesh_lod_threshold on the root viewport as follows GDScript C get_tree root mesh_lod_threshold 4 0 Copy to clipboard GetTree Root MeshLodThreshold 4 0f Copy to clipboard Each viewport has its own mesh_lod_threshold property which can be set independently from other viewports The default mesh LOD threshold of 1 pixel is tuned to look perceptually lossless it provides a significant performance gain with an unnoticeable loss in quality Higher values will make LOD transitions happen sooner when the camera moves away resulting in higher performance but lower quality If you need to perform per object adjustments to mesh LOD you can adjust how aggressive LOD transitions should be by adjusting the LOD Bias property on any node that inherits from GeometryInstance3D Values above 1 0 will make LOD transitions happen later than usual resulting in higher quality but lower performance Values below 1 0 will make LOD transitions happen sooner than usual resulting in lower quality but higher performance Additionally ReflectionProbe nodes have their own Mesh LOD Threshold property that can be adjusted to improve rendering performance when the reflection probe updates This is especially important for ReflectionProbes that use the Always update mode Note When rendering the scene mesh LOD selection uses a screen space metric This means it automatically takes camera field of view and viewport resolution into account Higher camera FOV and lower viewport resolutions will make LOD selection more aggressive the engine will display heavily decimated models earlier when the camera moves away As a result unlike Visibility ranges HLOD you don t need to do anything specific in your project to take camera FOV and viewport resolution into account Using mesh LOD with MultiMesh and particles For LOD selection the point of the node s AABB that is the closest to the camera is used as a basis This applies to any kind of mesh LOD including for individual MeshInstance3D s but this has some implications for nodes that display multiple meshes at once such as MultiMeshInstance3D GPUParticles3D and GPUParticles3D Most importantly this means that all instances will be drawn with the same LOD level at a given time If you are noticing incorrect LOD selection with GPUParticles3D make sure the node s visibility AABB is configured by selecting the GPUParticles3D node and using GPUParticles3D Generate AABB at the top of the 3D viewport If you have instances in a MultiMesh that are far away from each other they should be placed in a separate MultiMeshInstance3D node Doing so will also improve rendering performance as frustum and occlusion culling will be able to cull individual nodes while they can t cull individual instances in a MultiMesh User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Visibility ranges HLOD Along with Mesh level of detail LOD and Occlusion culling visibility ranges are another tool to improve performance in large complex 3D scenes On this page you ll learn What visibility ranges can do and which scenarios they are useful in How to set up visibility ranges manual LOD in Godot How to tune visibility ranges for best performance and quality See also If you only need meshes to become less detailed over distance but don t have manually authored LOD meshes consider relying on automatic Mesh level of detail LOD instead Note that automatic mesh LOD and visibility ranges can be used at the same time even on the same mesh How it works Visibility ranges can be used with any node that inherits from GeometryInstance3D This means they can be used not only with MeshInstance3D and MultiMeshInstance3D for artist controlled HLOD but also GPUParticles3D CPUParticles3D Label3D Sprite3D AnimatedSprite3D and CSGShape3D Since visibility ranges are configured on a per node basis this makes it possible to use different node types as part of a LOD system For example you could display a MeshInstance3D representing a tree when up close and replace it with a Sprite3D impostor in the distance to improve performance The benefit of HLOD over a traditional LOD system is its hierarchical nature A single larger mesh can replace several smaller meshes so that the number of draw calls can be reduced at a distance but culling opportunities can be preserved when up close For example you can have a group of houses that uses individual MeshInstance3D nodes one for each house when up close but turns into a single MeshInstance3D that represents a less detailed group of houses or use a MultiMeshInstance3D Lastly visibility ranges can also be used to fade certain objects entirely when the camera gets too close or too far This can be used for gameplay purposes but also to reduce visual clutter For example Label3D nodes can be faded using visibility ranges when they re too far away to be readable or relevant to the player Setting up visibility range This is a quick start guide for configuring a basic LOD system After following this guide this LOD system will display a SphereMesh when up close and a BoxMesh when the camera is far away enough A small hysteresis margin is also configured via the Begin Margin and End Margin properties This prevents LODs from popping back and forth too quickly when the camera is moving at the edge of the LOD transition The visibility range properties can be found in the Visibility Range section of the GeometryInstance3D inspector after selecting the MeshInstance3D Node Add a Node3D node that will be used to group the two MeshInstance3D nodes together Add a first MeshInstance3D node as a child of the Node3D Assign a new SphereMesh to its Mesh property Set the first MeshInstance3D s visibility range End to 10 0 and End Margin to 1 0 Add a second MeshInstance3D node as a child of the Node3D Assign a new BoxMesh to its Mesh property Set the second MeshInstance3D s visibility range Begin to 10 0 and Begin Margin to 1 0 Move the camera away and back towards the object Notice how the object will transition from a sphere to a box as the camera moves away Visibility range properties In the inspector of any node that inherits from GeometryInstance3D you can adjust the following properties in the GeometryInstance3D s Visibility Range section Begin The instance will be hidden when the camera is closer to the instance s origin than this value in 3D units Begin Margin The hysteresis or alpha fade transition distance to use for the close up transition in 3D units The behavior of this property depends on Fade Mode End The instance will be hidden when the camera is further away from the instance s origin than this value in 3D units End Margin The hysteresis or alpha fade transition distance to use for the far away transition in 3D units The behavior of this property depends on Fade Mode Fade Mode Controls how the transition between LOD levels should be performed See below for details Fade mode Note The fade mode chosen only has a visible impact if either Visibility Range Begin Margin or Visibility Range End Margin is greater than 0 0 In the inspector s Visibility Range section there are 3 fade modes to choose from Disabled Uses hysteresis to switch between LOD levels instantly This prevents situations where LOD levels are switched back and forth quickly when the player moves forward and then backward at the LOD transition point The hysteresis distance is determined by Visibility Range Begin Margin and Visibility Range End Margin This mode provides the best performance as it doesn t force rendering to become transparent during the fade transition Self Uses alpha blending to smoothly fade between LOD levels The node will fade out itself when reaching the limits of its own visibility range The fade transition distance is determined by Visibility Range Begin Margin and Visibility Range End Margin This mode forces transparent rendering on the object during its fade transition so it has a performance impact Dependencies Uses alpha blending to smoothly fade between LOD levels The node will fade in its dependencies when reaching the limits of its own visibility range The fade transition distance is determined by Visibility Range Begin Margin and Visibility Range End Margin This mode forces transparent rendering on the object during its fade transition so it has a performance impact This mode is intended for hierarchical LOD systems using Visibility parent It acts the same as Self if visibility ranges are used to perform non hierarchical LOD Visibility parent The Visibility Parent property makes it easier to set up HLOD It allows automatically hiding child nodes if its parent is visible given its current visibility range properties Note The target of Visibility Parent must inherit from GeometryInstance3D Despite its name the Visibility Parent property can point to a node that is not a parent of the node in the scene tree However it is impossible to point Visibility Parent towards a child node as this creates a dependency cycle which is not supported You will get an error message in the Output panel if a dependency cycle occurs Given the following scene tree where all nodes inherit from GeometryInstance3D BatchOfHouses House1 House2 House3 House4 Copy to clipboard In this example BatchOfHouses is a large mesh designed to represent all child nodes when viewed at a distance House1 to House4 are smaller MeshInstance3Ds representing individual houses To configure HLOD in this example we only need to configure two things Set Visibility Range Begin to a number greater than 0 0 so that BatchOfHouses only appears when far away enough from the camera Below this distance we want House1 to House4 to be displayed instead On House1 to House4 assign the Visibility Parent property to BatchOfHouses This makes it easier to perform further adjustments as you don t need to adjust the Visibility Range Begin of BatchOfHouses and Visibility Range End of House1 to House4 Fade mode is automatically handled by the Visibility Parent property so that the child nodes only become hidden once the parent node is fully faded out This is done to minimize visible pop in Depending on your HLOD setup you may want to try both the Self and Dependencies fade modes Note Nodes hidden via the Visible property are essentially removed from the visibility dependency tree so dependent instances will not take the hidden node or its ancestors into account In practice this means that if the target of the Visibility Parent node is hidden by setting its Visible property to false the node will not be hidden according to the Visibility Range Begin value specified in the visibility parent Configuration tips Use simpler materials at a distance to improve performance One way to further improve performance is to use simpler materials for distant LOD meshes While using LOD meshes will reduce the number of vertices that need to be rendered the per pixel shading load for materials remains identical However per pixel shading load is regularly a bottleneck on the GPU in complex 3D scenes One way to reduce this shading load on the GPU is to use simpler materials when they don t make much of a visual difference Performance gains when doing so should be carefully measured as increasing the number of unique materials in a scene has a performance cost on its own Still using simpler materials for distant LOD meshes can still result in a net performance gain as a result of the fewer per pixel calculations required For example on the materials used by distant LOD meshes you can disable expensive material features such as Normal Map especially on mobile platforms Rim Clearcoat Anisotropy Height Subsurface Scattering Back Lighting Refraction Proximity Fade Use dithering for LOD transitions Godot currently only supports alpha based fading for visibility ranges You can however use dithering instead by using several different materials for different LOD levels There are two advantages to using dithering over alpha blending for LOD transitions Higher performance as dithering transparency is faster to render compared to alpha blending No visual glitches due to transparency sorting issues during LOD transitions The downside of dithering is that a noisy pattern is visible during LOD fade transitions This may not be as noticeable at higher viewport resolutions or when temporal antialiasing is enabled Also as distance fade in BaseMaterial3D only supports fading up close or fading when far away this setup is best used with only two LODs as part of the setup Ensure Begin Margin and End Margin is set to 0 0 on both MeshInstance3D nodes as hysteresis or alpha fade are not desired here On both MeshInstance3D nodes decrease Begin by the desired fade transition distance and increase End by the same distance This is required for the dithering transition to actually be visible On the MeshInstance3D that is displayed up close edit its material in the inspector Set its Distance Fade mode to Object Dither Set Min Distance to the same value as the visibility range End Set Max Distance to the same value minus the fade transition distance On the MeshInstance3D that is displayed far away edit its material in the inspector Set its Distance Fade mode to Object Dither Set Min Distance to the same value as the visibility range Begin Set Max Distance to the same value plus the fade transition distance User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Occlusion culling In a 3D rendering engine occlusion culling is the process of performing hidden geometry removal On this page you ll learn What are the advantages and pitfalls of occlusion culling How to set up occlusion culling in Godot Troubleshooting common issues with occlusion culling See also You can see how occlusion culling works in action using the Occlusion Culling and Mesh LOD demo project Why use occlusion culling In this example scene with hundreds of rooms stacked next to each other a dynamic object red sphere is hidden behind the wall in the lit room on the left of the door Example scene with an occlusion culling friendly layout With occlusion culling disabled all the rooms behind the lit room have to be rendered The dynamic object also has to be rendered Example scene with occlusion culling disabled wireframe With occlusion culling enabled only the rooms that are actually visible have to be rendered The dynamic object is also occluded by the wall and therefore no longer has to be rendered Example scene with occlusion culling enabled wireframe Since the engine has less work to do fewer vertices to render and fewer draw calls performance will increase as long as there are enough occlusion culling opportunities in the scene This means occlusion culling is most effective in indoor scenes preferably with many smaller rooms instead of fewer larger rooms Combine this with Mesh level of detail LOD and Visibility ranges HLOD to further improve performance gains Note When using the Clustered Forward rendering backend the engine already performs a depth prepass This consists in rendering a depth only version of the scene before rendering the scene s actual materials This is used to ensure each opaque pixel is only shaded once reducing the cost of overdraw significantly The greatest performance benefits can be observed when using the Forward Mobile rendering backend as it does not feature a depth prepass for performance reasons As a result occlusion culling will actively decrease shading overdraw with that rendering backend Nonetheless even when using a depth prepass there is still a noticeable benefit to occlusion culling in complex 3D scenes However in scenes with few occlusion culling opportunities occlusion culling may not be worth the added setup and CPU usage How occlusion culling works in Godot Note occluder refers to the shape blocking the view while occludee refers to the object being hidden In Godot occlusion culling works by rasterizing the scene s occluder geometry to a low resolution buffer on the CPU This is done using the software raytracing library Embree The engine then uses this low resolution buffer to test the occludee s AABB against the occluder shapes The occludee s AABB must be fully occluded by the occluder shape to be culled As a result smaller objects are more likely to be effectively culled than larger objects Larger occluders such as walls also tend to be much more effective than smaller ones such as decoration props Setting up occlusion culling The first step to using occlusion culling is to enable the Rendering Occlusion Culling Use Occlusion Culling project setting Make sure the Advanced toggle is enabled in the Project Settings dialog to be able to see it This project setting applies immediately so you don t need to restart the editor After enabling the project setting you still need to create some occluders For performance reasons the engine doesn t automatically use all visible geometry as a basis for occlusion culling Instead the engine requires a simplified representation of the scene with only static objects to be baked There are two ways to set up occluders in a scene Automatically baking occluders recommended Note Only MeshInstance3D nodes are currently taken into account in the occluder baking process MultiMeshInstance3D GPUParticles3D CPUParticles3D and CSG nodes are not taken into account when baking occluders If you wish those to be treated as occluders you have to manually create occluder shapes that roughly match their geometry This restriction does not apply to occludees Any node type that inherits from GeometryInstance3D can be occluded After enabling the occlusion culling project setting mentioned above add an OccluderInstance3D node to the scene containing your 3D level Select the OccluderInstance3D node then click Bake Occluders at the top of the 3D editor viewport After baking the OccluderInstance3D node will contain an Occluder3D resource that stores a simplified version of your level s geometry This occluder geometry appears as purple wireframe lines in the 3D view as long as View Gizmos is enabled in the Perspective menu This geometry is then used to provide occlusion culling for both static and dynamic occludees After baking you may notice that your dynamic objects such as the player enemies etc are included in the baked mesh To prevent this set the Bake Cull Mask property on the OccluderInstance3D to exclude certain visual layers from being baked For example you can disable layer 2 on the cull mask then configure your dynamic objects MeshInstance3D nodes to be located on the visual layer 2 instead of layer 1 To do so select the MeshInstance3D node in question then on the VisualInstance3D Layers property uncheck layer 1 then check layer 2 After configuring both cull mask and layers bake occluders again by following the above process Manually placing occluders This approach is more suited for specialized use cases such as creating occlusion for MultiMeshInstance3D setups or CSG nodes due to the aforementioned limitation After enabling the occlusion culling project setting mentioned above add an OccluderInstance3D node to the scene containing your 3D level Select the OccluderInstance3D node then choose an occluder type to add in the Occluder property QuadOccluder3D a single plane BoxOccluder3D a cuboid SphereOccluder3D a sphere shaped occluder PolygonOccluder3D a 2D polygon with as many points as you want There is also ArrayOccluder3D whose points can t be modified in the editor but can be useful for procedural generation from a script Previewing occlusion culling You can enable a debug draw mode to preview what the occlusion culling is actually seeing In the top left corner of the 3D editor viewport click the Perspective button or Orthogonal depending on your current camera mode then choose Display Advanced Occlusion Culling Buffer This will display the low resolution buffer that is used by the engine for occlusion culling In the same menu you can also enable View Information and View Frame Time to view the number of draw calls and rendered primitives vertices indices in the bottom right corner along with the number of frames per second rendered in the top right corner If you toggle occlusion culling in the project settings while this information is displayed you can see how much occlusion culling improves performance in your scene Note that the performance benefit highly depends on the 3D editor camera s view angle as occlusion culling is only effective if there are occluders in front of the camera To toggle occlusion culling at run time set use_occlusion_culling on the root viewport as follows GDScript C get_tree root use_occlusion_culling true Copy to clipboard GetTree Root UseOcclusionCulling true Copy to clipboard Toggling occlusion culling at run time is useful to compare performance on a running project Performance considerations Design your levels to take advantage of occlusion culling This is the most important guideline A good level design is not just about what the gameplay demands it should also be built with occlusion in mind For indoor environments add opaque walls to break the line of sight at regular intervals and ensure not too much of the scene can be seen at once For large open scenes use a pyramid like structure for the terrain s elevation when possible This provides the greatest culling opportunities compared to any other terrain shape Avoid moving OccluderInstance3D nodes during gameplay This includes moving the parents of OccluderInstance3D nodes as this will cause the nodes themselves to move in global space therefore requiring the BVH to be rebuilt Toggling an OccluderInstance3D s visibility or one of its parents visibility is not as expensive as the update only needs to happen once rather than continuously For example if you have a sliding or rotating door you can make the OccluderInstance3D node not be a child of the door itself so that the occluder never moves but you can hide the OccluderInstance3D visibility once the door starts opening You can then reshow the OccluderInstance3D once the door is fully closed If you absolutely have to move an OccluderInstance3D node during gameplay use a primitive Occluder3D shape for it instead of a complex baked shape Use the simplest possible occluder shapes If you notice low performance or stuttering in complex 3D scenes it may mean that the CPU is overloaded as a result of rendering detailed occluders Select the OccluderInstance3D node increase the Bake Simplification property then bake occluders again Remember to keep the simplification value reasonable Values that are too high for the level s geometry may cause incorrect occlusion culling to occur as in My occludee is being culled when it shouldn t be If this still doesn t lead to low enough CPU usage you can try adjusting the Rendering Occlusion Culling BVH Build Quality project setting and or decreasing Rendering Occlusion Culling Occlusion Rays Per Thread You ll need to enable the Advanced toggle in the Project Settings dialog to see those settings Troubleshooting My occludee isn t being culled when it should be On the occluder side First double check that the Bake Cull Mask property in the OccluderInstance3D is set to allow baking the meshes you d like The visibility layer of the MeshInstance3D nodes must be present within the cull mask for the mesh to be included in the bake Also note that occluder baking only takes meshes with opaque materials into account Surfaces will transparent materials will not be included in the bake even if the texture applied on them is fully opaque Lastly remember that MultiMeshInstance3D GPUParticles3D CPUParticles3D and CSG nodes are not taken into account when baking occluders As a workaround you can add OccluderInstance3D nodes for those manually On the occludee side Make sure Extra Cull Margin is set as low as possible it should usually be 0 0 and that Ignore Occlusion Culling is disabled in the object s GeometryInstance3D section Also check the AABB s size which is represented by an orange box when selecting the node This axis aligned bounding box must be fully occluded by the occluder shapes for the occludee to be hidden My occludee is being culled when it shouldn t be The most likely cause for this is that objects that were included in the occluder bake have been moved after baking occluders For instance this can occur when moving your level geometry around or rearranging its layout To fix this select the OccluderInstance3D node and bake occluders again This can also happen because dynamic objects were included in the bake even though they shouldn t be Use the occlusion culling debug draw mode to look for occluder shapes that shouldn t be present then adjust the bake cull mask accordingly The last possible cause for this is overly aggressive mesh simplification during the occluder baking process Select the OccluderInstance3D node decrease the Bake Simplification property then bake occluders again As a last resort you can enable the Ignore Occlusion Culling property on the occludee This will negate the performance improvements of occlusion culling for that object but it makes sense to do this for objects that will never be culled such as a first person view model User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Resolution scaling Why use resolution scaling With the ever increasing rendering complexity of modern games rendering at native resolution isn t always viable anymore especially on lower end GPUs Resolution scaling is one of the most direct ways to influence the GPU requirements of a scene In scenes that are bottlenecked by the GPU rather than by the CPU decreasing the resolution scale can improve performance significantly Resolution scaling is particularly important on mobile GPUs where performance and power budgets are limited While resolution scaling is an important tool to have remember that resolution scaling is not intended to be a replacement for decreasing graphics settings on lower end hardware Consider exposing both resolution scale and graphics settings in your in game menus See also You can compare resolution scaling modes and factors in action using the 3D Antialiasing demo project Note Resolution scaling is currently not available for 2D rendering but it can be simulated using the viewport stretch mode See Multiple resolutions for more information Resolution scaling options In the advanced Project Settings Rendering Scaling 3D section you can find several options for 3D resolution scaling Scaling mode Bilinear Standard bilinear filtering default FSR 1 0 AMD FidelityFX Super Resolution 1 0 Slower but higher quality compared to bilinear scaling On very slow GPUs the cost of FSR1 may be too expensive to be worth using it over bilinear scaling FSR 2 2 AMD FidelityFX Super Resolution 2 2 since Godot 4 2 Slowest but even higher quality compared to FSR1 and bilinear scaling On slow GPUs the cost of FSR2 may be too expensive to be worth using it over bilinear scaling or FSR1 To match FSR2 performance with FSR1 you need to use a lower resolution scale factor Here are comparison images between native resolution bilinear scaling with 50 resolution scale FSR1 and FSR2 scaling with 50 resolution scale FSR1 upscaling works best when coupled with another form of antialiasing Temporal antialiasing TAA or multisample antialiasing MSAA should preferably be used in this case as FXAA does not add temporal information and introduces more blurring to the image On the other hand FSR2 provides its own temporal antialiasing This means you don t need to enable other antialiasing methods for the resulting image to look smooth The Use TAA project setting is ignored when FSR2 is used as the 3D scaling method since FSR2 s temporal antialiasing takes priority Here s the same comparison but with 4 MSAA enabled on all images Notice how the edge upscaling of FSR1 becomes much more convincing once 4 MSAA is enabled However FSR2 doesn t benefit much from enabling MSAA since it already performs temporal antialiasing Rendering scale The Rendering Scaling 3D Scale setting adjusts the resolution scale 1 0 represents the full resolution scale with the 3D rendering resolution matching the 2D rendering resolution Resolution scales below 1 0 can be used to speed up rendering at the cost of a blurrier final image and more aliasing The rendering scale can be adjusted at run time by changing the scaling_3d_scale property on a Viewport node Resolution scales above 1 0 can be used for supersample antialiasing SSAA This will provide antialiasing at a very high performance cost and is not recommended for most use cases See 3D antialiasing for more information The tables below list common screen resolutions the resulting 3D rendering resolution and the number of megapixels that need to be rendered each frame depending on the rendering scale option Rows are sorted from fastest to slowest in each table Note The resolution scale is defined on a per axis basis For example this means that halving the resolution scale factor will reduce the number of rendered megapixels per frame by a factor of 4 not 2 Therefore very low or very high resolution scale factors can have a greater performance impact than expected 1920 1080 Full HD Resolution scale factor 3D rendering resolution Megapixels rendered per frame 0 50 960 540 0 52 MPix 0 67 1286 723 0 93 MPix 0 75 1440 810 1 17 MPix 0 85 1632 918 1 50 MPix 1 00 native 1920 1080 2 07 MPix 1 33 supersampling 2553 1436 3 67 MPix 1 50 supersampling 2880 1620 4 67 MPix 2 00 supersampling 3840 2160 8 29 MPix 2560 1440 QHD Resolution scale factor 3D rendering resolution Megapixels rendered per frame 0 50 1280 720 0 92 MPix 0 67 1715 964 1 65 MPix 0 75 1920 1080 2 07 MPix 0 85 2176 1224 2 66 MPix 1 00 native 2560 1440 3 69 MPix 1 33 supersampling 3404 1915 6 52 MPix 1 50 supersampling 3840 2160 8 29 MPix 2 00 supersampling 5120 2880 14 75 MPix 3840 2160 Ultra HD 4K Resolution scale factor 3D rendering resolution Megapixels rendered per frame 0 50 1920 1080 2 07 MPix 0 67 2572 1447 3 72 MPix 0 75 2880 1620 4 67 MPix 0 85 3264 1836 5 99 MPix 1 00 native 3840 2160 8 29 MPix 1 33 supersampling 5107 2872 14 67 MPix 1 50 supersampling 5760 3240 18 66 MPix 2 00 supersampling 7680 4320 33 18 MPix FSR Sharpness When using the FSR1 or FSR2 scaling modes the sharpness can be controlled using the Rendering Scaling 3D FSR Sharpness advanced project setting The intensity is inverted compared to most other sharpness sliders lower values will result in a sharper final image while higher values will reduce the impact of the sharpening filter 0 0 is the sharpest while 2 0 is the least sharp The default value of 0 2 provides a balance between preserving the original image s sharpness and avoiding additional aliasing due to oversharpening Note If you wish to use sharpening when rendering at native resolution Godot currently doesn t allow using the sharpening component of FSR1 RCAS independently from the upscaling component EASU As a workaround you can set the 3D rendering scale to 0 99 set the scaling mode to FSR 1 0 then adjust FSR sharpness as needed This allows using FSR1 while rendering at a near native resolution Alternatively you can set the scaling mode to FSR 2 2 with the 3D rendering scale set to 1 0 if you have enough GPU headroom This also provides high quality temporal antialiasing The FSR Sharpness setting remains functional in this case Mipmap bias Godot automatically uses a negative texture mipmap bias when the 3D resolution scale is set below 1 0 This allows for better preservation of texture detail at the cost of a grainy appearance on detailed textures The texture LOD bias currently affects both 2D and 3D rendering in the same way However keep in mind it only has an effect on textures with mipmaps enabled Textures used in 2D don t have mipmaps enabled by default which means only 3D rendering is affected unless you enabled mipmaps on 2D textures in the Import dock The formula used to determine the texture mipmap bias is log2f min scaling_3d_scale 1 0 custom_texture_mipmap_bias To counteract the blurriness added by some antialiasing methods Godot also adds a 0 25 offset when FXAA is enabled and a 0 5 offset when TAA is enabled If both are enabled at the same time a 0 75 offset is used This mipmap bias offset is applied before the resolution scaling offset so it does not change depending on resolution scale The texture LOD bias can manually be changed by adjusting the Rendering Textures Default Filters Texture Mipmap Bias advanced project setting It can also be changed at run time on Viewports by adjusting the texture_mipmap_bias property Warning Adjusting the mipmap LOD bias manually can be useful in certain scenarios but this should be done carefully to prevent the final image from looking grainy in motion Negative mipmap LOD bias can also decrease performance due to higher resolution mips having to be sampled further away Recommended values for a manual offset are between 0 5 and 0 0 Positive mipmap LOD bias will make mipmapped textures appear blurrier than intended This may improve performance slightly but is otherwise not recommended as the loss in visual quality is usually not worth the performance gain The example below shows an extreme case with a mipmap LOD bias of 1 0 and anisotropic filtering disabled to make the difference more noticeable Troubleshooting Performance does not increase much when decreasing resolution scale If performance doesn t increase much when decreasing resolution scale to a value like 0 5 it likely means the performance bottleneck is elsewhere in your scene For example your scene could have too many draw calls causing a CPU bottleneck to occur Likewise you may have too many graphics effects enabled for your GPU to handle such as SDFGI SSAO or SSR See the Performance tutorials for more information User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Variable rate shading What is variable rate shading In modern 3D rendering engines shaders are much more complex compared to before The advent of physically based rendering real time global illumination and screen space effects has increased the number of per pixel shading that must be performed to render each frame Additionally screen resolutions also have increased a lot with 1440p and 4K now being common target resolutions As a result the total shading cost in scene rendering usually represents a significant amount of the time taken to render each frame Variable rate shading VRS is a method of decreasing this shading cost by reducing the resolution of per pixel shading also called fragment shading while keeping the original resolution for rendering geometry This means geometry edges remain as sharp as they would without VRS VRS can be combined with any 3D antialiasing technique MSAA FXAA TAA SSAA VRS allows specifying the shading quality in a local manner which makes it possible to have certain parts of the viewport receive more detailed shading than others This is particularly useful in virtual reality VR to achieve foveated rendering where the center of the viewport is more detailed than the edges Here s a scene rendered with rate shading disabled then enabled using the density map linked at the bottom of this page Variable rate shading disabled in textured scene Variable rate shading enabled in textured scene lower quality but higher performance When used in scenes with low frequency detail such as scenes with a stylized low poly aesthetic it s possible to achieve similar performance gains but with less reduction in visual quality Variable rate shading disabled in untextured scene Variable rate shading enabled in untextured scene lower quality but higher performance Hardware support Variable rate shading is only supported on specific GPUs Desktop NVIDIA Turing and newer including GTX 1600 series AMD RDNA2 and newer both integrated and dedicated GPUs including Steam Deck Intel Arc Alchemist and newer dedicated GPUs only Intel integrated graphics do not support variable rate shading Mobile SoCs Snapdragon 888 and newer MediaTek Dimensity 9000 and newer ARM Mali G615 and newer As of January 2023 Apple and Raspberry Pi GPUs do not support variable rate shading Using variable rate shading in Godot Note Both Forward Plus and Forward Mobile rendering methods support variable rate shading VRS can be used in both pancake non XR and XR display modes The Compatibility rendering method does not support variable rate shading In the advanced Project Settings the Rendering VRS section offers settings to control variable rate shading on the root viewport Mode Controls the variable rate shading mode Disabled disables variable rate shading Texture uses a manually authored texture to set shading density see the property below XR automatically generates a texture suited for foveated rendering in virtual augmented reality Texture The texture to use to control shading density on the root viewport Only used if Mode is Texture For custom viewports the VRS mode and texture must be set manually to the Viewport node Note On unsupported hardware there is no visual difference when variable rate shading is enabled You can check whether hardware supports variable rate shading by running the editor or project with the verbose command line argument Creating a VRS density map If using the Texture VRS mode you must set a texture to be used as a density map Otherwise no effect will be visible You can create your own VRS density map manually using an image editor or generate it using another method e g on the CPU using the Image class or on the GPU using a shader However beware of performance implications when generating a VRS image dynamically If opting for dynamic generation make sure the VRS image generation process is fast enough to avoid outweighing the performance gains from VRS The texture must follow these rules The texture must use a lossless compression format so that colors can be matched precisely The following VRS densities are mapped to various colors with brighter colors representing a lower level of shading precision Density Color Comment 1 1 highest detail rgb 0 0 0 000000 1 2 rgb 0 85 0 005500 2 1 rgb 85 0 0 550000 2 2 rgb 85 85 0 555500 2 4 rgb 85 170 0 55aa00 4 2 rgb 170 85 0 aa5500 4 4 rgb 170 170 0 aaaa00 4 8 rgb 170 255 0 aaff00 Not supported on most hardware 8 4 rgb 255 170 0 ffaa00 Not supported on most hardware 8 8 lowest detail rgb 255 255 0 ffff00 Not supported on most hardware For example this VRS density texture provides the highest shading density in the center of the viewport and the lowest shading density in the corners Example VRS density map texture simulating foveated rendering There are no size or aspect ratio requirements for the VRS density texture However there is no benefit to using a VRS density map that is larger than the viewport resolution divided by the GPU s tile size The tile size is what determines the smallest area of pixels where the shading density can be changed separately from other tiles On most GPUs this tile size is 8 8 pixels You can view the tile size by running Godot with the verbose command line argument as it s printed in the VRS debugging information Therefore sticking to a relatively low resolution such as 256 256 square or 480 270 16 9 is recommended Depending on your use cases a square texture may be more suited compared to a texture that matches the most common viewport aspect ratio in your project such as 16 9 Tip When using variable rate shading you can use a negative texture mipmap LOD bias to reduce blurriness in areas with reduced shading rate Note that the texture LOD bias is set globally so this will also affect areas of the viewport with full shading rate Don t use values that are too low or textures will appear grainy Performance comparison To give an idea of how much VRS can improve performance in theory here s a performance comparison with the textured example scene shown at the top of this page The VRS density map example present on this page is used Results were captured on a GeForce RTX 4090 with the NVIDIA 525 60 11 driver Resolution VRS disabled VRS enabled Performance improvement 1920 1080 Full HD 2832 FPS 3136 FPS 10 7 2560 1440 QHD 2008 FPS 2256 FPS 12 3 3840 2160 4K 1236 FPS 1436 FPS 16 2 7680 4320 8K 384 FPS 473 FPS 23 1 In terms of performance improvements variable rate shading is more beneficial at higher target resolutions The reduction in visual quality is also less noticeable at high resolutions Note For non VR games you will probably have to use a less aggressive VRS texture than what was used in this example As a result the effective performance gains will be lower User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Prototyping levels with CSG CSG stands for Constructive Solid Geometry and is a tool to combine basic shapes or custom meshes to create more complex shapes In 3D modeling software CSG is mostly known as Boolean Operators Level prototyping is one of the main uses of CSG in Godot This technique allows users to create the most common shapes by combining primitives Interior environments can be created by using inverted primitives Note The CSG nodes in Godot are mainly intended for prototyping There is no built in support for UV mapping or editing 3D polygons though extruded 2D polygons can be used with the CSGPolygon3D node In addition CSG can t reliably create meshes made up of multiple nodes without holes If you re looking for an easy to use level design tool for a project you may want to use FuncGodot or Cyclops Level Builder instead CSG being used to subtract a torus shape from a box See also You can check how to use CSG nodes to build various shapes such as stairs or roads using the Constructive Solid Geometry demo project Introduction to CSG nodes Like other features of Godot CSG is supported in the form of nodes These are the CSG nodes CSGBox3D CSGCylinder3D also supports cone CSGSphere3D CSGTorus3D CSGPolygon3D CSGMesh3D CSGCombiner3D CSG tools features Every CSG node supports 3 kinds of boolean operations Union Geometry of both primitives is merged intersecting geometry is removed Intersection Only intersecting geometry remains the rest is removed Subtraction The second shape is subtracted from the first leaving a dent with its shape CSGPolygon The CSGPolygon3D node extrude along a Polygon drawn in 2D in X Y coordinates in the following ways Depth Extruded back a given amount Spin Extruded while spinning around its origin Path Extruded along a Path node This operation is commonly called lofting Note The Path mode must be provided with a Path3D node to work In the Path node draw the path and the polygon in CSGPolygon3D will extrude along the given path Custom meshes Any mesh can be used for CSGMesh3D the mesh can be modeled in other software and imported into Godot Multiple materials are supported There are some restrictions for geometry it must be closed it must not self intersect it must not contain internal faces every edge must connect to only two other faces CSGCombiner3D The CSGCombiner3D node is an empty shape used for organization It will only combine children nodes Processing order Every CSG node will first process its children nodes and their operations union intersection or subtraction in tree order and apply them to itself one after the other Note In the interest of performance make sure CSG geometry remains relatively simple as complex meshes can take a while to process If adding objects together such as table and room objects create them as separate CSG trees Forcing too many objects in a single tree will eventually start affecting performance Only use binary operations where you actually need them Prototyping a level We will prototype a room to practice the use of CSG tools Tip Working in Orthogonal projection gives a better view when combining the CSG shapes Our level will contain these objects a room a bed a lamp a desk a bookshelf Create a scene with a Node3D node as root node Tip The default lighting of the environment doesn t provide clear shading at some angles Change the display mode using Display Overdraw in the 3D viewport menu or add a DirectionalLight node to help you see clearly Create a CSGBox3D and name it room enable Invert Faces and change the dimensions of your room Next create a CSGCombiner3D and name it desk A desk has one surface and 4 legs Create 1 CSGBox3D children node in Union mode for the surface and adjust the dimensions Create 4 CSGBox3D children nodes in Union mode for the legs and adjust the dimensions Adjust their placement to resemble a desk Note CSG nodes inside a CSGCombiner3D will only process their operation within the combiner Therefore CSGCombiner3Ds are used to organize CSG nodes Create a CSGCombiner3D and name it bed Our bed consists of 3 parts the bed the mattress and a pillow Create a CSGBox3D and adjust its dimension for the bed Create another CSGBox3D and adjust its dimension for the mattress We will create another CSGCombiner3D named pillow as the child of bed The scene tree should look like this We will combine 3 CSGSphere3D nodes in Union mode to form a pillow Scale the Y axis of the spheres and enable Smooth Faces Select the pillow node and switch the mode to Subtraction the combined spheres will cut a hole into the mattress Try to re parent the pillow node to the root Node3D node the hole will disappear Note This is to illustrate the effect of CSG processing order Since the root node is not a CSG node the CSGCombiner3D nodes are the end of the operations this shows the use of CSGCombiner3D to organize the CSG scene Undo the re parent after observing the effect The bed you ve built should look like this Create a CSGCombiner3D and name it lamp A lamp consists of 3 parts the stand the pole and the lampshade Create a CSGCylinder3D enable the Cone option and make it the stand Create another CSGCylinder3D and adjust the dimensions to use it as a pole We will use a CSGPolygon3D for the lampshade Use the Spin mode for the CSGPolygon3D and draw a trapezoid while in Front View numeric keypad 1 this shape will extrude around the origin and form the lampshade Adjust the placement of the 3 parts to make it look like a lamp Create a CSGCombiner3D and name it bookshelf We will use 3 CSGBox3D nodes for the bookshelf Create a CSGBox3D and adjust its dimensions this will be the size of the bookshelf Duplicate the CSGBox3D and shorten the dimensions of each axis and change the mode to Subtraction You ve almost built a shelf Create one more CSGBox3D for dividing the shelf into two levels Position your furniture in your room as you like and your scene should look this You ve successfully prototyped a room level with the CSG tools in Godot CSG tools can be used for designing all kinds of levels such as a maze or a city explore its limitations when designing your game Using prototype textures Godot s Standard Material 3D and ORM Material 3D supports triplanar mapping which can be used to automatically apply a texture to arbitrary objects without distortion This is handy when using CSG as Godot doesn t support editing UV maps on CSG nodes yet Triplanar mapping is relatively slow which usually restricts its usage to organic surfaces like terrain Still when prototyping it can be used to quickly apply textures to CSG based levels Note If you need some textures for prototyping Kenney made a set of CC0 licensed prototype textures There are two ways to apply a material to a CSG node Applying it to a CSGCombiner3D node as a material override Geometry Material Override in the Inspector This will affect its children automatically but will make it impossible to change the material in individual children Applying a material to individual nodes Material in the Inspector This way each CSG node can have its own appearance Subtractive CSG nodes will apply their material to the nodes they re digging into To apply triplanar mapping to a CSG node select it go to the Inspector click the empty text next to Material Override or Material for individual CSG nodes Choose New StandardMaterial3D Click the newly created material s icon to edit it Unfold the Albedo section and load a texture into the Texture property Now unfold the Uv1 section and check Triplanar You can change the texture offset and scale on each axis by playing with the Scale and Offset properties just above Higher values in the Scale property will cause the texture to repeat more often Tip You can copy a StandardMaterial3D to reuse it across CSG nodes To do so click the dropdown arrow next to a material property in the Inspector and choose Copy To paste it select the node you d like to apply the material onto click the dropdown arrow next to its material property then choose Paste Exporting as glTF It can be useful to block out a level using CSG then export it as a 3d model to import into 3D modeling software You can do this by selecting Scene Export As glTF 2 0 Scene User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using GridMaps Introduction Gridmaps are a tool for creating 3D game levels similar to the way TileMap works in 2D You start with a predefined collection of 3D meshes a MeshLibrary that can be placed on a grid as if you were building a level with an unlimited amount of Lego blocks Collisions and navigation can also be added to the meshes just like you would do with the tiles of a tilemap Example project To learn how GridMaps work start by downloading the sample project gridmap_starter zip Unzip this project and add it to the Project Manager using the Import button Creating a MeshLibrary To begin you need a MeshLibrary which is a collection of individual meshes that can be used in the gridmap Open the mesh_library_source tscn scene to see an example of how to set up the mesh library As you can see this scene has a Node3D node as its root and a number of MeshInstance3D node children If you don t need any physics in your scene then you re done However in most cases you ll want to assign collision bodies to the meshes Collisions You can manually assign a StaticBody3D and CollisionShape3D to each mesh Alternatively you can use the Mesh menu to automatically create the collision body based on the mesh data Note that a Convex collision body will work better for simple meshes For more complex shapes select Create Trimesh Static Body Once each mesh has a physics body and collision shape assigned your mesh library is ready to be used Materials Only the materials from within the meshes are used when generating the mesh library Materials set on the node will be ignored NavigationMeshes Like all mesh instances MeshLibrary items can be assigned a NavigationMesh resource which can be created manually or baked as described below To create the NavigationMesh from a MeshLibrary scene export place a NavigationRegion3D child node below the main MeshInstance3D for the GridMap item Add a valid NavigationMesh resource to the NavigationRegion3D and some source geometry nodes below and bake the NavigationMesh Note With small grid cells it is often necessary to reduce the NavigationMesh properties for agent radius and region minimum size Nodes below the NavigationRegion3D are ignored for the MeshLibrary scene export so additional nodes can be added as source geometry just for baking the navmesh Warning The baked cell size of the NavigationMesh must match the NavigationServer map cell size to properly merge the navigation meshes of different grid cells Exporting the MeshLibrary To export the library click on Scene Export As MeshLibrary and save it as a resource You can find an already exported MeshLibrary in the project named MeshLibrary tres Using GridMap Create a new scene and add a GridMap node Add the mesh library by dragging the resource file from the FileSystem dock and dropping it in the Theme property in the Inspector The Cell Size property should be set to the size of your meshes You can leave it at the default value for the demo Set the Center Y property to Off Now you can start designing the level by choosing a tile from the palette and placing it with Left Click in the editor window Use Right click to remove a tile Use the arrows next to the GridMap menu to change the floor that you are working on Click on the GridMap menu to see options and shortcuts For example pressing S rotates a tile around the y axis Holding Shift and dragging with the left mouse button will draw a selection box You can duplicate or clear the selected area using the respective menu options In the menu you can also change the axis you re drawing on as well as shift the drawing plane higher or lower on its axis Using GridMap in code See GridMap for details on the node s methods and member variables User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Animation This section of the tutorial covers using the two animation nodes in Godot and the animation editor Introduction to the animation features Animation Track types Cutout animation 2D skeletons Using AnimationTree Playing videos Creating movies See Importing 3D scenes for information on importing animations from a 3D model Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Introduction to the animation features The AnimationPlayer node allows you to create anything from simple to complex animations In this guide you learn to Work with the Animation Panel Animate any property of any node Create a simple animation In Godot you can animate anything available in the Inspector such as Node transforms sprites UI elements particles visibility and color of materials and so on You can also modify values of script variables and even call functions Create an AnimationPlayer node To use the animation tools we first have to create an AnimationPlayer node The AnimationPlayer node type is the data container for your animations One AnimationPlayer node can hold multiple animations which can automatically transition to one another The AnimationPlayer node After you create an AnimationPlayer node click on it to open the Animation Panel at the bottom of the viewport The animation panel position The animation panel consists of four parts The animation panel Animation controls i e add load save and delete animations The tracks listing The timeline with keyframes The timeline and track controls where you can zoom the timeline and edit tracks for example Computer animation relies on keyframes A keyframe defines the value of a property at a point in time Diamond shapes represent keyframes in the timeline A line between two keyframes indicates that the value doesn t change between them Keyframes in Godot You set values of a node s properties and create animation keyframes for them When the animation runs the engine will interpolate the values between the keyframes resulting in them gradually changing over time Two keyframes are all it takes to obtain a smooth motion The timeline defines how long the animation will take You can insert keyframes at various points and change their timing The timeline in the animation panel Each line in the Animation Panel is an animation track that references a Normal or Transform property of a node Each track stores a path to a node and its affected property For example the position track in the illustration refers to the position property of the Sprite2D node Example of Normal animation tracks Tip If you animate the wrong property you can edit a track s path at any time by double clicking on it and typing the new path Play the animation using the Play from beginning button or pressing Shift D on keyboard to see the changes instantly Tutorial Creating a simple animation Scene setup For this tutorial we ll create a Sprite node with an AnimationPlayer as its child We will animate the sprite to move between two points on the screen Our scene setup Warning AnimationPlayer inherits from Node instead of Node2D or Node3D which means that the child nodes will not inherit the transform from the parent nodes due to a bare Node being present in the hierarchy Therefore it is not recommended to add nodes that have a 2D 3D transform as a child of an AnimationPlayer node The sprite holds an image texture For this tutorial select the Sprite2D node click Texture in the Inspector and then click Load Select the default Godot icon for the sprite s texture Adding an animation Select the AnimationPlayer node and click the Animation button in the animation editor From the list select New to add a new animation Enter a name for the animation in the dialog box Add a new animation Managing animation libraries For reusability the animation is registered in a list in the animation library resource If you add an animation to AnimationPlayer without specifying any particular settings the animation will be registered in the Global animation library that AnimationPlayer has by default Manage animations If there are multiple animation libraries and you try to add an animation a dialog box will appear with options Add a new animation with library option Adding a track To add a new track for our sprite select it and take a look at the toolbar Convenience buttons These switches and buttons allow you to add keyframes for the selected node s location rotation and scale Since we are only animating the sprite s position make sure that only the location switch is selected The selected switches are blue Click on the key button to create the first keyframe Since we don t have a track set up for the Position property yet Godot will offer to create it for us Click Create Godot will create a new track and insert our first keyframe at the beginning of the timeline The sprite track The second keyframe We need to set our sprite s end location and how long it will take for it to get there Let s say we want it to take two seconds to move between the points By default the animation is set to last only one second so change the animation length to 2 in the controls on the right side of the animation panel s timeline header Animation length Now move the sprite right to its final position You can use the Move tool in the toolbar or set the Position s X value in the Inspector Click on the timeline header near the two second mark in the animation panel and then click the key button in the toolbar to create the second keyframe Run the animation Click on the Play from beginning button Yay Our animation runs The animation Autoplay on load You can make it so an animation plays automatically when the AnimationPlayer nodes scene starts or joins another scene To do this click the Autoplay on load button in the animation editor it s right next to the edit button The icon for it will also appear in front of the name of the animation so you can easily identify which one is the autoplay animation Back and forth Godot has an interesting feature that we can use in animations When Animation Looping is set but there s no keyframe specified at the end of the animation the first keyframe is also the last This means we can extend the animation length to four seconds now and Godot will also calculate the frames from the last keyframe to the first moving our sprite back and forth Animation loop You can change this behavior by changing the track s loop mode This is covered in the next chapter Track settings Each property track has a settings panel at the end where you can set its update mode track interpolation and loop mode Track settings The update mode of a track tells Godot when to update the property values This can be Continuous Update the property on each frame Discrete Only update the property on keyframes Capture if the first keyframe s time is greater than 0 0 the current value of the property will be remembered and will be blended with the first animation key For example you could use the Capture mode to move a node that s located anywhere to a specific location Track mode You will usually use Continuous mode The other types are used to script complex animations Track interpolation tells Godot how to calculate the frame values between keyframes These interpolation modes are supported Nearest Set the nearest keyframe value Linear Set the value based on a linear function calculation between the two keyframes Cubic Set the value based on a cubic function calculation between the two keyframes Linear Angle Only appears in rotation property Linear mode with shortest path rotation Cubic Angle Only appears in rotation property Cubic mode with shortest path rotation Track interpolation With Cubic interpolation animation is slower at keyframes and faster between them which leads to more natural movement Cubic interpolation is commonly used for character animation Linear interpolation animates changes at a fixed pace resulting in a more robotic effect Godot supports two loop modes which affect the animation when it s set to loop Loop modes Clamp loop interpolation When this is selected the animation stops after the last keyframe for this track When the first keyframe is reached again the animation will reset to its values Wrap loop interpolation When this is selected Godot calculates the animation after the last keyframe to reach the values of the first keyframe again Keyframes for other properties Godot s animation system isn t restricted to position rotation and scale You can animate any property If you select your sprite while the animation panel is visible Godot will display a small keyframe button in the Inspector for each of the sprite s properties Click on one of these buttons to add a track and keyframe to the current animation Keyframes for other properties Edit keyframes You can click on a keyframe in the animation timeline to display and edit its value in the Inspector Keyframe editor editing a key You can also edit the easing value for a keyframe here by clicking and dragging its easing curve This tells Godot how to interpolate the animated property when it reaches this keyframe You can tweak your animations this way until the movement looks right Using RESET tracks You can set up a special RESET animation to contain the default pose This is used to ensure that the default pose is restored when you save the scene and open it again in the editor For existing tracks you can add an animation called RESET case sensitive then add tracks for each property that you want to reset The only keyframe should be at time 0 and give it the desired default value for each track If AnimationPlayer s Reset On Save property is set to true the scene will be saved with the effects of the reset animation applied as if it had been seeked to time 0 0 This only affects the saved file the property tracks in the editor stay where they were If you want to reset the tracks in the editor select the AnimationPlayer node open the Animation bottom panel then choose Apply Reset in the animation editor s Edit dropdown menu When using the keyframe icon next to a property in the inspector the editor will ask you to automatically create a RESET track Note RESET tracks are also used as reference values for blending See also For better blending Onion Skinning Godot s animation editor allows you use onion skinning while creating an animation To turn this feature on click on the onion icon in the top right of the animation editor Now there will be transparent red copies of what is being animated in its previous positions in the animation The three dots button next to the onion skinning button opens a dropdown menu that lets you adjust how it works including the ability to use onion skinning for future frames User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Animation Track types This page gives an overview of the track types available for Godot s animation player node on top of the default property tracks See also We assume you already read Introduction to the animation features which covers the basics including property tracks Property Track The most basic track type See Introduction to the animation features Position 3D Rotation 3D Scale 3D Track These 3D transform tracks control the location rotation and scale of a 3D object They make it easier to animate a 3D object s transform compared to using regular property tracks It is designed for animations imported from external 3D models and can reduce resource capacity through compression Blend Shape Track A blend shape track is optimized for animating blend shape in MeshInstance3D It is designed for animations imported from external 3D models and can reduce resource capacity through compression Call Method Track A call method track allow you to call a function at a precise time from within an animation For example you can call queue_free to delete a node at the end of a death animation Note The events placed on the call method track are not executed when the animation is previewed in the editor for safety To create such a track in the editor click Add Track Call Method Track Then a window opens and lets you select the node to associate with the track To call one of the node s methods right click the timeline and select Insert Key A window opens with a list of available methods Double click one to finish creating the keyframe To change the method call or its arguments click on the key and head to the inspector dock There you can change the method to call If you expand the Args section you will see a list of arguments you can edit To create such a track through code pass a dictionary that contains the target method s name and parameters as the Variant for key in Animation track_insert_key The keys and their expected values are as follows Key Value method The name of the method as a String args The arguments to pass to the function as an Array GDScript C Create a call method track func create_method_animation_track Get or create the animation the target method will be called from var animation AnimationPlayer get_animation idle Get or create the target method s animation track var track_index animation add_track Animation TYPE_METHOD Make the arguments for the target method jump var jump_velocity 400 0 var multiplier randf_range 8 1 2 Get or create a dictionary with the target method s name and arguments var method_dictionary method jump args jump_velocity multiplier Set scene tree path to node with target method animation track_set_path track_index Add the dictionary as the animation method track s key animation track_insert_key track_index 0 6 method_dictionary 0 The target method that will be called from the animation func jump jump_velocity multiplier velocity y jump_velocity multiplier Copy to clipboard Create a call method track public void CreateAnimationTrack Get reference to the AnimationPlayer var animationPlayer GetNode AnimationPlayer AnimationPlayer Get or create the animation the target method will be called from var animation animationPlayer GetAnimation idle Get or create the target method s animation track var trackIndex animation AddTrack Animation TrackType Method Make the arguments for the target method Jump var jumpVelocity 400 0 var multiplier GD RandRange 8 1 2 Get or create a dictionary with the target method s name and arguments var methodDictionary new Godot Collections Dictionary method MethodName Jump args new Godot Collections Array jumpVelocity multiplier Set scene tree path to node with target method animation TrackSetPath trackIndex Add the dictionary as the animation method track s key animation TrackInsertKey trackIndex 0 6 methodDictionary 0 The target method that will be called from the animation private void Jump float jumpVelocity float multiplier Velocity new Vector2 Velocity X jumpVelocity multiplier Copy to clipboard Bezier Curve Track A bezier curve track is similar to a property track except it allows you to animate a property s value using a bezier curve Note Bezier curve track and property track cannot be blended in AnimationPlayer and AnimationTree To create one click Add Track Bezier Curve Track As with property tracks you need to select a node and a property to animate To open the bezier curve editor click the curve icon to the right of the animation track In the editor keys are represented by filled diamonds and the outlined diamonds connected to them by a line control curve s shape Tip For better precision while manually working with curves you might want to alter the zoom levels of the editor The slider on the bottom right of the editor can be used to zoom in and out on the time axis you can also do that with Ctrl Shift Mouse wheel Using Ctrl Alt Mouse wheel will zoom in and out on the Y axis In the right click panel of the editor you can select the handle mode Free Allows you to orient a manipulator in any direction without affecting the other s position Linear Does not allow rotation of the manipulator and draws a linear graph Balanced Makes it so manipulators rotate together but the distance between the key and a manipulator is not mirrored Mirrored Makes the position of one manipulator perfectly mirror the other including their distance to the key Audio Playback Track If you want to create an animation with audio you need to create an audio playback track To create one your scene must have either an AudioStreamPlayer AudioStreamPlayer2D or AudioStreamPlayer3D node When creating the track you must select one of those nodes To play a sound in your animation drag and drop an audio file from the file system dock onto the animation track You should see the waveform of your audio file in the track To remove a sound from the animation you can right click it and select Delete Key s or click on it and press the Del key The blend mode allows you to choose whether or not to adjust the audio volume when blending in the AnimationTree Animation Playback Track Animation playback tracks allow you to sequence the animations of other animation player nodes in a scene For example you can use it to animate several characters in a cut scene To create an animation playback track select New Track Animation Playback Track Then select the animation player you want to associate with the track To add an animation to the track right click on it and insert a key Select the key you just created to select an animation in the inspector dock If an animation is already playing and you want to stop it early you can create a key and have it set to STOP in the inspector Note If you instanced a scene that contains an animation player into your scene you need to enable Editable Children in the scene tree to access its animation player Also an animation player cannot reference itself User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Cutout animation What is it Traditionally cutout animation is a type of stop motion animation in which pieces of paper or other thin material are cut into special shapes and arranged in two dimensional representations of characters and objects Characters bodies are usually made out of several pieces The pieces are arranged and photographed once for each frame of the film The animator moves and rotates the parts in small increments between each shot to create the illusion of movement when the images are played back quickly in sequence Simulations of cutout animation can now be created using software as seen in South Park and Jake and the Never Land Pirates In video games this technique has also become popular Examples of this are Paper Mario or Rayman Origins Cutout animation in Godot Godot provides tools for working with cutout rigs and is ideal for the workflow The animation system is fully integrated with the engine This means animations can control much more than just motion of objects Textures sprite sizes pivots opacity color modulation and more can all be animated and blended Combine animation styles AnimatedSprite2D allows traditional cel animation to be used alongside cutout animation In cel animation different animation frames use entirely different drawings rather than the same pieces positioned differently In an otherwise cutout based animation cel animation can be used selectively for complex parts such as hands feet changing facial expressions etc Custom Shaped Elements Custom shapes can be created with Polygon2D allowing UV animation deformations etc Particle Systems A cutout animation rig can be combined with particle systems This can be useful for magic effects jetpacks etc Custom Colliders Set colliders and influence areas in different parts of the skeletons great for bosses and fighting games Animation Tree Allows complex combinations and blending between several animations the same way it works in 3D And much more Making of GBot For this tutorial we will use as demo content the pieces of the GBot character created by Andreas Esau Get your assets cutout_animation_assets zip Setting up the rig Create an empty Node2D as root of the scene we will work under it The first node of the model is the hip Generally both in 2D and 3D the hip is the root of the skeleton This makes it easier to animate Next will be the torso The torso needs to be a child of the hip so create a child sprite and load the torso texture later accommodate it properly This looks good Let s see if our hierarchy works as a skeleton by rotating the torso We can do this be pressing E to enter rotate mode and dragging with the left mouse button To exit rotate mode hit ESC The rotation pivot is wrong and needs to be adjusted This small cross in the middle of the Sprite2D is the rotation pivot Adjusting the pivot The pivot can be adjusted by changing the offset property in the Sprite2D The pivot can also be adjusted visually While hovering over the desired pivot point press V to move the pivot there for the selected Sprite2D There is also a tool in the tool bar that has a similar function Continue adding body pieces starting with the right arm Make sure to put each sprite in its correct place in the hierarchy so its rotations and translations are relative to its parent With the left arm there s a problem In 2D child nodes appear in front of their parents We want the left arm to appear behind the hip and the torso We could move the left arm nodes behind the hip above the hip node in the scene hierarchy but then the left arm is no longer in its proper place in the hierarchy This means it wouldn t be affected by the movement of the torso We ll fix this problem with RemoteTransform2D nodes Note You can also fix depth ordering problems by adjusting the Z property of any node inheriting from Node2D RemoteTransform2D node The RemoteTransform2D node transforms nodes somewhere else in the hierarchy This node applies its own transform including any transformation it inherits from its parents to the remote node it targets This allows us to correct the visibility order of our elements independently of the locations of those parts in the cutout hierarchy Create a RemoteTransform2D node as a child of the torso Call it remote_arm_l Create another RemoteTransform2D node inside the first and call it remote_hand_l Use the Remote Path property of the two new nodes to target the arm_l and hand_l sprites respectively Moving the RemoteTransform2D nodes now moves the sprites So we can create animations by adjusting the RemoteTransform2D transforms Completing the skeleton Complete the skeleton by following the same steps for the rest of the parts The resulting scene should look similar to this The resulting rig will be easy to animate By selecting the nodes and rotating them you can animate forward kinematics FK efficiently For simple objects and rigs this is fine but there are limitations Selecting sprites in the main viewport can become difficult in complex rigs The scene tree ends up being used to select parts instead which can be slower Inverse Kinematics IK is useful for animating extremities like hands and feet and can t be used with our rig in its current state To solve these problems we ll use Godot s skeletons Skeletons In Godot there is a helper to create bones between nodes The bone linked nodes are called skeletons As an example let s turn the right arm into a skeleton To create a skeleton a chain of nodes must be selected from top to bottom Then click on the Skeleton menu and select Make Bones This will add bones covering the arm but the result may be surprising Why does the hand lack a bone In Godot a bone connects a node with its parent And there s currently no child of the hand node With this knowledge let s try again The first step is creating an endpoint node Any kind of node will do but Marker2D is preferred because it s visible in the editor The endpoint node will ensure that the last bone has orientation Now select the whole chain from the endpoint to the arm and create bones The result resembles a skeleton a lot more and now the arm and forearm can be selected and animated Create endpoints for all important extremities Generate bones for all articulable parts of the cutout with the hip as the ultimate connection between all of them You may notice that an extra bone is created when connecting the hip and torso Godot has connected the hip node to the scene root with a bone and we don t want that To fix this select the root and hip node open the Skeleton menu click clear bones Your final skeleton should look something like this You might have noticed a second set of endpoints in the hands This will make sense soon Now that the whole figure is rigged the next step is setting up the IK chains IK chains allow for more natural control of extremities IK chains IK stands for inverse kinematics It s a convenient technique for animating the position of hands feet and other extremities of rigs like the one we ve made Imagine you want to pose a character s foot in a specific position on the ground Without IK chains each motion of the foot would require rotating and positioning several other bones the shin and the thigh at least This would be quite complex and lead to imprecise results IK allows us to move the foot directly while the shin and thigh self adjust Note IK chains in Godot currently work in the editor only not at runtime They are intended to ease the process of setting keyframes and are not currently useful for techniques like procedural animation To create an IK chain select a chain of bones from endpoint to the base for the chain For example to create an IK chain for the right leg select the following Then enable this chain for IK Go to Edit Make IK Chain As a result the base of the chain will turn Yellow Once the IK chain is set up grab any child or grand child of the base of the chain e g a foot and move it You ll see the rest of the chain adjust as you adjust its position Animation tips The following section will be a collection of tips for creating animation for your cutout rigs For more information on how the animation system in Godot works see Introduction to the animation features Setting keyframes and excluding properties Special contextual elements appear in the top toolbar when the animation editor window is open The key button inserts location rotation and scale keyframes for the selected objects or bones at the current playhead position The loc rot and scl toggle buttons to the left of the key button modify its function allowing you to specify which of the three properties keyframes will be created for Here s an illustration of how this can be useful Imagine you have a node which already has two keyframes animating its scale only You want to add an overlapping rotation movement to the same node The rotation movement should begin and end at different times from the scale change that s already set up You can use the toggle buttons to have only rotation information added when you add a new keyframe This way you can avoid adding unwanted scale keyframes which would disrupt the existing scale animation Creating a rest pose Think of a rest pose as a default pose that your cutout rig should be set to when no other pose is active in your game Create a rest pose as follows 1 Make sure the rig parts are positioned in what looks like a resting arrangement Create a new animation rename it rest Select all nodes in your rig box selection should work fine 4 Make sure the loc rot and scl toggle buttons are all active in the toolbar 5 Press the key button Keys will be inserted for all selected parts storing their current arrangement This pose can now be recalled when necessary in your game by playing the rest animation you ve created Modifying rotation only When animating a cutout rig often it s only the rotation of the nodes that needs to change Location and scale are rarely used So when inserting keys you might find it convenient to have only the rot toggle active most of the time This will avoid the creation of unwanted animation tracks for position and scale Keyframing IK chains When editing IK chains it s not necessary to select the whole chain to add keyframes Selecting the endpoint of the chain and inserting a keyframe will automatically insert keyframes for all other parts of the chain too Visually move a sprite behind its parent Sometimes it is necessary to have a node change its visual depth relative to its parent node during an animation Think of a character facing the camera who pulls something out from behind his back and holds it out in front of him During this animation the whole arm and the object in his hand would need to change their visual depth relative to the body of the character To help with this there s a keyframable Behind Parent property on all Node2D inheriting nodes When planning your rig think about the movements it will need to perform and give some thought to how you ll use Behind Parent and or RemoteTransform2D nodes They provide overlapping functionality Setting easing curves for multiple keys To apply the same easing curve to multiple keyframes at once Select the relevant keys Click on the pencil icon in the bottom right of the animation panel This will open the transition editor In the transition editor click on the desired curve to apply it 2D Skeletal deform Skeletal deform can be used to augment a cutout rig allowing single pieces to deform organically e g antennae that wobble as an insect character walks This process is described in a separate tutorial User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request 2D skeletons Introduction When working with 3D skeletal deforms are common for characters and creatures and most 3D modeling applications support it For 2D as this function is not used as often it s difficult to find mainstream software aimed for this One option is to create animations in third party software such as Spine or Dragonbones From Godot 3 1 onwards though this functionality is supported built in Why would you want to do skeletal animations directly in Godot The answer is that there are many advantages to it Better integration with the engine so less hassle importing and editing from an external tool Ability to control particle systems shaders sounds call scripts colors transparency etc in animations The built in skeletal system in Godot is very efficient and designed for performance The following tutorial will then explain 2D skeletal deformations Setup See also Before starting we recommend you to go through the Cutout animation tutorial to gain a general understanding of animating within Godot For this tutorial we will be using a single image to construct our character Download it from gBot_pieces png or save the image below It is also advised to download the final character image gBot_complete png to have a good reference for putting the different pieces together Creating the polygons Create a new scene for your model if it s going to be an animated character you may want to use a CharacterBody2D For ease of use an empty 2D node is created as a root for the polygons Begin with a Polygon2D node There is no need to place it anywhere in the scene for now so simply create it like this Select it and assign the texture with the character pieces you have downloaded before Drawing a polygon directly is not advised Instead open the UV dialog for the polygon Head over to the Points mode select the pencil and draw a polygon around the desired piece Duplicate the polygon node and give it a proper name Then enter the UV dialog again and replace the old polygon with another one in the new desired piece When you duplicate nodes and the next piece has a similar shape you can edit the previous polygon instead of drawing a new one After moving the polygon remember to update the UV by selecting Edit Copy Polygon to UV in the Polygon 2D UV Editor Keep doing this until you mapped all pieces You will notice that pieces for nodes appear in the same layout as they do in the original texture This is because by default when you draw a polygon the UV and points are the same Rearrange the pieces and build the character This should be pretty quick There is no need to change pivots so don t bother making sure rotation pivots for each piece are right you can leave them be for now Ah the visual order of the pieces is not correct yet as some are covering wrong pieces Rearrange the order of the nodes to fix this And there you go It was definitely much easier than in the cutout tutorial Creating the skeleton Create a Skeleton2D node as a child of the root node This will be the base of our skeleton Create a Bone2D node as a child of the skeleton Put it on the hip usually skeletons start here The bone will be pointing to the right but you can ignore this for now Keep creating bones in hierarchy and naming them accordingly At the end of this chain there will be a jaw node It is again very short and pointing to the right This is normal for bones without children The length of tip bones can be changed with a property in the inspector In this case we don t need to rotate the bone coincidentally the jaw points right in the sprite but in case you need to feel free to do it Again this is only really needed for tip bones as nodes with children don t usually need a length or a specific rotation Keep going and build the whole skeleton You will notice that all bones raise a warning about a missing rest pose A rest pose is the default pose for a skeleton you can come back to it anytime you want which is very handy for animating To set one click on the skeleton node in the scene tree then click on the Skeleton2D button in the toolbar and select Overwrite Rest Pose from the dropdown menu The warnings will go away If you modify the skeleton add remove bones you will need to set the rest pose again Deforming the polygons Select the previously created polygons and assign the skeleton node to their Skeleton property This will ensure that they can eventually be deformed by it Click the property highlighted above and select the skeleton node Again open the UV editor for the polygon and go to the Bones section You will not be able to paint weights yet For this you need to synchronize the list of bones from the skeleton with the polygon This step is done only once and manually unless you modify the skeleton by adding removing renaming bones It ensures that your rigging information is kept in the polygon even if a skeleton node is accidentally lost or the skeleton modified Push the Sync Bones to Polygon button to sync the list The list of bones will automatically appear By default your polygon has no weight assigned to any of them Select the bones you want to assign weight to and paint them Points in white have a full weight assigned while points in black are not influenced by the bone If the same point is painted white for multiple bones the influence will be distributed amongst them so usually there is not that much need to use shades in between unless you want to polish the bending effect After painting the weights animating the bones NOT the polygons will have the desired effect of modifying and bending the polygons accordingly As you only need to animate bones in this approach work becomes much easier But it s not all roses Trying to animate bones that bend the polygon will often yield unexpected results This happens because Godot generates internal triangles that connect the points when drawing the polygon They don t always bend the way you would expect To solve this you need to set hints in the geometry to clarify how you expect it to deform Internal vertices Open the UV menu for each bone again and go to the Points section Add some internal vertices in the regions where you expect the geometry to bend Now go to the Polygon section and redraw your own polygons with more detail Imagine that as your polygons bend you need to make sure they deform the least possible so experiment a bit to find the right setup Once you start drawing the original polygon will disappear and you will be free to create your own This amount of detail is usually fine though you may want to have more fine grained control over where triangles go Experiment by yourself until you get the results you like Note Don t forget that your newly added internal vertices also need weight painting Go to the Bones section again to assign them to the right bones Once you are all set you will get much better results User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using AnimationTree Introduction With AnimationPlayer Godot has one of the most flexible animation systems that you can find in any game engine The ability to animate almost any property in any node or resource as well as having dedicated transform bezier function calling audio and sub animation tracks is pretty much unique However the support for blending those animations via AnimationPlayer is relatively limited as only a fixed cross fade transition time can be set AnimationTree is a new node introduced in Godot 3 1 to deal with advanced transitions It supersedes the ancient AnimationTreePlayer while adding a huge amount of features and flexibility Creating an AnimationTree Before starting it must be made clear that an AnimationTree node does not contain its own animations Instead it uses animations contained in an AnimationPlayer node This way you can edit your animations or import them from a 3D scene as usual and then use this extra node to control the playback The most common way to use AnimationTree is in a 3D scene When importing your scenes from a 3D exchange format they will usually come with animations built in either multiple ones or split from a large one on import At the end the imported Godot scene will contain the animations in a AnimationPlayer node As you rarely use imported scenes directly in Godot they are either instantiated or inherited from you can place the AnimationTree node in your new scene which contains the imported one Afterwards point the AnimationTree node to the AnimationPlayer that was created in the imported scene This is how it s done in the Third Person Shooter demo for reference A new scene was created for the player with a CharacterBody3D as root Inside this scene the original dae Collada file was instantiated and an AnimationTree node was created Creating a tree There are three main types of nodes that can be used in AnimationTree Animation nodes which reference an animation from the linked AnimationPlayer Animation Root nodes which are used to blend sub nodes Animation Blend nodes which are used within AnimationNodeBlendTree as single graph blending via multiple input ports To set a root node in AnimationTree a few types are available AnimationNodeAnimation Selects an animation from the list and plays it This is the simplest root node and generally not used directly as root AnimationNodeBlendTree Contains many blend type nodes such as mix blend2 blend3 one shot etc This is one of the most commonly used roots AnimationNodeStateMachine Contains multiple root nodes as children in a graph Each node is used as a state and provides multiple functions to alternate between states AnimationNodeBlendSpace2D Allows placing root nodes in a 2D blend space Control the blend position in 2D to mix between multiple animations AnimationNodeBlendSpace1D Simplified version of the above 1D Blend tree An AnimationNodeBlendTree can contain both root and regular nodes used for blending Nodes are added to the graph from a menu All blend trees contain an Output node by default and something has to be connected to it in order for animations to play The easiest way to test this functionality is to connect an Animation node to it directly This will simply play back the animation Make sure that the AnimationTree is active for something to actually happen Following is a short description of available nodes Blend2 Blend3 These nodes will blend between two or three inputs by a user specified blend value For more complex blending it is advised to use blend spaces instead Blending can also use filters i e you can control individually which tracks go through the blend function This is very useful for layering animations on top of each other OneShot This node will execute a sub animation and return once it finishes Blend times for fading in and out can be customized as well as filters After setting the request and changing the animation playback the one shot node automatically clears the request on the next process frame by setting its request value to AnimationNodeOneShot ONE_SHOT_REQUEST_NONE GDScript C Play child animation connected to shot port animation_tree set parameters OneShot request AnimationNodeOneShot ONE_SHOT_REQUEST_FIRE Alternative syntax same result as above animation_tree parameters OneShot request AnimationNodeOneShot ONE_SHOT_REQUEST_FIRE Abort child animation connected to shot port animation_tree set parameters OneShot request AnimationNodeOneShot ONE_SHOT_REQUEST_ABORT Alternative syntax same result as above animation_tree parameters OneShot request AnimationNodeOneShot ONE_SHOT_REQUEST_ABORT Get current state read only animation_tree get parameters OneShot active Alternative syntax same result as above animation_tree parameters OneShot active Copy to clipboard Play child animation connected to shot port animationTree Set parameters OneShot request int AnimationNodeOneShot OneShotRequest Fire Abort child animation connected to shot port animationTree Set parameters OneShot request int AnimationNodeOneShot OneShotRequest Abort Get current state read only animationTree Get parameters OneShot active Copy to clipboard TimeSeek This node can be used to cause a seek command to happen to any sub children of the animation graph Use this node type to play an Animation from the start or a certain playback position inside the AnimationNodeBlendTree After setting the time and changing the animation playback the seek node automatically goes into sleep mode on the next process frame by setting its seek_request value to 1 0 GDScript C Play child animation from the start animation_tree set parameters TimeSeek seek_request 0 0 Alternative syntax same result as above animation_tree parameters TimeSeek seek_request 0 0 Play child animation from 12 second timestamp animation_tree set parameters TimeSeek seek_request 12 0 Alternative syntax same result as above animation_tree parameters TimeSeek seek_request 12 0 Copy to clipboard Play child animation from the start animationTree Set parameters TimeSeek seek_request 0 0 Play child animation from 12 second timestamp animationTree Set parameters TimeSeek seek_request 12 0 Copy to clipboard TimeScale Allows scaling the speed of the animation or reverse it connected to the in input via the scale parameter Setting the scale to 0 will pause the animation Transition Very simple state machine when you don t want to cope with a StateMachine node Animations can be connected to the outputs and transition times can be specified After setting the request and changing the animation playback the transition node automatically clears the request on the next process frame by setting its transition_request value to an empty string GDScript C Play child animation connected to state_2 port animation_tree set parameters Transition transition_request state_2 Alternative syntax same result as above animation_tree parameters Transition transition_request state_2 Get current state name read only animation_tree get parameters Transition current_state Alternative syntax same result as above animation_tree parameters Transition current_state Get current state index read only animation_tree get parameters Transition current_index Alternative syntax same result as above animation_tree parameters Transition current_index Copy to clipboard Play child animation connected to state_2 port animationTree Set parameters Transition transition_request state_2 Get current state name read only animationTree Get parameters Transition current_state Get current state index read only animationTree Get parameters Transition current_index Copy to clipboard BlendSpace2D BlendSpace2D is a node to do advanced blending in two dimensions Points are added to a two dimensional space and then a position can be controlled to determine blending The ranges in X and Y can be controlled and labeled for convenience By default points can be placed anywhere right click on the coordinate system or use the add point button and triangles will be generated automatically using Delaunay It is also possible to draw the triangles manually by disabling the auto triangle option though this is rarely necessary Finally it is possible to change the blend mode By default blending happens by interpolating points inside the closest triangle When dealing with 2D animations frame by frame you may want to switch to Discrete mode Alternatively if you want to keep the current play position when switching between discrete animations there is a Carry mode This mode can be changed in the Blend menu BlendSpace1D This is similar to 2D blend spaces but in one dimension so triangles are not needed StateMachine This node acts as a state machine with root nodes as states Root nodes can be created and connected via lines States are connected via Transitions which are connections with special properties Transitions are uni directional but two can be used to connect in both directions There are many types of transition Immediate Will switch to the next state immediately The current state will end and blend into the beginning of the new one Sync Will switch to the next state immediately but will seek the new state to the playback position of the old state At End Will wait for the current state playback to end then switch to the beginning of the next state animation Transitions also have a few properties Click any transition and it will be displayed in the inspector dock Switch Mode is the transition type see above it can be modified after creation here Auto Advance will turn on the transition automatically when this state is reached This works best with the At End switch mode Advance Condition will turn on auto advance when this condition is set This is a custom text field that can be filled with a variable name The variable can be modified from code more on this later Xfade Time is the time to cross fade between this state and the next Priority is used together with the travel function from code more on this later Lower priority transitions are preferred when travelling through the tree Disabled toggles disabling this transition when disabled it will not be used during travel or auto advance For better blending In Godot 4 0 in order for the blending results to be deterministic reproducible and always consistent the blended property values must have a specific initial value For example in the case of two animations to be blended if one animation has a property track and the other does not the blended animation is calculated as if the latter animation had a property track with the initial value When using Position Rotation Scale 3D tracks for Skeleton3D bones the initial value is Bone Rest For other properties the initial value is 0 and if the track is present in the RESET animation the value of its first keyframe is used instead For example the following AnimationPlayer has two animations but one of them lacks a Property track for Position This means that the animation lacking that will treat those Positions as Vector2 0 0 This problem can be solved by adding a Property track for Position as an initial value to the RESET animation Note Be aware that the RESET animation exists to define the default pose when loading an object originally It is assumed to have only one frame and is not expected to be played back using the timeline Also keep in mind that the Rotation 3D tracks and the Property tracks for 2D rotation with Interpolation Type set to Linear Angle or Cubic Angle will prevent rotation of more than 180 degrees from the initial value as blended animation This can be useful for Skeleton3Ds to prevent the bones penetrating the body when blending animations Therefore Skeleton3D s Bone Rest values should be as close to the midpoint of the movable range as possible This means that for humanoid models it is preferable to import them in a T pose You can see that the shortest rotation path from Bone Rests is prioritized rather than the shortest rotation path between animations If you need to rotate Skeleton3D itself more than 180 degrees by blend animations for movement you can use Root Motion Root motion When working with 3D animations a popular technique is for animators to use the root skeleton bone to give motion to the rest of the skeleton This allows animating characters in a way where steps actually match the floor below It also allows precise interaction with objects during cinematics When playing back the animation in Godot it is possible to select this bone as the root motion track Doing so will cancel the bone transformation visually the animation will stay in place Afterwards the actual motion can be retrieved via the AnimationTree API as a transform GDScript C Get the motion delta animation_tree get_root_motion_position animation_tree get_root_motion_rotation animation_tree get_root_motion_scale Get the actual blended value of the animation animation_tree get_root_motion_position_accumulator animation_tree get_root_motion_rotation_accumulator animation_tree get_root_motion_scale_accumulator Copy to clipboard Get the motion delta animationTree GetRootMotionPosition animationTree GetRootMotionRotation animationTree GetRootMotionScale Get the actual blended value of the animation animationTree GetRootMotionPositionAccumulator animationTree GetRootMotionRotationAccumulator animationTree GetRootMotionScaleAccumulator Copy to clipboard This can be fed to functions such as CharacterBody3D move_and_slide to control the character movement There is also a tool node RootMotionView that can be placed in a scene and will act as a custom floor for your character and animations this node is disabled by default during the game Controlling from code After building the tree and previewing it the only question remaining is How is all this controlled from code Keep in mind that the animation nodes are just resources and as such they are shared between all instances using them Setting values in the nodes directly will affect all instances of the scene that uses this AnimationTree This is generally undesirable but does have some cool use cases e g you can copy and paste parts of your animation tree or reuse nodes with a complex layout such as a state machine or blend space in different animation trees The actual animation data is contained in the AnimationTree node and is accessed via properties Check the Parameters section of the AnimationTree node to see all the parameters that can be modified in real time This is handy because it makes it possible to animate them from an AnimationPlayer or even the AnimationTree itself allowing the realization of very complex animation logic To modify these values from code the property path must be obtained This is done easily by hovering the mouse over any of the parameters Which allows setting them or reading them GDScript C animation_tree set parameters eye_blend blend_amount 1 0 Simpler alternative form animation_tree parameters eye_blend blend_amount 1 0 Copy to clipboard animationTree Set parameters eye_blend blend_amount 1 0 Copy to clipboard State machine travel One of the nice features in Godot s StateMachine implementation is the ability to travel The graph can be instructed to go from the current state to another one while visiting all the intermediate ones This is done via the A algorithm If there is no path of transitions starting at the current state and finishing at the destination state the graph teleports to the destination state To use the travel ability you should first retrieve the AnimationNodeStateMachinePlayback object from the AnimationTree node it is exported as a property GDScript C var state_machine animation_tree parameters playback Copy to clipboard AnimationNodeStateMachinePlayback stateMachine AnimationNodeStateMachinePlayback animationTree Get parameters playback Copy to clipboard Once retrieved it can be used by calling one of the many functions it offers GDScript C state_machine travel SomeState Copy to clipboard stateMachine Travel SomeState Copy to clipboard The state machine must be running before you can travel Make sure to either call start or choose a node to Autoplay on Load User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Playing videos Godot supports video playback with the VideoStreamPlayer node Supported playback formats The only supported format in core is Ogg Theora not to be confused with Ogg Vorbis audio It s possible for extensions to bring support for additional formats but no such extensions exist yet as of July 2022 H 264 and H 265 cannot be supported in core Godot as they are both encumbered by software patents AV1 is royalty free but it remains slow to decode on the CPU and hardware decoding support isn t readily available on all GPUs in use yet WebM was supported in core in Godot 3 x but support for it was removed in 4 0 as it was too buggy and difficult to maintain Note You may find videos with an ogg or ogx extensions which are generic extensions for data within an Ogg container Renaming these file extensions to ogv may allow the videos to be imported in Godot However not all files with ogg or ogx extensions are videos some of them may only contain audio Setting up VideoStreamPlayer Create a VideoStreamPlayer node using the Create New Node dialog Select the VideoStreamPlayer node in the scene tree dock go to the inspector and load an ogv file in the Stream property If you don t have your video in Ogg Theora format yet jump to Recommended Theora encoding settings If you want the video to play as soon as the scene is loaded check Autoplay in the inspector If not leave Autoplay disabled and call play on the VideoStreamPlayer node in a script to start playback when desired Handling resizing and different aspect ratios By default in Godot 4 0 the VideoStreamPlayer will automatically be resized to match the video s resolution You can make it follow usual Control sizing by enabling Expand on the VideoStreamPlayer node To adjust how the VideoStreamPlayer node resizes depending on window size adjust the anchors using the Layout menu at the top of the 2D editor viewport However this setup may not be powerful enough to handle all use cases such as playing fullscreen videos without distorting the video but with empty space on the edges instead For more control you can use an AspectRatioContainer node which is designed to handle this kind of use case Add an AspectRatioContainer node Make sure it is not a child of any other container node Select the AspectRatioContainer node then set its Layout at the top of the 2D editor to Full Rect Set Ratio in the AspectRatioContainer node to match your video s aspect ratio You can use math formulas in the inspector to help yourself Remember to make one of the operands a float Otherwise the division s result will always be an integer This will evaluate to approximately 1 777778 Once you ve configured the AspectRatioContainer reparent your VideoStreamPlayer node to be a child of the AspectRatioContainer node Make sure Expand is enabled on the VideoStreamPlayer Your video should now scale automatically to fit the whole screen while avoiding distortion See also See Multiple resolutions for more tips on supporting multiple aspect ratios in your project Displaying a video on a 3D surface Using a VideoStreamPlayer node as a child of a SubViewport node it s possible to display any 2D node on a 3D surface For example this can be used to display animated billboards when frame by frame animation would require too much memory This can be done with the following steps Create a SubViewport node Set its size to match your video s size in pixels Create a VideoStreamPlayer node as a child of the SubViewport node and specify a video path in it Make sure Expand is disabled and enable Autoplay if needed Create a MeshInstance3D node with a PlaneMesh or QuadMesh resource in its Mesh property Resize the mesh to match the video s aspect ratio otherwise it will appear distorted Create a new StandardMaterial3D resource in the Material Override property in the GeometryInstance3D section Enable Local To Scene in the StandardMaterial3D s Resource section at the bottom This is required before you can use a ViewportTexture in its Albedo Texture property In the StandardMaterial3D set the Albedo Texture property to New ViewportTexture Edit the new resource by clicking it then specify the path to the SubViewport node in the Viewport Path property Enable Albedo Texture Force sRGB in the StandardMaterial3D to prevent colors from being washed out If the billboard is supposed to emit its own light set Shading Mode to Unshaded to improve rendering performance See Using Viewports and the GUI in 3D demo for more information on setting this up Looping a video For looping a video the Loop property can be enabled This will seamlessly restart the video when it reaches its end Note that setting the project setting Video Delay Compensation to a non zero value might cause your loop to not be seamless because the synchronization of audio and video takes place at the start of each loop causing occasional missed frames Set Video Delay Compensation in your project settings to 0 to avoid frame drop issues Video decoding conditions and recommended resolutions Video decoding is performed on the CPU as GPUs don t have hardware acceleration for decoding Theora videos Modern desktop CPUs can decode Ogg Theora videos at 1440p 60 FPS or more but low end mobile CPUs will likely struggle with high resolution videos To ensure your videos decode smoothly on varied hardware When developing games for desktop platforms it s recommended to encode in 1080p at most preferably at 30 FPS Most people are still using 1080p or lower resolution displays so encoding higher resolution videos may not be worth the increased file size and CPU requirements When developing games for mobile or web platforms it s recommended to encode in 720p at most preferably at 30 FPS or even lower The visual difference between 720p and 1080p videos on a mobile device is usually not that noticeable Playback limitations There are several limitations with the current implementation of video playback in Godot Seeking a video to a certain point is not supported Changing playback speed is not supported VideoStreamPlayer also won t follow Engine time_scale Streaming a video from a URL is not supported Recommended Theora encoding settings A word of advice is to avoid relying on built in Ogg Theora exporters most of the time There are 2 reasons you may want to favor using an external program to encode your video Some programs such as Blender can render to Ogg Theora However the default quality presets are usually very low by today s standards You may be able to increase the quality options in the software you re using but you may find the output quality to remain less than ideal given the increased file size This usually means that the software only supports encoding to constant bit rate CBR instead of variable bit rate VBR VBR encoding should be preferred in most scenarios as it provides a better quality to file size ratio Some other programs can t render to Ogg Theora at all In this case you can render the video to an intermediate high quality format such as a high bitrate H 264 video then re encode it to Ogg Theora Ideally you should use a lossless or uncompressed format as an intermediate format to maximize the quality of the output Ogg Theora video but this can require a lot of disk space HandBrake GUI and FFmpeg CLI are popular open source tools for this purpose FFmpeg has a steeper learning curve but it s more powerful Here are example FFmpeg commands to convert an MP4 video to Ogg Theora Since FFmpeg supports a lot of input formats you should be able to use the commands below with almost any input video format AVI MOV WebM Note Make sure your copy of FFmpeg is compiled with libtheora and libvorbis support You can check this by running ffmpeg without any arguments then looking at the configuration line in the command output Balancing quality and file size The video quality level q v must be between 1 and 10 Quality 6 is a good compromise between quality and file size If encoding at a high resolution such as 1440p or 4K you will probably want to decrease q v to 5 to keep file sizes reasonable Since pixel density is higher on a 1440p or 4K video lower quality presets at higher resolutions will look as good or better compared to low resolution videos The audio quality level q a must be between 1 and 10 Quality 6 provides a good compromise between quality and file size In contrast to video quality increasing audio quality doesn t increase the output file size nearly as much Therefore if you want the cleanest audio possible you can increase this to 9 to get perceptually lossless audio This is especially valuable if your input file already uses lossy audio compression Higher quality audio does increase the CPU usage of the decoder so it might lead to audio dropouts in case of high system load See this page for a table listing Ogg Vorbis audio quality presets and their respective variable bitrates FFmpeg Convert while preserving original video resolution The following command converts the video while keeping its original resolution The video and audio s bitrate will be variable to maximize quality while saving space in parts of the video audio that don t require a high bitrate such as static scenes ffmpeg i input mp4 q v 6 q a 6 output ogv Copy to clipboard FFmpeg Resize the video then convert it The following command resizes a video to be 720 pixels tall 720p while preserving its existing aspect ratio This helps decrease the file size significantly if the source is recorded at a higher resolution than 720p ffmpeg i input mp4 vf scale 1 720 q v 6 q a 6 output ogv Copy to clipboard Chroma Key Videos Chroma key commonly known as the green screen or blue screen effect allows you to remove a specific color from an image or video and replace it with another background This effect is widely used in video production to composite different elements together seamlessly We will achieve the chroma key effect by writing a custom shader in GDScript and using a VideoStreamPlayer node to display the video content Scene Setup Ensure that the scene contains a VideoStreamPlayer node to play the video and a Control node to hold the UI elements for controlling the chroma key effect Writing the Custom Shader To implement the chroma key effect follow these steps Select the VideoStreamPlayer node in the scene and go to its properties Under CanvasItem Material create a new shader named ChromaKeyShader gdshader In the ChromaKeyShader gdshader file write the custom shader code as shown below shader_type canvas_item Uniform variables for chroma key effect uniform vec3 chroma_key_color source_color vec3 0 0 1 0 0 0 uniform float pickup_range hint_range 0 0 1 0 0 1 uniform float fade_amount hint_range 0 0 1 0 0 1 void fragment Get the color from the texture at the given UV coordinates vec4 color texture TEXTURE UV Calculate the distance between the current color and the chroma key color float distance length color rgb chroma_key_color If the distance is within the pickup range discard the pixel the lesser the distance more likely the colors are if distance pickup_range discard Calculate the fade factor based on the pickup range and fade amount float fade_factor smoothstep pickup_range pickup_range fade_amount distance Set the output color with the original RGB values and the calculated fade factor COLOR vec4 color rgb fade_factor Copy to clipboard The shader uses the distance calculation to identify pixels close to the chroma key color and discards them effectively removing the selected color Pixels that are slightly further away from the chroma key color are faded based on the fade_factor blending them smoothly with the surrounding colors This process creates the desired chroma key effect making it appear as if the background has been replaced with another image or video The code above represents a simple demonstration of the Chroma Key shader and users can customize it according to their specific requirements UI Controls To allow users to manipulate the chroma key effect in real time we created sliders in the Control node The Control node s script contains the following functions GDScript C extends Control func _on_color_picker_button_color_changed color Update the chroma_key_color shader parameter of the VideoStreamPlayer s material VideoStreamPlayer material set shader_parameter chroma_key_color color func _on_h_slider_value_changed value Update the pickup_range shader parameter of the VideoStreamPlayer s material VideoStreamPlayer material set shader_parameter pickup_range value func _on_h_slider_2_value_changed value Update the fade_amount shader parameter of the VideoStreamPlayer s material VideoStreamPlayer material set shader_parameter fade_amount value func _on_video_stream_player_finished Restart the video playback when it s finished VideoStreamPlayer play Copy to clipboard using Godot public partial class MyControl Control private VideoStreamPlayer _videoStreamPlayer public override void _Ready _videoStreamPlayer GetNode VideoStreamPlayer VideoStreamPlayer private void OnColorPickerButtonColorChanged Color color Update the chroma_key_color shader parameter of the VideoStreamPlayer s material _videoStreamPlayer Material Set shader_parameter chroma_key_color color private void OnHSliderValueChanged double value Update the pickup_range shader parameter of the VideoStreamPlayer s material _videoStreamPlayer Material Set shader_parameter pickup_range value private void OnHSlider2ValueChanged double value Update the fade_amount shader parameter of the VideoStreamPlayer s material _videoStreamPlayer Material Set shader_parameter fade_amount value private void OnVideoStreamPlayerFinished Restart the video playback when it s finished _videoStreamPlayer Play Copy to clipboard also make sure that the range of the sliders are appropriate our settings are Signal Handling Connect the appropriate signal from the UI elements to the Control node s script you created in the Control node s script to control the chroma key effect These signal handlers will update the shader s uniform variables in response to user input Save and run the scene to see the chroma key effect in action With the provided UI controls you can now adjust the chroma key color pickup range and fade amount in real time achieving the desired chroma key functionality for your video content User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Creating movies Godot can record non real time video and audio from any 2D or 3D project This kind of recording is also called offline rendering There are many scenarios where this is useful Recording game trailers for promotional use Recording cutscenes that will be displayed as pre recorded videos in the final game This allows for using higher quality settings at the cost of file size regardless of the player s hardware Recording procedurally generated animations or motion design User interaction remains possible during video recording and audio can be included as well although you won t be able to hear it while the video is recording Comparing the visual output of graphics settings shaders or rendering techniques in an animated scene With Godot s animation features such as the AnimationPlayer node Tweeners particles and shaders it can effectively be used to create any kind of 2D and 3D animations and still images If you are already used to Godot s workflow you may find yourself more productive by using Godot for video rendering compared to Blender That said renderers designed for non real time usage such as Cycles and Eevee can result in better visuals at the cost of longer rendering times Compared to real time video recording some advantages of non real time recording include Use any graphics settings including extremely demanding settings regardless of your hardware s capabilities The output video will always have perfect frame pacing it will never exhibit dropped frames or stuttering Faster hardware will allow you to render a given animation in less time but the visual output remains identical Render at a higher resolution than the screen resolution without having to rely on driver specific tools such as NVIDIA s Dynamic Super Resolution or AMD s Virtual Super Resolution Render at a higher framerate than the video s target framerate then post process to generate high quality motion blur This also makes effects that converge over several frames such as temporal antialiasing SDFGI and volumetric fog look better Warning This feature is not designed for capturing real time footage during gameplay Players should use something like OBS Studio or SimpleScreenRecorder to record gameplay videos as they do a much better job at intercepting the compositor than Godot can do using Vulkan or OpenGL natively That said if your game runs at near real time speeds when capturing you can still use this feature but it will lack audible sound playback as sound is saved directly to the video file Enabling Movie Maker mode To enable Movie Maker mode click the movie reel button in the top right corner of the editor before running the project Movie Maker mode is disabled click the movie reel icon to enable The icon gets a background matching the accent color when Movie Maker mode is enabled Movie Maker mode is enabled click the movie reel icon again to disable Movie Maker status is not persisted when the editor quits so you must re enable Movie Maker mode again after restarting the editor if needed Note Toggling Movie Maker mode while running the project will not have any effect until the project is restarted Before you can record video by running the project you still need to configure the output file path This path can be set for all scenes in the Project Settings Movie Maker project settings with Advanced toggle enabled Alternatively you can set the output file path on a per scene basis by adding a String metadata with the name movie_file to the scene s root node This is only used when the main scene is set to the scene in question or when running the scene directly by pressing F6 Cmd R on macOS Inspector view after creating a movie_file metadata of type String The path specified in the project settings or metadata can be either absolute or relative to the project root Once you ve configured and enabled Movie Maker mode it will be automatically used when running the project from the editor Command line usage Movie Maker can also be enabled from the command line godot path path to your_project write movie output avi Copy to clipboard If the output path is relative then it is relative to the project folder not the current working directory In the above example the file will be written to path to your_project output avi This behavior is similar to the export release command line argument Since Movie Maker s output resolution is set by the viewport size you can adjust the window size on startup to override it if the project uses the disabled or canvas_items stretch mode godot path path to your_project write movie output avi resolution 1280 x720 Copy to clipboard Note that the window size is clamped by your display s resolution See Rendering at a higher resolution than the screen resolution if you need to record a video at a higher resolution than the screen resolution The recording FPS can also be overridden on the command line without having to edit the Project Settings godot path path to your_project write movie output avi fixed fps 30 Copy to clipboard Note The write movie and fixed fps command line arguments are both available in exported projects Movie Maker mode cannot be toggled while the project is running but you can use the OS execute method to run a second instance of the exported project that will record a video file Choosing an output format Output formats are provided by the MovieWriter class Godot has 2 built in MovieWriters and more can be implemented by extensions AVI recommended AVI container with MJPEG for video and uncompressed audio Features lossy video compression resulting in medium file sizes and fast encoding The lossy compression quality can be adjusted by changing Editor Movie Writer MJPEG Quality The resulting file can be viewed in most video players but it must be converted to another format for viewing on the web or by Godot with the VideoStreamPlayer node MJPEG does not support transparency AVI output is currently limited to a file of 4 GB in size at most To use AVI specify a path to an avi file to be created in the Editor Movie Writer Movie File project setting PNG PNG image sequence for video and WAV for audio Features lossless video compression at the cost of large file sizes and slow encoding This is designed to be encoded to a video file with an external tool after recording Transparency is supported but the root viewport must have its transparent_bg property set to true for transparency to be visible on the output image This can be achieved by enabling the Rendering Transparent Background advanced project setting Display Window Size Transparent and Display Window Per Pixel Transparency Enabled can optionally be enabled to allow transparency to be previewed while recording the video but they do not have to be enabled for the output image to contain transparency To use PNG specify a png file to be created in the Editor Movie Writer Movie File project setting The generated wav file will have the same name as the png file minus the extension Custom If you need to encode directly to a different format or pipe a stream through third party software you can extend the MovieWriter class to create your own movie writers This should typically be done using GDExtension for performance reasons Configuration In the Editor Movie Writer section of the Project Settings there are several options you can configure Some of them are only visible after enabling the Advanced toggle in the top right corner of the Project Settings dialog Mix Rate Hz The audio mix rate to use in the recorded audio when writing a movie This can be different from the project s mix rate but this value must be divisible by the recorded FPS to prevent audio from desynchronizing over time Speaker Mode The speaker mode to use in the recorded audio when writing a movie stereo 5 1 surround or 7 1 surround MJPEG Quality The JPEG quality to use when writing a video to an AVI file between 0 01 and 1 0 inclusive Higher quality values result in better looking output at the cost of larger file sizes Recommended quality values are between 0 75 and 0 9 Even at quality 1 0 JPEG compression remains lossy This setting does not affect audio quality and is ignored when writing to a PNG image sequence Movie File The output path for the movie This can be absolute or relative to the project root Disable V Sync If enabled requests V Sync to be disabled when writing a movie This can speed up video writing if the hardware is fast enough to render encode and save the video at a framerate higher than the monitor s refresh rate This setting has no effect if the operating system or graphics driver forces V Sync with no way for applications to disable it FPS The rendered frames per second in the output movie Higher values result in smoother animation at the cost of longer rendering times and larger output file sizes Most video hosting platforms do not support FPS values higher than 60 but you can use a higher value and use that to generate motion blur Note When using the disabled or 2d stretch modes the output file s resolution is set by the window size Make sure to resize the window before the splash screen has ended For this purpose it s recommended to adjust the Display Window Size Window Width Override and Window Height Override advanced project settings See also Rendering at a higher resolution than the screen resolution Quitting Movie Maker mode To safely quit a project that is using Movie Maker mode use the X button at the top of the window or call get_tree quit in a script You can also use the quit after N command line argument where N is the number of frames to render before quitting Pressing F8 Cmd on macOS or pressing Ctrl C on the terminal running Godot is not recommended as it will result in an improperly formatted AVI file with no duration information For PNG image sequences PNG images will not be negatively altered but the associated WAV file will still lack duration information Some video players may still be able to play the AVI or WAV file with working video and audio However software that makes use of the AVI or WAV file such as video editors may not be able to open the file Using a video converter program can help in those cases If you re using an AnimationPlayer to control a main action in the scene such as camera movement you can enable the Movie Quit On Finish property on the AnimationPlayer node in question When enabled this property will make Godot quit on its own when an animation is done playing and the engine is running in Movie Maker mode Note that this property has no effect on looping animations Therefore you need to make sure that the animation is set as non looping Using high quality graphics settings The movie feature tag can be used to override specific project settings This is useful to enable high quality graphics settings that wouldn t be fast enough to run in real time speeds on your hardware Remember that putting every setting to its maximum value can still slow down movie saving speed especially when recording at higher resolutions Therefore it s still recommended to only increase graphics settings if they make a meaningful difference in the output image This feature tag can also be queried in a script to increase quality settings that are set in the Environment resource For example to further improve SDFGI detail and reduce light leaking GDScript C extends Node3D func _ready if OS has_feature movie When recording a movie improve SDFGI cell density without decreasing its maximum distance get_viewport world_3d environment sdfgi_min_cell_size 0 25 get_viewport world_3d environment sdfgi_cascades 8 Copy to clipboard using Godot public partial class MyNode3D Node3D public override void _Ready if OS HasFeature movie When recording a movie improve SDFGI cell density without decreasing its maximum distance GetViewport World3D Environment SdfgiMinCellSize 0 25f GetViewport World3D Environment SdfgiCascades 8 Copy to clipboard Rendering at a higher resolution than the screen resolution The overall rendering quality can be improved significantly by rendering at high resolutions such as 4K or 8K Note For 3D rendering Godot provides a Rendering Scaling 3D Scale advanced project setting which can be set above 1 0 to obtain supersample antialiasing The 3D rendering is then downsampled when it s drawn on the viewport This provides an expensive but high quality form of antialiasing without increasing the final output resolution Consider using this project setting first as it avoids slowing down movie writing speeds and increasing output file size compared to actually increasing the output resolution If you wish to render 2D at a higher resolution or if you actually need the higher raw pixel output for 3D rendering you can increase the resolution above what the screen allows By default Godot uses the disabled stretch modes in projects If using disabled or canvas_items stretch mode the window size dictates the output video resolution On the other hand if the project is configured to use the viewport stretch mode the viewport resolution dictates the output video resolution The viewport resolution is set using the Display Window Size Viewport Width and Viewport Height project settings This can be used to render a video at a higher resolution than the screen resolution To make the window smaller during recording without affecting the output video resolution you can set the Display Window Size Window Width Override and Window Height Override advanced project settings to values greater than 0 To apply a resolution override only when recording a movie you can override those settings with the movie feature tag Post processing steps Some common post processing steps are listed below Note When using several post processing steps try to perform all of them in a single FFmpeg command This will save encoding time and improve quality by avoiding multiple lossy encoding steps Converting AVI video to MP4 While some platforms such as YouTube support uploading the AVI file directly many others will require a conversion step beforehand HandBrake GUI and FFmpeg CLI are popular open source tools for this purpose FFmpeg has a steeper learning curve but it s more powerful The command below converts an AVI video to an MP4 H 264 video with a Constant Rate Factor CRF of 15 This results in a relatively large file but is well suited for platforms that will re encode your videos to reduce their size such as most video sharing websites ffmpeg i input avi crf 15 output mp4 Copy to clipboard To get a smaller file at the cost of quality increase the CRF value in the above command To get a file with a better size quality ratio at the cost of slower encoding times add preset veryslow before crf 15 in the above command On the contrary preset veryfast can be used to achieve faster encoding at the cost of a worse size quality ratio Converting PNG image sequence WAV audio to a video If you chose to record a PNG image sequence with a WAV file beside it you need to convert it to a video before you can use it elsewhere The filename for the PNG image sequence generated by Godot always contains 8 digits starting at 0 with zero padded numbers If you specify an output path folder example png Godot will write folder example00000000 png folder example00000001 png and so on in that folder The audio will be saved at folder example wav The FPS is specified using the r argument It should match the FPS specified during recording Otherwise the video will appear to be slowed down or sped up and audio will be out of sync with the video ffmpeg r 60 i input 08 d png i input wav crf 15 output mp4 Copy to clipboard If you recorded a PNG image sequence with transparency enabled you need to use a video format that supports storing transparency MP4 H 264 doesn t support storing transparency so you can use WebM VP9 as an alternative ffmpeg r 60 i input 08 d png i input wav c v libvpx vp9 crf 15 pix_fmt yuva420p output webm Copy to clipboard Cutting video You can trim parts of the video you don t want to keep after the video is recorded For example to discard everything before 12 1 seconds and keep only 5 2 seconds of video after that point ffmpeg i input avi ss 00 00 12 10 t 00 00 05 20 crf 15 output mp4 Copy to clipboard Cutting videos can also be done with the GUI tool LosslessCut Resizing video The following command resizes a video to be 1080 pixels tall 1080p while preserving its existing aspect ratio ffmpeg i input avi vf scale 1 1080 crf 15 output mp4 Copy to clipboard Reducing framerate The following command changes a video s framerate to 30 FPS dropping some of the original frames if there are more in the input video ffmpeg i input avi r 30 crf 15 output mp4 Copy to clipboard Generating accumulation motion blur with FFmpeg Godot does not have built in support for motion blur but it can still be created in recorded videos If you record the video at a multiple of the original framerate you can blend the frames together then reduce the frameate to produce a video with accumulation motion blur This motion blur can look very good but it can take a long time to generate since you have to render many more frames per second on top of the time spent on post processing Example with a 240 FPS source video generating 4 motion blur and decreasing its output framerate to 60 FPS ffmpeg i input avi vf tmix frames 4 fps 60 crf 15 output mp4 Copy to clipboard This also makes effects that converge over several frames such as temporal antialiasing SDFGI and volumetric fog converge faster and therefore look better since they ll be able to work with more data at a given time See Reducing framerate if you want to get this benefit without adding motion blur User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Assets pipeline Import process Importing images Importing audio samples Importing translations Importing 3D scenes Retargeting 3D Skeletons Exporting 3D scenes Blender ESCN exporter Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Import process Importing assets in Godot To import assets in Godot place your assets image files scenes audio files fonts etc directly in the project folder There are 2 ways to achieve this For any file type Copy files manually with your operating system s file manager For file types that can be imported by Godot Drag and drop files from the operating system s file manager to the editor s FileSystem dock This only works with resource file types i e file types that Godot can import Godot will automatically import these files internally and keep the imported resources hidden in a res godot imported folder This means that when trying to access imported assets through code you need to use the Resource Loader as it will automatically take into account where the internal files are saved If you try and access an imported asset using the FileAccess class it will work in the editor but it will break in the exported project However the Resource Loader cannot access non imported files Only the FileAccess class can Changing import parameters Note Import parameters are only present in non native Godot resource types This means Godot s own scene and resource file formats tscn scn tres res don t have import options you can select in the Import dock To change the import parameters of an asset in Godot select the relevant resource in the FileSystem dock After adjusting the parameters click Reimport Be careful if you select another file in the FileSystem dock before clicking Reimport changes will be discarded After clicking Reimport the chosen parameters will only be used for this asset and on future reimports Changing the import parameters of several assets at the same time is also possible Simply select all of them together in the resources dock and the exposed parameters will apply to all of them when reimporting Reimporting multiple assets While working on a project you may find that several assets need to have the same parameters changed such as enabling mipmaps but you only want those specific parameters changed To do this select every asset you want to reimport in the file system In the import tab there will now be a checkbox to the left of every import parameter Select the checkbox of the parameters you want to change on your imported assets then change the parameters normally Finally click the reimport button and every selected asset will be reimported with only those parameters changed Automatic reimport When the MD5 checksum of the source asset changes Godot will perform an automatic reimport of it applying the preset configured for that specific asset Files generated Importing will add an extra asset import file next to the source file containing the import configuration Make sure to commit these files to your version control system as these files contain important metadata ls example png example png import project godot Copy to clipboard Additionally extra assets will be present in the hidden res godot imported folder ls godot imported example png 218 a8f2b3041327d8a5756f3a245f83b ctex example png 218 a8f2b3041327d8a5756f3a245f83b md5 Copy to clipboard If any of the files present in this folder is erased or the whole folder the asset or assets will be reimported automatically As such committing the godot folder to the version control system is not recommended While committing this folder can shorten reimporting time when checking out on another computer it requires considerably more space and bandwidth The default version control metadata that can be generated on project creation will automatically ignore the godot folder Changing import resource type Some source assets can be imported as different types of resources For this select the relevant type of resource desired then click Reimport Select Keep File exported as is as resource type to skip file import files with this resource type will be preserved as is during project export Select Skip File not exported as resource type to skip file import and ignore file during project export Changing default import parameters Different types of projects might require different defaults Changing the import options to a predefined set of options can be achieved by using the Preset Menu Besides some resource types offering presets the default settings can be saved and cleared too The default import parameters for a given resource type can be changed project wide using the Import Defaults tab of the Project Settings dialog Further reading This workflow takes a little time to get used to but it enforces a more correct way to deal with resources There are many types of assets available for import Continue reading to understand how to work with all of them Importing images Importing audio samples Importing 3D scenes Importing translations User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Importing images Supported image formats Godot can import the following image formats BMP bmp No support for 16 bit per pixel images Only 1 bit 4 bit 8 bit 24 bit and 32 bit per pixel images are supported DirectDraw Surface dds If mipmaps are present in the texture they will be loaded directly This can be used to achieve effects using custom mipmaps Khronos Texture ktx Decoding is done using libktx Only supports 2D images Cubemaps texture arrays and de padding are not supported OpenEXR exr Supports HDR highly recommended for panorama skies Radiance HDR hdr Supports HDR highly recommended for panorama skies JPEG jpg jpeg Doesn t support transparency per the format s limitations PNG png Precision is limited to 8 bits per channel upon importing no HDR images Truevision Targa tga SVG svg SVGs are rasterized using ThorVG when importing them Support is limited complex vectors may not render correctly Text must be converted to paths otherwise it won t appear in the rasterized image You can check whether ThorVG can render a certain vector correctly using its web based viewer For complex vectors rendering them to PNGs using Inkscape is often a better solution This can be automated thanks to its command line interface WebP webp WebP files support transparency and can be compressed lossily or losslessly The precision is limited to 8 bits per channel Note If you ve compiled the Godot editor from source with specific modules disabled some formats may not be available Importing textures The default action in Godot is to import images as textures Textures are stored in video memory Their pixel data can t be accessed directly from the CPU without converting them back to an Image in a script This is what makes drawing them efficient There are over a dozen import options that can be adjusted after selecting an image in the FileSystem dock Import options in the Import dock after selecting an image in the FileSystem dock Some of these options are only visible with certain compression modes Changing import type It is possible to choose other types of imported resources in the Import dock BitMap 1 bit monochrome texture intended to be used as a click mask in TextureButton and TouchScreenButton This resource type cannot be displayed directly onto 2D or 3D nodes but the pixel values can be queried from a script using get_bit Cubemap Import the texture as a 6 sided cubemap with interpolation between the cubemap s sides seamless cubemaps which can be sampled in custom shaders CubemapArray Import the texture as a collection of 6 sided cubemaps which can be sampled in custom shaders This resource type can only be displayed when using the Forward or Forward Mobile rendering methods not Compatibility Font Data Monospace Image Font Import the image as a bitmap font where all characters have the same width See Using Fonts Image Import the image as is This resource type cannot be displayed directly onto 2D or 3D nodes but the pixel values can be queried from a script using get_pixel Texture2D Import the image as a 2 dimensional texture suited for display on 2D and 3D surfaces This is the default import mode Texture2DArray Import the image as a collection of 2 dimensional textures Texture2DArray is similar to a 3 dimensional texture but without interpolation between layers Built in 2D and 3D shaders cannot display texture arrays so you must create a custom shader in 2D or 3D to display a texture from a texture array Texture3D Import the image as a 3 dimensional texture This is not a 2D texture applied onto a 3D surface Texture3D is similar to a texture array but with interpolation between layers Texture3D is typically used for FogMaterial density maps in volumetric fog particle attractor vector fields Environment 3D LUT color correction and custom shaders TextureAtlas Import the image as an atlas of different textures Can be used to reduce memory usage for animated 2D sprites Only supported in 2D due to missing support in built in 3D shaders For Cubemap the expected image order is X X Y Y Z Z in Godot s coordinate system so Y is up and Z is forward Here are templates you can use for cubemap images right click Save Link As 2 3 cubemap template default layout option 3 2 cubemap template 1 6 cubemap template 6 1 cubemap template Detect 3D The default import options no mipmaps and Lossless compression are suited for 2D but are not ideal for most 3D projects Detect 3D makes Godot aware of when a texture is used in a 3D scene such as a texture in a BaseMaterial3D If this happens several import options are changed so the texture flags are friendlier to 3D Mipmaps are enabled and the compression mode is changed to VRAM Compressed unless Detect 3D Compress To is changed The texture is also reimported automatically A message is printed to the Output panel when a texture is detected to be used in 3D If you run into quality issues when a texture is detected to be used in 3D e g for pixel art textures change the Detect 3D Compress To option before using the texture in 3D or change Compress Mode to Lossless after using the texture in 3D This is preferable to disabling Detect 3D as mipmap generation remains enabled to prevent textures from looking grainy at a distance Import options See also In Godot 4 0 changing the texture filter and repeat mode is no longer done in the import options Instead texture filter and repeat modes are changed in the CanvasItem properties in 2D with a project setting acting as a default and in a per material configuration in 3D In custom shaders filter and repeat mode is changed on the sampler2D uniform using hints described in the Shading language documentation Compress Mode Images are one of the largest assets in a game To handle them efficiently they need to be compressed Godot offers several compression methods depending on the use case Lossless This is the default and most common compression mode for 2D assets It shows assets without any kind of artifacting and disk compression is decent It will use considerably more amount of video memory than VRAM Compression though This is also the recommended setting for pixel art Lossy This is a good choice for large 2D assets It has some artifacts but less than VRAM compression and the file size is several times lower compared to Lossless or VRAM Uncompressed Video memory usage isn t decreased by this mode it s the same as with Lossless or VRAM Uncompressed VRAM Compressed This is the default and most common compression mode for 3D assets Size on disk is reduced and video memory usage is also decreased considerably usually by a factor between 4 and 6 This mode should be avoided for 2D as it exhibits noticeable artifacts especially for lower resolution textures VRAM Uncompressed Only useful for formats that can t be compressed such as raw floating point images Basis Universal This alternative VRAM compression mode encodes the texture to a format that can be transcoded to most GPU compressed formats at load time This provides very small files that make use of VRAM compression at the cost of lower quality compared to VRAM Compressed and slow compression times VRAM usage is usually the same as VRAM Compressed Basis Universal does not support floating point image formats the engine will internally fall back to VRAM Compressed instead Note Even in 3D pixel art textures should have VRAM compression disabled as it will negatively affect their appearance without improving performance significantly due to their low resolution In this table each of the 5 options are described together with their advantages and disadvantages best worst Compress mode Lossless Lossy VRAM Compressed VRAM Uncompressed Basis Universal Description Stored as Lossless WebP PNG Stored as Lossy WebP Stored as S3TC BPTC or ETC2 depending on platform Stored as raw pixels Transcoded to VRAM Compressed format Size on disk Small Very small Small Large Very small Memory usage Large Large Small Large Small Performance Normal Normal Fast Normal Fast Quality loss None Slight Moderate None Moderate Load time Slow Slow Fast Normal Normal Estimated memory usage for a single RGBA8 texture with mipmaps enabled Texture size Lossless Lossy VRAM Compressed VRAM Uncompressed Basis Universal 128 128 85 KiB 85 KiB 21 KiB 85 KiB 21 KiB 256 256 341 KiB 341 KiB 85 KiB 341 KiB 85 KiB 512 512 1 33 MiB 1 33 MiB 341 KiB 1 33 MiB 341 KiB 1024 1024 5 33 MiB 5 33 MiB 1 33 MiB 5 33 MiB 1 33 MiB 2048 2048 21 33 MiB 21 33 MiB 5 33 MiB 21 33 MiB 5 33 MiB 4096 4096 85 33 MiB 85 33 MiB 21 33 MiB 85 33 MiB 21 33 MiB Note In the above table memory usage will be reduced by 25 for images that do not have an alpha channel RGB8 Memory usage will be further decreased by 25 for images that have mipmaps disabled Notice how at larger resolutions the impact of VRAM compression is much greater With a 4 1 compression ratio 6 1 for opaque textures with S3TC VRAM compression effectively allows a texture to be twice as large on each axis while using the same amount of memory on the GPU VRAM compression also reduces the memory bandwidth required to sample the texture which can speed up rendering in memory bandwidth constrained scenarios which are frequent on integrated graphics and mobile These factors combined make VRAM compression a must have for 3D games with high resolution textures You can preview how much memory a texture takes by double clicking it in the FileSystem dock then looking at the Inspector Previewing a texture in the Inspector Credit Red Brick 03 Poly Haven Compress High Quality Note High quality VRAM texture compression is only supported in the Forward and Forward Mobile rendering methods When using the Compatibility rendering method this option is always considered disabled If enabled uses BPTC compression on desktop platforms and ASTC compression on mobile platforms When using BPTC BC7 is used for SDR textures and BC6H is used for HDR textures If disabled default uses the faster but lower quality S3TC compression on desktop platforms and ETC2 on mobile web platforms When using S3TC DXT1 BC1 is used for opaque textures and DXT5 BC3 is used for transparent or normal map RGTC textures BPTC and ASTC support VRAM compression for HDR textures but S3TC and ETC2 do not see HDR Compression below Compress HDR Compression Note This option only has an effect on textures that are imported as HDR formats in Godot hdr and exr files If set to Disabled never uses VRAM compression for HDR textures regardless of whether they re opaque or transparent Instead the texture is converted to RGBE9995 9 bits per channel 5 bit exponent 32 bits per pixel to reduce memory usage compared to a half float or single precision float image format If set to Opaque Only default only uses VRAM compression for opaque HDR textures This is due to a limitation of HDR formats as there is no VRAM compressed HDR format that supports transparency at the same time If set to Always will force VRAM compression even for HDR textures with an alpha channel To perform this the alpha channel is discarded on import Compress Normal Map When using a texture as normal map only the red and green channels are required Given regular texture compression algorithms produce artifacts that don t look that nice in normal maps the RGTC compression format is the best fit for this data Forcing this option to Enable will make Godot import the image as RGTC compressed By default it s set to Detect This means that if the texture is ever detected to be used as a normal map it will be changed to Enable and reimported automatically Note that RGTC compression affects the resulting normal map image You will have to adjust custom shaders that use the normal map s blue channel to take this into account Built in material shaders already ignore the blue channel in a normal map regardless of the actual normal map s contents In the example below the normal map with RGTC compression is able to preserve its detail much better while using the same amount of memory as a standard RGBA VRAM compressed texture Normal map with standard VRAM compression left and with RGTC VRAM compression right Note Godot requires the normal map to use the X Y and Z coordinates which is known as an OpenGL style normal map If you ve imported a material made to be used with another engine it may be DirectX style In this case the normal map needs to be converted by enabling the Normal Map Invert Y import option More information about normal maps including a coordinate order table for popular engines can be found here Compress Channel Pack If set to sRGB Friendly default prevents the RG color format from being used as it does not support sRGB color If set to Optimized allows the RG color format to be used if the texture does not use the blue channel A third option Normal Map RG Channels is only available in layered textures Cubemap CubemapArray Texture2DArray and Texture3D This forces all layers from the texture to be imported with the RG color format to reduce memory usage with only the red and green channels preserved This only has an effect on textures with the VRAM Compressed or Basis Universal compression modes Mipmaps Generate If enabled smaller versions of the texture are generated on import For example a 64 64 texture will generate 6 mipmaps 32 32 16 16 8 8 4 4 2 2 1 1 This has several benefits Textures will not become grainy in the distance in 3D or if scaled down due to camera zoom or CanvasItem scale in 2D Performance will improve if the texture is displayed in the distance since sampling smaller versions of the original texture is faster and requires less memory bandwidth The downside of mipmaps is that they increase memory usage by roughly 33 It s recommended to enable mipmaps in 3D However in 2D this should only be enabled if your project visibly benefits from having mipmaps enabled If the camera never zooms out significantly there won t be a benefit to enabling mipmaps but memory usage will increase Mipmaps Limit Warning Mipmaps Limit is currently not implemented and has no effect when changed If set to a value greater than 1 limits the maximum number of mipmaps that can be generated This can be decreased if you don t want textures to become too low resolution at extreme distances at the cost of some graininess Roughness Mode The color channel to consider as a roughness map in this texture Only effective if Roughness Src Normal is not empty Roughness Src Normal The path to the texture to consider as a normal map for roughness filtering on import Specifying this can help decrease specular aliasing slightly in 3D Roughness filtering on import is only used in 3D rendering not 2D Process Fix Alpha Border This puts pixels of the same surrounding color in transition from transparent to opaque areas For textures displayed with bilinear filtering this helps mitigate the outline effect when exporting images from an image editor It s recommended to leave this enabled as it is by default unless this causes issues for a particular image Process Premult Alpha An alternative to fixing darkened borders with Fix Alpha Border is to use premultiplied alpha By enabling this option the texture will be converted to this format A premultiplied alpha texture requires specific materials to be displayed correctly In 2D a CanvasItemMaterial will need to be created and configured to use the Premul Alpha blend mode on CanvasItems that use this texture In 3D there is no support for premultiplied alpha blend mode yet so this option is only suited for 2D Process Normal Map Invert Y Godot requires the normal map to use the X Y and Z coordinates which is known as an OpenGL style normal map If you ve imported a material made to be used with another engine it may be DirectX style In this case the normal map needs to be converted by enabling the Normal Map Invert Y import option More information about normal maps including a coordinate order table for popular engines can be found here Process HDR as sRGB Some HDR images you can find online may be broken and contain sRGB color data instead of linear color data It is advised not to use those files If you absolutely have to enabling this option on will make them look correct Warning Enabling HDR as sRGB on well formatted HDR images will cause the resulting image to look too dark so leave this disabled if unsure Process HDR Clamp Exposure Some HDR panorama images you can find online may contain extremely bright pixels due to being taken from real life sources without any clipping While these HDR panorama images are accurate to real life this can cause the radiance map generated by Godot to contain sparkles when used as a background sky This can be seen in material reflections even on rough materials in extreme cases Enabling HDR Clamp Exposure can resolve this using a smart clamping formula that does not introduce visible clipping glow will keep working when looking at the background sky Process Size Limit If set to a value greater than 0 the size of the texture is limited on import to a value smaller than or equal to the value specified here For non square textures the size limit affects the longer dimension with the shorter dimension scaled to preserve aspect ratio Resizing is performed using cubic interpolation This can be used to reduce memory usage without affecting the source images or avoid issues with textures not displaying on mobile web platforms as these usually can t display textures larger than 4096 4096 Detect 3D Compress To This changes the Compress Mode option that is used when a texture is detected as being used in 3D Changing this import option only has an effect if a texture is detected as being used in 3D Changing this to Disabled then reimporting will not change the existing compress mode on a texture if it s detected to be used in 3D but choosing VRAM Compressed or Basis Universal will SVG Scale This is only available for SVG images The scale the SVG should be rendered at with 1 0 being the original design size Higher values result in a larger image Note that unlike font oversampling this affects the physical size the SVG is rendered at in 2D See also Editor Scale With Editor Scale below Editor Scale With Editor Scale This is only available for SVG images If true scales the imported image to match the editor s display scale factor This should be enabled for editor plugin icons and custom class icons but should be left disabled otherwise Editor Convert Colors With Editor Theme This is only available for SVG images If checked converts the imported image s colors to match the editor s icon and font color palette This assumes the image uses the exact same colors as Godot s own color palette for editor icons with the source file designed for a dark editor theme This should be enabled for editor plugin icons and custom class icons but should be left disabled otherwise Importing SVG images with text As the SVG library used in Godot doesn t support rasterizing text found in SVG images text must be converted to a path first Otherwise text won t appear in the rasterized image There are two ways to achieve this in a non destructive manner so you can keep editing the original text afterwards Select your text object in Inkscape then duplicate it in place by pressing Ctrl D and use Path Object to Path Hide the original text object afterwards using the Layers and Objects dock Use the Inkscape command line to export an SVG from another SVG file with text converted to paths inkscape export text to path export filename svg_with_text_converted_to_path svg svg_with_text svg Copy to clipboard Best practices Supporting high resolution texture sizes in 2D without artifacts To support multiple resolutions with crisp visuals at high resolutions you will need to use high resolution source images suited for the highest resolution you wish to support without blurriness which is typically 4K in modern desktop games There are 2 ways to proceed Use a high base resolution in the project settings such as 4K then use the textures at original scale This is an easier approach Use a low base resolution in the project settings such as 1080p then downscale textures when using them This is often more difficult and can make various calculations in script tedious so the approach described above is recommended instead After doing this you may notice that textures become grainy at lower viewport resolutions To resolve this enable Mipmaps on textures used in 2D in the Import dock This will increase memory usage Enabling mipmaps can also make textures appear blurrier but you can choose to make textures sharper at the cost of some graininess by setting Rendering Textures Default Filters Texture Mipmap Bias to a negative value Use appropriate texture sizes in 3D While there s no one size fits all recommendation here are some general recommendations for choosing texture sizes in 3D The size of a texture should be adjusted to have a consistent texel density compared to surrounding objects While this cannot be ensured perfectly when sticking to power of two texture sizes it s usually possible to keep texture detail fairly consistent throughout a 3D scene The smaller the object appears on screen the smaller its texture should be For example a tree that only appears in the background doesn t need a texture resolution as high as other objects the player may be able to walk close to Using power of two texture sizes is recommended but is not required Textures don t have to be square sizes such as 1024 512 are acceptable There are diminishing returns to using large texture sizes despite the increased memory usage and loading times Most modern 3D games not using a pixel art style stick to 2048 2048 textures on average with 1024 1024 and 512 512 for textures spanning smaller surfaces When working with physically based materials in 3D you can reduce memory usage and file size without affecting quality too much by using a lower resolution for certain texture maps This works especially well for textures that only feature low frequency detail such as a normal map for a snow texture If you have control over how the 3D models are created these tips are also worth exploring When working with 3D models that are mostly symmetrical you may be able to use mirrored UVs to double the effective texel density This may look unnatural when used on human faces though When working with 3D models using a low poly style and plain colors you can rely on vertex colors instead of textures to represent colors on the model s surfaces See also Images can be loaded and saved at runtime using runtime file loading and saving including from an exported project User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Importing audio samples Supported audio formats Godot provides 3 options to import your audio data WAV Ogg Vorbis and MP3 Each format has different advantages WAV files use raw data or light compression IMA ADPCM or QOA They are lightweight to play back on the CPU hundreds of simultaneous voices in this format are fine The downside is that they take up a lot of disk space Ogg Vorbis files use a stronger compression that results in much smaller file size but require significantly more processing power to play back MP3 files use better compression than WAV with IMA ADPCM or QOA but worse than Ogg Vorbis This means that an MP3 file with roughly equal quality to Ogg Vorbis will be significantly larger On the bright side MP3 requires less CPU usage to play back compared to Ogg Vorbis Note If you ve compiled the Godot editor from source with specific modules disabled some formats may not be available Here is a comparative chart representing the file size of 1 second of audio with each format Format 1 second of audio WAV 24 bit 96 kHz stereo 576 KB WAV 16 bit 44 kHz mono 88 KB WAV IMA ADPCM 44 kHz mono 22 KB WAV QOA 44 kHz mono 17 KB MP3 192 Kb s stereo 24 KB Ogg Vorbis 128 Kb s stereo 16 KB Ogg Vorbis 96 Kb s stereo 12 KB Note that the MP3 and Ogg Vorbis figures can vary depending on the encoding type The above figures use CBR encoding for simplicity but most Ogg Vorbis and MP3 files you can find online are encoded with VBR encoding which is more efficient VBR encoding makes the effective audio file size depend on how complex the source audio is Tip Consider using WAV for short and repetitive sound effects and Ogg Vorbis for music speech and long sound effects MP3 is useful for mobile and web projects where CPU resources are limited especially when playing multiple compressed sounds at the same time such as long ambient sounds Importing audio samples Several options are available in the Import dock after selecting a WAV file in the FileSystem dock Import options in the Import dock after selecting a WAV file in the FileSystem dock The set of options available after selecting an Ogg Vorbis or MP3 file is different Import options in the Import dock after selecting an MP3 file in the FileSystem dock Options are identical for Ogg Vorbis files After importing a sound you can play it back using the AudioStreamPlayer AudioStreamPlayer2D or AudioStreamPlayer3D nodes See Audio streams for more information Import options WAV Force 8 Bit If enabled forces the imported audio to use 8 bit quantization if the source file is 16 bit or higher Enabling this is generally not recommended as 8 bit quantization decreases audio quality significantly If you need smaller file sizes consider using Ogg Vorbis or MP3 audio instead Force Mono If enabled forces the imported audio to be mono if the source file is stereo This decreases the file size by 50 by merging the two channels into one Force Max Rate If set to a value greater than 0 forces the audio s sample rate to be reduced to a value lower than or equal to the value specified here This can decrease file size noticeably on certain sounds without impacting quality depending on the actual sound s contents See Best practices for more information Edit Trim The source audio file may contain long silences at the beginning and or the end These silences are inserted by DAWs when saving to a waveform which increases their size unnecessarily and add latency to the moment they are played back Enabling Trim will automatically trim the beginning and end of the audio if it s lower than 50 dB after normalization see Edit Normalize below A fade in fade out period of 500 samples is also used during trimming to avoid audible pops Edit Normalize If enabled audio volume will be normalized so that its peak volume is equal to 0 dB When enabled normalization will make audio sound louder depending on its original peak volume Edit Loop Mode Unlike Ogg Vorbis and MP3 WAV files can contain metadata to indicate whether they re looping in addition to loop points By default Godot will follow this metadata but you can choose to apply a specific loop mode Disabled Don t loop audio even if metadata indicates the file should be played back looping Forward Standard audio looping Ping Pong Play audio forward until it s done playing then play it backward and repeat This is similar to mirrored texture repeat but for audio Backward Play audio in reverse and loop back to the end when done playing When choosing one of the Forward Ping Pong or Backward loop modes loop points can also be defined to make only a specific part of the sound loop Loop Begin is set in samples after the beginning of the audio file Loop End is also set in samples after the beginning of the audio file but will use the end of the audio file if set to 1 Warning In AudioStreamPlayer the finished signal won t be emitted for looping audio when it reaches the end of the audio file as the audio will keep playing indefinitely Compress Mode Three compression modes can be chosen from for WAV files Disabled default RAM Ima ADPCM or QOA Quite OK Audio RAM Ima ADPCM reduces file size and memory usage a little at the cost of decreasing quality in an audible manner QOA Quite OK Audio reduces file size a bit more than RAM Ima ADPCM and the quality decrease is much less noticeable at the cost of higher CPU usage still much lower than MP3 Ogg Vorbis and MP3 don t decrease quality as much and can provide greater file size reductions at the cost of higher CPU usage during playback This higher CPU usage is usually not a problem especially with MP3 unless playing dozens of compressed sounds at the same time on mobile web platforms Import options Ogg Vorbis and MP3 Loop If enabled the audio will begin playing at the beginning after playback ends by reaching the end of the audio Warning In AudioStreamPlayer the finished signal won t be emitted for looping audio when it reaches the end of the audio file as the audio will keep playing indefinitely Loop Offset The loop offset determines where audio will start to loop after playback reaches the end of the audio This can be used to only loop a part of the audio file which is useful for some ambient sounds or music The value is determined in seconds relative to the beginning of the audio so 0 will loop the entire audio file Only has an effect if Loop is enabled A more convenient editor for Loop Offset is provided in the Advanced import settings dialog as it lets you preview your changes without having to reimport the audio BPM The Beats Per Minute of the audio track This should match the BPM measure that was used to compose the track This is only relevant for music that wishes to make use of interactive music functionality not sound effects A more convenient editor for BPM is provided in the Advanced import settings dialog as it lets you preview your changes without having to reimport the audio Beat Count The beat count of the audio track This is only relevant for music that wishes to make use of interactive music functionality not sound effects A more convenient editor for Beat Count is provided in the Advanced import settings dialog as it lets you preview your changes without having to reimport the audio Bar Beats The number of bars within a single beat in the audio track This is only relevant for music that wishes to make use of interactive music functionality not sound effects A more convenient editor for Bar Beats is provided in the Advanced import settings dialog as it lets you preview your changes without having to reimport the audio Advanced import settings Ogg Vorbis and MP3 If you double click an Ogg Vorbis or MP3 file in the FileSystem dock or choose Advanced in the Import dock you will see a dialog appear Advanced dialog when double clicking an Ogg Vorbis or MP3 file in the FileSystem dock This dialog allows you to edit the audio s loop point with a real time preview in addition to the BPM beat count and bar beats These 3 settings are currently unused but they will be used in the future for interactive music support which allows smoothly transitioning between different music tracks Note Unlike WAV files Ogg Vorbis and MP3 only support a loop begin loop point not a loop end point Looping can also be only be standard forward looping not ping pong or backward Best practices Use appropriate quality settings While keeping pristine quality audio sources is important if you re performing editing using the same quality in the exported project is not necessary For WAV files Godot offers several import options to reduce the final file size without modifying the source file on disk To reduce memory usage and file size choose an appropriate quantization sample rate and number of channels for your audio There s no audible benefit to using 24 bit audio especially in a game where several sounds are often playing at the same time which makes it harder to appreciate individual sounds Unless you are slowing down the audio at run time there s no audible benefit to using a sample rate greater than 48 kHz If you wish to keep a source with a higher sample rate for editing use the Force Max Rate import option to limit the sample rate of the imported sound only available for WAV files Many sound effects can generally be converted to mono as opposed to stereo If you wish to keep a source with stereo for editing use the Force Mono import option to convert the imported sound to mono only available for WAV files Voices can generally be converted to mono but can also have their sample rate reduced to 22 kHz without a noticeable loss in quality unless the voice is very high pitched This is because most human voices never go past 11 kHz Use real time audio effects to reduce file size Godot has an extensive bus system with built in effects This saves SFX artists the need to add reverb to the sound effects reducing their size greatly and ensuring correct trimming As you can see above sound effects become much larger in file size with reverb added See also Audio samples can be loaded and saved at runtime using runtime file loading and saving including from an exported project User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Importing translations Games and internationalization The gaming community isn t monolingual or monocultural It s made up of many different languages and cultures just like the Godot community If you want to allow players to experience your game in their language one of things you ll need to provide is text translations which Godot supports via internationalized text In regular desktop or mobile applications internationalized text is usually located in resource files or po files for GNU stuff Games however can use several orders of magnitude more text than applications so they must support efficient methods for dealing with loads of multilingual text There are two approaches to generate multilingual language games and applications Both are based on a key value system The first is to use one of the languages as the key usually English the second is to use a specific identifier The first approach is probably easier for development if a game is released first in English later in other languages but a complete nightmare if working with many languages at the same time In general games use the second approach and a unique ID is used for each string This allows you to revise the text while it is being translated to other languages The unique ID can be a number a string or a string with a number it s just a unique string anyway Note If you need a more powerful file format Godot also supports loading translations written in the gettext po format See Localization using gettext for details Translation format To complete the picture and allow efficient support for translations Godot has a special importer that can read CSV files Most spreadsheet editors can export to this format so the only requirement is that the files have a special arrangement The CSV files must be saved with UTF 8 encoding without a byte order mark CSV files must be formatted as follows keys lang1 lang2 langN KEY1 string string string KEY2 string string string KEYN string string string The lang tags must represent a language which must be one of the valid locales supported by the engine or they must start with an underscore _ which means the related column is served as comment and won t be imported The KEY tags must be unique and represent a string universally they are usually in uppercase to differentiate from other strings These keys will be replaced at runtime by the matching translated string Note that the case is important KEY1 and Key1 will be different keys The top left cell is ignored and can be left empty or having any content Here s an example keys en es ja GREET Hello friend Hola amigo こんにちは ASK How are you Cómo está 元気ですか BYE Goodbye Adiós さようなら QUOTE Hello said the man Hola dijo el hombre こんにちは 男は言いました The same example is shown below as a comma separated plain text file which should be the result of editing the above in a spreadsheet When editing the plain text version be sure to enclose with double quotes any message that contains commas line breaks or double quotes so that commas are not parsed as delimiters line breaks don t create new entries and double quotes are not parsed as enclosing characters Be sure to escape any double quotes a message may contain by preceding them with another double quote Alternatively you can select another delimiter than comma in the import options keys en es ja GREET Hello friend Hola amigo こんにちは ASK How are you Cómo está 元気ですか BYE Goodbye Adiós さようなら QUOTE Hello said the man Hola dijo el hombre こんにちは 男は言いました Copy to clipboard CSV importer Godot will treat CSV files as translations by default It will import them and generate one or more compressed translation resource files next to it Importing will also add the translation to the list of translations to load when the game runs specified in project godot or the project settings Godot allows loading and removing translations at runtime as well Select the csv file and access the Import dock to define import options You can toggle the compression of the imported translations and select the delimiter to use when parsing the CSV file Be sure to click Reimport after any change to these options User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Importing 3D scenes Godot supports importing 3D scenes from various file formats This documentation section describes what those formats are and how to use them including exporting with the correct conventions and best practices and how to customize the node type using a suffix in the node name The import configuration article describes how to customize the imported data using the import dock the advanced import settings dialog and inherited scenes Available 3D formats Model export considerations Node type customization using name suffixes Import configuration See also 3D scenes can be loaded at runtime using runtime file loading and saving including from an exported project Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Available 3D formats When dealing with 3D assets Godot has a flexible and configurable importer Godot works with scenes This means that the entire scene being worked on in your favorite 3D modeling software will be transferred as close as possible Godot supports the following 3D scene file formats glTF 2 0 recommended Godot has support for both text gltf and binary glb formats blend Blender This works by calling Blender to export to glTF in a transparent manner requires Blender to be installed DAE COLLADA an older format that is supported OBJ Wavefront format their MTL material files This is also supported but pretty limited given the format s limitations no support for pivots skeletons animations UV2 PBR materials FBX supported via the ufbx library The previous import workflow used FBX2glTF integration This requires installing an external program that links against the proprietary FBX SDK so we recommend using the default ubfx method or other formats listed above if suitable for your workflow Copy the scene file together with the textures and mesh data if separate to the project repository then Godot will do a full import when focusing the editor window Exporting glTF 2 0 files from Blender recommended There are 3 ways to export glTF files from Blender As a glTF binary file glb As a glTF text based file with embedded binary data gltf file As a glTF text based file with separate binary data and textures gltf file bin file textures glTF binary files glb are the smallest of the three options They include the mesh and textures set up in Blender When brought into Godot the textures are part of the object s material file glTF embedded files gltf function the same way as binary files They don t provide extra functionality in Godot and shouldn t be used since they have a larger file size There are two reasons to use glTF with the textures separate One is to have the scene description in a text based format and the binary data in a separate binary file This can be useful for version control if you want to review changes in a text based format The second is you need the texture files separate from the material file If you don t need either of those glTF binary files are fine The glTF import process first loads the glTF file s data into an in memory GLTFState class This data is then used to generate a Godot scene When importing files at runtime this scene can be directly added to the tree The export process is the reverse of this a Godot scene is converted to a GLTFState class then the glTF file is generated from that When importing glTF files in the editor there are two more steps After generating the Godot scene the ResourceImporterScene class is used to apply additional import settings including settings you set through the Import dock and the Advanced Import Settings dialog This is then saved as a Godot scene file which is what gets used when you run export your game Warning If your model contains blend shapes also known as shape keys and morph targets your glTF export setting Export Deformation Bones Only needs to be configured to Enabled under the Animation export configurations Exporting non deforming bones anyway will lead to incorrect shading Note Blender versions older than 3 2 do not export emissive textures with the glTF file If your model uses one and you re using an older version of Blender it must be brought in separately By default Blender has backface culling disabled on materials and will export materials to match how they render in Blender This means that materials in Godot will have their cull mode set to Disabled This can decrease performance since backfaces will be rendered even when they are being culled by other faces To resolve this enable Backface Culling in Blender s Materials tab then export the scene to glTF again Importing blend files directly within Godot Note This functionality requires Blender 3 0 or later For best results we recommend using Blender 3 5 or later as it includes many fixes to the glTF exporter It is strongly recommended to use an official Blender release downloaded from blender org as opposed to a Linux distribution package or Flatpak This avoids any issues related to packaging such as different library versions that can cause incompatibilities or sandboxing restrictions From Godot 4 0 onwards the editor can directly import blend files by calling Blender s glTF export functionality in a transparent manner This allows you to iterate on your 3D scenes faster as you can save the scene in Blender alt tab back to Godot then see your changes immediately When working with version control this is also more efficient as you no longer need to commit a copy of the exported glTF file to version control To use blend import you must install Blender before opening the Godot editor if opening a project that already contains blend files If you keep Blender installed at its default location Godot should be able to detect its path automatically If this isn t the case configure the path to the directory containing the Blender executable in the Editor Settings Filesystem Import Blender Blender 3 Path If you keep blend files within your project folder but don t want them to be imported by Godot disable Filesystem Import Blender Enabled in the advanced Project Settings The blend import process converts to glTF first so it still uses Godot s glTF import code Therefore the blend import process is the same as the glTF import process but with an extra step at the beginning Note When working in a team keep in mind using blend files in your project will require all team members to have Blender installed While Blender is a free download this may add friction when working on the project blend import is also not available on the Android and web editors as these platforms can t call external programs If this is problematic consider using glTF scenes exported from Blender instead Exporting DAE files from Blender Blender has built in COLLADA support but it does not work properly for the needs of game engines and shouldn t be used as is However scenes exported with the built in Collada support may still work for simple scenes without animation For complex scenes or scenes that contain animations Godot provides a Blender plugin that will correctly export COLLADA scenes for use in Godot Importing OBJ files in Godot OBJ is one of the simplest 3D formats out there so Godot should be able to import most OBJ files successfully However OBJ is also a very limited format it doesn t support skinning animation UV2 or PBR materials There are 2 ways to use OBJ meshes in Godot Load them directly in a MeshInstance3D node or any other property that expects as mesh such as GPUParticles3D This is the default mode Change their import mode to OBJ as Scene in the Import dock then restart the editor This allows you to use the same import options as glTF or Collada scenes such as unwrapping UV2 on import for Using Lightmap global illumination Note Blender 3 4 and later can export RGB vertex colors in OBJ files this is a nonstandard extension of the OBJ format Godot is able to import those vertex colors since Godot 4 0 but they will not be displayed on the material unless you enable Vertex Color Use As Albedo on the material Vertex colors from OBJ meshes keep their original color space once imported sRGB linear but their brightness is clamped to 1 0 they can t be overbright Importing FBX files in Godot By default any FBX file added to a Godot project in Godot 4 3 or later will use the ufbx import method Any file that was was added to a project in a previous version such as 4 2 will continue to be imported via the FBX2glTF method unless you go into that files import settings and change the importer to ufbx If you keep fbx files within your project folder but don t want them to be imported by Godot disable Filesystem Import FBX Enabled in the advanced Project Settings If you want to setup the FBX2glTF workflow which is generally not recommend unless you have a specific reason to use it you need to download the FBX2glTF executable then specify the path to that executable in the editor settings under Filesystem Import FBX FBX2glTFPath The FBX2glTF import process converts to glTF first so it still uses Godot s glTF import code Therefore the FBX import process is the same as the glTF import process but with an extra step at the beginning See also The full installation process for using FBX2glTF in Godot is described on the FBX import page of the Godot website User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Model export considerations Before exporting a 3D model from a 3D modeling application such as Blender there are some considerations that should be taken into account to ensure that the model follows the conventions and best practices for Godot 3D asset direction conventions Godot uses a right handed Y is up coordinate system with the Z axis as the camera s forward direction This is the same as OpenGL This implies that Z is back X is right and X is left for a camera The convention for 3D assets is to face the opposite direction as the camera so that characters and other assets are facing the camera by default This convention is extremely common in 3D modeling applications and is codified in glTF as part of the glTF 2 0 specification This means that for oriented 3D assets such as characters the Z axis is the direction of the front so Z is the rear X is the left side and X is the right side for a 3D asset In Blender this means that Y is rear and Y is front for an asset When rotating an oriented 3D asset in Godot use the use_model_front option on the look_at functions and use the Vector3 MODEL_ constants to perform calculations in the oriented asset s local space For assets without an intrinsic front side or forward direction such as a game map or terrain take note of the cardinal directions instead The convention in Godot and the vast majority of other applications is that X is east and X is west Due to Godot s right handed Y is up coordinate system this implies that Z is south and Z is north In Blender this means that Y is north and Y is south Exporting textures separately While textures can be exported with a model in certain file formats such as glTF 2 0 you can also export them separately Godot uses PBR physically based rendering for its materials so if a texturing program can export PBR textures they can work in Godot This includes the Substance suite ArmorPaint open source and Material Maker open source See also For more information on Godot s materials see Standard Material 3D and ORM Material 3D Exporting considerations Since GPUs can only render triangles meshes that contain quads or N gons have to be triangulated before they can be rendered Godot can triangulate meshes on import but results may be unpredictable or incorrect especially with N gons Regardless of the target application triangulating before exporting the scene will lead to more consistent results and should be done whenever possible To avoid issues with incorrect triangulation after importing in Godot it is recommended to make the 3D modeling software triangulate objects on its own In Blender this can be done by adding a Triangulate modifier to your objects and making sure Apply Modifiers is checked in the export dialog Alternatively depending on the exporter you may be able to find and enable a Triangulate Faces option in the export dialog To avoid issues with 3D selection in the editor it is recommended to apply the object transform in the 3D modeling software before exporting the scene Note It is important that the mesh is not deformed by bones when exporting Make sure that the skeleton is reset to its T pose or default rest pose before exporting with your favorite 3D editor Lighting considerations While it s possible to import lights from a 3D scene using the glTF blend or Collada formats it s generally advised to design the scene s lighting in the Godot editor after importing the scene This allows you to get a more accurate feel for the final result as different engines will render lights in a different manner This also avoids any issues with lights appearing excessively strong or faint as a result of the import process User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Node type customization using name suffixes Many times when editing a scene there are common tasks that need to be done after exporting Adding collision detection to objects Setting objects as navigation meshes Deleting nodes that are not used in the game engine like specific lights used for modeling To simplify this workflow Godot offers several suffixes that can be added to the names of the objects in your 3D modeling software When imported Godot will detect suffixes in object names and will perform actions automatically Warning All the suffixes described below can be used with and _ and are case insensitive Remove nodes noimp Objects that have the noimp suffix will be removed at import time no matter what their type is They will not appear in the imported scene This is equivalent to enabling Skip Import for a node in the Advanced Import Settings dialog Create collisions col convcol colonly convcolonly The option col will work only for Mesh objects If it is detected a child static collision node will be added using the same geometry as the mesh This will create a triangle mesh collision shape which is a slow but accurate option for collision detection This option is usually what you want for level geometry but see also colonly below The option convcol will create a ConvexPolygonShape3D instead of a ConcavePolygonShape3D Unlike triangle meshes which can be concave a convex shape can only accurately represent a shape that doesn t have any concave angles a pyramid is convex but a hollow box is concave Due to this convex collision shapes are generally not suited for level geometry When representing simple enough meshes convex collision shapes can result in better performance compared to a triangle collision shape This option is ideal for simple or dynamic objects that require mostly accurate collision detection However in both cases the visual geometry may be too complex or not smooth enough for collisions This can create physics glitches and slow down the engine unnecessarily To solve this the colonly modifier exists It will remove the mesh upon importing and will create a StaticBody3D collision instead This helps the visual mesh and actual collision to be separated The option convcolonly works in a similar way but will create a ConvexPolygonShape3D instead using convex decomposition With Collada files the option colonly can also be used with Blender s empty objects On import it will create a StaticBody3D with a collision node as a child The collision node will have one of a number of predefined shapes depending on Blender s empty draw type Choosing a draw type for an Empty on creation in Blender Single arrow will create a SeparationRayShape3D Cube will create a BoxShape3D Image will create a WorldBoundaryShape3D Sphere and the others not listed will create a SphereShape3D When possible try to use a few primitive collision shapes instead of triangle mesh or convex shapes Primitive shapes often have the best performance and reliability Note For better visibility on Blender s editor you can set the X Ray option on collision empties and set some distinct color for them by changing Edit Preferences Themes 3D Viewport Empty If using Blender 2 79 or older follow these steps instead User Preferences Themes 3D View Empty See also See Collision shapes 3D for a comprehensive overview of collision shapes Create Occluder occ occonly If a mesh is imported with the occ suffix an Occluder3D node will be created based on the geometry of the mesh it does not replace the mesh A mesh node with the occonly suffix will be converted to an Occluder3D on import Create navigation navmesh A mesh node with the navmesh suffix will be converted to a navigation mesh The original Mesh object will be removed at import time Create a VehicleBody vehicle A mesh node with the vehicle suffix will be imported as a child to a VehicleBody3D node Create a VehicleWheel wheel A mesh node with the wheel suffix will be imported as a child to a VehicleWheel3D node Rigid Body rigid A mesh node with the rigid suffix will be imported as a RigidBody3D Animation loop loop cycle Animation clips in the source 3D file that start or end with the token loop or cycle will be imported as a Godot Animation with the loop flag set Unlike the other suffixes described above this does not require a hyphen In Blender this requires using the NLA Editor and naming the Action with the loop or cycle prefix or suffix User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Import configuration Godot provides several ways to customize the imported data such as the import dock the advanced import setting dialog and inherited scenes This can be used to make further changes to the imported scene such as adjusting meshes adding physics information and adding new nodes You can also write a script that runs code at the end of the import process to perform arbitrary customization Note that when applicable modifying the original data should be preferred to configuring the scene after import This helps minimize the differences between the 3D modeling application and the imported scene See the Model export considerations and Node type customization using name suffixes articles for more information Import workflows Since Godot can only save its own scene format tscn scn Godot cannot save over the original 3D scene file which uses a different format This is also a safer approach as it avoids making accidental changes to the source file To allow customizing the scene and its materials Godot s scene importer allows for different workflows regarding how data is imported Import dock after selecting a 3D scene in the FileSystem dock This import process is customizable using 3 separate interfaces depending on your needs The Import dock after selecting the 3D scene by clicking it once in the FileSystem dock The Advanced Import Settings dialog which can be accessed by double clicking the 3D scene in the FileSystem dock or by clicking the Advanced button in the Import dock This allows you to customize per object options in Godot Import hints which are special suffixes added to object names in the 3D modeling software This allows you to customize per object options in the 3D modeling software For basic customization using the Import dock suffices However for more complex operations such as defining material overrides on a per material basis you ll need to use the Advanced Import Settings dialog import hints or possibly both Using the Import dock The following options can be adjusted in the Import dock after selecting a 3D scene in the FileSystem dock Root Type The node type to use as a root node Using node types that inherit from Node3D is recommended Otherwise you ll lose the ability to position the node directly in the 3D editor Root Name The name of the root node in the imported scene This is generally not noticeable when instancing the scene in the editor or drag and dropping from the FileSystem dock as the root node is renamed to match the filename in this case Apply Root Scale If enabled Root Scale will be applied on the meshes and animations directly while keeping the root node s scale to the default 1 1 1 This means that if you add a child node later on within the imported scene it won t be scaled If disabled Root Scale will multiply the scale of the root node instead Meshes Ensure Tangents If checked generate vertex tangents using Mikktspace if the input meshes don t have tangent data When possible it s recommended to let the 3D modeling software generate tangents on export instead on relying on this option Tangents are required for correct display of normal and height maps along with any material shader features that require tangents If you don t need material features that require tangents disabling this can reduce output file size and speed up importing if the source 3D file doesn t contain tangents Generate LODs If checked generates lower detail variants of the mesh which will be displayed in the distance to improve rendering performance Not all meshes benefit from LOD especially if they are never rendered from far away Disabling this can reduce output file size and speed up importing See Mesh level of detail LOD for more information Create Shadow Meshes If checked enables the generation of shadow meshes on import This optimizes shadow rendering without reducing quality by welding vertices together when possible This in turn reduces the memory bandwidth required to render shadows Shadow mesh generation currently doesn t support using a lower detail level than the source mesh but shadow rendering will make use of LODs when relevant Light Baking Configures the meshes global illumination mode in the 3D scene If set to Static Lightmaps sets the meshes GI mode to Static and generates UV2 on import for lightmap baking Lightmap Texel Size Only visible if Light Baking is set to Static Lightmaps Controls the size of each texel on the baked lightmap A smaller value results in more precise lightmaps at the cost of larger lightmap sizes and longer bake times Skins Use Named Skins If checked use named Skins for animation The MeshInstance3D node contains 3 properties of relevance here a skeleton NodePath pointing to the Skeleton3D node usually a mesh and a skin The Skeleton3D node contains a list of bones with names their pose and rest a name and a parent bone The mesh is all of the raw vertex data needed to display a mesh In terms of the mesh it knows how vertices are weight painted and uses some internal numbering often imported from 3D modeling software The skin contains the information necessary to bind this mesh onto this Skeleton3D For every one of the internal bone IDs chosen by the 3D modeling software it contains two things Firstly a Matrix known as the Bind Pose Matrix Inverse Bind Matrix or IBM for short Secondly the Skin contains each bone s name if Use Named Skins is enabled or the bone s index within the Skeleton3D list if Use Named Skins is disabled Together this information is enough to tell Godot how to use the bone poses in the Skeleton3D node to render the mesh from each MeshInstance3D Note that each MeshInstance3D may share binds as is common in models exported from Blender or each MeshInstance3D may use a separate Skin object as is common in models exported from other tools such as Maya Animation Import If checked import animations from the 3D scene FPS The number of frames per second to use for baking animation curves to a series of points with linear interpolation It s recommended to configure this value to match the value you re using as a baseline in your 3D modeling software Higher values result in more precise animation with fast movement changes at the cost of higher file sizes and memory usage Thanks to interpolation there is usually not much benefit in going above 30 FPS as the animation will still appear smooth at higher rendering framerates Trimming Trim the beginning and end of animations if there are no keyframe changes This can reduce output file size and memory usage with certain 3D scenes depending on the contents of their animation tracks Remove Immutable Tracks Remove animation tracks that only contain default values This can reduce output file size and memory usage with certain 3D scenes depending on the contents of their animation tracks Import Script Path Path to an import script which can run code after the import process has completed for custom processing See Using import scripts for automation for more information glTF Embedded Texture Handling Controls how textures embedded within glTF scenes should be handled Discard All Textures will not import any textures which is useful if you wish to manually set up materials in Godot instead Extract Textures extracts textures to external images resulting in smaller file sizes and more control over import options Embed as Basis Universal and Embed as Uncompressed keeps the textures embedded in the imported scene with and without VRAM compression respectively FBX Importer Which import method is used ubfx handles fbx files as fbx files FBX2glTF converts FBX files to glTF on import and requires additional setup FBX2glTF is not recommended unless you have a specific rason to use it over ufbx or working with a different file format Allow Geometry Helper Nodes enables or disables geometry helper nodes Embedded Texture Handling Controls how textures embedded within fbx scenes should be handled Discard All Textures will not import any textures which is useful if you wish to manually set up materials in Godot instead Extract Textures extracts textures to external images resulting in smaller file sizes and more control over import options Embed as Basis Universal and Embed as Uncompressed keeps the textures embedded in the imported scene with and without VRAM compression respectively Using the Advanced Import Settings dialog The first tab you ll see is the Scene tab The options available in the panel on the right are identical to the Import dock but you have access to a 3D preview The 3D preview can be rotated by holding down the left mouse button then dragging the mouse Zoom can be adjusted using the mouse wheel Advanced Import Settings dialog Scene tab Credit Modern Arm Chair 01 Poly Haven Configuring node import options You can select individual nodes that compose the scene while in the Scene tab using the tree view at the left Selecting a node in the Advanced Import Settings dialog Materials tab This exposes several per node import options Skip Import If checked the node will not be present in the final imported scene Enabling this disables all other options Generate Physics If checked generates a PhysicsBody3D parent node with collision shapes that are siblings to the MeshInstance3D node Generate NavMesh If checked generates a NavigationRegion3D child node for navigation Mesh NavMesh will keep the original mesh visible while NavMesh Only will only import the navigation mesh without a visual representation NavMesh Only is meant to be used when you ve manually authored a simplified mesh for navigation Generate Occluder If checked generates an OccluderInstance3D sibling node for occlusion culling using the mesh s geometry as a basis for the occluder s shape Mesh Occluder will keep the original mesh visible while Occluder Only will only import the occluder without a visual representation Occluder Only is meant to be used when you ve manually authored a simplified mesh for occlusion culling These options are only visible if some of the above options are enabled Physics Body Type Only visible if Generate Physics is enabled Controls the PhysicsBody3D that should be created Static creates a StaticBody3D Dynamic creates a RigidBody3D Area creates an Area3D Physics Shape Type Only visible if Generate Physics is enabled Trimesh allows for precise per triangle collision but it can only be used with a Static body type Other types are less precise and may require manual configuration but can be used with any body type For static level geometry use Trimesh For dynamic geometry use primitive shapes if possible for better performance or use one of the convex decomposition modes if the shape is large and complex Decomposition Advanced Only visible if Physics Shape Type is Decompose Convex If checked allows adjusting advanced decomposition options If disabled only a preset Precision can be adjusted which is usually sufficient Decomposition Precision Only visible if Physics Shape Type is Decompose Convex Controls the precision to use for convex decomposition Higher values result in more detailed collision at the cost of slower generation and increased CPU usage during physics simulation To improve performance it s recommended to keep this value as low as possible for your use cases Occluder Simplification Distance Only visible if Generate Occluder is set to Mesh Occluder or Occluder Only Higher values result in an occluder mesh with fewer vertices resulting in decreased CPU utilization at the cost of more occlusion culling issues such as false positives or false negatives If you run into objects disappearing when they shouldn t when the camera is near a certain mesh try decreasing this value Configuring mesh and material import options In the Advanced Import Settings dialog there are 2 ways to select individual meshes or materials Switch to the Meshes or Materials tab in the top left corner of the dialog Stay in the Scene tab but unfold the options on the tree view on the left After choosing a mesh or material this presents the same information as the Meshes and Materials tabs but in a tree view instead of a list If you select a mesh different options will appear in the panel on the right Advanced Import Settings dialog Meshes tab The options are as follows Save to File Saves the Mesh resource to an external file this isn t a scene file You generally don t need to use this for placing the mesh in a 3D scene instead you should instance the 3D scene directly However having direct access to the Mesh resource is useful for specific nodes such as MeshInstance3D MultiMeshInstance3D GPUParticles3D or CPUParticles3D You will also need to specify an output file path using the option that appears after enabling Save to File It s recommended to use the res output file extension for smaller file sizes and faster loading speeds as tres is inefficient for writing large amounts of data Generate Shadow Meshes Per mesh override for the Meshes Create Shadow Meshes scene wide import option described in Using the Import dock Default will use the scene wide import option while Enable or Disable can forcibly enable or disable this behavior on a specific mesh Generate Lightmap UV Per mesh override for the Meshes Light Baking scene wide import option described in Using the Import dock Default will use the scene wide import option while Enable or Disable can forcibly enable or disable this behavior on a specific mesh Setting this to Enable on a scene with the Static light baking mode is equivalent to configuring this mesh to use Static Lightmaps Setting this to Disable on a scene with the Static Lightmaps light baking mode is equivalent to configuring this mesh to use Static instead Generate LODs Per mesh override for the Meshes Generate LODs scene wide import option described in Using the Import dock Default will use the scene wide import option while Enable or Disable can forcibly enable or disable this behavior on a specific mesh LODs Normal Split Angle The minimum angle difference between two vertices required to preserve a geometry edge in mesh LOD generation If running into visual issues with LOD generation decreasing this value may help at the cost of less efficient LOD generation LODs Normal Merge Angle The minimum angle difference between two vertices required to preserve a geometry edge in mesh LOD generation If running into visual issues with LOD generation decreasing this value may help at the cost of less efficient LOD generation If you select a material only one option will appear in the panel on the right Advanced Import Settings dialog Materials tab When Use External is checked and an output path is specified this lets you use an external material instead of the material that is included in the original 3D scene file see the section below Extracting materials to separate files While Godot can import materials authored in 3D modeling software the default configuration may not be suitable for your needs For example You want to configure material features not supported by your 3D application You want to use a different texture filtering mode as this option is configured in the material since Godot 4 0 and not in the image You want to replace one of the materials with an entirely different material such as a custom shader To be able to modify the 3D scene s materials in the Godot editor you need to use external material resources In the top left corner of the Advanced Import Settings dialog choose Actions Extract Materials Extracting all built in materials to external resources in the Advanced Import Settings dialog After choosing this option select a folder to extract material tres files to then confirm the extraction Confirming material extraction in the Advanced Import Settings subdialog Note After extracting materials the 3D scene will automatically be configured to use external material references As a result you don t need to manually enable Use External on every material to make the external tres material effective When Use External is enabled remember that the Advanced Import Settings dialog will keep displaying the mesh s original materials the ones designed in the 3D modeling software This means your customizations to the materials won t be visible within this dialog To preview your modified materials you need to place the imported 3D scene in another scene using the editor Godot will not overwrite changes made to extracted materials when the source 3D scene is reimported However if the material name is changed in the source 3D file the link between the original material and the extracted material will be lost As a result you ll need to use the Advanced Import Settings dialog to associate the renamed material to the existing extracted material The above can be done in the dialog s Materials tab by selecting the material enabling Save to File then specifying the save path using the Path option that appears after enabling Save to File Using import scripts for automation A special script to process the whole scene after import can be provided This is great for post processing changing materials doing funny stuff with the geometry and more Create a script that is not attached to any node by right clicking in the FileSystem dock and choosing New Script In the script editor write the following tool Needed so it runs in editor extends EditorScenePostImport This sample changes all node names Called right after the scene is imported and gets the root node func _post_import scene Change all node names to modified_ oldnodename iterate scene return scene Remember to return the imported scene Recursive function that is called on every node for demonstration purposes EditorScenePostImport only requires a _post_import scene function func iterate node if node null print_rich Post import b s b b s b node name modified_ node name node name modified_ node name for child in node get_children iterate child Copy to clipboard The _post_import scene Node function takes the imported scene as argument the parameter is actually the root node of the scene The scene that will finally be used must be returned even if the scene can be entirely different To use your script locate the script in the import tab s Path option under the Import Script category Using animation libraries As of Godot 4 0 you can choose to import only animations from a glTF file and nothing else This is used in some asset pipelines to distribute animations separately from models For example this allows you to use one set of animations for several characters without having to duplicate animation data in every character To do so select the glTF file in the FileSystem dock then change the import mode to Animation Library in the Import dock Changing the import type to Animation Library in the Import dock Click Reimport and restart the editor when prompted After restarting the glTF file will be imported as an AnimationLibrary instead of a PackedScene This animation library can then be referenced in an AnimationPlayer node The import options that are visible after changing the import mode to Animation Library act the same as when using the Scene import mode See Using the Import dock for more information Filter script It is possible to specify a filter script in a special syntax to decide which tracks from which animations should be kept The filter script is executed against each imported animation The syntax consists of two types of statements the first for choosing which animations to filter and the second for filtering individual tracks within the matched animation All name patterns are performed using a case insensitive expression match with support for and wildcards using String matchn under the hood The script must start with an animation filter statement as denoted by the line beginning with an For example if we would like to apply filters to all imported animations which have a name ending in _Loop _Loop Copy to clipboard Similarly additional patterns can be added to the same line separated by commas Here is a modified example to additionally include all animations with names that begin with Arm_Left but also exclude all animations which have names ending in Attack _Loop Arm_Left Attack Copy to clipboard Following the animation selection filter statement we add track filtering patterns to indicate which animation tracks should be kept or discarded If no track filter patterns are specified then all tracks within the matched animations will be discarded It s important to note that track filter statements are applied in order for each track within the animation this means that one line may include a track a later rule can still discard it Similarly a track excluded by an early rule may then be re included once again by a filter rule further down in the filter script For example include all tracks in animations with names ending in _Loop but discard any tracks affecting a Skeleton which end in Control unless they have Arm in their name _Loop Skeleton Control Arm Copy to clipboard In the above example tracks like Skeleton Leg_Control would be discarded while tracks such as Skeleton Head or Skeleton Arm_Left_Control would be retained Any track filter lines that do not begin with a or are ignored Storage By default animations are saved as built in It is possible to save them to a file instead This allows adding custom tracks to the animations and keeping them after a reimport Optimizer When animations are imported an optimizer is run which reduces the size of the animation considerably In general this should always be turned on unless you suspect that an animation might be broken due to it being enabled Clips It is possible to specify multiple animations from a single timeline as clips For this to work the model must have only one animation that is named default To create clips change the clip amount to something greater than zero You can then name a clip specify which frames it starts and stops on and choose whether the animation loops or not Scene inheritance In many cases it may be desired to make manual modifications to the imported scene By default this is not possible because if the source 3D asset changes Godot will re import the whole scene However it is possible to make local modifications by using scene inheritance If you try to open the imported scene using Scene Open Scene or Scene Quick Open Scene the following dialog will appear Dialog when opening an imported 3D scene in the editor In inherited scenes the only limitations for modification are Nodes from the base scene can t be removed but additional nodes can be added anywhere Subresources can t be edited Instead you need to save them externally as described above Other than that everything is allowed User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Retargeting 3D Skeletons To share animations among multiple Skeletons Godot has Position Rotation Scale 3D tracks which this document calls Transform tracks with Nodepaths to bones for Skeleton bone animation This means you can t share animations between multiple Skeletons just by using the same bone names Godot allows each bone to have a parent child relationship and can have rotation and scale as well as position which means that bones that share a name can still have different Transform values The Skeleton stores the Transform values necessary for the default pose as Bone Rest If Bone Pose is equal to Bone Rest it means that the Skeleton is in the default pose Note Godot 3 x and Godot 4 0 have different Bone Pose behaviors In Godot 3 x Bone Pose is relative to Bone Rest but in Godot 4 0 it includes Bone Rest See this article Skeletal models have different Bone Rests depending on the environment from which they were exported For example the bones of a glTF model output from Blender have Edit Bone Orientation as the Bone Rest rotation However there are skeletal models without any Bone Rest rotations such as the glTF model output from Maya To share animations in Godot it is necessary to match Bone Rests as well as Bone Names to remove unwanted tracks in some cases In Godot 4 0 you can do that using the scene importer Options for Retargeting Bone Map When you select the Skeleton3D node in the advanced scene import menu a menu will appear on the right hand side containing the Retarget section The Retarget section has a single property bone_map With the Skeleton node selected first set up a new BoneMap and SkeletonProfile Godot has a preset called SkeletonProfileHumanoid for humanoid models This tutorial proceeds with the assumption that you are using SkeletonProfileHumanoid Note If you need a profile that is different from SkeletonProfileHumanoid you can export a SkeletonProfile from the editor by selecting a Skeleton3D and using the Skeleton3D menu in the 3D viewport s toolbar When you use SkeletonProfileHumanoid auto mapping will be performed when the SkeletonProfile is set If the auto mapping does not work well you can map bones manually Any missing duplicate or incorrect parent child relationship mappings will be indicated by a magenta red button depending on the editor setting It does not block the import process but it warns that animations may not be shared correctly Note The auto mapping uses pattern matching for the bone names So we recommend to use common English names for bones After you set up the bone_map several options are available in the sections below Remove Tracks If you import resources as an AnimationLibrary that will be shared we recommend to enable these options However if you import resources as scenes these should be disabled in some cases For example if you import a character with animated accessories these options may cause the accessories to not animate Except Bone Transform Removes any tracks except the bone Transform track from the animations Unimportant Positions Removes Position tracks other than root_bone and scale_base_bone defined in SkeletonProfile from the animations In SkeletonProfileHumanoid this means that to remove Position tracks other than Root and Hips Since Godot 4 0 animations include Bone Rest in the Transform value If you disable this option the animation may change the body shape unpredictably Unmapped Bones Removes unmapped bone Transform tracks from the animations Bone Renamer Rename Bones Rename the mapped bones Unique Node Makes Skeleton a unique node with the name specified in the skeleton_name This allows the animation track paths to be unified independent of the scene hierarchy Rest Fixer Reference poses defined in SkeletonProfileHumanoid have the following rules The humanoid is T pose The humanoid is facing Z in the Right Handed Y UP Coordinate System The humanoid should not have a Transform as Node Directs the Y axis from the parent joint to the child joint X rotation bends the joint like a muscle contracting These rules are convenient definitions for blend animation and Inverse Kinematics IK If your model does not match this definition you need to fix it with these options Apply Node Transform If the asset is not exported correctly for sharing the imported Skeleton may have a Transform as a Node For example a glTF exported from Blender with no Apply Transform executed is one such case It looks like the model matches the definition but the internal Transforms are different from the definition This option fixes such models by applying Transforms on import Note If the imported scene contains objects other than Skeletons this option may have a negative effect Normalize Position Tracks Position track is used mostly for model movement but sharing the moving animation between models with different heights may cause the appearance of slipping due to the difference in stride length This option normalizes the Position track values based on the scale_base_bone height The scale_base_bone height is stored in the Skeleton as the motion_scale and the normalized Position track values is multiplied by that value on playback If this option is disabled the Position tracks is not normalized and the Skeleton s motion_scale is always imported as 1 0 With SkeletonProfileHumanoid scale_base_bone is Hips therefore the Hips height is used as the motion_scale Overwrite Axis Unifies the models Bone Rests by overwriting it to match the reference poses defined in the SkeletonProfile Note This is the most important option for sharing animations in Godot 4 0 but be aware that this option can produce horrible results if the original Bone Rest set externally is important If you want to share animations with keeping the original Bone Rest consider to use the Realtime Retarget Module Fix Silhouette Attempts to make the model s silhouette match that of the reference poses defined in the SkeletonProfile such as T Pose This cannot fix silhouettes which are too different and it may not work for fixing bone roll With SkeletonProfileHumanoid this option does not need to be enabled for T pose models but should be enabled for A pose models However in that case the fixed foot results may be bad depending on the heel height of the model so it may be necessary to add the SkeletonProfile bone names you do not want fixed in the filter array as in the below example Also for models with bent knees or feet it may be necessary to adjust the scale_base_bone height For that you can use base_height_adjustment option User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Exporting 3D scenes Overview In Godot it is possible to export 3D scenes as a glTF 2 0 file You can export as a glTF binary glb file or glTF embedded with textures gltf bin textures This allows you to create scenes in Godot such as a CSG mesh blockout for a level export it to clean it up in a program such as Blender and then bring it back into Godot Note Only Blender 2 83 and newer can import glTF files exported by Godot To export a scene in the editor go to Scene Export As glTF 2 0 Scene Limitations There are several limitations with glTF export No support for exporting particles since their implementation varies across engines ShaderMaterials cannot be exported No support for exporting 2D scenes See also 3D scenes can be saved at runtime using runtime file loading and saving including from an exported project User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Blender ESCN exporter Note This chapter relates to the Blender plugin called Godot Blender Exporter which can be downloaded here https github com godotengine godot blender exporter This plugin can be used to export Blender scenes in a Godot specific scene format called ESCN which is similar to TSCN text format but will be imported as binary SCN for performance Details on exporting Materials Physics properties Lights Mesh Skeleton Animation Disabling specific objects Sometimes you don t want some objects exported e g high res models used for baking An object will not be exported if it is not rendered in the scene This can be set in the outliner Objects hidden in the viewport will be exported but will be hidden in the Godot scene Build pipeline integration If you have hundreds of model files you don t want your artists to waste time manually exporting their blend files To combat this the exporter provides a Python function io_scene_godot export out_file_path that can be called to export a file This allows easy integration with other build systems An example Makefile and Python script that exports all the blends in a directory are present in the godot blender exporter repository Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Materials Using existing Godot materials One way in which the exporter can handle materials is to attempt to match the Blender material with an existing Godot material This has the advantage of being able to use all of the features of Godot s material system but it means that you cannot see your model with the material applied inside Blender To do this the exporter attempts to find Godot materials with names that match those of the material name in Blender So if you export an object in Blender with the material name PurpleDots then the exporter will search for the file PurpleDots tres and assign it to the object If this file is not a StandardMaterial3D or ShaderMaterial or if it cannot be found then the exporter will fall back to exporting the material from Blender Where the exporter searches for the tres file is determined by the Material Search Paths option This can take the value of Project Directory Attempts to find the project Godot and recursively searches through subdirectories If project Godot cannot be found it will throw an error This is useful for most projects where naming conflicts are unlikely Export Directory Look for materials in subdirectories of the export location This is useful for projects where you may have duplicate material names and need more control over what material gets assigned None Do not search for materials Export them from the Blender file Export of Cycles EEVEE materials The exporter has a primitive support for converting Cycles EEVEE material node tree to Godot Shader Material Note that some of the Shader Node are not supported yet due to difficulties in implementation which are all the noisy textures generated texture coordinates group node shader nodes except PrincipledBSDF Diffuse Glossy Glass add shader and mix shader Warning If possible try to use PrincipledBSDF node with GGX distribution as the output shader node it is the only one guaranteed to be exactly correct Others are just based on approximation Sometimes materials may not be valid for exporting e g has some unsupported node or it is using Blender Internal Engine only the diffuse color and a few flags e g unshaded are exported and form a StandardMaterial3D Generate external materials The default configuration of material exporting would keep all the materials internal to the escn file There is an option which could enable generating external material file when the escn file opens in Godot material file can be assigned to any material slot to be an external resource User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Physics properties Exporting physics properties is done by enabling Rigid Body in Blender s physics tab Important By default a single Blender object with rigid body enabled will export as three nodes a PhysicsBody a CollisionShape and a MeshInstance3D Body type Blender only has the concept of Active and Passive rigid bodies These turn into Static and RigidBody nodes To create a kinematic body enable the animated checkbox on an Active body Collision shapes Many of the parameters for collision shapes are missing from Blender and many of the collision shapes are also not present However almost all of the options in Blender s rigid body collision and rigid body dynamics interfaces are supported There are the following caveats Not all of the collision shapes are supported Only Mesh Convex Hull Capsule Sphere and Box are supported in both Blender and Godot In Godot you can have different collision groups and collision masks In Blender you only have collision groups As a result the exported object s collision mask is equal to its collision group Most of the time this is what you want Important To build compound physics shapes parent together multiple objects with rigid body enabled The physics properties are taken from the parent most rigid body and the rest are used as collision shapes Collision geometry only Frequently you want different geometry for your collision meshes and your graphical meshes but by default the exporter will export a mesh along with the collision shape To only export the collision shape set the object s maximum draw type to Wire This will also influence how the object is shown in Blender s viewport Most of the time you want your collision geometry to be shown see through when working on the models so this works out fairly nicely User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Lights Warning By default lamps in Blender have shadows enabled This can cause performance issues in Godot Warning Lamps are exported using their Blender Render settings When Blender 2 8 is released this will be removed and this part of the exporter will change Sun point and spot lamps are all exported from Blender along with many of their properties There are some things to note In Blender a light casts light all the way to infinity In Godot it is clamped by the attenuation distance To most closely match between the viewport and Godot enable the Sphere checkbox Highlighted green Light attenuation models differ between Godot and Blender The exporter attempts to make them match but it isn t always very good Spotlight angular attenuation models also differ between Godot and Blender The exporter attempts to make them similar but it doesn t always look the same There is no difference between buffer shadow and ray shadow in the export User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Mesh Modifiers There is an exporting option Apply Modifiers to control whether mesh modifiers are applied to the exported mesh Shape Key Exporting mesh shape key is supported however exporting each shape key is almost like exporting the mesh again so don t be surprised it takes a relatively long time Warning A lot of modifiers are not compatible with shape keys e g subsurface modifier so if you found you have incorrect shape keys exported try to disable Apply Modifiers and do the exporting again Besides it is worthwhile to report the incompatible modifier to the issue list which helps to develop the exporter to have a more precise check of modifiers User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Skeleton Rest Bone Armature object in Blender is exported as a Skeleton node along with rest position transform in Godot of bones Warning The three check boxes Inherit Rotation Inherit Scale Local Location colored in red must be ticked when building armature in Blender so that the exported bone transform be consistent between Blender and Godot It is important that the mesh is not deformed by bones when exporting in Blender Make sure that the skeleton is reset to its T pose or default rest pose Bone Weights Blender puts rigged mesh vertices which have no bone weights at their original position but these vertices would be placed at 0 0 0 in Godot making the mesh deformed Therefore the exporter will raise an error for any vertex with no bone weights detected in a rigged mesh Non Deform Bone Note that the non deform bone can be configured as not exported by enabling the Exclude Control Bones the deform bone checkbox is shown in the picture Bone Attachment A bone can be the parent of an object in Blender this relation is exported as a BoneAttachment node in the Godot scene User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Animation Animation supported transform animation of all types of objects transform animation of pose bones shape key animation light animation camera animation Multiple Actions For Single Object In most games one object would have several animations to switch between This add on has support for exporting multiple actions all at once into a single AnimationPlayer and makes it easy to switch actions This workflow makes use of blender nla_tracks Here is a brief guide on how to use this feature 1 Stash active action New created action is always an active action bound to object There are several ways to place an active action into NLA track one is of course doing it in NLA Editor Or it can be done stashing the action in Dope Sheet 2 Check mute status of NLA tracks An NLA track can be mute or unmute the exporter will export all the mute NLA track as a separate action while blends all the unmute NLA tracks into every action including the action being exported 3 Export the scene Make sure the Export Stashed Actions option has been turned on Then all the stashed actions as well as the active action are exported to an AnimationPlayer Constraints Sometimes complicated animation is built with object constraint a usual example is inverse kinematics The add on would automatically check if an object has some constraint if it does all the constraints are baked into actions and then exported along with the object Animation Mode Godot and Blender have different structure to store animation data In Godot animation data is stored in an AnimationPlayer node instead of in each animated node In order to fix this inconsistency and still make the animation play versatile this add on has three animation exporting modes Mode Animation as Actions Treat all the animations as object actions so in the exported scene every object would have its own AnimationPlayer and hold its actions Mode Scene Animation If you want your animation to generate the same result as playing at Blender s timeline this is what you want In this mode all the animations in the scene are placed in just one AnimationPlayer in the scene root Mode Animation as Action with Squash This mode has very similar behavior of mode Animation as Action but it can generate fewer AnimationPlayers objects in parent children relationship would share their AnimationPlayer It is useful when you have several rigs and each Skeleton and Mesh has actions then one rig would have just one AnimationPlayer User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Audio Audio buses Audio effects Audio streams Sync the gameplay with audio and music Recording with microphone Text to speech Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Audio buses Introduction Godot s audio processing code has been written with games in mind with the aim of achieving an optimal balance between performance and sound quality Godot s audio engine allows any number of audio buses to be created and any number of effect processors can be added to each bus Only the hardware of the device running your game will limit the number of buses and effects that can be used before performance starts to suffer Decibel scale Godot s sound interface is designed to meet the expectations of sound design professionals To this end it primarily uses the decibel scale For those unfamiliar with it it can be explained with a few facts The decibel dB scale is a relative scale It represents the ratio of sound power by using 20 times the base 10 logarithm of the ratio 20 log 10 P P 0 For every 6 dB sound amplitude doubles or halves 12 dB represents a factor of 4 18 dB a factor of 8 20 dB a factor of 10 40 dB a factor of 100 etc Since the scale is logarithmic true zero no audio can t be represented 0 dB is the maximum amplitude possible in a digital audio system This limit is not the human limit but a limit from the sound hardware Audio with amplitudes that are too high to be represented properly below 0 dB create a kind of distortion called clipping To avoid clipping your sound mix should be arranged so that the output of the master bus more on that later never exceeds 0 dB Every 6 dB below the 0 dB limit sound energy is halved It means the sound volume at 6 dB is half as loud as 0dB 12 dB is half as loud as 6 dB and so on When working with decibels sound is considered no longer audible between 60 dB and 80 dB This makes your working range generally between 60 dB and 0 dB This can take a bit getting used to but it s friendlier in the end and will allow you to communicate better with audio professionals Audio buses Audio buses can be found in the bottom panel of the Godot editor An audio bus also called an audio channel can be considered a place that audio is channeled through on the way to playback through a device s speakers Audio data can be modified and re routed by an audio bus An audio bus has a VU meter the bars that light up when sound is played which indicates the amplitude of the signal passing through The leftmost bus is the master bus This bus outputs the mix to your speakers so as mentioned in the Decibel scale section above make sure that your mix level doesn t reach 0 dB in this bus The rest of the audio buses can be flexibly routed After modifying the sound they send it to another bus to the left The destination bus can be specified for each of the non master audio buses Routing always passes audio from buses on the right to buses further to the left This avoids infinite routing loops In the above image the output of Bus 2 has been routed to the Master bus Playback of audio through a bus To test passing audio to a bus create an AudioStreamPlayer node load an AudioStream and select a target bus for playback Finally toggle the Playing property to On and sound will flow See also You may also be interested in reading about Audio streams now Adding effects Audio buses can contain all sorts of effects These effects modify the sound in one way or another and are applied in order For information on what each effect does see Audio effects Automatic bus disabling There is no need to disable buses manually when not in use Godot detects that the bus has been silent for a few seconds and disables it including all effects Disabled buses have a blue VU meter instead of a red green one Bus rearrangement Stream Players use bus names to identify a bus which allows adding removing and moving buses around while the reference to them is kept However if a bus is renamed the reference will be lost and the Stream Player will output to Master This system was chosen because rearranging buses is a more common process than renaming them Default bus layout The default bus layout is automatically saved to the res default_bus_layout tres file Custom bus arrangements can be saved and loaded from disk User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Audio effects Godot includes several audio effects that can be added to an audio bus to alter every sound file that goes through that bus Try them all out to get a sense of how they alter sound Here follows a short description of the available effects Amplify Amplify changes the volume of the signal Some care needs to be taken though setting the level too high can make the sound digitally clip which can produce unpleasant crackles and pops BandLimit and BandPass These are resonant filters which block frequencies around the Cutoff point BandPass can be used to simulate sound passing through an old telephone line or megaphone Modulating the BandPass frequency can simulate the sound of a wah wah guitar pedal think of the guitar in Jimi Hendrix s Voodoo Child Slight Return Capture The Capture effect copies the audio frames of the audio bus that it is on into an internal buffer This can be used to capture data from the microphone or to transmit audio over the network in real time Chorus As the name of the effect implies the Chorus effect makes a single audio sample sound like an entire chorus It does this by duplicating a signal and very slightly altering the timing and pitch of each duplicate and varying that over time via an LFO low frequency oscillator The duplicate s are then mixed back together with the original signal producing a lush wide and large sound Although chorus is traditionally used for voices it can be desirable with almost any type of sound Compressor A dynamic range compressor automatically attenuates ducks the level of the incoming signal when its amplitude exceeds a certain threshold The level of attenuation applied is proportional to how far the incoming audio exceeds the threshold The compressor s Ratio parameter controls the degree of attenuation One of the main uses of a compressor is to reduce the dynamic range of signals with very loud and quiet parts Reducing the dynamic range of a signal can make it fit more comfortably in a mix The compressor has many uses For example It can be used in the Master bus to compress the whole output prior to being hit by a limiter making the effect of the limiter much more subtle It can be used in voice channels to ensure they sound as even as possible It can be sidechained by another sound source This means it can reduce the sound level of one signal using the level of another audio bus for threshold detection This technique is very common in video game mixing to duck the level of music or sound effects when in game or multiplayer voices need to be fully audible It can accentuate transients by using a slower attack This can make sound effects more punchy Note If your goal is to prevent a signal from exceeding a given amplitude altogether rather than to reduce the dynamic range of the signal a limiter is likely a better choice than a compressor for this purpose However applying compression before a limiter is still good practice Delay Digital delay essentially duplicates a signal and repeats it at a specified speed with a volume level that decays for each repeat Delay is great for simulating the acoustic space of a canyon or large room where sound bounces have a lot of delay between their repeats This is in contrast to reverb which has a more natural and blurred sound to it Using this in conjunction with reverb can create very natural sounding environments Distortion Makes the sound distorted Godot offers several types of distortion Overdrive sounds like a guitar distortion pedal or megaphone Sounds distorted with this sound like they re coming through a low quality speaker or device Tan sounds like another interesting flavor of overdrive Bit crushing clamps the amplitude of the signal making it sound flat and crunchy All three types of distortion can add higher frequency sounds to an original sound making it stand out better in a mix EQ EQ is what all other equalizers inherit from It can be extended with Custom scripts to create an equalizer with a custom number of bands EQ6 EQ10 EQ21 Godot provides three equalizers with different numbers of bands which are represented in the title 6 10 and 21 bands respectively An equalizer on the Master bus can be useful for cutting low and high frequencies that the device s speakers can t reproduce well For example phone or tablet speakers usually don t reproduce low frequency sounds well and could make a limiter or compressor attenuate sounds that aren t even audible to the user anyway Note The equalizer effect can be disabled when headphones are plugged in giving the user the best of both worlds Filter Filter is what all other filters inherit from and should not be used directly HardLimiter A limiter is similar to a compressor but it s less flexible and designed to prevent a signal s amplitude exceeding a given dB threshold Adding a limiter to the final point of the Master bus is good practice as it offers an easy safeguard against clipping HighPassFilter Cuts frequencies below a specific Cutoff frequency HighPassFilter is used to reduce the bass content of a signal HighShelfFilter Reduces all frequencies above a specific Cutoff frequency Limiter This is the old limiter effect and it is recommended to use the new HardLimiter effect instead Here is an example of how this effect works if the ceiling is set to 12 dB and the threshold is 0 dB all samples going through get reduced by 12dB This changes the waveform of the sound and introduces distortion This effect is being kept to preserve compatibility however it should be considered deprecated LowPassFilter Cuts frequencies above a specific Cutoff frequency and can also resonate boost frequencies close to the Cutoff frequency Low pass filters can be used to simulate muffled sound For instance underwater sounds sounds blocked by walls or distant sounds LowShelfFilter Reduces all frequencies below a specific Cutoff frequency NotchFilter The opposite of the BandPassFilter it removes a band of sound from the frequency spectrum at a given Cutoff frequency Panner The Panner allows the stereo balance of a signal to be adjusted between the left and right channels Headphones are recommended when configuring in this effect Phaser This effect is formed by de phasing two duplicates of the same sound so they cancel each other out in an interesting way Phaser produces a pleasant whooshing sound that moves back and forth through the audio spectrum and can be a great way to create sci fi effects or Darth Vader like voices PitchShift This effect allows the adjustment of the signal s pitch independently of its speed All frequencies can be increased decreased with minimal effect on transients PitchShift can be useful to create unusually high or deep voices Do note that altering pitch can sound unnatural when pushed outside of a narrow window Record The Record effect allows the user to record sound from a microphone Reverb Reverb simulates rooms of different sizes It has adjustable parameters that can be tweaked to obtain the sound of a specific room Reverb is commonly outputted from Area3Ds see Reverb buses or to apply a chamber feel to all sounds SpectrumAnalyzer This effect doesn t alter audio instead you add this effect to buses you want a spectrum analysis of This would typically be used for audio visualization Visualizing voices can be a great way to draw attention to them without just increasing their volume A demo project using this can be found here StereoEnhance This effect uses a few algorithms to enhance a signal s stereo width User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Audio streams Introduction As you might have already read in Audio buses sound is sent to each bus via an AudioStreamPlayer node There are different kinds of AudioStreamPlayers Each one loads an AudioStream and plays it back AudioStream An audio stream is an abstract object that emits sound The sound can come from many places but is most commonly loaded from the filesystem Audio files can be loaded as AudioStreams and placed inside an AudioStreamPlayer You can find information on supported formats and differences in Importing audio samples There are other types of AudioStreams such as AudioStreamRandomizer This one picks a different audio stream from a list of streams each time it s played back and applies random pitch and volume shifting This can be helpful for adding variation to sounds that are played back often AudioStreamPlayer This is the standard non positional stream player It can play to any bus In 5 1 sound setups it can send audio to stereo mix or front speakers Playback Type is an experimental setting and could change in future versions of Godot It exists so Web exports use Web Audio API based samples instead of streaming all sounds to the browser unlike most platforms This prevents the audio from being garbled in single threaded Web exports By default only the Web platform will use samples Changing this setting is not recommended unless you have an explicit reason to You can change the default playback type for the web and other platforms in the project settings under Audio General advanced settings must be turned on to see the setting AudioStreamPlayer2D This is a variant of AudioStreamPlayer but emits sound in a 2D positional environment When close to the left of the screen the panning will go left When close to the right side it will go right Note Area2Ds can be used to divert sound from any AudioStreamPlayer2Ds they contain to specific buses This makes it possible to create buses with different reverb or sound qualities to handle action happening in a particular parts of your game world AudioStreamPlayer3D This is a variant of AudioStreamPlayer but emits sound in a 3D positional environment Depending on the location of the player relative to the screen it can position sound in stereo 5 1 or 7 1 depending on the chosen audio setup Similar to AudioStreamPlayer2D an Area3D can divert the sound to an audio bus Unlike for 2D the 3D version of AudioStreamPlayer has a few more advanced options Reverb buses Godot allows for 3D audio streams that enter a specific Area3D node to send dry and wet audio to separate buses This is useful when you have several reverb configurations for different types of rooms This is done by enabling this type of reverb in the Reverb Bus section of the Area3D s properties At the same time a special bus layout is created where each Area3D receives the reverb info from each Area3D A Reverb effect needs to be created and configured in each reverb bus to complete the setup for the desired effect The Area3D s Reverb Bus section also has a parameter named Uniformity Some types of rooms bounce sounds more than others like a warehouse so reverberation can be heard almost uniformly across the room even though the source may be far away Playing around with this parameter can simulate that effect Doppler When the relative velocity between an emitter and listener changes this is perceived as an increase or decrease in the pitch of the emitted sound Godot can track velocity changes in the AudioStreamPlayer3D and Camera nodes Both nodes have this property which must be enabled manually Enable it by setting it depending on how objects will be moved use Idle for objects moved using _process or Physics for objects moved using _physics_process The tracking will happen automatically User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Sync the gameplay with audio and music Introduction In any application or game sound and music playback will have a slight delay For games this delay is often so small that it is negligible Sound effects will come out a few milliseconds after any play function is called For music this does not matter as in most games it does not interact with the gameplay Still for some games mainly rhythm games it may be required to synchronize player actions with something happening in a song usually in sync with the BPM For this having more precise timing information for an exact playback position is useful Achieving very low playback timing precision is difficult This is because many factors are at play during audio playback Audio is mixed in chunks not continuously depending on the size of audio buffers used check latency in project settings Mixed chunks of audio are not played immediately Graphics APIs display two or three frames late When playing on TVs some delay may be added due to image processing The most common way to reduce latency is to shrink the audio buffers again by editing the latency setting in the project settings The problem is that when latency is too small sound mixing will require considerably more CPU This increases the risk of skipping a crack in sound because a mix callback was lost This is a common tradeoff so Godot ships with sensible defaults that should not need to be altered The problem in the end is not this slight delay but synchronizing graphics and audio for games that require it Beginning with Godot 3 2 some helpers were added to obtain more precise playback timing Using the system clock to sync As mentioned before If you call AudioStreamPlayer play sound will not begin immediately but when the audio thread processes the next chunk This delay can t be avoided but it can be estimated by calling AudioServer get_time_to_next_mix The output latency what happens after the mix can also be estimated by calling AudioServer get_output_latency Add these two and it s possible to guess almost exactly when sound or music will begin playing in the speakers during _process GDScript C var time_begin var time_delay func _ready time_begin Time get_ticks_usec time_delay AudioServer get_time_to_next_mix AudioServer get_output_latency Player play func _process delta Obtain from ticks var time Time get_ticks_usec time_begin 1000000 0 Compensate for latency time time_delay May be below 0 did not begin yet time max 0 time print Time is time Copy to clipboard private double _timeBegin private double _timeDelay public override void _Ready _timeBegin Time GetTicksUsec _timeDelay AudioServer GetTimeToNextMix AudioServer GetOutputLatency GetNode AudioStreamPlayer Player Play public override void _Process float _delta double time Time GetTicksUsec _timeBegin 1000000 0d time Math Max 0 0d time _timeDelay GD Print string Format Time is 0 time Copy to clipboard In the long run though as the sound hardware clock is never exactly in sync with the system clock the timing information will slowly drift away For a rhythm game where a song begins and ends after a few minutes this approach is fine and it s the recommended approach For a game where playback can last a much longer time the game will eventually go out of sync and a different approach is needed Using the sound hardware clock to sync Using AudioStreamPlayer get_playback_position to obtain the current position for the song sounds ideal but it s not that useful as is This value will increment in chunks every time the audio callback mixed a block of sound so many calls can return the same value Added to this the value will be out of sync with the speakers too because of the previously mentioned reasons To compensate for the chunked output there is a function that can help AudioServer get_time_since_last_mix Adding the return value from this function to get_playback_position increases precision GDScript C var time Player get_playback_position AudioServer get_time_since_last_mix Copy to clipboard double time GetNode AudioStreamPlayer Player GetPlaybackPosition AudioServer GetTimeSinceLastMix Copy to clipboard To increase precision subtract the latency information how much it takes for the audio to be heard after it was mixed GDScript C var time Player get_playback_position AudioServer get_time_since_last_mix AudioServer get_output_latency Copy to clipboard double time GetNode AudioStreamPlayer Player GetPlaybackPosition AudioServer GetTimeSinceLastMix AudioServer GetOutputLatency Copy to clipboard The result may be a bit jittery due how multiple threads work Just check that the value is not less than in the previous frame discard it if so This is also a less precise approach than the one before but it will work for songs of any length or synchronizing anything sound effects as an example to music Here is the same code as before using this approach GDScript C func _ready Player play func _process delta var time Player get_playback_position AudioServer get_time_since_last_mix Compensate for output latency time AudioServer get_output_latency print Time is time Copy to clipboard public override void _Ready GetNode AudioStreamPlayer Player Play public override void _Process float _delta double time GetNode AudioStreamPlayer Player GetPlaybackPosition AudioServer GetTimeSinceLastMix Compensate for output latency time AudioServer GetOutputLatency GD Print string Format Time is 0 time Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Recording with microphone Godot supports in game audio recording for Windows macOS Linux Android and iOS A simple demo is included in the official demo projects and will be used as support for this tutorial https github com godotengine godot demo projects tree master audio mic_record You will need to enable audio input in the project settings Project Settings Audio Driver Enable Input or you ll just get empty audio files The structure of the demo The demo consists of a single scene This scene includes two major parts the GUI and the audio We will focus on the audio part In this demo a bus named Record with the effect Record is created to handle the audio recording An AudioStreamPlayer named AudioStreamRecord is used for recording GDScript C var effect var recording func _ready We get the index of the Record bus var idx AudioServer get_bus_index Record And use it to retrieve its first effect which has been defined as an AudioEffectRecord resource effect AudioServer get_bus_effect idx 0 Copy to clipboard private AudioEffectRecord _effect private AudioStreamSample _recording public override void _Ready We get the index of the Record bus int idx AudioServer GetBusIndex Record And use it to retrieve its first effect which has been defined as an AudioEffectRecord resource _effect AudioEffectRecord AudioServer GetBusEffect idx 0 Copy to clipboard The audio recording is handled by the AudioEffectRecord resource which has three methods get_recording is_recording_active and set_recording_active GDScript C func _on_record_button_pressed if effect is_recording_active recording effect get_recording PlayButton disabled false SaveButton disabled false effect set_recording_active false RecordButton text Record Status text else PlayButton disabled true SaveButton disabled true effect set_recording_active true RecordButton text Stop Status text Recording Copy to clipboard private void OnRecordButtonPressed if _effect IsRecordingActive _recording _effect GetRecording GetNode Button PlayButton Disabled false GetNode Button SaveButton Disabled false _effect SetRecordingActive false GetNode Button RecordButton Text Record GetNode Label Status Text else GetNode Button PlayButton Disabled true GetNode Button SaveButton Disabled true _effect SetRecordingActive true GetNode Button RecordButton Text Stop GetNode Label Status Text Recording Copy to clipboard At the start of the demo the recording effect is not active When the user presses the RecordButton the effect is enabled with set_recording_active true On the next button press as effect is_recording_active is true the recorded stream can be stored into the recording variable by calling effect get_recording GDScript C func _on_play_button_pressed print recording print recording format print recording mix_rate print recording stereo var data recording get_data print data size AudioStreamPlayer stream recording AudioStreamPlayer play Copy to clipboard private void OnPlayButtonPressed GD Print _recording GD Print _recording Format GD Print _recording MixRate GD Print _recording Stereo byte data _recording Data GD Print data Length var audioStreamPlayer GetNode AudioStreamPlayer AudioStreamPlayer audioStreamPlayer Stream _recording audioStreamPlayer Play Copy to clipboard To playback the recording you assign the recording as the stream of the AudioStreamPlayer and call play GDScript C func _on_save_button_pressed var save_path SaveButton Filename text recording save_to_wav save_path Status text Saved WAV file to s n s save_path ProjectSettings globalize_path save_path Copy to clipboard private void OnSaveButtonPressed string savePath GetNode LineEdit SaveButton Filename Text _recording SaveToWav savePath GetNode Label Status Text string Format Saved WAV file to 0 n 1 savePath ProjectSettings GlobalizePath savePath Copy to clipboard To save the recording you call save_to_wav with the path to a file In this demo the path is defined by the user via a LineEdit input box User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Text to speech Basic Usage Basic usage of text to speech involves the following one time steps Enable TTS in the Godot editor for your project Query the system for a list of usable voices Store the ID of the voice you want to use By default the Godot project level setting for text to speech is disabled to avoid unnecessary overhead To enable it Go to Project Project Settings Make sure the Advanced Settings toggle is enabled Click on Audio General Ensure the Text to Speech option is checked Restart Godot if prompted to do so Text to speech uses a specific voice Depending on the user s system they might have multiple voices installed Once you have the voice ID you can use it to speak some text GDScript C One time steps Pick a voice Here we arbitrarily pick the first English voice var voices DisplayServer tts_get_voices_for_language en var voice_id voices 0 Say Hello world DisplayServer tts_speak Hello world voice_id Say a longer sentence and then interrupt it Note that this method is asynchronous execution proceeds to the next line immediately before the voice finishes speaking var long_message Lorem ipsum dolor sit amet consectetur adipiscing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur DisplayServer tts_speak long_message voice_id Immediately stop the current text mid sentence and say goodbye instead DisplayServer tts_stop DisplayServer tts_speak Goodbye voice_id Copy to clipboard One time steps Pick a voice Here we arbitrarily pick the first English voice string voices DisplayServer TtsGetVoicesForLanguage en string voiceId voices 0 Say Hello world DisplayServer TtsSpeak Hello world voiceId Say a longer sentence and then interrupt it Note that this method is asynchronous execution proceeds to the next line immediately before the voice finishes speaking string longMessage Lorem ipsum dolor sit amet consectetur adipiscing elit sed do eiusmod tempor incididunt ut labore et dolore magna aliqua Ut enim ad minim veniam quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur DisplayServer TtsSpeak longMessage voiceId Immediately stop the current text mid sentence and say goodbye instead DisplayServer TtsStop DisplayServer TtsSpeak Goodbye voiceId Copy to clipboard Requirements for functionality Godot includes text to speech functionality You can find these under the DisplayServer class Godot depends on system libraries for text to speech functionality These libraries are installed by default on Windows and macOS but not on all Linux distributions If they are not present text to speech functionality will not work Specifically the tts_get_voices method will return an empty list indicating that there are no usable voices Both Godot users on Linux and end users on Linux running Godot games need to ensure that their system includes the system libraries for text to speech to work Please consult the table below or your own distribution s documentation to determine what libraries you need to install Distro specific one liners Arch Linux pacman S speech dispatcher festival espeakup Copy to clipboard Troubleshooting If you get the error Invalid get index 0 on base PackedStringArray for the line var voice_id voices 0 check if there are any items in voices If not All users make sure you enabled Text to Speech in project settings Linux users ensure you installed the system specific libraries for text to speech Best practices The best practices for text to speech in terms of the ideal player experience for blind players is to send output to the player s screen reader This preserves the choice of language speed pitch etc that the user set as well as allows advanced features like allowing players to scroll backward and forward through text As of now Godot doesn t provide this level of integration With the current state of the Godot text to speech APIs best practices include Develop the game with text to speech enabled and ensure that everything sounds correct Allow players to control which voice to use and save persist that selection across game sessions Allow players to control the speech rate and save persist that selection across game sessions This provides your blind players with the most flexibility and comfort available when not using a screen reader and minimizes the chance of frustrating and alienating them Caveats and Other Information Expect delays when you call tts_speak and tts_stop The actual delay time varies depending on both the OS and on your machine s specifications This is especially critical on Android and Web where some of the voices depend on web services and the actual time to playback depends on server load network latency and other factors Non English text works if the correct voices are installed and used On Windows you can consult the instructions in this article to enable additional language voices on Windows Non ASCII characters such as umlaut are pronounced correctly if you select the correct voice Blind players use a number of screen readers including JAWS NVDA VoiceOver Narrator and more Windows text to speech APIs generally perform better than their equivalents on other systems e g tts_stop followed by tts_speak immediately speaks the new message User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Export See also This section is about exporting a build of your project If you re trying to export properties from a script see GDScript exported properties or C exported properties Exporting projects Exporting packs patches and mods Feature tags Exporting for Linux Exporting for macOS Running Godot apps on macOS Exporting for Windows Changing application icon for Windows Exporting for iOS Exporting for Android Gradle builds for Android Exporting for the Web Exporting for dedicated servers One click deploy Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Exporting projects Why export Originally Godot did not have any means to export projects The developers would compile the proper binaries and build the packages for each platform manually When more developers and even non programmers started using it and when our company started taking more projects at the same time it became evident that this was a bottleneck On PC Distributing a game project on PC with Godot is rather easy Drop the Godot binary in the same directory as the project godot file then compress the project directory and you are done It sounds simple but there are probably a few reasons why the developer may not want to do this The first one is that it may not be desirable to distribute loads of files Some developers may not like curious users peeking at how the game was made others may find it inelegant and so on Another reason is that the developer might prefer a specially compiled binary which is smaller in size more optimized and does not include tools like the editor and debugger Finally Godot has a simple but efficient system for creating DLCs as extra package files On mobile The same scenario on mobile platforms is a little worse To distribute a project on those devices a binary for each of those platforms is built then added to a native project together with the game data This can be troublesome because it means that the developer must be familiarized with the SDK of each platform before even being able to export While learning each SDK is always encouraged it can be frustrating to be forced to do it at an undesired time There is also another problem with this approach different devices prefer some data in different formats to run The main example of this is texture compression All PC hardware uses S3TC BC compression and that has been standardized for more than a decade but mobile devices use different formats for texture compression such as ETC1 and ETC2 Export menu After many attempts at different export workflows the current one has proven to work the best At the time of this writing not all platforms are supported yet but the supported platforms continue to grow To open the export menu click the Export button The export menu will open However it will be completely empty This is because we need to add an export preset To create an export preset click the Add button at the top of the export menu This will open a drop down list of platforms to choose from for an export preset The default options are often enough to export so tweaking them is usually not necessary However many platforms require additional tools SDKs to be installed to be able to export Additionally Godot needs export templates installed to create packages The export menu will complain when something is missing and will not allow the user to export for that platform until they resolve it At that time the user is expected to come back to the documentation and follow instructions on how to properly set up that platform The buttons at the bottom of the menu allow you to export the project in a few different ways Export All Export the project as a playable build Godot executable and project data for all the presets defined All presets must have an Export Path defined for this to work Export Project Export the project as a playable build Godot executable and project data for the selected preset Export PCK ZIP Export the project resources as a PCK or ZIP package This is not a playable build it only exports the project data without a Godot executable Export templates Apart from setting up the platform the export templates must be installed to be able to export projects They can be obtained as a TPZ file which is a renamed ZIP archive from the download page of the website Once downloaded they can be installed using the Install Export Templates option in the editor Resource options When exporting Godot makes a list of all the files to export and then creates the package There are 3 different modes for exporting Export all resources in the project Export selected scenes and dependencies Export selected resources and dependencies Export all resources in the project will export every resource in the project Export selected scenes and Export selected resources gives you a list of the scenes or resources in the project and you have to select every scene or resource you want to export Note Files and folders whose name begin with a period will never be included in the exported project This is done to prevent version control folders like git from being included in the exported PCK file Below the list of resources are two filters that can be setup The first allows non resource files such as txt json and csv to be exported with the project The second filter can be used to exclude every file of a certain type without manually deselecting every one For example png files Configuration files The export configuration is stored in two files that can both be found in the project directory export_presets cfg This file contains the vast majority of the export configuration and can be safely committed to version control There is nothing in here that you would normally have to keep secret godot export_credentials cfg This file contains export options that are considered confidential like passwords and encryption keys It should generally not be committed to version control or shared with others unless you know exactly what you are doing Since the credentials file is usually kept out of version control systems some export options will be missing if you clone the project to a new machine The easiest way to deal with this is to copy the file manually from the old location to the new one Exporting from the command line In production it is useful to automate builds and Godot supports this with the export release and export debug command line parameters Exporting from the command line still requires an export preset to define the export parameters A basic invocation of the command would be godot export release Windows Desktop some_name exe Copy to clipboard This will export to some_name exe assuming there is a preset called Windows Desktop and the template can be found The export preset name must be written within quotes if it contains spaces or special characters The output path is relative to the project path or absolute it does not respect the directory the command was invoked from The output file extension should match the one used by the Godot export process Windows exe macOS zip from all platforms or dmg only when exporting from macOS app is not supported directly although the generated ZIP archive contains an app bundle Linux Any extension including none x86_64 is typically used for 64 bit x86 binaries HTML5 zip Android apk iOS zip You can also configure it to export only the PCK or ZIP file allowing a single exported main pack file to be used with multiple Godot executables When doing so the export preset name must still be specified on the command line godot export pack Windows Desktop some_name pck Copy to clipboard It is often useful to combine the export release flag with the path flag so that you do not need to cd to the project folder before running the command godot path path to project export release Windows Desktop some_name exe Copy to clipboard See also See Command line tutorial for more information about using Godot from the command line PCK versus ZIP pack file formats Each format has its upsides and downsides PCK is the default and recommended format for most use cases but you may want to use a ZIP archive instead depending on your needs PCK format Uncompressed format Larger file size but faster to read write Not readable and writable using tools normally present on the user s operating system even though there are third party tools to extract and create PCK files ZIP format Compressed format Smaller file size but slower to read write Readable and writable using tools normally present on the user s operating system This can be useful to make modding easier see also Exporting packs patches and mods Warning Due to a known bug when using a ZIP file as a pack file the exported binary will not try to use it automatically Therefore you have to create a launcher script that the player can double click or run from a terminal to launch the project launch bat Windows echo off my_project exe main pack my_project zip launch sh Linux my_project x86_64 main pack my_project zip Copy to clipboard Save the launcher script and place it in the same folder as the exported binary On Linux make sure to give executable permissions to the launcher script using the command chmod x launch sh User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Exporting packs patches and mods Use cases Oftentimes one would like to add functionality to one s game after it has been deployed Examples of this include Downloadable Content the ability to add features and content to one s game Patches the ability to fix a bug that is present in a shipped product Mods grant other people the ability to create content for one s game These tools help developers to extend their development beyond the initial release Overview of PCK files Godot enables this via a feature called resource packs PCK files with extension pck Advantages incremental updates patches offer DLCs offer mod support no source code disclosure needed for mods more modular project structure users don t have to replace the entire game The first part of using them involves exporting and delivering the project to players Then when one wants to add functionality or content later on they just deliver the updates via PCK files to the users PCK files usually contain but are not limited to scripts scenes shaders models textures sound effects music any other asset suitable for import into the game The PCK files can even be an entirely different Godot project which the original game loads in at runtime Generating PCK files In order to pack all resources of a project into a PCK file open the project and go to Project Export and click on Export PCK Zip Also make sure to have an export template selected while doing so Another method would be to export from the command line If the output file ends with a PCK or ZIP file extension then the export process will build that type of file for the chosen platform Note If one wishes to support mods for their game they will need their users to create similarly exported files Assuming the original game expects a certain structure for the PCK s resources and or a certain interface for its scripts then either The developer must publicize documentation of these expected structures interfaces expect modders to install Godot Engine and then also expect those modders to conform to the documentation s defined API when building mod content for the game so that it will work Users would then use Godot s built in exporting tools to create a PCK file as detailed above The developer uses Godot to build a GUI tool for adding their exact API content to a project This Godot tool must either run on a tools enabled build of the engine or have access to one distributed alongside or perhaps in the original game s files The tool can then use the Godot executable to export a PCK file from the command line with OS execute The game itself shouldn t use a tool build of the engine for security so it s best to keep the modding tool and game separate Opening PCK files at runtime To import a PCK file one uses the ProjectSettings singleton The following example expects a mod pck file in the directory of the games executable The PCK file contains a mod_scene tscn test scene in its root GDScript C func _your_function This could fail if for example mod pck cannot be found var success ProjectSettings load_resource_pack res mod pck if success Now one can use the assets as if they had them in the project from the start var imported_scene load res mod_scene tscn Copy to clipboard private void YourFunction This could fail if for example mod pck cannot be found var success ProjectSettings LoadResourcePack res mod pck if success Now one can use the assets as if they had them in the project from the start var importedScene PackedScene ResourceLoader Load res mod_scene tscn Copy to clipboard Warning By default if you import a file with the same file path name as one you already have in your project the imported one will replace it This is something to watch out for when creating DLC or mods You can solve this problem by using a tool that isolates mods to a specific mods subfolder However it is also a way of creating patches for one s own game A PCK file of this kind can fix the content of a previously loaded PCK To opt out of this behavior pass false as the second argument to ProjectSettings load_resource_pack Note For a C project you need to build the DLL and place it in the project directory first Then before loading the resource pack you need to load its DLL as follows Assembly LoadFile mod dll Summary This tutorial explains how to add mods patches or DLC to a game The most important thing is to identify how one plans to distribute future content for their game and develop a workflow that is customized for that purpose Godot should make that process smooth regardless of which route a developer pursues User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Feature tags Introduction Godot has a special system to tag availability of features Each feature is represented as a string which can refer to many of the following Platform name Platform architecture 64 bit or 32 bit x86 or ARM Platform type desktop mobile Web Supported texture compression algorithms on the platform Whether a build is debug or release debug includes the editor Whether the project is running from the editor or a standalone binary Many more things Features can be queried at run time from the singleton API by calling GDScript C OS has_feature name Copy to clipboard OS HasFeature name Copy to clipboard OS feature tags are used by GDExtension to determine which libraries to load For example a library for linux debug editor x86_64 will be loaded only on a debug editor build for Linux x86_64 Default features Here is a list of most feature tags in Godot Keep in mind they are case sensitive Feature tag Description android Running on Android but not within a Web browser bsd Running on BSD but not within a Web browser linux Running on Linux but not within a Web browser macos Running on macOS but not within a Web browser ios Running on iOS but not within a Web browser windows Running on Windows linuxbsd Running on Linux or BSD debug Running on a debug build including the editor release Running on a release build editor Running on an editor build template Running on a non editor export template build double Running on a double precision build single Running on a single precision build 64 Running on a 64 bit build any architecture 32 Running on a 32 bit build any architecture x86_64 Running on a 64 bit x86 build x86_32 Running on a 32 bit x86 build x86 Running on an x86 build any bitness arm64 Running on a 64 bit ARM build arm32 Running on a 32 bit ARM build arm Running on an ARM build any bitness rv64 Running on a 64 bit RISC V build riscv Running on a RISC V build any bitness ppc64 Running on a 64 bit PowerPC build ppc32 Running on a 32 bit PowerPC build ppc Running on a PowerPC build any bitness wasm64 Running on a 64 bit WebAssembly build not yet possible wasm32 Running on a 32 bit WebAssembly build wasm Running on a WebAssembly build any bitness mobile Host OS is a mobile platform pc Host OS is a PC platform desktop laptop web Host OS is a Web browser web_android Host OS is a Web browser running on Android web_ios Host OS is a Web browser running on iOS web_linuxbsd Host OS is a Web browser running on Linux or BSD web_macos Host OS is a Web browser running on macOS web_windows Host OS is a Web browser running on Windows etc Textures using ETC1 compression are supported etc2 Textures using ETC2 compression are supported s3tc Textures using S3TC DXT BC compression are supported movie Movie Maker mode is active Warning With the exception of texture compression web_ platform and movie feature tags default feature tags are immutable This means that they will not change depending on run time conditions For example OS has_feature mobile will return false when running a project exported to Web on a mobile device To check whether a project exported to Web is running on a mobile device use OS has_feature web_android or OS has_feature web_ios Custom features It is possible to add custom features to a build use the relevant field in the export preset used to generate it Note Custom feature tags are only used when running the exported project including with One click deploy They are not used when running the project from the editor even if the export preset marked as Runnable for your current platform has custom feature tags defined Overriding project settings Features can be used to override specific configuration values in the Project Settings This allows you to better customize any configuration when doing a build In the following example a different icon is added for the demo build of the game which was customized in a special export preset which in turn includes only demo levels After overriding a new field is added for this specific configuration Note When using the project settings override cfg functionality which is unrelated to feature tags remember that feature tags still apply Therefore make sure to also override the setting with the desired feature tag s if you want them to override base project settings on all platforms and configurations Default overrides There are already a lot of settings that come with overrides by default they can be found in many sections of the project settings Customizing the build Feature tags can be used to customize a build process too by writing a custom ExportPlugin They are also used to specify which shared library is loaded and exported in GDExtension User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Exporting for Linux See also This page describes how to export a Godot project to Linux If you re looking to compile editor or export template binaries from source instead read Compiling for Linux BSD The simplest way to distribute a game for PC is to copy the executable godot compress the folder and send it to someone else However this is often not desired Godot offers a more elegant approach for PC distribution when using the export system When exporting for Linux the exporter takes all the project files and creates a data pck file This file is bundled with a specially optimized binary that is smaller faster and does not contain the editor and debugger Environment variables You can use the following environment variables to set export options outside of the editor During the export process these override the values that you set in the export menu Linux export environment variables Export option Environment variable Encryption Encryption Key GODOT_SCRIPT_ENCRYPTION_KEY User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Exporting for macOS See also This page describes how to export a Godot project to macOS If you re looking to compile editor or export template binaries from source instead read Compiling for macOS macOS apps exported with the official export templates are exported as a single Universal 2 binary app bundle a folder with a specific structure which stores the executable libraries and all the project files This bundle can be exported as is packed in a ZIP archive or DMG disk image only supported when exporting from a computer running macOS Universal binaries for macOS support both Intel x86_64 and ARM64 Apple silicon i e M1 architectures Requirements Download the Godot export templates Use the Godot menu Editor Manage Export Templates A valid and unique Bundle identifier should be set in the Application section of the export options Warning Projects exported without code signing and notarization will be blocked by Gatekeeper if they are downloaded from unknown sources see the Running Godot apps on macOS page for more information Code signing and notarization By default macOS will run only applications that are signed and notarized If you use any other signing configuration see Running Godot apps on macOS for workarounds To notarize an app you must have a valid Apple Developer ID Certificate If you have an Apple Developer ID Certificate and exporting from macOS Install Xcode command line tools and open Xcode at least once or run the sudo xcodebuild license accept command to accept license agreement To sign exported app Select Xcode codesign in the Code Signing Codesign option Set valid Apple ID certificate identity certificate Common Name in the Code Signing Identity section To notarize exported app Select Xcode altool in the Notarization Notarization option Disable the Debugging entitlement Set valid Apple ID login app specific password or App Store Connect API UUID Key in the Notarization section You can use the xcrun notarytool history command to check notarization status and use the xcrun notarytool log ID command to download the notarization log If you encounter notarization issues see Resolving common notarization issues for more info After notarization is completed staple the ticket to the exported project If you have an Apple Developer ID Certificate and exporting from Linux or Windows Install PyOxidizer rcodesign and configure the path to rcodesign in the Editor Settings Export macOS rcodesign To sign exported app Select PyOxidizer rcodesign in the Code Signing Codesign option Set valid Apple ID PKCS 12 certificate file and password in the Code Signing section To notarize exported app Select PyOxidizer rcodesign in the Notarization Notarization option Disable the Debugging entitlement Set valid App Store Connect API UUID Key in the Notarization section You can use the rcodesign notary log command to check notarization status After notarization is completed use the rcodesign staple command to staple the ticket to the exported project If you do not have an Apple Developer ID Certificate Select Built in ad hoc only in the Code Signing Codesign option Select Disabled in the Notarization Notarization option In this case Godot will use an ad hoc signature which will make running an exported app easier for the end users see the Running Godot apps on macOS page for more information Signing Options Option Description Codesign Tool to use for code signing Identity The Full Name or Common Name of the signing identity store in the macOS keychain 1 Certificate File The PKCS 12 certificate file 2 Certificate Password Password for the certificate file 2 Custom Options Array of command line arguments passed to the code signing tool 1 This option is visible only when signing with Xcode codesign 2 1 2 These options are visible only when signing with PyOxidizer rcodesign Notarization Options Option Description Notarization Tool to use for notarization Apple ID Name Apple ID account name email address 3 Apple ID Password Apple ID app specific password See Using app specific passwords to enable two factor authentication and create app password 3 Apple Team ID Team ID Organization Unit if your Apple ID belongs to multiple teams optional 3 API UUID Apple App Store Connect API issuer UUID API Key Apple App Store Connect API key Note You should set either Apple ID Name Password or App Store Connect API UUID Key 3 1 2 3 These options are visible only when notarizing with Xcode altool See Notarizing macOS Software Before Distribution for more info Entitlements Hardened Runtime Entitlements Hardened Runtime entitlements manage security options and resource access policy See Hardened Runtime for more info Entitlement Description Allow JIT Code Execution 4 Allows creating writable and executable memory for JIT code If you are using add ons with dynamic or self modifying native code enable them according to the add on documentation Allow Unsigned Executable Memory 4 Allows creating writable and executable memory without JIT restrictions If you are using add ons with dynamic or self modifying native code enable them according to the add on documentation Allow DYLD Environment Variables 4 Allows app to uss dynamic linker environment variables to inject code If you are using add ons with dynamic or self modifying native code enable them according to the add on documentation Disable Library Validation Allows app to load arbitrary libraries and frameworks Enable it if you are using GDExtension add ons or ad hoc signing or want to support user provided external add ons Audio Input Enable if you need to use the microphone or other audio input sources if it s enabled you should also provide usage message in the privacy microphone_usage_description option Camera Enable if you need to use the camera if it s enabled you should also provide usage message in the privacy camera_usage_description option Location Enable if you need to use location information from Location Services if it s enabled you should also provide usage message in the privacy location_usage_description option Address Book 5 Enable to allow access contacts in the user s address book if it s enabled you should also provide usage message in the privacy address_book_usage_description option Calendars 5 Enable to allow access to the user s calendar if it s enabled you should also provide usage message in the privacy calendar_usage_description option Photo Library 5 Enable to allow access to the user s Photos library if it s enabled you should also provide usage message in the privacy photos_library_usage_description option Apple Events 5 Enable to allow app to send Apple events to other apps Debugging 6 You can temporarily enable this entitlement to use native debugger GDB LLDB with the exported app This entitlement should be disabled for production export 4 1 2 3 The Allow JIT Code Execution Allow Unsigned Executable Memory and Allow DYLD Environment Variables entitlements are always enabled for the Godot Mono exports and are not visible in the export options 5 1 2 3 4 These features aren t supported by Godot out of the box enable them only if you are using add ons which require them 6 To notarize an app you must disable the Debugging entitlement App Sandbox Entitlement The App Sandbox restricts access to user data networking and devices Sandboxed apps can t access most of the file system can t use custom file dialogs and execute binaries using OS execute and OS create_process outside the app bundle See App Sandbox for more info Note To distribute an app through the App Store you must enable the App Sandbox Entitlement Description Enabled Enables App Sandbox Network Server Enable to allow app to listen for incoming network connections Network Client Enable to allow app to establish outgoing network connections Device USB Enable to allow app to interact with USB devices This entitlement is required to use wired controllers Device Bluetooth Enable to allow app to interact with Bluetooth devices This entitlement is required to use wireless controllers Files Downloads 7 Allows read or write access to the user s Downloads folder Files Pictures 7 Allows read or write access to the user s Pictures folder Files Music 7 Allows read or write access to the user s Music folder Files Movies 7 Allows read or write access to the user s Movies folder Files User Selected 7 Allows read or write access to arbitrary folder To gain access a folder must be selected from the native file dialog by the user Helper Executable List of helper executables to embedded to the app bundle Sandboxed app are limited to execute only these executable 7 1 2 3 4 5 You can optionally provide usage messages for various folders in the privacy _folder_usage_description options Note You can override default entitlements by selecting custom entitlements file in this case all other entitlement are ignored Environment variables You can use the following environment variables to set export options outside of the editor During the export process these override the values that you set in the export menu macOS export environment variables Export option Environment variable Encryption Encryption Key GODOT_SCRIPT_ENCRYPTION_KEY Options Codesign Certificate File GODOT_MACOS_CODESIGN_CERTIFICATE_FILE Options Codesign Certificate Password GODOT_MACOS_CODESIGN_CERTIFICATE_PASSWORD Options Codesign Provisioning Profile GODOT_MACOS_CODESIGN_PROVISIONING_PROFILE Options Notarization API UUID GODOT_MACOS_NOTARIZATION_API_UUID Options Notarization API Key GODOT_MACOS_NOTARIZATION_API_KEY Options Notarization API Key ID GODOT_MACOS_NOTARIZATION_API_KEY_ID Options Notarization Apple ID Name GODOT_MACOS_NOTARIZATION_APPLE_ID_NAME Options Notarization Apple ID Password GODOT_MACOS_NOTARIZATION_APPLE_ID_PASSWORD User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Running Godot apps on macOS See also This page covers running Godot projects on macOS If you haven t exported your project yet read Exporting for macOS first By default macOS will run only applications that are signed and notarized Note When running an app from the Downloads folder or when still in quarantine Gatekeeper will perform path randomization as a security measure This breaks access to relative paths from the app which the app relies upon to work To resolve this issue move the app to the Applications folder In general macOS apps should avoid relying on relative paths from the application folder Depending on the way a macOS app is signed and distributed the following scenarios are possible App is signed notarized and distributed via App Store Note App developers need to join the Apple Developer Program and configure signing and notarization options during export then upload the app to the App Store The app should run out of the box without extra user interaction required App is signed notarized and distributed outside App Store Note App developers need to join the Apple Developer Program and configure signing and notarization options during export then distribute the app as DMG or ZIP archive When you run the app for the first time the following dialog is displayed Click Open to start the app If you see the following warning dialog your Mac is set up to allow apps only from the App Store To allow third party apps open System Preferences click Security Privacy then click General unlock settings and select App Store and identified developers App is signed including ad hoc signatures but not notarized Note App developer used self signed certificate or ad hoc signing default Godot behavior for exported project When you run the app for the first time the following dialog is displayed To run this app you can temporarily override Gatekeeper Either open System Preferences click Security Privacy then click General and click Open Anyway Or right click Control click on the app icon in the Finder window and select Open from the menu Then click Open in the confirmation dialog Enter your password if you re prompted Another option is to disable Gatekeeper entirely Note that this does decrease the security of your computer by allowing you to run any software you want To do this run sudo spctl master disable in the Terminal enter your password and then the Anywhere option will be available Note that Gatekeeper will re enable itself when macOS updates App is not signed executable is linker signed Note App is built using official export templates but it is not signed When you run the app for the first time the following dialog is displayed To run this app you should remove the quarantine extended file attribute manually Open Terminal app press Cmd Space and enter Terminal Navigate to the folder containing the target application Use the cd path_to_the_app_folder command e g cd Downloads if it s in the Downloads folder Run the command xattr dr com apple quarantine Unsigned Game app including quotation marks and app extension Neither app nor executable is signed relevant for Apple Silicon Macs only Note App is built using custom export templates compiled using OSXCross and it is not signed at all When you run the app for the first time the following dialog is displayed To run this app you can ad hoc sign it yourself Install Xcode for the App Store start it and confirm command line tools installation Open Terminal app press Cmd Space and enter Terminal Navigate to the folder containing the target application Use the cd path_to_the_app_folder command e g cd Downloads if it s in the Downloads folder Run the following commands xattr dr com apple quarantine Unsigned Game app including quotation marks and app extension codesign s force deep Unsigned Game app including quotation marks and app extension User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Exporting for Windows See also This page describes how to export a Godot project to Windows If you re looking to compile editor or export template binaries from source instead read Compiling for Windows The simplest way to distribute a game for PC is to copy the executable godot exe compress the folder and send it to someone else However this is often not desired Godot offers a more elegant approach for PC distribution when using the export system When exporting for Windows the exporter takes all the project files and creates a data pck file This file is bundled with a specially optimized binary that is smaller faster and does not contain the editor and debugger Code signing Godot is capable of automatic code signing on export To do this you must have the Windows SDK on Windows or osslsigncode on any other OS installed You will also need a package signing certificate information on creating one can be found here Warning If you export for Windows with embedded PCK files you will not be able to sign the program as it will break On Windows PCK embedding is also known to cause false positives in antivirus programs Therefore it s recommended to avoid using it unless you re distributing your project via Steam as it bypasses code signing and antivirus checks Setup Settings need to be changed in two places First in the editor settings under Export Windows Click on the folder next to the Sign Tool setting if you re using Windows navigate to and select SignTool exe if you re on a different OS select osslsigncode The second location is the Windows export preset which can be found in Project Export Add a windows desktop preset if you haven t already Under options there is a code signing category Enabled must be set to true and Identity must be set to the signing certificate The other settings can be adjusted as needed Once this is Done Godot will sign your project on export Environment variables You can use the following environment variables to set export options outside of the editor During the export process these override the values that you set in the export menu Windows export environment variables Export option Environment variable Encryption Encryption Key GODOT_SCRIPT_ENCRYPTION_KEY Options Codesign Identity Type GODOT_WINDOWS_CODESIGN_IDENTITY_TYPE Options Codesign Identity GODOT_WINDOWS_CODESIGN_IDENTITY Options Codesign Password GODOT_WINDOWS_CODESIGN_PASSWORD User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Changing application icon for Windows By default the exported project s icon will be the Godot icon You will most likely want to change that for your project There are two types of icons that can be changed on Windows the file icon and the taskbar icon Creating an ICO file Windows does not use formats such as png or jpg for application icons Instead it uses a Windows only format called ICO You can create your application icon in any program but you will have to convert it to an ICO file using a program such as GIMP This video tutorial goes over how to export an ICO file with GIMP It is also possible to convert a PNG image to an hiDPI friendly ICO file using this ImageMagick command magick convert icon png define icon auto resize 256 128 64 48 32 16 icon ico Copy to clipboard Depending on which version of ImageMagick you installed you might need to leave out the magick and run this command instead convert icon png define icon auto resize 256 128 64 48 32 16 icon ico Copy to clipboard Warning For the ICO file to effectively replace the default Godot icon it must contain all the sizes included in the default Godot icon 16 16 32 32 48 48 64 64 128 128 256 256 If the ICO file does not contain all the sizes the default Godot icon will be kept for the sizes that weren t overridden The above ImageMagick command takes this into account Changing the taskbar icon The taskbar icon is the icon that shows up on the taskbar when your project is running To change the taskbar icon go to Project Project Settings Application Config Windows Native Icon Click on the folder icon and select your ICO file This setting only changes the icon for your exported game on Windows To set the icon for macOS use Macos Native Icon And for any other platform use the Icon setting Changing the file icon In Godot 3 5 and later you can change the file icon without external tools using godoticon Changing the file icon this way should work for executables containing an embedded PCK Warning There are known issues when changing the application icon in executables that embed a PCK file It s recommended to avoid using rcedit for now if you choose to enable the Embed Pck option for your Windows export preset in the Export dialog The file icon is the icon of the executable that you click on to start the project Before selecting it in the export options you will need to install an extra tool called rcedit You can download it here After downloading you need to tell Godot the path to the rcedit executable on your computer Go to Editor Editor Settings Export Windows Click on the folder icon for the rcedit entry Navigate to and select the rcedit executable Note Linux and macOS users will also need to install WINE to use rcedit On macOS 10 15 Catalina or later make sure to use a 64 bit version of both WINE and rcedit since 32 bit applications aren t supported anymore You should now have everything in place to change the file icon To do that you will need to specify the icon when exporting Go to Project Export Assuming you have already created a Windows Desktop preset select your icon in ICO format in the Application Icon field Warning All the supplied metadata must be valid Most importantly the version identifiers must take the form major minor patch revision where every component is required and is a positive integer For instance 1 2 0 0 is valid but 1 2 0 is not If you provide invalid metadata in the export preset the application icon won t change as rcedit will fail to change the executable s metadata Note If rcedit fails to change the icon you can instead compile your own Windows export templates with the icon changed To do so replace platform windows godot ico with your own ICO file before compiling export templates Once this is done you can specify your export templates as custom export templates in your project s Windows export preset Testing the result You can now export the project If it worked correctly you should see this Note If your icon isn t showing up properly on Windows 10 try clearing the icon cache To do so open the Run dialog and enter ie4uinit exe ClearIconCache or ie4uinit exe show User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Exporting for iOS See also This page describes how to export a Godot project to iOS If you re looking to compile export template binaries from source instead read Compiling for iOS These are the steps to load a Godot project in Xcode This allows you to build and deploy to an iOS device build a release for the App Store and do everything else you can normally do with Xcode Attention Projects written in C can be exported to iOS as of Godot 4 2 but support is experimental and some limitations apply Requirements You must export for iOS from a computer running macOS with Xcode installed Download the Godot export templates Use the Godot menu Editor Manage Export Templates Export a Godot project to Xcode In the Godot editor open the Export window from the Project menu When the Export window opens click Add and select iOS The App Store Team ID and Bundle Identifier options in the Application category are required Leaving them blank will cause the exporter to throw an error Note If you encounter an error during export similar to JSON text did not start with array or object and option to allow fragments not set then it might be due to a malformated App Store Team ID The exporter expects a 10 characters long code like ABCDE12XYZ and not e g your name as Xcode likes to display in the Signing Capabilities tab You can find the code over at developer apple com next to your name in the top right corner After you click Export Project there are still two important options left Path is an empty folder that will contain the exported Xcode project files File will be the name of the Xcode project and several project specific files and directories Note This tutorial uses exported_xcode_project_name but you will use your project s name When you see exported_xcode_project_name in the following steps replace it with the name you used instead Note Avoid using spaces when you choose your exported_xcode_project_name as this can lead to corruption in your XCode project file When the export completes the output folder should look like this Opening exported_xcode_project_name xcodeproj lets you build and deploy like any other iOS app Active development considerations The above method creates an exported project that you can build for release but you have to re export every time you make a change in Godot While developing you can speed this process up by linking your Godot project files directly into your app In the following example exported_xcode_project_name is the name of the exported iOS application as above godot_project_to_export is the name of the Godot project Note godot_project_to_export must not be the same as exported_xcode_project_name to prevent signing issues in Xcode Steps to link a Godot project folder to Xcode Start from an exported iOS project follow the steps above In Finder drag the Godot project folder into the Xcode file browser 3 In the dialog make sure Create folder references is selected This means you will be able to continue to edit your Godot project in its current location See the godot_project_to_export folder in the Xcode file browser Delete exported_xcode_project_name pck from the Xcode project 6 Open exported_xcode_project_name Info plist and add a string property named godot_path this is the real key name with a value godot_project_to_export this is the name of your project That s it You can now edit your project in the Godot editor and build it in Xcode when you want to run it on a device Plugins for iOS Special iOS plugins can be used in Godot Check out the Plugins for iOS page Environment variables You can use the following environment variables to set export options outside of the editor During the export process these override the values that you set in the export menu iOS export environment variables Export option Environment variable Encryption Encryption Key GODOT_SCRIPT_ENCRYPTION_KEY Options Application Provisioning Profile UUID Debug GODOT_IOS_PROVISIONING_PROFILE_UUID_DEBUG Options Application Provisioning Profile UUID Release GODOT_IOS_PROVISIONING_PROFILE_UUID_RELEASE Troubleshooting xcode select points at wrong SDK location xcode select is a tool that comes with Xcode and among other things points at iOS SDKs on your Mac If you have Xcode installed opened it agreed to the license agreement and installed the command line tools xcode select should point at the right location for the iPhone SDK If it somehow doesn t Godot will fail exporting to iOS with an error that may look like this MSB3073 The command clang LOTS OF PATHS AND COMMAND LINE ARGUMENTS HERE Library Developer CommandLineTools Platforms iPhoneOS platform Developer SDKs iPhoneOS sdk exited with code 1 Copy to clipboard In this case Godot is trying to find the Platforms folder containing the iPhone SDK inside the Library Developer CommandLineTools folder but the Platforms folder with the iPhone SDK is actually located under Applications Xcode app Contents Developer To verify this you can open up Terminal and run the following command to see what xcode select points at xcode select p Copy to clipboard To fix xcode select pointing at a wrong location enter this command in Terminal sudo xcode select switch Applications Xcode app Copy to clipboard After running this command Godot should be able to successfully export to iOS User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Exporting for Android See also This page describes how to export a Godot project to Android If you re looking to compile export template binaries from source instead read Compiling for Android Exporting for Android has fewer requirements than compiling Godot for Android The following steps detail what is needed to set up the Android SDK and the engine Attention Projects written in C can be exported to Android as of Godot 4 2 but support is experimental and some limitations apply Install OpenJDK 17 Download and install OpenJDK 17 Download the Android SDK Download and install the Android SDK You can install the Android SDK using Android Studio Iguana version 2023 2 1 or later Run it once to complete the SDK setup using these instructions Ensure that the required packages are installed as well Android SDK Platform Tools version 34 0 0 or later Android SDK Build Tools version 34 0 0 Android SDK Platform 34 Android SDK Command line Tools latest Ensure that the NDK and CMake are installed and configured CMake version 3 10 2 4988404 NDK version r23c 23 2 8568313 Alternatively you can install the Android SDK with the sdkmanager command line tool Install the command line tools package using these instructions Once the command line tools are installed run the following sdkmanager command to complete the setup process sdkmanager sdk_root android_sdk_path platform tools build tools 34 0 0 platforms android 34 cmdline tools latest cmake 3 10 2 4988404 ndk 23 2 8568313 Copy to clipboard Note If you are using Linux do not use an Android SDK provided by your distribution s repositories as it will often be outdated Setting it up in Godot Enter the Editor Settings screen This screen contains the editor settings for the user account in the computer it s independent of the project Scroll down to the section where the Android settings are located In that screen 2 paths need to be set Java SDK Path should be the location where OpenJDK 17 was installed Android Sdk Path should be the location where the Android SDK was installed For example LOCALAPPDATA Android Sdk on Windows or Users USER Library Android sdk on macOS Once that is configured everything is ready to export to Android Note If you get an error saying Could not install to device make sure you do not have an application with the same Android package name already installed on the device but signed with a different key If you have an application with the same Android package name but a different signing key already installed on the device you must remove the application in question from the Android device before exporting to Android again Providing launcher icons Launcher icons are used by Android launcher apps to represent your application to users Godot only requires high resolution icons for xxxhdpi density screens and will automatically generate lower resolution variants There are two types of icons required by Godot Main Icon The classic icon This will be used on all Android versions up to Android 8 Oreo exclusive Must be at least 192 192 px Adaptive Icons Starting from Android 8 inclusive Adaptive Icons were introduced Applications will need to include separate background and foreground icons to have a native look The user s launcher application will control the icon s animation and masking Must be at least 432 432 px See also It s important to adhere to some rules when designing adaptive icons Google Design has provided a nice article that helps to understand those rules and some of the capabilities of adaptive icons Caution The most important adaptive icon design rule is to have your icon critical elements inside the safe zone a centered circle with a diameter of 66dp 264 pixels on xxxhdpi to avoid being clipped by the launcher If you don t provide some of the requested icons Godot will replace them using a fallback chain trying the next in line when the current one fails Main Icon Provided main icon Project icon Default Godot main icon Adaptive Icon Foreground Provided foreground icon Provided main icon Project icon Default Godot foreground icon Adaptive Icon Background Provided background icon Default Godot background icon It s highly recommended to provide all the requested icons with their specified resolutions This way your application will look great on all Android devices and versions Exporting for Google Play Store Uploading an APK to Google s Play Store requires you to sign using a non debug keystore file such file can be generated like this keytool v genkey keystore mygame keystore alias mygame keyalg RSA validity 10000 Copy to clipboard This keystore and key are used to verify your developer identity remember the password and keep it in a safe place It is suggested to use only upper and lowercase letters and numbers Special characters may cause errors Use Google s Android Developer guides to learn more about APK signing Now fill in the following forms in your Android Export Presets Release Enter the path to the keystore file you just generated Release User Replace with the key alias Release Password Key password Note that the keystore password and the key password currently have to be the same Don t forget to uncheck the Export With Debug checkbox while exporting Optimizing the APK size By default the APK will contain native libraries for both ARMv7 and ARMv8 architectures This increases its size significantly To create a smaller APK uncheck either Armeabi v 7a or Arm 64 v 8a in your project s Android export preset This will create an APK that only contains a library for a single architecture Note that applications targeting ARMv7 can also run on ARMv8 devices but the opposite is not true Since August 2019 Google Play requires all applications to be available in 64 bit form This means you cannot upload an APK that contains just an ARMv7 library To solve this you can upload several APKs to Google Play using its Multiple APK support Each APK should target a single architecture creating an APK for ARMv7 and ARMv8 is usually sufficient to cover most devices in use today You can optimize the size further by compiling an Android export template with only the features you need See Optimizing a build for size for more information Environment variables You can use the following environment variables to set export options outside of the editor During the export process these override the values that you set in the export menu Android export environment variables Export option Environment variable Encryption Encryption Key GODOT_SCRIPT_ENCRYPTION_KEY Options Keystore Debug GODOT_ANDROID_KEYSTORE_DEBUG_PATH Options Keystore Debug User GODOT_ANDROID_KEYSTORE_DEBUG_USER Options Keystore Debug Password GODOT_ANDROID_KEYSTORE_DEBUG_PASSWORD Options Keystore Release GODOT_ANDROID_KEYSTORE_RELEASE_PATH Options Keystore Release User GODOT_ANDROID_KEYSTORE_RELEASE_USER Options Keystore Release Password GODOT_ANDROID_KEYSTORE_RELEASE_PASSWORD User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Gradle builds for Android Godot provides the option to build using the gradle buildsystem Instead of using the already pre built template that ships with Godot an Android Java project gets installed into your project folder Godot will then build it and use it as an export template every time you export the project There are some reasons why you may want to do this Modify the project before it s built Add external SDKs that build with your project Configuring the gradle build is a fairly straightforward process But first you need to follow the steps in exporting for android up to Setting it up in Godot After doing that follow the steps below Set up the gradle build environment Go to the Project menu and install the Gradle Build template Make sure export templates are downloaded If not this menu will help you download them A Gradle based Android project will be created under res android build Editing these files is not needed unless you really need to modify the project Enabling the gradle build and exporting When setting up the Android project in the Project Export dialog Gradle Build needs to be enabled From now on attempting to export the project or one click deploy will call the Gradle build system to generate fresh templates this window will appear every time The templates built will be used automatically afterwards so no further configuration is needed Note When using the gradle Android build system assets that are placed within a folder whose name begins with an underscore will not be included in the generated APK This does not apply to assets whose file name begins with an underscore For example _example image png will not be included as an asset but _image png will User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Exporting for the Web See also This page describes how to export a Godot project to HTML5 If you re looking to compile editor or export template binaries from source instead read Compiling for the Web HTML5 export allows publishing games made in Godot Engine to the browser This requires support for WebAssembly WebGL and SharedArrayBuffer in the user s browser Attention Projects written in C using Godot 4 currently cannot be exported to the web To use C on web platforms use Godot 3 instead Tip Use the browser integrated developer console usually opened with F12 Cmd Option I on macOS to view debug information like JavaScript engine and WebGL errors Attention Godot 4 s HTML5 exports currently cannot run on macOS and iOS due to upstream bugs with SharedArrayBuffer and WebGL 2 0 We recommend using macOS and iOS native export functionality instead as it will also result in better performance Godot 3 s HTML5 exports are more compatible with various browsers in general especially when using the GLES2 rendering backend which only requires WebGL 1 0 WebGL version Godot 4 0 and later can only target WebGL 2 0 using the Compatibility rendering method There is no stable way to run Vulkan applications on the web yet See Can I use WebGL 2 0 for a list of browser versions supporting WebGL 2 0 Note that Safari has several issues with WebGL 2 0 support that other browsers don t have so we recommend using a Chromium based browser or Firefox if possible Export options If a runnable web export template is available a button appears between the Stop scene and Play edited Scene buttons in the editor to quickly open the game in the default browser for testing If your project uses GDExtension Extension Support needs to be enabled If you plan to use VRAM compression make sure that Vram Texture Compression is enabled for the targeted platforms enabling both For Desktop and For Mobile will result in a bigger but more compatible export If a path to a Custom HTML shell file is given it will be used instead of the default HTML page See Custom HTML page for Web export Head Include is appended into the head element of the generated HTML page This allows to for example load webfonts and third party JavaScript APIs include CSS or run JavaScript code Important Each project must generate their own HTML file On export several text placeholders are replaced in the generated HTML file specifically for the given export options Any direct modifications to that HTML file will be lost in future exports To customize the generated file use the Custom HTML shell option Limitations For security and privacy reasons many features that work effortlessly on native platforms are more complicated on the web platform Following is a list of limitations you should be aware of when porting a Godot game to the web Important Browser vendors are making more and more functionalities only available in secure contexts this means that such features are only be available if the web page is served via a secure HTTPS connection localhost is usually exempt from such requirement Using cookies for data persistence Users must allow cookies specifically IndexedDB if persistence of the user file system is desired When playing a game presented in an iframe third party cookies must also be enabled Incognito private browsing mode also prevents persistence The method OS is_userfs_persistent can be used to check if the user file system is persistent but can give false positives in some cases Background processing The project will be paused by the browser when the tab is no longer the active tab in the user s browser This means functions such as _process and _physics_process will no longer run until the tab is made active again by the user by switching back to the tab This can cause networked games to disconnect if the user switches tabs for a long duration This limitation does not apply to unfocused browser windows Therefore on the user s side this can be worked around by running the project in a separate window instead of a separate tab Full screen and mouse capture Browsers do not allow arbitrarily entering full screen The same goes for capturing the cursor Instead these actions have to occur as a response to a JavaScript input event In Godot this means entering full screen from within a pressed input event callback such as _input or _unhandled_input Querying the Input singleton is not sufficient the relevant input event must currently be active For the same reason the full screen project setting doesn t work unless the engine is started from within a valid input event handler This requires customization of the HTML page Audio Some browsers restrict autoplay for audio on websites The easiest way around this limitation is to request the player to click tap or press a key button to enable audio for instance when displaying a splash screen at the start of your game See also Google offers additional information about their Web Audio autoplay policies Apple s Safari team also posted additional information about their Auto Play Policy Changes for macOS Warning Access to microphone requires a secure context Networking Low level networking is not implemented due to lacking support in browsers Currently only HTTP client HTTP requests WebSocket client and WebRTC are supported The HTTP classes also have several restrictions on the HTML5 platform Accessing or changing the StreamPeer is not possible Threaded Blocking mode is not available Cannot progress more than once per frame so polling in a loop will freeze No chunked responses Host verification cannot be disabled Subject to same origin policy Clipboard Clipboard synchronization between engine and the operating system requires a browser supporting the Clipboard API additionally due to the API asynchronous nature might not be reliable when accessed from GDScript Warning Requires a secure context Gamepads Gamepads will not be detected until one of their button is pressed Gamepads might have the wrong mapping depending on the browser OS gamepad combination sadly the Gamepad API does not provide a reliable way to detect the gamepad information necessary to remap them based on model vendor OS due to privacy considerations Warning Requires a secure context Boot splash is not displayed The default HTML page does not display the boot splash while loading However the image is exported as a PNG file so custom HTML pages can display it Serving the files Exporting for the web generates several files to be served from a web server including a default HTML page for presentation A custom HTML file can be used see Custom HTML page for Web export Warning To ensure low audio latency and the ability to use Thread in web exports Godot 4 web exports always use SharedArrayBuffer This requires a secure context while also requiring the following CORS headers to be set when serving the files Cross Origin Opener Policy same origin Cross Origin Embedder Policy require corp Copy to clipboard If you don t control the web server or are unable to add response headers use coi serviceworker as a workaround If the client doesn t receive the required response headers the project will not run The generated html file can be used as DirectoryIndex in Apache servers and can be renamed to e g index html at any time Its name is never depended on by default The HTML page draws the game at maximum size within the browser window This way it can be inserted into an iframe with the game s size as is common on most web game hosting sites The other exported files are served as they are next to the html file names unchanged The wasm file is a binary WebAssembly module implementing the engine The pck file is the Godot main pack containing your game The js file contains start up code and is used by the html file to access the engine The png file contains the boot splash image It is not used in the default HTML page but is included for custom HTML pages The pck file is binary usually delivered with the MIME type application octet stream The wasm file is delivered as application wasm Warning Delivering the WebAssembly module wasm with a MIME type other than application wasm can prevent some start up optimizations Delivering the files with server side compression is recommended especially for the pck and wasm files which are usually large in size The WebAssembly module compresses particularly well down to around a quarter of its original size with gzip compression Consider using Brotli precompression if supported on your web server for further file size savings Hosts that provide on the fly compression GitHub Pages gzip Hosts that don t provide on the fly compression itch io GitLab Pages supports manual gzip precompression Tip The Godot repository includes a Python script to host a local web server This script is intended for testing the web editor but it can also be used to test exported projects Save the linked script to a file called serve py move this file to the folder containing the exported project s index html then run the following command in a command prompt within the same folder You may need to replace python with python3 on some platforms python serve py root Copy to clipboard On Windows you can open a command prompt in the current folder by holding Shift and right clicking on empty space in Windows Explorer then choosing Open PowerShell window here This will serve the contents of the current folder and open the default web browser automatically Note that for production use cases this Python based web server should not be used Instead you should use an established web server such as Apache or nginx Interacting with the browser and JavaScript See the dedicated page on how to interact with JavaScript and access some unique Web browser features Environment variables You can use the following environment variables to set export options outside of the editor During the export process these override the values that you set in the export menu HTML5 export environment variables Export option Environment variable Encryption Encryption Key GODOT_SCRIPT_ENCRYPTION_KEY User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Exporting for dedicated servers If you want to run a dedicated server for your project on a machine that doesn t have a GPU or display server available you ll need to run Godot with the headless display server and Dummy audio driver Since Godot 4 0 this can be done by running a Godot binary on any platform with the headless command line argument or running a project exported as dedicated server You do not need to use a specialized server binary anymore unlike Godot 3 x Editor versus export template It is possible to use either an editor or export template debug or release binary in headless mode Which one you should use depends on your use case Export template Use this one for running dedicated servers It does not contain editor functionality and is therefore smaller and more optimized Editor This binary contains editor functionality and is intended to be used for exporting projects This binary can be used to run dedicated servers but it s not recommended as it s larger and less optimized Export approaches There are two ways to export a project for a server Create a separate export preset for the platform that will host the server then export your project as usual Export a PCK file only preferably for the platform that matches the platform that will host the server Place this PCK file in the same folder as an export template binary rename the binary to have the same name as the PCK minus the file extension then run the binary Both methods should result in identical output The rest of the page will focus on the first approach See Exporting projects for more information Exporting a project for a dedicated server If you export a project as usual when targeting a server you will notice that the PCK file is just as large as for the client This is because it includes all resources including those the server doesn t need such as texture data Additionally headless mode won t be automatically used the user will have to specify headless to make sure no window spawns Many resources such as textures can be stripped from the PCK file to greatly reduce its size Godot offers a way to do this for textures and materials in a way that preserves references in scene or resource files built in or external To begin doing so make sure you have a dedicated export preset for your server then select it go to its Resources tab and change its export mode Choosing the Export as dedicated server export mode in the export preset When this export mode is chosen the dedicated_server feature tag is automatically added to the exported project Note If you do not wish to use this export mode but still want the feature tag you can write the name dedicated_server in the Features tab of the export preset This will also force headless when running the exported project After selecting this export mode you will be presented with a list of resources in the project Choosing resources to keep keep with stripped visuals or remove Ticking a box allows you to override options for the specified file or folder Checking boxes does not affect which files are exported this is done by the options selected for each checkbox instead Files within a checked folder will automatically use the parent s option by default which is indicated by the Inherited suffix for the option name and the option name being grayed out To change the option for a file whose option is currently inherited you must tick the box next to it first Strip Visuals Export this resource with visual files textures and materials replaced by placeholder classes Placeholder classes store the image size as it s sometimes used to position elements in a 2D scene but nothing else Keep Export this resource as usual with visual files intact Remove The file is not included in the PCK This is useful to ignore scenes and resources that only the client needs If you do so make sure the server doesn t reference these client only scenes and resources in any way The general recommendation is to use Strip Visuals whenever possible unless the server needs to access image data such as pixels colors For example if your server generates collision data based on an image s contents you need to use Keep for that particular image Tip To check the file structure of your exported PCK use the Export PCK ZIP button with a zip file extension then open the resulting ZIP file in a file manager Warning Be careful when using the Remove mode as scenes resources that reference a removed file will no longer be able to load successfully If you wish to remove specific resources but make the scenes still be able to load without them you ll have to remove the reference in the scene file and load the files to the nodes properties using load in a script This approach can be used to strip resources that Godot doesn t support replacing with placeholders yet such as audio Removing textures is often what makes the greatest impact on the PCK size so it is recommended to stick with Strip Visuals at first With the above options used a PCK for the client which exports all resources normally will look as follows godot exported 133200997 export 78c237d4bfdb4e1d02e0b5f38ddfd8bd scene scn global_script_class_cache cfg imported map_data png ce840618f399a990343bfc7298195a13 ctex music ogg fa883da45ae49695a3d022f64e60aee2 oggvorbisstr sprite png 7958af25f91bb9dbae43f35388f8e840 ctex uid_cache bin client music ogg import sprite png import server map_data png import test scene gd unused development_test gd project binary scene gd scene tscn remap Copy to clipboard The PCK s file structure for the server will look as follows godot exported 3400186661 export 78c237d4bfdb4e1d02e0b5f38ddfd8bd scene scn export 7958af25f91bb9dbae43f35388f8e840 sprite res Placeholder texture export fa883da45ae49695a3d022f64e60aee2 music res global_script_class_cache cfg imported map_data png ce840618f399a990343bfc7298195a13 ctex uid_cache bin client music ogg import sprite png import Points to placeholder texture server map_data png import project binary scene gd scene tscn remap Copy to clipboard Starting the dedicated server If both your client and server are part of the same Godot project you will have to add a way to start the server directly using a command line argument If you exported the project using the Export as dedicated server export mode or have added dedicated_server as a custom feature tag you can use the dedicated_server feature tag to detect whether a dedicated server PCK is being used GDScript C Note Feature tags are case sensitive if OS has_feature dedicated_server Run your server startup code here pass Copy to clipboard Note Feature tags are case sensitive if OS HasFeature dedicated_server Run your server startup code here Copy to clipboard If you also wish to host a server when using the built in headless command line argument this can be done by adding the following code snippet in your main scene or an autoload s _ready method GDScript C if DisplayServer get_name headless Run your server startup code here Using this check you can start a dedicated server by running a Godot binary editor or export template with the headless command line argument pass Copy to clipboard using System Linq if DisplayServer GetName headless Run your server startup code here Using this check you can start a dedicated server by running a Godot binary editor or export template with the headless command line argument Copy to clipboard If you wish to use a custom command line argument this can be done by adding the following code snippet in your main scene or an autoload s _ready method GDScript C if server in OS get_cmdline_user_args Run your server startup code here Using this check you can start a dedicated server by running a Godot binary editor or export template with the server command line argument pass Copy to clipboard using System Linq if OS GetCmdlineUserArgs Contains server Run your server startup code here Using this check you can start a dedicated server by running a Godot binary editor or export template with the server command line argument Copy to clipboard It s a good idea to add at least one of the above command line arguments to start a server as it can be used to test server functionality from the command line without having to export the project If your client and server are separate Godot projects your server should most likely be configured in a way where running the main scene starts a server automatically Next steps On Linux to make your dedicated server restart after a crash or system reboot you can create a systemd service This also lets you view server logs in a more convenient fashion with automatic log rotation provided by systemd If you have experience with containers you could also look into wrapping your dedicated server in a Docker container This way it can be used more easily in an automatic scaling setup which is outside the scope of this tutorial User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue One click deploy What is one click deploy One click deploy is a feature that is available once a platform is properly configured and a supported device is connected to the computer Since things can go wrong at many levels platform may not be configured correctly SDK may be incorrectly installed device may be improperly configured etc it s good to let the user know that it exists After adding an Android export preset marked as Runnable Godot can detect when a USB device is connected to the computer and offer the user to automatically export install and run the project in debug mode on the device This feature is called one click deploy Note One click deploy is only available once you ve added an export template marked as Runnable in the Export dialog You can mark several export presets as runnable but only one preset per platform may be marked as runnable If you mark a second preset in a given platform as runnable the other preset will no longer be marked as runnable Supported platforms Android Exports the project with debugging enabled and runs it on the connected device Make sure to follow the steps described in Exporting for Android Otherwise the one click deploy button won t appear If you have more than one device connected Godot will ask you which device the project should be exported to iOS Exports the project with debugging enabled and runs it on the connected device or simulator Make sure to follow the steps described in Exporting for iOS Otherwise the one click deploy button won t appear For each new bundle identifier export the project open it in the Xcode and build at least once to create new provisioning profile or create a provisioning profile in the Apple Developer account dashboard If you have more than one device connected Godot will ask you which device the project should be exported to Desktop platforms Exports the project with debugging enabled and runs it on the remote computer via SSH Web Starts a local web server and runs the exported project by opening the default web browser This is only accessible on localhost by default See Troubleshooting for making the exported project accessible on remote devices Using one click deploy Android Enable developer mode on your mobile device then enable USB debugging in the device s settings After enabling USB debugging connect the device to your PC using a USB cable For advanced users it should also be possible to use wireless ADB iOS Install Xcode accept Xcode license and login with your Apple Developer account If you are using Xcode 14 or earlier install ios deploy and set path to ios deploy in the Editor Settings see Export iOS iOS Deploy For running on device Pair your mobile device with a Mac Enable developer mode on your device Device can be connected via USB or local network Make sure the device is on the same local network and a correct network interface is selected in the editor settings see Network Debug Remote Host By default the editor is listening for localhost connections only For running in simulator Install and start simulator from the Xcode Device screen should be unlocked Desktop platforms Enable SSH Remote Deploy and configure connection settings in the project export setting Make sure there is an export preset marked as Runnable for the target platform Android iOS or Web If everything is configured correctly and with no errors platform specific icons will appear in the top right corner of the editor Click the button to export to the desired platform in one click Troubleshooting Android If you can t see the device in the list of devices when running the adb devices command in a terminal it will not be visible by Godot either To resolve this Check if USB debugging is enabled and authorized on the device Try unlocking your device and accepting the authorization prompt if you see any If you can t see this prompt running adb devices on your PC should make the authorization prompt appear on the device Try revoking the debugging authorization in the device s developer settings then follow the steps again Try using USB debugging instead of wireless debugging or vice versa Sometimes one of those can work better than the other On Linux you may be missing the required udev rules for your device to be recognized Web By default the web server started by the editor is only accessible from localhost This means the web server can t be reached by other devices on the local network or the Internet if port forwarding is set up on the router This is done for security reasons as you may not want other devices to be able to access the exported project while you re testing it Binding to localhost also prevents a firewall popup from appearing when you use one click deploy for the web platform To make the local web server accessible over the local network you ll need to change the Export Web HTTP Host editor setting to 0 0 0 0 You will also need to enable Export Web Use TLS as SharedArrayBuffer requires the use of a secure connection to work unless connecting to localhost However since other clients will be connecting to a remote device the use of TLS is absolutely required here To make the local web server accessible over the Internet you ll also need to forward the Export Web HTTP Port port specified in the Editor Settings 8060 by default in TCP on your router This is usually done by accessing your router s web interface then adding a NAT rule for the port in question For IPv6 connections you should allow the port in the router s IPv6 firewall instead Like for local network devices you will also need to enable Export Web Use TLS Note When Use TLS is enabled you will get a warning from your web browser as Godot will use a temporary self signed certificate You can safely ignore it and bypass the warning by clicking Advanced and then Proceed to address If you have an SSL TLS certificate that is trusted by browsers you can specify the paths to the key and certificate files in the Export Web TLS Key and Export Web TLS Certificate This will only work if the project is accessed through a domain name that is part of the TLS certificate User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue File and data I O Background loading File paths in Godot projects Saving games Runtime file loading and saving Binary serialization API Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Background loading Commonly games need to load resources asynchronously When switching the main scene of your game e g going to a new level you might want to show a loading screen with some indication that progress is being made or you may want to load additional resources during gameplay The standard load method ResourceLoader load or GDScript s simpler load blocks your thread making your game appear unresponsive while the resource is being loaded One way around this is using ResourceLoader to load resources asynchronously in background threads Using ResourceLoader Generally you queue requests to load resources for a path using ResourceLoader load_threaded_request which will then be loaded in threads in the background You can check the status with ResourceLoader load_threaded_get_status Progress can be obtained by passing an array variable via progress which will return a one element array containing the percentage Finally you retrieve loaded resources by calling ResourceLoader load_threaded_get Once you call load_threaded_get either the resource finished loading in the background and will be returned instantly or the load will block at this point like load would If you want to guarantee this does not block you either need to ensure there is enough time between requesting the load and retrieving the resource or you need to check the status manually Example This example demonstrates how to load a scene in the background We will have a button spawn an enemy when pressed The enemy will be Enemy tscn which we will load on _ready and instantiate when pressed The path will be Enemy tscn which is located at res Enemy tscn First we will start a request to load the resource and connect the button GDScript C const ENEMY_SCENE_PATH String Enemy tscn func _ready ResourceLoader load_threaded_request ENEMY_SCENE_PATH self pressed connect _on_button_pressed Copy to clipboard using Godot public partial class MyButton Button private const string EnemyScenePath Enemy tscn public override void _Ready ResourceLoader LoadThreadedRequest EnemyScenePath Pressed OnButtonPressed Copy to clipboard Now _on_button_pressed will be called when the button is pressed This method will be used to spawn an enemy GDScript C func _on_button_pressed Button was pressed Obtain the resource now that we need it var enemy_scene ResourceLoader load_threaded_get ENEMY_SCENE_PATH Instantiate the enemy scene and add it to the current scene var enemy enemy_scene instantiate add_child enemy Copy to clipboard private void OnButtonPressed Button was pressed Obtain the resource now that we need it var enemyScene PackedScene ResourceLoader LoadThreadedGet EnemyScenePath Instantiate the enemy scene and add it to the current scene var enemy enemyScene Instantiate AddChild enemy Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue File paths in Godot projects This page explains how file paths work inside Godot projects You will learn how to access paths in your projects using the res and user notations and where Godot stores project and editor files on your and your users systems Path separators To make supporting multiple platforms easier Godot uses UNIX style path separators forward slash These work on all platforms including Windows Instead of writing paths like C Projects Game in Godot you should write C Projects Game Windows style path separators backward slash are also supported in some path related methods but they need to be doubled as is normally used as an escape for characters with a special meaning This makes it possible to work with paths returned by other Windows applications We still recommend using only forward slashes in your own code to guarantee that everything will work as intended Tip The String class offers over a dozen methods to work with strings that represent file paths String filecasecmp_to String filenocasecmp_to String get_base_dir String get_basename String get_extension String get_file String is_absolute_path String is_relative_path String is_valid_filename String path_join String simplify_path String validate_filename Accessing files in the project folder res Godot considers that a project exists in any folder that contains a project godot text file even if the file is empty The folder that contains this file is your project s root folder You can access any file relative to it by writing paths starting with res which stands for resources For example you can access an image file character png located in the project s root folder in code with the following path res character png Accessing persistent user data user To store persistent data files like the player s save or settings you want to use user instead of res as your path s prefix This is because when the game is running the project s file system will likely be read only The user prefix points to a different directory on the user s device Unlike res the directory pointed at by user is created automatically and guaranteed to be writable to even in an exported project The location of the user folder depends on what is configured in the Project Settings By default the user folder is created within Godot s editor data path in the app_userdata project_name folder This is the default so that prototypes and test projects stay self contained within Godot s data folder If application config use_custom_user_dir is enabled in the Project Settings the user folder is created next to Godot s editor data path i e in the standard location for applications data By default the folder name will be inferred from the project name but it can be further customized with application config custom_user_dir_name This path can contain path separators so you can use it e g to group projects of a given studio with a Studio Name Game Name structure On desktop platforms the actual directory paths for user are Type Location Default Windows APPDATA Godot app_userdata project_name macOS Library Application Support Godot app_userdata project_name Linux local share godot app_userdata project_name Custom dir Windows APPDATA project_name macOS Library Application Support project_name Linux local share project_name Custom dir and name Windows APPDATA custom_user_dir_name macOS Library Application Support custom_user_dir_name Linux local share custom_user_dir_name project_name is based on the application name defined in the Project Settings but you can override it on a per platform basis using feature tags On mobile platforms this path is unique to the project and is not accessible by other applications for security reasons On HTML5 exports user will refer to a virtual filesystem stored on the device via IndexedDB Interaction with the main filesystem can still be performed through the JavaScriptBridge singleton Converting paths to absolute paths or local paths You can use ProjectSettings globalize_path to convert a local path like res path to file txt to an absolute OS path For example ProjectSettings globalize_path can be used to open local paths in the OS file manager using OS shell_open since it only accepts native OS paths To convert an absolute OS path to a local path starting with res or user use ProjectSettings localize_path This only works for absolute paths that point to files or folders in your project s root or user folders Editor data paths The editor uses different paths for editor data editor settings and cache depending on the platform By default these paths are Type Location Editor data Windows APPDATA Godot macOS Library Application Support Godot Linux local share godot Editor settings Windows APPDATA Godot macOS Library Application Support Godot Linux config godot Cache Windows TEMP Godot macOS Library Caches Godot Linux cache godot Editor data contains export templates and project specific data Editor settings contains the main editor settings configuration file as well as various other user specific customizations editor layouts feature profiles script templates etc Cache contains data generated by the editor or stored temporarily It can safely be removed when Godot is closed Godot complies with the XDG Base Directory Specification on Linux BSD You can override the XDG_DATA_HOME XDG_CONFIG_HOME and XDG_CACHE_HOME environment variables to change the editor and project data paths Note If you use Godot packaged as a Flatpak the editor data paths will be located in subfolders in var app org godotengine Godot Self contained mode If you create a file called _sc_ or _sc_ in the same directory as the editor binary or in MacOS Contents for a macOS editor app bundle Godot will enable self contained mode This mode makes Godot write all editor data settings and cache to a directory named editor_data in the same directory as the editor binary You can use it to create a portable installation of the editor The Steam release of Godot uses self contained mode by default Note Self contained mode is not supported in exported projects yet To read and write files relative to the executable path use OS get_executable_path Note that writing files in the executable path only works if the executable is placed in a writable location i e not Program Files or another directory that is read only for regular users User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Saving games Introduction Save games can be complicated For example it may be desirable to store information from multiple objects across multiple levels Advanced save game systems should allow for additional information about an arbitrary number of objects This will allow the save function to scale as the game grows more complex Note If you re looking to save user configuration you can use the ConfigFile class for this purpose See also You can see how saving and loading works in action using the Saving and Loading Serialization demo project Identify persistent objects Firstly we should identify what objects we want to keep between game sessions and what information we want to keep from those objects For this tutorial we will use groups to mark and handle objects to be saved but other methods are certainly possible We will start by adding objects we wish to save to the Persist group We can do this through either the GUI or script Let s add the relevant nodes using the GUI Once this is done when we need to save the game we can get all objects to save them and then tell them all to save with this script GDScript C var save_nodes get_tree get_nodes_in_group Persist for node in save_nodes Now we can call our save function on each node Copy to clipboard var saveNodes GetTree GetNodesInGroup Persist foreach Node saveNode in saveNodes Now we can call our save function on each node Copy to clipboard Serializing The next step is to serialize the data This makes it much easier to read from and store to disk In this case we re assuming each member of group Persist is an instanced node and thus has a path GDScript has helper class JSON to convert between dictionary and string Our node needs to contain a save function that returns this data The save function will look like this GDScript C func save var save_dict filename get_scene_file_path parent get_parent get_path pos_x position x Vector2 is not supported by JSON pos_y position y attack attack defense defense current_health current_health max_health max_health damage damage regen regen experience experience tnl tnl level level attack_growth attack_growth defense_growth defense_growth health_growth health_growth is_alive is_alive last_attack last_attack return save_dict Copy to clipboard public Godot Collections Dictionary string Variant Save return new Godot Collections Dictionary string Variant Filename SceneFilePath Parent GetParent GetPath PosX Position X Vector2 is not supported by JSON PosY Position Y Attack Attack Defense Defense CurrentHealth CurrentHealth MaxHealth MaxHealth Damage Damage Regen Regen Experience Experience Tnl Tnl Level Level AttackGrowth AttackGrowth DefenseGrowth DefenseGrowth HealthGrowth HealthGrowth IsAlive IsAlive LastAttack LastAttack Copy to clipboard This gives us a dictionary with the style variable_name value_of_variable which will be useful when loading Saving and reading data As covered in the File system tutorial we ll need to open a file so we can write to it or read from it Now that we have a way to call our groups and get their relevant data let s use the class JSON to convert it into an easily stored string and store them in a file Doing it this way ensures that each line is its own object so we have an easy way to pull the data out of the file as well GDScript C Note This can be called from anywhere inside the tree This function is path independent Go through everything in the persist category and ask them to return a dict of relevant variables func save_game var save_file FileAccess open user savegame save FileAccess WRITE var save_nodes get_tree get_nodes_in_group Persist for node in save_nodes Check the node is an instanced scene so it can be instanced again during load if node scene_file_path is_empty print persistent node s is not an instanced scene skipped node name continue Check the node has a save function if node has_method save print persistent node s is missing a save function skipped node name continue Call the node s save function var node_data node call save JSON provides a static method to serialized JSON string var json_string JSON stringify node_data Store the save dictionary as a new line in the save file save_file store_line json_string Copy to clipboard Note This can be called from anywhere inside the tree This function is path independent Go through everything in the persist category and ask them to return a dict of relevant variables public void SaveGame using var saveFile FileAccess Open user savegame save FileAccess ModeFlags Write var saveNodes GetTree GetNodesInGroup Persist foreach Node saveNode in saveNodes Check the node is an instanced scene so it can be instanced again during load if string IsNullOrEmpty saveNode SceneFilePath GD Print persistent node saveNode Name is not an instanced scene skipped continue Check the node has a save function if saveNode HasMethod Save GD Print persistent node saveNode Name is missing a Save function skipped continue Call the node s save function var nodeData saveNode Call Save Json provides a static method to serialized JSON string var jsonString Json Stringify nodeData Store the save dictionary as a new line in the save file saveFile StoreLine jsonString Copy to clipboard Game saved Now to load we ll read each line Use the parse method to read the JSON string back to a dictionary and then iterate over the dict to read our values But we ll need to first create the object and we can use the filename and parent values to achieve that Here is our load function GDScript C Note This can be called from anywhere inside the tree This function is path independent func load_game if not FileAccess file_exists user savegame save return Error We don t have a save to load We need to revert the game state so we re not cloning objects during loading This will vary wildly depending on the needs of a project so take care with this step For our example we will accomplish this by deleting saveable objects var save_nodes get_tree get_nodes_in_group Persist for i in save_nodes i queue_free Load the file line by line and process that dictionary to restore the object it represents var save_file FileAccess open user savegame save FileAccess READ while save_file get_position save_file get_length var json_string save_file get_line Creates the helper class to interact with JSON var json JSON new Check if there is any error while parsing the JSON string skip in case of failure var parse_result json parse json_string if not parse_result OK print JSON Parse Error json get_error_message in json_string at line json get_error_line continue Get the data from the JSON object var node_data json data Firstly we need to create the object and add it to the tree and set its position var new_object load node_data filename instantiate get_node node_data parent add_child new_object new_object position Vector2 node_data pos_x node_data pos_y Now we set the remaining variables for i in node_data keys if i filename or i parent or i pos_x or i pos_y continue new_object set i node_data i Copy to clipboard Note This can be called from anywhere inside the tree This function is path independent public void LoadGame if FileAccess FileExists user savegame save return Error We don t have a save to load We need to revert the game state so we re not cloning objects during loading This will vary wildly depending on the needs of a project so take care with this step For our example we will accomplish this by deleting saveable objects var saveNodes GetTree GetNodesInGroup Persist foreach Node saveNode in saveNodes saveNode QueueFree Load the file line by line and process that dictionary to restore the object it represents using var saveFile FileAccess Open user savegame save FileAccess ModeFlags Read while saveFile GetPosition saveFile GetLength var jsonString saveFile GetLine Creates the helper class to interact with JSON var json new Json var parseResult json Parse jsonString if parseResult Error Ok GD Print JSON Parse Error json GetErrorMessage in jsonString at line json GetErrorLine continue Get the data from the JSON object var nodeData new Godot Collections Dictionary string Variant Godot Collections Dictionary json Data Firstly we need to create the object and add it to the tree and set its position var newObjectScene GD Load PackedScene nodeData Filename ToString var newObject newObjectScene Instantiate Node GetNode nodeData Parent ToString AddChild newObject newObject Set Node2D PropertyName Position new Vector2 float nodeData PosX float nodeData PosY Now we set the remaining variables foreach var key value in nodeData if key Filename key Parent key PosX key PosY continue newObject Set key value Copy to clipboard Now we can save and load an arbitrary number of objects laid out almost anywhere across the scene tree Each object can store different data depending on what it needs to save Some notes We have glossed over setting up the game state for loading It s ultimately up to the project creator where much of this logic goes This is often complicated and will need to be heavily customized based on the needs of the individual project Additionally our implementation assumes no Persist objects are children of other Persist objects Otherwise invalid paths would be created To accommodate nested Persist objects consider saving objects in stages Load parent objects first so they are available for the add_child call when child objects are loaded You will also need a way to link children to parents as the NodePath will likely be invalid JSON vs binary serialization For simple game state JSON may work and it generates human readable files that are easy to debug But JSON has many limitations If you need to store more complex game state or a lot of it binary serialization may be a better approach JSON limitations Here are some important gotchas to know about when using JSON Filesize JSON stores data in text format which is much larger than binary formats Data types JSON only offers a limited set of data types If you have data types that JSON doesn t have you will need to translate your data to and from types that JSON can handle For example some important types that JSON can t parse are Vector2 Vector3 Color Rect2 and Quaternion Custom logic needed for encoding decoding If you have any custom classes that you want to store with JSON you will need to write your own logic for encoding and decoding those classes Binary serialization Binary serialization is an alternative approach for storing game state and you can use it with the functions get_var and store_var of FileAccess Binary serialization should produce smaller files than JSON Binary serialization can handle most common data types Binary serialization requires less custom logic for encoding and decoding custom classes Note that not all properties are included Only properties that are configured with the PROPERTY_USAGE_STORAGE flag set will be serialized You can add a new usage flag to a property by overriding the _get_property_list method in your class You can also check how property usage is configured by calling Object _get_property_list See PropertyUsageFlags for the possible usage flags User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Runtime file loading and saving See also See Saving games for information on saving and loading game progression Sometimes exporting packs patches and mods is not ideal when you want players to be able to load user generated content in your project It requires users to generate a PCK or ZIP file through the Godot editor which contains resources imported by Godot Example use cases for runtime file loading and saving include Loading texture packs designed for the game Loading user provided audio tracks and playing them back in an in game radio station Loading custom levels or 3D models that can be designed with any 3D DCC that can export to glTF including glTF scenes saved by Godot at runtime Using user provided fonts for menus and HUD Saving loading a file format that can contain multiple files but can still easily be read by other applications ZIP Loading files created by another game or program or even game data files from another game not made with Godot Runtime file loading can be combined with HTTP requests to load resources from the Internet directly Warning Do not use this runtime loading approach to load resources that are part of the project as it s less efficient and doesn t allow benefiting from Godot s resource handling functionality such as translation remaps See Import process for details See also You can see how saving and loading works in action using the Run time File Saving and Loading Serialization demo project Plain text and binary files Godot s FileAccess class provides methods to access files on the filesystem for reading and writing func save_file content var file FileAccess open path to file txt FileAccess WRITE file store_string content func load_file var file FileAccess open path to file txt FileAccess READ var content file get_as_text return content Copy to clipboard To handle custom binary formats such as loading file formats not supported by Godot FileAccess provides several methods to read write integers floats strings and more These FileAccess methods have names that start with get_ and store_ If you need more control over reading binary files or need to read binary streams that are not part of a file PackedByteArray provides several helper methods to decode encode series of bytes to integers floats strings and more These PackedByteArray methods have names that start with decode_ and encode_ See also Binary serialization API Images Image s Image load_from_file static method handles everything from format detection based on file extension to reading the file from disk If you need error handling or more control such as changing the scale an SVG is loaded at use one of the following methods depending on the file format Image load_jpg_from_buffer Image load_ktx_from_buffer Image load_png_from_buffer Image load_svg_from_buffer or Image load_svg_from_string Image load_tga_from_buffer Image load_webp_from_buffer Several image formats can also be saved by Godot at runtime using the following methods Image save_png or Image save_png_to_buffer Image save_webp or Image save_webp_to_buffer Image save_jpg or Image save_jpg_to_buffer Image save_exr or Image save_exr_to_buffer only available in editor builds cannot be used in exported projects The methods with the to_buffer suffix save the image to a PackedByteArray instead of the filesystem This is useful to send the image over the network or into a ZIP archive without having to write it on the filesystem This can increase performance by reducing I O utilization Note If displaying the loaded image on a 3D surface make sure to call Image generate_mipmaps so that the texture doesn t look grainy when viewed at a distance This is also useful in 2D when following instructions on reducing aliasing when downsampling Example of loading an image and displaying it in a TextureRect node which requires conversion to ImageTexture Load an image of any format supported by Godot from the filesystem var image Image load_from_file path Optionally generate mipmaps if displaying the texture on a 3D surface so that the texture doesn t look grainy when viewed at a distance image generate_mipmaps TextureRect texture ImageTexture create_from_image image Save the loaded Image to a PNG image image save_png path to file png Save the converted ImageTexture to a PNG image TextureRect texture get_image save_png path to file png Copy to clipboard Audio video files Godot supports loading Ogg Vorbis audio at runtime Note that not all files with an ogg extension may be Ogg Vorbis files Some may be Ogg Theora videos or contain Opus audio within an Ogg container These files will not load correctly as audio files in Godot Example of loading an Ogg Vorbis audio file in an AudioStreamPlayer node AudioStreamPlayer stream AudioStreamOggVorbis load_from_file path Copy to clipboard Example of loading an Ogg Theora video file in a VideoStreamPlayer node var video_stream_theora VideoStreamTheora new File extension is ignored so it is possible to load Ogg Theora videos that have an ogg extension this way video_stream_theora file path to file ogv VideoStreamPlayer stream video_stream_theora VideoStreamPlayer s Autoplay property won t work if the stream is empty before this property is set so call play after setting stream VideoStreamPlayer play Copy to clipboard Note Godot doesn t support runtime loading of MP3 or WAV files yet Until this is implemented it s feasible to implement runtime WAV loading using a script since AudioStreamWAV s data property is exposed to scripting It s still possible to save WAV files using AudioStreamWAV save_to_wav which is useful for procedurally generated audio or microphone recordings 3D scenes Godot has first class support for glTF 2 0 both in the editor and exported projects Using GLTFDocument and GLTFState together Godot can load and save glTF files in exported projects in both text gltf and binary glb formats The binary format should be preferred as it s faster to write and smaller but the text format is easier to debug Example of loading a glTF scene and appending its root node to the scene Load an existing glTF scene GLTFState is used by GLTFDocument to store the loaded scene s state GLTFDocument is the class that handles actually loading glTF data into a Godot node tree which means it supports glTF features such as lights and cameras var gltf_document_load GLTFDocument new var gltf_state_load GLTFState new var error gltf_document_load append_from_file path to file gltf gltf_state_load if error OK var gltf_scene_root_node gltf_document_load generate_scene gltf_state_load add_child gltf_scene_root_node else show_error Couldn t load glTF scene error code s error_string error Save a new glTF scene var gltf_document_save GLTFDocument new var gltf_state_save GLTFState new gltf_document_save append_from_scene gltf_scene_root_node gltf_state_save The file extension in the output path gltf or glb determines whether the output uses text or binary format GLTFDocument generate_buffer is also available for saving to memory gltf_document_save write_to_filesystem gltf_state_save path Copy to clipboard Note When loading a glTF scene a base path must be set so that external resources like textures can be loaded correctly When loading from a file the base path is automatically set to the folder containing the file When loading from a buffer this base path must be manually set as there is no way for Godot to infer this path To set the base path set GLTFState base_path on your GLTFState instance before calling GLTFDocument append_from_buffer or GLTFDocument append_from_file Fonts FontFile load_dynamic_font supports the following font file formats TTF OTF WOFF WOFF2 PFB PFM On the other hand FontFile load_bitmap_font supports the BMFont format fnt or font Additionally it is possible to load any font that is installed on the system using Godot s support for System fonts Example of loading a font file automatically according to its file extension then adding it as a theme override to a Label node var path path to font ttf var path_lower path to_lower var font_file FontFile new if path_lower ends_with ttf or path_lower ends_with otf or path_lower ends_with woff or path_lower ends_with woff2 or path_lower ends_with pfb or path_lower ends_with pfm font_file load_dynamic_font path elif path_lower ends_with fnt or path_lower ends_with font font_file load_bitmap_font path else push_error Invalid font file format if not font_file data is_empty If font was loaded successfully add it as a theme override Label add_theme_font_override font font_file Copy to clipboard ZIP archives Godot supports reading and writing ZIP archives using the ZIPReader and ZIPPacker classes This supports any ZIP file including files generated by Godot s Export PCK ZIP functionality although these will contain imported Godot resources rather than the original project files Note Use ProjectSettings load_resource_pack to load PCK or ZIP files exported by Godot as additional data packs That approach is preferred for DLCs as it makes interacting with additional data packs seamless virtual filesystem This ZIP archive support can be combined with runtime image 3D scene and audio loading to provide a seamless modding experience without requiring users to go through the Godot editor to generate PCK ZIP files Example that lists files in a ZIP archive in an ItemList node then writes contents read from it to a new ZIP archive essentially duplicating the archive Load an existing ZIP archive var zip_reader ZIPReader new zip_reader open path var files zip_reader get_files The list of files isn t sorted by default Sort it for more consistent processing files sort for file in files ItemList add_item file null Make folders disabled in the list ItemList set_item_disabled 1 file ends_with Save a new ZIP archive var zip_packer ZIPPacker new var error zip_packer open path if error OK push_error Couldn t open path for saving ZIP archive error code s error_string error return Reuse the above ZIPReader instance to read files from an existing ZIP archive for file in zip_reader get_files zip_packer start_file file zip_packer write_file zip_reader read_file file zip_packer close_file zip_packer close Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Binary serialization API Introduction Godot has a serialization API based on Variant It s used for converting data types to an array of bytes efficiently This API is exposed via the global bytes_to_var and var_to_bytes functions but it is also used in the get_var and store_var methods of FileAccess as well as the packet APIs for PacketPeer This format is not used for binary scenes and resources Full Objects vs Object instance IDs If a variable is serialized with full_objects true then any Objects contained in the variable will be serialized and included in the result This is recursive If full_objects false then only the instance IDs will be serialized for any Objects contained in the variable Packet specification The packet is designed to be always padded to 4 bytes All values are little endian encoded All packets have a 4 byte header representing an integer specifying the type of data The lowest value two bytes are used to determine the type while the highest value two bytes contain flags base_type val 0xFFFF flags val 16 Copy to clipboard Type Value 0 null 1 bool 2 integer 3 float 4 string 5 vector2 6 rect2 7 vector3 8 transform2d 9 plane 10 quaternion 11 aabb 12 basis 13 transform3d 14 color 15 node path 16 rid 17 object 18 dictionary 19 array 20 raw array 21 int32 array 22 int64 array 23 float32 array 24 float64 array 25 string array 26 vector2 array 27 vector3 array 28 color array 29 max Following this is the actual packet contents which varies for each type of packet Note that this assumes Godot is compiled with single precision floats which is the default If Godot was compiled with double precision floats the length of Float fields within data structures should be 8 and the offset should be offset 4 2 4 The float type itself always uses double precision 0 null 1 bool Offset Len Type Description 4 4 Integer 0 for False 1 for True 2 int If no flags are set flags 0 the integer is sent as a 32 bit integer Offset Len Type Description 4 4 Integer 32 bit signed integer If flag ENCODE_FLAG_64 is set flags 1 1 the integer is sent as a 64 bit integer Offset Len Type Description 4 8 Integer 64 bit signed integer 3 float If no flags are set flags 0 the float is sent as a 32 bit single precision Offset Len Type Description 4 4 Float IEEE 754 single precision float If flag ENCODE_FLAG_64 is set flags 1 1 the float is sent as a 64 bit double precision number Offset Len Type Description 4 8 Float IEEE 754 double precision float 4 String Offset Len Type Description 4 4 Integer String length in bytes 8 X Bytes UTF 8 encoded string This field is padded to 4 bytes 5 Vector2 Offset Len Type Description 4 4 Float X coordinate 8 4 Float Y coordinate 6 Rect2 Offset Len Type Description 4 4 Float X coordinate 8 4 Float Y coordinate 12 4 Float X size 16 4 Float Y size 7 Vector3 Offset Len Type Description 4 4 Float X coordinate 8 4 Float Y coordinate 12 4 Float Z coordinate 8 Transform2D Offset Len Type Description 4 4 Float The X component of the X column vector accessed via 0 0 8 4 Float The Y component of the X column vector accessed via 0 1 12 4 Float The X component of the Y column vector accessed via 1 0 16 4 Float The Y component of the Y column vector accessed via 1 1 20 4 Float The X component of the origin vector accessed via 2 0 24 4 Float The Y component of the origin vector accessed via 2 1 9 Plane Offset Len Type Description 4 4 Float Normal X 8 4 Float Normal Y 12 4 Float Normal Z 16 4 Float Distance 10 Quaternion Offset Len Type Description 4 4 Float Imaginary X 8 4 Float Imaginary Y 12 4 Float Imaginary Z 16 4 Float Real W 11 AABB Offset Len Type Description 4 4 Float X coordinate 8 4 Float Y coordinate 12 4 Float Z coordinate 16 4 Float X size 20 4 Float Y size 24 4 Float Z size 12 Basis Offset Len Type Description 4 4 Float The X component of the X column vector accessed via 0 0 8 4 Float The Y component of the X column vector accessed via 0 1 12 4 Float The Z component of the X column vector accessed via 0 2 16 4 Float The X component of the Y column vector accessed via 1 0 20 4 Float The Y component of the Y column vector accessed via 1 1 24 4 Float The Z component of the Y column vector accessed via 1 2 28 4 Float The X component of the Z column vector accessed via 2 0 32 4 Float The Y component of the Z column vector accessed via 2 1 36 4 Float The Z component of the Z column vector accessed via 2 2 13 Transform3D Offset Len Type Description 4 4 Float The X component of the X column vector accessed via 0 0 8 4 Float The Y component of the X column vector accessed via 0 1 12 4 Float The Z component of the X column vector accessed via 0 2 16 4 Float The X component of the Y column vector accessed via 1 0 20 4 Float The Y component of the Y column vector accessed via 1 1 24 4 Float The Z component of the Y column vector accessed via 1 2 28 4 Float The X component of the Z column vector accessed via 2 0 32 4 Float The Y component of the Z column vector accessed via 2 1 36 4 Float The Z component of the Z column vector accessed via 2 2 40 4 Float The X component of the origin vector accessed via 3 0 44 4 Float The Y component of the origin vector accessed via 3 1 48 4 Float The Z component of the origin vector accessed via 3 2 14 Color Offset Len Type Description 4 4 Float Red typically 0 1 can be above 1 for overbright colors 8 4 Float Green typically 0 1 can be above 1 for overbright colors 12 4 Float Blue typically 0 1 can be above 1 for overbright colors 16 4 Float Alpha 0 1 15 NodePath Offset Len Type Description 4 4 Integer String length or new format val 0x80000000 0 and NameCount val 0x7FFFFFFF For old format Offset Len Type Description 8 X Bytes UTF 8 encoded string Padded to 4 bytes For new format Offset Len Type Description 4 4 Integer Sub name count 8 4 Integer Flags absolute val 1 0 For each Name and Sub Name Offset Len Type Description X 0 4 Integer String length X 4 X Bytes UTF 8 encoded string Every name string is padded to 4 bytes 16 RID unsupported 17 Object An Object could be serialized in three different ways as a null value with full_objects false or with full_objects true A null value Offset Len Type Description 4 4 Integer Zero 32 bit signed integer full_objects disabled Offset Len Type Description 4 8 Integer The Object instance ID 64 bit signed integer full_objects enabled Offset Len Type Description 4 4 Integer Class name String length 8 X Bytes Class name UTF 8 encoded string X 8 4 Integer The number of properties that are serialized For each property Offset Len Type Description Y 4 Integer Property name String length Y 4 Z Bytes Property name UTF 8 encoded string Y 4 Z W variable Property value using this same format Note Not all properties are included Only properties that are configured with the PROPERTY_USAGE_STORAGE flag set will be serialized You can add a new usage flag to a property by overriding the _get_property_list method in your class You can also check how property usage is configured by calling Object _get_property_list See PropertyUsageFlags for the possible usage flags 18 Dictionary Offset Len Type Description 4 4 Integer val 0x7FFFFFFF elements val 0x80000000 shared bool Then what follows is for amount of elements pairs of key and value one after the other using this same format 19 Array Offset Len Type Description 4 4 Integer val 0x7FFFFFFF elements val 0x80000000 shared bool Then what follows is for amount of elements values one after the other using this same format 20 PackedByteArray Offset Len Type Description 4 4 Integer Array length Bytes 8 8 length 1 Byte Byte 0 255 The array data is padded to 4 bytes 21 PackedInt32Array Offset Len Type Description 4 4 Integer Array length Integers 8 8 length 4 4 Integer 32 bit signed integer 22 PackedInt64Array Offset Len Type Description 4 8 Integer Array length Integers 8 8 length 8 8 Integer 64 bit signed integer 23 PackedFloat32Array Offset Len Type Description 4 4 Integer Array length Floats 8 8 length 4 4 Integer 32 bit IEEE 754 single precision float 24 PackedFloat64Array Offset Len Type Description 4 4 Integer Array length Floats 8 8 length 8 8 Integer 64 bit IEEE 754 double precision float 25 PackedStringArray Offset Len Type Description 4 4 Integer Array length Strings For each String Offset Len Type Description X 0 4 Integer String length X 4 X Bytes UTF 8 encoded string Every string is padded to 4 bytes 26 PackedVector2Array Offset Len Type Description 4 4 Integer Array length 8 8 length 8 4 Float X coordinate 8 12 length 8 4 Float Y coordinate 27 PackedVector3Array Offset Len Type Description 4 4 Integer Array length 8 8 length 12 4 Float X coordinate 8 12 length 12 4 Float Y coordinate 8 16 length 12 4 Float Z coordinate 28 PackedColorArray Offset Len Type Description 4 4 Integer Array length 8 8 length 16 4 Float Red typically 0 1 can be above 1 for overbright colors 8 12 length 16 4 Float Green typically 0 1 can be above 1 for overbright colors 8 16 length 16 4 Float Blue typically 0 1 can be above 1 for overbright colors 8 20 length 16 4 Float Alpha 0 1 User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Internationalization Internationalizing games Localization using gettext Locale codes Pseudolocalization Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Internationalizing games Introduction While indie or niche games usually do not need localization games targeting a more massive market often require localization Godot offers many tools to make this process more straightforward so this tutorial is more like a collection of tips and tricks Localization is usually done by specific studios hired for the job Despite the huge amount of software and file formats available for this the most common way to do localization to this day is still with spreadsheets The process of creating the spreadsheets and importing them is already covered in the Importing translations tutorial If you haven t read the Importing translations page before we recommend you give it a read before reading this page Note We will be using the official demo as an example you can download it from the Asset Library Configuring the imported translation Translations can get updated and re imported when they change but they still have to be added to the project This is done in Project Project Settings Localization The above dialog is used to add or remove translations project wide Localizing resources It is also possible to instruct Godot to use alternate versions of assets resources depending on the current language This can be used for localized images such as in game billboards or localized voices The Remaps tab can be used for this Select the resource to be remapped then add some alternatives for each locale Note The resource remapping system isn t supported for DynamicFonts To use different fonts depending on the language s script use the DynamicFont fallback system instead which lets you define as many fallback fonts as you want The upside of the DynamicFont fallback system is that it works regardless of the current language making it ideal for things like multiplayer chat where the text language may not match the client s language Converting keys to text Some controls such as Button and Label will automatically fetch a translation if their text matches a translation key For example if a label s text is MAIN_SCREEN_GREETING1 and that key exists in the current translation then the text will automatically be translated This automatic translation behavior may be undesirable in certain cases For instance when using a Label to display a player s name you most likely don t want the player s name to be translated if it matches a translation key To disable automatic translation on a specific node disable Localization Auto Translate in the inspector In code the Object tr function can be used This will just look up the text in the translations and convert it if found level text tr LEVEL_5_NAME status text tr GAME_STATUS_ d status_index Copy to clipboard Note If no text is displayed after changing the language try to use a different font The default project font only supports a subset of the Latin 1 character set which cannot be used to display languages like Russian or Chinese A good resource for multilingual fonts is Noto Fonts Make sure to download the correct variation if you re using a less common language Once you ve downloaded the font load the TTF file into a DynamicFont resource and use it as a custom font of your Control node For better reusability associate a new a Theme resource to your root Control node and define the DynamicFont as the Default Font in the theme Placeholders To feature placeholders in your translated strings use GDScript format strings or the equivalent feature in C This lets translators move the location of the placeholder in the string freely which allows translations to sound more natural Named placeholders with the String format function should be used whenever possible as they also allow translators to choose the order in which placeholders appear The placeholder s locations can be changed but not their order This will probably not suffice for some target languages message text tr s picked up the s Ogre Sword The placeholder s locations and order can be changed Additionally this form gives more context for translators to work with message text tr character picked up the weapon format character Ogre weapon Sword Copy to clipboard Translation contexts If you re using plain English as source strings rather than message codes LIKE_THIS you may run into ambiguities when you have to translate the same English string to different strings in certain target languages You can optionally specify a translation context to resolve this ambiguity and allow target languages to use different strings even though the source string is identical Close as in an action to close something button set_text tr Close Actions Close as in a distance opposite of far distance_label set_text tr Close Distance Copy to clipboard Pluralization Most languages require different strings depending on whether an object is in singular or plural form However hardcoding the is plural condition depending on whether there is more than 1 object is not valid in all languages Some languages have more than two plural forms and the rules on the number of objects required for each plural form vary Godot offers support for pluralization so that the target locales can handle this automatically Pluralization is meant to be used with positive or zero integer numbers only Negative and floating point values usually represent physical entities for which singular and plural don t clearly apply var num_apples 5 label text tr_n There is d apple There are d apples num_apples num_apples Copy to clipboard This can be combined with a context if needed var num_jobs 1 label text tr_n d job d jobs num_jobs Task Manager num_jobs Copy to clipboard Note Providing pluralized translations is only supported with Localization using gettext not CSV Making controls resizable The same text in different languages can vary greatly in length For this make sure to read the tutorial on Size and anchors as dynamically adjusting control sizes may help Container can be useful as well as the text wrapping options available in Label To check whether your UI can accommodate translations with longer strings than the original you can enable pseudolocalization in the advanced Project Settings This will replace all your localizable strings with longer versions of themselves while also replacing some characters in the original strings with accented versions while still being readable Placeholders are kept as is so that they keep working when pseudolocalization is enabled For example the string Hello world this is s becomes Ĥéłłô ŵôŕłd ŧh íš íš s when pseudolocalization is enabled While looking strange at first pseudolocalization has several benefits It lets you spot non localizable strings quickly so you can go over them and make them localizable if it makes sense to do so It lets you check UI elements that can t fit long strings Many languages will feature much longer translations than the source text so it s important to ensure your UI can accommodate longer than usual strings It lets you check whether your font contains all the characters required to support various languages However since the goal of pseudolocalization is to keep the original strings readable it s not an effective test for checking whether a font can support CJK or right to left languages The project settings allow you to tune pseudolocalization behavior so that you can disable parts of it if desired TranslationServer Godot has a server handling low level translation management called the TranslationServer Translations can be added or removed during run time the current language can also be changed at run time Bidirectional text and UI Mirroring Arabic and Hebrew are written from right to left except for the numbers and Latin words mixed in and the user interface for these languages should be mirrored as well In some languages the shape of a glyph changes depending on the surrounding characters Support for bidirectional writing systems and UI mirroring is transparent you don t usually need to change anything or have any knowledge of the specific writing system For RTL languages Godot will automatically do the following changes to the UI Mirrors left right anchors and margins Swaps left and right text alignment Mirrors horizontal order of the child controls in the containers and items in Tree ItemList controls Uses mirrored order of the internal control elements e g OptionButton dropdown button checkbox alignment List column order Tree item icons and connecting line alignment e t c in some cases mirrored controls use separate theme styles Coordinate system is not mirrored and non UI nodes sprites e t c are not affected It is possible to override text and control layout direction by using the following control properties text_direction sets the base text direction When set to auto direction depends on the first strong directional character in the text according to the Unicode Bidirectional Algorithm language overrides current project locale structured_text_bidi_override property and _structured_text_parser callback enables special handling for structured text layout_direction overrides control mirroring See also You can see how right to left typesetting works in action using the BiDI and Font Features demo project Adding break iterator data to exported project Some languages are written without spaces and word and line breaking requires more than rules over character sequences Godot includes ICU rule and dictionary based break iterator data but this data is not included into exported projects by default To include it go to Project Project Settings Localization Text Server Data and click Install support data Break iterator data is about 4 MB large Structured text BiDi override Unicode BiDi algorithm is designed to work with natural text and it s incapable of handling text with the higher level order like file names URIs email addresses regular expressions or source code For example the path for this shown directory structure will be displayed incorrectly top LineEdit control File type structured text override splits text into segments then BiDi algorithm is applied to each of them individually to correctly display directory names in any language and preserve correct order of the folders bottom LineEdit control Custom callbacks provide a way to override BiDi for the other types of structured text Localizing numbers Controls specifically designed for number input or output e g ProgressBar SpinBox will use localized numbering system automatically for the other control TextServer format_number string language can be used to convert Western Arabic numbers 0 9 to the localized numbering system and TextServer parse_number string language to convert it back Localizing icons and images Icons with left and right pointing arrows which may need to be reversed for Arabic and Hebrew locales in case they indicate movement or direction e g back forward buttons Otherwise they can remain the same Testing translations You may want to test a project s translation before releasing it Godot provides two ways to do this First in the Project Settings under Internationalization Locale with advanced settings enabled there is a Test property Set this property to the locale code of the language you want to test Godot will run the project with that locale when the project is run either from the editor or when exported Keep in mind that since this is a project setting it will show up in version control when it is set to a non empty value Therefore it should be set back to an empty value before committing changes to version control Translations can also be tested when running Godot from the command line For example to test a game in French the following argument can be supplied godot language fr Copy to clipboard Translating the project name The project name becomes the app name when exporting to different operating systems and platforms To specify the project name in more than one language go to Project Project Settings Application Config From here click on the button that says Localizable String Size 0 Now there should be a button below that which says Add Translation Click on that and it will take you to a page where you can choose the language and country if needed for your project name translation After doing that you can now type in the localized name If you are unsure about the language code to use refer to the list of locale codes User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Localization using gettext In addition to Importing translations in CSV format Godot also supports loading translation files written in the GNU gettext format text based po and compiled mo since Godot 4 0 Note For an introduction to gettext check out A Quick Gettext Tutorial It s written with C projects in mind but much of the advice also applies to Godot with the exception of xgettext Advantages gettext is a standard format which can be edited using any text editor or GUI editors such as Poedit gettext is supported by translation platforms such as Transifex and Weblate which makes it easier for people to collaborate to localization Compared to CSV gettext works better with version control systems like Git as each locale has its own messages file Multiline strings are more convenient to edit in gettext files compared to CSV files Disadvantages gettext is a more complex format than CSV and can be harder to grasp for people new to software localization People who maintain localization files will have to install gettext tools on their system However as Godot supports using text based message files po translators can test their work without having to install gettext tools Installing gettext tools The command line gettext tools are required to perform maintenance operations such as updating message files Therefore it s strongly recommended to install them Windows Download an installer from this page Any architecture and binary type shared or static works if in doubt choose the 64 bit static installer macOS Install gettext either using Homebrew with the brew install gettext command or using MacPorts with the sudo port install gettext command Linux On most distributions install the gettext package from your distribution s package manager Creating the PO template Automatic generation using the editor Since Godot 4 0 the editor can generate a PO template automatically from specified scene and GDScript files This POT generation also supports translation contexts and pluralization if used in a script with the optional second argument of tr and the tr_n method Open the Project Settings Localization POT Generation tab then use the Add button to specify the path to your project s scenes and scripts that contain localizable strings Creating a PO template in the Localization POT Generation tab of the Project Settings After adding at least one scene or script click Generate POT in the top right corner then specify the path to the output file This file can be placed anywhere in the project directory but it s recommended to keep it in a subdirectory such as locale as each locale will be defined in its own file You can then move over to creating a messages file from a PO template Note Remember to regenerate the PO template after making any changes to localizable strings or after adding new scenes or scripts Otherwise newly added strings will not be localizable and translators won t be able to update translations for outdated strings Manual creation If the automatic generation approach doesn t work out for your needs you can create a PO template by hand in a text editor This file can be placed anywhere in the project directory but it s recommended to keep it in a subdirectory as each locale will be defined in its own file Create a directory named locale in the project directory In this directory save a file named messages pot with the following contents Don t remove the two lines below they re required for gettext to work correctly msgid msgstr Example of a regular string msgid Hello world msgstr Example of a string with pluralization msgid There is d apple msgid_plural There are d apples msgstr 0 msgstr 1 Example of a string with a translation context msgctxt Actions msgid Close msgstr Copy to clipboard Messages in gettext are made of msgid and msgstr pairs msgid is the source string usually in English msgstr will be the translated string Warning The msgstr value in PO template files pot should always be empty Localization will be done in the generated po files instead Creating a messages file from a PO template The msginit command is used to turn a PO template into a messages file For instance to create a French localization file use the following command while in the locale directory msginit no translator input messages pot locale fr Copy to clipboard The command above will create a file named fr po in the same directory as the PO template Alternatively you can do that graphically using Poedit or by uploading the POT file to your web platform of choice Loading a messages file in Godot To register a messages file as a translation in a project open the Project Settings then go to the Localization tab In Translations click Add then choose the po or mo file in the file dialog The locale will be inferred from the Language code n property in the messages file Note See Internationalizing games for more information on importing and testing translations in Godot Updating message files to follow the PO template After updating the PO template you will have to update message files so that they contain new strings while removing strings that are no longer present in the PO template This can be done automatically using the msgmerge tool The order matters specify the message file then the PO template msgmerge update backup none fr po messages pot Copy to clipboard If you want to keep a backup of the original message file which would be saved as fr po in this example remove the backup none argument Note After running msgmerge strings which were modified in the source language will have a fuzzy comment added before them in the po file This comment denotes that the translation should be updated to match the new source string as the translation will most likely be inaccurate until it s updated Strings with fuzzy comments will not be read by Godot until the translation is updated and the fuzzy comment is removed Checking the validity of a PO file or template It is possible to check whether a gettext file s syntax is valid by running the command below msgfmt fr po check Copy to clipboard If there are syntax errors or warnings they will be displayed in the console Otherwise msgfmt won t output anything Using binary MO files useful for large projects only For large projects with several thousands of strings to translate or more it can be worth it to use binary compiled MO message files instead of text based PO files Binary MO files are smaller and faster to read than the equivalent PO files You can generate an MO file with the command below msgfmt fr po no hash o fr mo Copy to clipboard If the PO file is valid this command will create a fr mo file besides the PO file This MO file can then be loaded in Godot as described above The original PO file should be kept in version control so you can update your translation in the future In case you lose the original PO file and wish to decompile an MO file into a text based PO file you can do so with msgunfmt fr mo fr po Copy to clipboard The decompiled file will not include comments or fuzzy strings as these are never compiled in the MO file in the first place User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Locale codes Locale code has the following format language_Script_COUNTRY_VARIANT where language 2 or 3 letter language code in lower case Script optional 4 letter script code in title case COUNTRY optional 2 letter country code in upper case VARIANT optional language variant region and sort order A variant can have any number of underscored keywords List of supported language codes Language code Name aa Afar ab Abkhazian ace Achinese ach Acoli ada Adangme ady Adyghe ae Avestan aeb Tunisian Arabic af Afrikaans afh Afrihili agq Aghem ain Ainu agr Aguaruna ak Akan akk Akkadian akz Alabama ale Aleut aln Gheg Albanian alt Southern Altai am Amharic an Aragonese ang Old English anp Angika ar Arabic arc Aramaic arn Mapudungun aro Araona arp Arapaho arq Algerian Arabic ars Najdi Arabic arw Arawak ary Moroccan Arabic arz Egyptian Arabic as Assamese asa Asu ase American Sign Language ast Asturian av Avaric avk Kotava awa Awadhi ayc Southern Aymara ay Aymara az Azerbaijani ba Bashkir bal Baluchi ban Balinese bar Bavarian bas Bassa bax Bamun bbc Batak Toba bbj Ghomala be Belarusian bej Beja bem Bemba ber Berber bew Betawi bez Bena bfd Bafut bfq Badaga bg Bulgarian bhb Bhili bgn Western Balochi bho Bhojpuri bi Bislama bik Bikol bin Bini bjn Banjar bkm Kom bla Siksika bm Bambara bn Bengali bo Tibetan bpy Bishnupriya bqi Bakhtiari br Breton brh Brahui brx Bodo bs Bosnian bss Akoose bua Buriat bug Buginese bum Bulu byn Bilin byv Medumba ca Catalan cad Caddo car Carib cay Cayuga cch Atsam ccp Chakma ce Chechen ceb Cebuano cgg Chiga ch Chamorro chb Chibcha chg Chagatai chk Chuukese chm Mari chn Chinook Jargon cho Choctaw chp Chipewyan chr Cherokee chy Cheyenne cic Chickasaw ckb Central Kurdish csb Kashubian cmn Mandarin Chinese co Corsican cop Coptic cps Capiznon cr Cree crh Crimean Tatar crs Seselwa Creole French cs Czech csb Kashubian cu Church Slavic cv Chuvash cy Welsh da Danish dak Dakota dar Dargwa dav Taita de German del Delaware den Slave dgr Dogrib din Dinka dje Zarma doi Dogri dsb Lower Sorbian dtp Central Dusun dua Duala dum Middle Dutch dv Dhivehi dyo Jola Fonyi dyu Dyula dz Dzongkha dzg Dazaga ebu Embu ee Ewe efi Efik egl Emilian egy Ancient Egyptian eka Ekajuk el Greek elx Elamite en English enm Middle English eo Esperanto es Spanish esu Central Yupik et Estonian eu Basque ewo Ewondo ext Extremaduran fa Persian fan Fang fat Fanti ff Fulah fi Finnish fil Filipino fit Tornedalen Finnish fj Fijian fo Faroese fon Fon fr French frc Cajun French frm Middle French fro Old French frp Arpitan frr Northern Frisian frs Eastern Frisian fur Friulian fy Western Frisian ga Irish gaa Ga gag Gagauz gan Gan Chinese gay Gayo gba Gbaya gbz Zoroastrian Dari gd Scottish Gaelic gez Geez gil Gilbertese gl Galician glk Gilaki gmh Middle High German gn Guarani goh Old High German gom Goan Konkani gon Gondi gor Gorontalo got Gothic grb Grebo grc Ancient Greek gsw Swiss German gu Gujarati guc Wayuu gur Frafra guz Gusii gv Manx gwi Gwichʼin ha Hausa hai Haida hak Hakka Chinese haw Hawaiian he iw Hebrew hi Hindi hif Fiji Hindi hil Hiligaynon hit Hittite hmn Hmong ho Hiri Motu hne Chhattisgarhi hr Croatian hsb Upper Sorbian hsn Xiang Chinese ht Haitian hu Hungarian hup Hupa hus Huastec hy Armenian hz Herero ia Interlingua iba Iban ibb Ibibio id in Indonesian ie Interlingue ig Igbo ii Sichuan Yi ik Inupiaq ilo Iloko inh Ingush io Ido is Icelandic it Italian iu Inuktitut izh Ingrian ja Japanese jam Jamaican Creole English jbo Lojban jgo Ngomba jmc Machame jpr Judeo Persian jrb Judeo Arabic jut Jutish jv Javanese ka Georgian kaa Kara Kalpak kab Kabyle kac Kachin kaj Jju kam Kamba kaw Kawi kbd Kabardian kbl Kanembu kcg Tyap kde Makonde kea Kabuverdianu ken Kenyang kfo Koro kg Kongo kgp Kaingang kha Khasi kho Khotanese khq Koyra Chiini khw Khowar ki Kikuyu kiu Kirmanjki kj Kuanyama kk Kazakh kkj Kako kl Kalaallisut kln Kalenjin km Central Khmer kmb Kimbundu kn Kannada ko Korean koi Komi Permyak kok Konkani kos Kosraean kpe Kpelle kr Kanuri krc Karachay Balkar kri Krio krj Kinaray a krl Karelian kru Kurukh ks Kashmiri ksb Shambala ksf Bafia ksh Colognian ku Kurdish kum Kumyk kut Kutenai kv Komi kw Cornish ky Kirghiz lag Langi la Latin lad Ladino lag Langi lah Lahnda lam Lamba lb Luxembourgish lez Lezghian lfn Lingua Franca Nova lg Ganda li Limburgan lij Ligurian liv Livonian lkt Lakota lmo Lombard ln Lingala lo Lao lol Mongo lou Louisiana Creole loz Lozi lrc Northern Luri lt Lithuanian ltg Latgalian lu Luba Katanga lua Luba Lulua lui Luiseno lun Lunda luo Luo lus Mizo luy Luyia lv Latvian lzh Literary Chinese lzz Laz mad Madurese maf Mafa mag Magahi mai Maithili mak Makasar man Mandingo mas Masai mde Maba mdf Moksha mdr Mandar men Mende mer Meru mfe Morisyen mg Malagasy mga Middle Irish mgh Makhuwa Meetto mgo Metaʼ mh Marshallese mhr Eastern Mari mi Māori mic Mi kmaq min Minangkabau miq Mískito mjw Karbi mk Macedonian ml Malayalam mn Mongolian mnc Manchu mni Manipuri mnw Mon mos Mossi moh Mohawk mr Marathi mrj Western Mari ms Malay mt Maltese mua Mundang mus Muscogee mwl Mirandese mwr Marwari mwv Mentawai my Burmese mye Myene myv Erzya mzn Mazanderani na Nauru nah Nahuatl nan Min Nan Chinese nap Neapolitan naq Nama nan Min Nan Chinese nb no Norwegian Bokmål nd North Ndebele nds Low German ne Nepali new Newari nhn Central Nahuatl ng Ndonga nia Nias niu Niuean njo Ao Naga nl Dutch nmg Kwasio nn Norwegian Nynorsk nnh Ngiemboon nog Nogai non Old Norse nov Novial nqo N ko nr South Ndebele nso Pedi nus Nuer nv Navajo nwc Classical Newari ny Nyanja nym Nyamwezi nyn Nyankole nyo Nyoro nzi Nzima oc Occitan oj Ojibwa om Oromo or Odia os Ossetic osa Osage ota Ottoman Turkish pa Panjabi pag Pangasinan pal Pahlavi pam Pampanga pap Papiamento pau Palauan pcd Picard pcm Nigerian Pidgin pdc Pennsylvania German pdt Plautdietsch peo Old Persian pfl Palatine German phn Phoenician pi Pali pl Polish pms Piedmontese pnt Pontic pon Pohnpeian pr Pirate prg Prussian pro Old Provençal prs Dari ps Pushto pt Portuguese qu Quechua quc K iche qug Chimborazo Highland Quichua quy Ayacucho Quechua quz Cusco Quechua raj Rajasthani rap Rapanui rar Rarotongan rgn Romagnol rif Riffian rm Romansh rn Rundi ro Romanian rof Rombo rom Romany rtm Rotuman ru Russian rue Rusyn rug Roviana rup Aromanian rw Kinyarwanda rwk Rwa sa Sanskrit sad Sandawe sah Sakha sam Samaritan Aramaic saq Samburu sas Sasak sat Santali saz Saurashtra sba Ngambay sbp Sangu sc Sardinian scn Sicilian sco Scots sd Sindhi sdc Sassarese Sardinian sdh Southern Kurdish se Northern Sami see Seneca seh Sena sei Seri sel Selkup ses Koyraboro Senni sg Sango sga Old Irish sgs Samogitian sh Serbo Croatian shi Tachelhit shn Shan shs Shuswap shu Chadian Arabic si Sinhala sid Sidamo sk Slovak sl Slovenian sli Lower Silesian sly Selayar sm Samoan sma Southern Sami smj Lule Sami smn Inari Sami sms Skolt Sami sn Shona snk Soninke so Somali sog Sogdien son Songhai sq Albanian sr Serbian srn Sranan Tongo srr Serer ss Swati ssy Saho st Southern Sotho stq Saterland Frisian su Sundanese suk Sukuma sus Susu sux Sumerian sv Swedish sw Swahili swb Comorian swc Congo Swahili syc Classical Syriac syr Syriac szl Silesian ta Tamil tcy Tulu te Telugu tem Timne teo Teso ter Tereno tet Tetum tg Tajik th Thai the Chitwania Tharu ti Tigrinya tig Tigre tiv Tiv tk Turkmen tkl Tokelau tkr Tsakhur tl Tagalog tlh Klingon tli Tlingit tly Talysh tmh Tamashek tn Tswana to Tongan tog Nyasa Tonga tpi Tok Pisin tr Turkish tru Turoyo trv Taroko ts Tsonga tsd Tsakonian tsi Tsimshian tt Tatar ttt Muslim Tat tum Tumbuka tvl Tuvalu tw Twi twq Tasawaq ty Tahitian tyv Tuvinian tzm Central Atlas Tamazight udm Udmurt ug Uyghur uga Ugaritic uk Ukrainian umb Umbundu unm Unami ur Urdu uz Uzbek vai Vai ve Venda vec Venetian vep Veps vi Vietnamese vls West Flemish vmf Main Franconian vo Volapük vot Votic vro Võro vun Vunjo wa Walloon wae Walser wal Wolaytta war Waray was Washo wbp Warlpiri wo Wolof wuu Wu Chinese xal Kalmyk xh Xhosa xmf Mingrelian xog Soga yao Yao yap Yapese yav Yangben ybb Yemba yi Yiddish yo Yoruba yrl Nheengatu yue Yue Chinese yuw Papua New Guinea za Zhuang zap Zapotec zbl Blissymbols zea Zeelandic zen Zenaga zgh Standard Moroccan Tamazight zh Chinese zu Zulu zun Zuni zza Zaza List of supported script codes Script code Name Adlm Adlam Afak Afaka Aghb Caucasian Albanian Ahom Ahom Arab Arabic Armi Imperial Aramaic Armn Armenian Avst Avestan Bali Balinese Bamu Bamum Bass Bassa Vah Batk Batak Beng Bengali Bhks Bhaiksuki Blis Blissymbols Bopo Bopomofo Brah Brahmi Brai Braille Bugi Buginese Buhd Buhid Cakm Chakma Cans Unified Canadian Aboriginal Cari Carian Cham Cham Cher Cherokee Chrs Chorasmian Cirt Cirth Copt Coptic Cpmn Cypro Minoan Cprt Cypriot Cyrl Cyrillic Deva Devanagari Diak Dives Akuru Dogr Dogra Dsrt Deseret Dupl Duployan Egyd Egyptian demotic Egyh Egyptian hieratic Egyp Egyptian hieroglyphs Elba Elbasan Elym Elymaic Ethi Ethiopic Geok Khutsuri Geor Georgian Glag Glagolitic Gong Gunjala Gondi Gonm Masaram Gondi Goth Gothic Gran Grantha Grek Greek Gujr Gujarati Guru Gurmukhi Hang Hangul Hani Han Hano Hanunoo Hans Simplified Hant Traditional Hatr Hatran Hebr Hebrew Hira Hiragana Hluw Anatolian Hieroglyphs Hmng Pahawh Hmong Hmnp Nyiakeng Puachue Hmong Hung Old Hungarian Inds Indus Ital Old Italic Java Javanese Jurc Jurchen Kali Kayah Li Kana Katakana Khar Kharoshthi Khmr Khmer Khoj Khojki Kitl Khitan large script Kits Khitan small script Knda Kannada Kpel Kpelle Kthi Kaithi Lana Tai Tham Laoo Lao Latn Latin Leke Leke Lepc Lepcha Limb Limbu Lina Linear A Linb Linear B Lisu Lisu Loma Loma Lyci Lycian Lydi Lydian Mahj Mahajani Maka Makasar Mand Mandaic Mani Manichaean Marc Marchen Maya Mayan Hieroglyphs Medf Medefaidrin Mend Mende Kikakui Merc Meroitic Cursive Mero Meroitic Hieroglyphs Mlym Malayalam Modi Modi Mong Mongolian Moon Moon Mroo Mro Mtei Meitei Mayek Mult Multani Mymr Myanmar Burmese Nand Nandinagari Narb Old North Arabian Nbat Nabataean Newa Newa Nkdb Naxi Dongba Nkgb Nakhi Geba Nkoo N ko Nshu Nüshu Ogam Ogham Olck Ol Chiki Orkh Old Turkic Orya Oriya Osge Osage Osma Osmanya Ougr Old Uyghur Palm Palmyrene Pauc Pau Cin Hau Pcun Proto Cuneiform Pelm Proto Elamite Perm Old Permic Phag Phags pa Phli Inscriptional Pahlavi Phlp Psalter Pahlavi Phlv Book Pahlavi Phnx Phoenician Piqd Klingon Plrd Miao Prti Inscriptional Parthian Psin Proto Sinaitic Ranj Ranjana Rjng Rejang Rohg Hanifi Rohingya Roro Rongorongo Runr Runic Samr Samaritan Sara Sarati Sarb Old South Arabian Saur Saurashtra Sgnw SignWriting Shaw Shavian Shrd Sharada Shui Shuishu Sidd Siddham Sind Khudawadi Sinh Sinhala Sogd Sogdian Sogo Old Sogdian Sora Sora Sompeng Soyo Soyombo Sund Sundanese Sylo Syloti Nagri Syrc Syriac Tagb Tagbanwa Takr Takri Tale Tai Le Talu New Tai Lue Taml Tamil Tang Tangut Tavt Tai Viet Telu Telugu Teng Tengwar Tfng Tifinagh Tglg Tagalog Thaa Thaana Thai Thai Tibt Tibetan Tirh Tirhuta Tnsa Tangsa Toto Toto Ugar Ugaritic Vaii Vai Visp Visible Speech Vith Vithkuqi Wara Warang Citi Wcho Wancho Wole Woleai Xpeo Old Persian Xsux Cuneiform Yezi Yezidi Yiii Yi Zanb Zanabazar Square List of supported country codes Country code Name AC Ascension Island AD Andorra AE United Arab Emirates AF Afghanistan AG Antigua and Barbuda AI Anguilla AL Albania AM Armenia AN Netherlands Antilles AO Angola AQ Antarctica AR Argentina AS American Samoa AT Austria AU Australia AW Aruba AX Åland Islands AZ Azerbaijan BA Bosnia and Herzegovina BB Barbados BD Bangladesh BE Belgium BF Burkina Faso BG Bulgaria BH Bahrain BI Burundi BJ Benin BL St Barthélemy BM Bermuda BN Brunei BO Bolivia BQ Caribbean Netherlands BR Brazil BS Bahamas BT Bhutan BV Bouvet Island BW Botswana BY Belarus BZ Belize CA Canada CC Cocos Keeling Islands CD Congo Kinshasa CF Central African Republic CG Congo Brazzaville CH Switzerland CI Côte d Ivoire CK Cook Islands CL Chile CM Cameroon CN China CO Colombia CP Clipperton Island CR Costa Rica CQ Island of Sark CU Cuba CV Cabo Verde CW Curaçao CX Christmas Island CY Cyprus CZ Czechia DE Germany DG Diego Garcia DJ Djibouti DK Denmark DM Dominica DO Dominican Republic DZ Algeria EA Ceuta and Melilla EC Ecuador EE Estonia EG Egypt EH Western Sahara ER Eritrea ES Spain ET Ethiopia EU European Union EZ Eurozone FI Finland FJ Fiji FK Falkland Islands FM Micronesia FO Faroe Islands FR France FX France Metropolitan GA Gabon GB UK United Kingdom GD Grenada GE Georgia GF French Guiana GG Guernsey GH Ghana GI Gibraltar GL Greenland GM Gambia GN Guinea GP Guadeloupe GQ Equatorial Guinea GR Greece GS South Georgia and South Sandwich Islands GT Guatemala GU Guam GW Guinea Bissau GY Guyana HK Hong Kong HM Heard Island and McDonald Islands HN Honduras HR Croatia HT Haiti HU Hungary IC Canary Islands ID Indonesia IE Ireland IL Israel IM Isle of Man IN India IO British Indian Ocean Territory IQ Iraq IR Iran IS Iceland IT Italy JE Jersey JM Jamaica JO Jordan JP Japan KE Kenya KG Kyrgyzstan KH Cambodia KI Kiribati KM Comoros KN St Kitts and Nevis KP North Korea KR South Korea KW Kuwait KY Cayman Islands KZ Kazakhstan LA Laos LB Lebanon LC St Lucia LI Liechtenstein LK Sri Lanka LR Liberia LS Lesotho LT Lithuania LU Luxembourg LV Latvia LY Libya MA Morocco MC Monaco MD Moldova ME Montenegro MF St Martin MG Madagascar MH Marshall Islands MK North Macedonia ML Mali MM BU Myanmar MN Mongolia MO Macao MP Northern Mariana Islands MQ Martinique MR Mauritania MS Montserrat MT Malta MU Mauritius MV Maldives MW Malawi MX Mexico MY Malaysia MZ Mozambique NA Namibia NC New Caledonia NE Niger NF Norfolk Island NG Nigeria NI Nicaragua NL Netherlands NO Norway NP Nepal NR Nauru NU Niue NZ New Zealand OM Oman PA Panama PE Peru PF French Polynesia PG Papua New Guinea PH Philippines PK Pakistan PL Poland PM St Pierre and Miquelon PN Pitcairn Islands PR Puerto Rico PS Palestine PT Portugal PW Palau PY Paraguay QA Qatar RE Réunion RO Romania RS Serbia RU Russia RW Rwanda SA Saudi Arabia SB Solomon Islands SC Seychelles SD Sudan SE Sweden SG Singapore SH St Helena Ascension and Tristan da Cunha SI Slovenia SJ Svalbard and Jan Mayen SK Slovakia SL Sierra Leone SM San Marino SN Senegal SO Somalia SR Suriname SS South Sudan ST Sao Tome and Principe SV El Salvador SX Sint Maarten SY Syria SZ Eswatini TA Tristan da Cunha TC Turks and Caicos Islands TD Chad TF French Southern Territories TG Togo TH Thailand TJ Tajikistan TK Tokelau TL TP Timor Leste TM Turkmenistan TN Tunisia TO Tonga TR Turkey TT Trinidad and Tobago TV Tuvalu TW Taiwan TZ Tanzania UA Ukraine UG Uganda UM U S Outlying Islands US United States of America UY Uruguay UZ Uzbekistan VA Holy See VC St Vincent and the Grenadines VE Venezuela VG British Virgin Islands VI U S Virgin Islands VN Viet Nam VU Vanuatu WF Wallis and Futuna WS Samoa XK KV Kosovo YE Yemen YT Mayotte ZA South Africa ZM Zambia ZW Zimbabwe User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Pseudolocalization Introduction When creating a game the process of localization usually starts when development has finished This means that translations aren t available during development for testing whether the project is internationalized properly Godot offers pseudolocalization as a way to test how robust the project is when it comes to locale changes Pseudolocalization simulates changes that might take place during localization This way any issues regarding internationalization can be recognized early on during development See also You can see how pseudolocalization works in action using the Pseudolocalizaton demo project Enabling and configuring pseudolocalization Enabling pseudolocalization and the configurations related to it is as simple as toggling a checkbox in the project settings These settings can be found in Project Project Settings General Internationalization Pseudolocalization after enabling the Advanced toggle in the project settings dialog Pseudolocalization can also be toggled at runtime from a script Pseudolocalization configurations Pseudolocalization in Godot can be set up according to the specific use case of the project Here are the pseudolocalization properties that can be configured through project settings replace_with_accents Replaces all characters in the string with their accented variants The quick brown fox jumped over the lazy dog will be converted to Ŧh é q üíćḱ ḅŕôŵή f ôx ǰüm ṕéd ôṽéŕ ŧh é łáźý d ôǵ when this setting is enabled This can be used to spot untranslated strings that won t have accents but is also useful to check for missing glyphs in the font s used by the project double_vowels Doubles all the vowels in the string It is a good approximation to simulate expansion of text during localization This can be used to check for text that would overflow its container such as buttons fake_bidi Fake bidirectional text simulates right to left text This is useful to simulate right to left writing systems to check for potential layout issues that would occur in languages using right to left scripts override Replaces all the characters in the string with an asterisk This is useful for quickly finding text that isn t being localized expansion_ratio Can be used in cases where doubling the vowels isn t a sufficient approximation This setting pads the string with underscores _ and expands it by the given ratio An expansion ratio of 0 3 is sufficient for most practical cases it will increase the length of the string by 30 prefix and suffix These properties can be used to specify a prefix and suffix to wrap the text in skip_placeholders Skips placeholders for string formatting like s and f This is useful to identify places where more arguments are required for the formatted string to display correctly All of these properties can be toggled as needed according to the project s use case Configuring pseudolocalization at runtime Pseudolocalization can be toggled at runtime using the pseudolocalization_enabled property in TranslationServer However if runtime configuration of pseudolocalization properties is required they can be directly configured using ProjectSettings set_setting property value and then calling TranslationServer reload_pseudolocalization which reparses the pseudolocalization properties and reloads the pseudolocalization The following code snippet shall turn on replace_with_accents and double_vowels properties and then call reload_pseudolocalization for the changes to get reflected ProjectSettings set_setting internationalization pseudolocalization replace_with_accents true ProjectSettings set_setting internationalization pseudolocalization double_vowels true TranslationServer reload_pseudolocalization Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Input handling Using InputEvent Input examples Mouse and input coordinates Customizing the mouse cursor Controllers gamepads and joysticks Handling quit requests Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using InputEvent What is it Managing input is usually complex no matter the OS or platform To ease this a little a special built in type is provided InputEvent This datatype can be configured to contain several types of input events Input events travel through the engine and can be received in multiple locations depending on the purpose Here is a quick example closing your game if the escape key is hit GDScript C func _unhandled_input event if event is InputEventKey if event pressed and event keycode KEY_ESCAPE get_tree quit Copy to clipboard public override void _UnhandledInput InputEvent event if event is InputEventKey eventKey if eventKey Pressed eventKey Keycode Key Escape GetTree Quit Copy to clipboard However it is cleaner and more flexible to use the provided InputMap feature which allows you to define input actions and assign them different keys This way you can define multiple keys for the same action e g the keyboard escape key and the start button on a gamepad You can then more easily change this mapping in the project settings without updating your code and even build a key mapping feature on top of it to allow your game to change the key mapping at runtime You can set up your InputMap under Project Project Settings Input Map and then use those actions like this GDScript C func _process delta if Input is_action_pressed ui_right Move right Copy to clipboard public override void _Process double delta if Input IsActionPressed ui_right Move right Copy to clipboard How does it work Every input event is originated from the user player though it s possible to generate an InputEvent and feed them back to the engine which is useful for gestures The DisplayServer for each platform will read events from the operating system then feed them to the root Window The window s Viewport does quite a lot of stuff with the received input in order If the Viewport is embedding Windows the Viewport tries to interpret the event in its capability as a Window Manager e g for resizing or moving Windows Next if an embedded Window is focused the event is sent to that Window and processed in the Windows Viewport and afterwards treated as handled If no embedded Window is focused the event is sent to the nodes of the current viewport in the following order First of all the standard Node _input function will be called in any node that overrides it and hasn t disabled input processing with Node set_process_input If any function consumes the event it can call Viewport set_input_as_handled and the event will not spread any more This ensures that you can filter all events of interest even before the GUI For gameplay input Node _unhandled_input is generally a better fit because it allows the GUI to intercept the events Second it will try to feed the input to the GUI and see if any control can receive it If so the Control will be called via the virtual function Control _gui_input and the signal gui_input will be emitted this function is re implementable by script by inheriting from it If the control wants to consume the event it will call Control accept_event and the event will not spread any more Use the Control mouse_filter property to control whether a Control is notified of mouse events via Control _gui_input callback and whether these events are propagated further If so far no one consumed the event the Node _shortcut_input callback will be called if overridden and not disabled with Node set_process_shortcut_input This happens only for InputEventKey InputEventShortcut and InputEventJoypadButton If any function consumes the event it can call Viewport set_input_as_handled and the event will not spread any more The shortcut input callback is ideal for treating events that are intended as shortcuts If so far no one consumed the event the Node _unhandled_key_input callback will be called if overridden and not disabled with Node set_process_unhandled_key_input This happens only if the event is an InputEventKey If any function consumes the event it can call Viewport set_input_as_handled and the event will not spread any more The unhandled key input callback is ideal for key events If so far no one consumed the event the Node _unhandled_input callback will be called if overridden and not disabled with Node set_process_unhandled_input If any function consumes the event it can call Viewport set_input_as_handled and the event will not spread any more The unhandled input callback is ideal for full screen gameplay events so they are not received when a GUI is active If no one wanted the event so far and Object Picking is turned on the event is used for object picking For the root viewport this can also be enabled in Project Settings In the case of a 3D scene if a Camera3D is assigned to the Viewport a ray to the physics world in the ray direction from the click will be cast If this ray hits an object it will call the CollisionObject3D _input_event function in the relevant physics object In the case of a 2D scene conceptually the same happens with CollisionObject2D _input_event When sending events to its child and descendant nodes the viewport will do so as depicted in the following graphic in a reverse depth first order starting with the node at the bottom of the scene tree and ending at the root node Excluded from this process are Windows and SubViewports This order doesn t apply to Control _gui_input which uses a different method based on event location or focused Control Since Viewports don t send events to other SubViewports one of the following methods has to be used Use a SubViewportContainer which automatically sends events to its child SubViewports after Node _input or Control _gui_input Implement event propagation based on the individual requirements GUI events also travel up the scene tree but since these events target specific Controls only direct ancestors of the targeted Control node receive the event In accordance with Godot s node based design this enables specialized child nodes to handle and consume particular events while their ancestors and ultimately the scene root can provide more generalized behavior if needed Anatomy of an InputEvent InputEvent is just a base built in type it does not represent anything and only contains some basic information such as event ID which is increased for each event device index etc There are several specialized types of InputEvent described in the table below Event Description InputEvent Empty Input Event InputEventKey Contains a keycode and Unicode value as well as modifiers InputEventMouseButton Contains click information such as button modifiers etc InputEventMouseMotion Contains motion information such as relative and absolute positions and speed InputEventJoypadMotion Contains Joystick Joypad analog axis information InputEventJoypadButton Contains Joystick Joypad button information InputEventScreenTouch Contains multi touch press release information only available on mobile devices InputEventScreenDrag Contains multi touch drag information only available on mobile devices InputEventMagnifyGesture Contains a position a factor as well as modifiers InputEventPanGesture Contains a position a delta as well as modifiers InputEventMIDI Contains MIDI related information InputEventShortcut Contains a shortcut InputEventAction Contains a generic action These events are often generated by the programmer as feedback more on this below Actions Actions are a grouping of zero or more InputEvents into a commonly understood title for example the default ui_left action grouping both joypad left input and a keyboard s left arrow key They are not required to represent an InputEvent but are useful because they abstract various inputs when programming the game logic This allows for The same code to work on different devices with different inputs e g keyboard on PC Joypad on console Input to be reconfigured at run time Actions to be triggered programmatically at run time Actions can be created from the Project Settings menu in the Input Map tab and assigned input events Any event has the methods InputEvent is_action InputEvent is_pressed and InputEvent Alternatively it may be desired to supply the game back with an action from the game code a good example of this is detecting gestures The Input singleton has a method for this Input parse_input_event You would normally use it like this GDScript C var ev InputEventAction new Set as ui_left pressed ev action ui_left ev pressed true Feedback Input parse_input_event ev Copy to clipboard var ev new InputEventAction Set as ui_left pressed ev Action ui_left ev Pressed true Feedback Input ParseInputEvent ev Copy to clipboard InputMap Customizing and re mapping input from code is often desired If your whole workflow depends on actions the InputMap singleton is ideal for reassigning or creating different actions at run time This singleton is not saved must be modified manually and its state is run from the project settings project godot So any dynamic system of this type needs to store settings in the way the programmer best sees fit User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Input examples Introduction In this tutorial you ll learn how to use Godot s InputEvent system to capture player input There are many different types of input your game may use keyboard gamepad mouse etc and many different ways to turn those inputs into actions in your game This document will show you some of the most common scenarios which you can use as starting points for your own projects Note For a detailed overview of how Godot s input event system works see Using InputEvent Events versus polling Sometimes you want your game to respond to a certain input event pressing the jump button for example For other situations you might want something to happen as long as a key is pressed such as movement In the first case you can use the _input function which will be called whenever an input event occurs In the second case Godot provides the Input singleton which you can use to query the state of an input Examples GDScript C func _input event if event is_action_pressed jump jump func _physics_process delta if Input is_action_pressed move_right Move as long as the key button is pressed position x speed delta Copy to clipboard public override void _Input InputEvent event if event IsActionPressed jump Jump public override void _PhysicsProcess double delta if Input IsActionPressed move_right Move as long as the key button is pressed position X speed float delta Copy to clipboard This gives you the flexibility to mix and match the type of input processing you do For the remainder of this tutorial we ll focus on capturing individual events in _input Input events Input events are objects that inherit from InputEvent Depending on the event type the object will contain specific properties related to that event To see what events actually look like add a Node and attach the following script GDScript C extends Node func _input event print event as_text Copy to clipboard using Godot public partial class Node Godot Node public override void _Input InputEvent event GD Print event AsText Copy to clipboard As you press keys move the mouse and perform other inputs you ll see each event scroll by in the output window Here s an example of the output A Mouse motion at position 971 5 with velocity 0 0 Right Mouse Button Mouse motion at position 870 243 with velocity 0 454937 0 454937 Left Mouse Button Mouse Wheel Up A B Shift Alt Shift Alt Shift T Mouse motion at position 868 242 with velocity 2 134768 2 134768 Copy to clipboard As you can see the results are very different for the different types of input Key events are even printed as their key symbols For example let s consider InputEventMouseButton It inherits from the following classes InputEvent the base class for all input events InputEventWithModifiers adds the ability to check if modifiers are pressed such as Shift or Alt InputEventMouse adds mouse event properties such as position InputEventMouseButton contains the index of the button that was pressed whether it was a double click etc Tip It s a good idea to keep the class reference open while you re working with events so you can check the event type s available properties and methods You can encounter errors if you try to access a property on an input type that doesn t contain it calling position on InputEventKey for example To avoid this make sure to test the event type first GDScript C func _input event if event is InputEventMouseButton print mouse button event at event position Copy to clipboard public override void _Input InputEvent event if event is InputEventMouseButton mouseEvent GD Print mouse button event at mouseEvent Position Copy to clipboard InputMap The InputMap is the most flexible way to handle a variety of inputs You use this by creating named input actions to which you can assign any number of input events such as keypresses or mouse clicks To see them and to add your own open Project Project Settings and select the InputMap tab Tip A new Godot project includes a number of default actions already defined To see them turn on Show Built in Actions in the InputMap dialog Capturing actions Once you ve defined your actions you can process them in your scripts using is_action_pressed and is_action_released by passing the name of the action you re looking for GDScript C func _input event if event is_action_pressed my_action print my_action occurred Copy to clipboard public override void _Input InputEvent event if event IsActionPressed my_action GD Print my_action occurred Copy to clipboard Keyboard events Keyboard events are captured in InputEventKey While it s recommended to use input actions instead there may be cases where you want to specifically look at key events For this example let s check for the T GDScript C func _input event if event is InputEventKey and event pressed if event keycode KEY_T print T was pressed Copy to clipboard public override void _Input InputEvent event if event is InputEventKey keyEvent keyEvent Pressed if keyEvent Keycode Key T GD Print T was pressed Copy to clipboard Tip See GlobalScope_Key for a list of keycode constants Warning Due to keyboard ghosting not all key inputs may be registered at a given time if you press too many keys at once Due to their location on the keyboard certain keys are more prone to ghosting than others Some keyboards feature antighosting at a hardware level but this feature is generally not present on low end keyboards and laptop keyboards As a result it s recommended to use a default keyboard layout that is designed to work well on a keyboard without antighosting See this Gamedev Stack Exchange question for more information Keyboard modifiers Modifier properties are inherited from InputEventWithModifiers This allows you to check for modifier combinations using boolean properties Let s imagine you want one thing to happen when the T is pressed but something different when it s Shift T GDScript C func _input event if event is InputEventKey and event pressed if event keycode KEY_T if event shift_pressed print Shift T was pressed else print T was pressed Copy to clipboard public override void _Input InputEvent event if event is InputEventKey keyEvent keyEvent Pressed switch keyEvent Keycode case Key T GD Print keyEvent ShiftPressed Shift T was pressed T was pressed break Copy to clipboard Tip See GlobalScope_Key for a list of keycode constants Mouse events Mouse events stem from the InputEventMouse class and are separated into two types InputEventMouseButton and InputEventMouseMotion Note that this means that all mouse events will contain a position property Mouse buttons Capturing mouse buttons is very similar to handling key events GlobalScope_MouseButton contains a list of MOUSE_BUTTON_ constants for each possible button which will be reported in the event s button_index property Note that the scrollwheel also counts as a button two buttons to be precise with both MOUSE_BUTTON_WHEEL_UP and MOUSE_BUTTON_WHEEL_DOWN being separate events GDScript C func _input event if event is InputEventMouseButton if event button_index MOUSE_BUTTON_LEFT and event pressed print Left button was clicked at event position if event button_index MOUSE_BUTTON_WHEEL_UP and event pressed print Wheel up Copy to clipboard public override void _Input InputEvent event if event is InputEventMouseButton mouseEvent mouseEvent Pressed switch mouseEvent ButtonIndex case MouseButton Left GD Print Left button was clicked at mouseEvent Position break case MouseButton WheelUp GD Print Wheel up break Copy to clipboard Mouse motion InputEventMouseMotion events occur whenever the mouse moves You can find the move s distance with the relative property Here s an example using mouse events to drag and drop a Sprite2D node GDScript C extends Node var dragging false var click_radius 32 Size of the sprite func _input event if event is InputEventMouseButton and event button_index MOUSE_BUTTON_LEFT if event position Sprite2D position length click_radius Start dragging if the click is on the sprite if not dragging and event pressed dragging true Stop dragging if the button is released if dragging and not event pressed dragging false if event is InputEventMouseMotion and dragging While dragging move the sprite with the mouse Sprite2D position event position Copy to clipboard using Godot public partial class MyNode2D Node2D private bool _dragging false private int _clickRadius 32 Size of the sprite public override void _Input InputEvent event Sprite2D sprite GetNodeOrNull Sprite2D Sprite2D if sprite null return No suitable node was found if event is InputEventMouseButton mouseEvent mouseEvent ButtonIndex MouseButton Left if mouseEvent Position sprite Position Length _clickRadius Start dragging if the click is on the sprite if _dragging mouseEvent Pressed _dragging true Stop dragging if the button is released if _dragging mouseEvent Pressed _dragging false else if event is InputEventMouseMotion motionEvent _dragging While dragging move the sprite with the mouse sprite Position motionEvent Position Copy to clipboard Touch events If you are using a touchscreen device you can generate touch events InputEventScreenTouch is equivalent to a mouse click event and InputEventScreenDrag works much the same as mouse motion Tip To test your touch events on a non touchscreen device open Project Settings and go to the Input Devices Pointing section Enable Emulate Touch From Mouse and your project will interpret mouse clicks and motion as touch events User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Mouse and input coordinates About The reason for this small tutorial is to clear up many common mistakes about input coordinates obtaining mouse position and screen resolution etc Hardware display coordinates Using hardware coordinates makes sense in the case of writing complex UIs meant to run on PC such as editors MMOs tools etc However it does not make as much sense outside of that scope Viewport display coordinates Godot uses viewports to display content and viewports can be scaled by several options see Multiple resolutions tutorial Use then the functions in nodes to obtain the mouse coordinates and viewport size for example GDScript C func _input event Mouse in viewport coordinates if event is InputEventMouseButton print Mouse Click Unclick at event position elif event is InputEventMouseMotion print Mouse Motion at event position Print the size of the viewport print Viewport Resolution is get_viewport get_visible_rect size Copy to clipboard public override void _Input InputEvent event Mouse in viewport coordinates if event is InputEventMouseButton eventMouseButton GD Print Mouse Click Unclick at eventMouseButton Position else if event is InputEventMouseMotion eventMouseMotion GD Print Mouse Motion at eventMouseMotion Position Print the size of the viewport GD Print Viewport Resolution is GetViewport GetVisibleRect Size Copy to clipboard Alternatively it s possible to ask the viewport for the mouse position GDScript C get_viewport get_mouse_position Copy to clipboard GetViewport GetMousePosition Copy to clipboard Note When the mouse mode is set to Input MOUSE_MODE_CAPTURED the event position value from InputEventMouseMotion is the center of the screen Use event relative instead of event position and event velocity to process mouse movement and position changes User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Customizing the mouse cursor You might want to change the appearance of the mouse cursor in your game in order to suit the overall design There are two ways to customize the mouse cursor Using project settings Using a script Using project settings is a simpler but more limited way to customize the mouse cursor The second way is more customizable but involves scripting Note You could display a software mouse cursor by hiding the mouse cursor and moving a Sprite2D to the cursor position in a _process method but this will add at least one frame of latency compared to an hardware mouse cursor Therefore it s recommended to use the approach described here whenever possible If you have to use the software approach consider adding an extrapolation step to better display the actual mouse input Using project settings Open project settings go to Display Mouse Cursor You will see Custom Image Custom Image Hotspot and Tooltip Position Offset Custom Image is the desired image that you would like to set as the mouse cursor Custom Hotspot is the point in the image that you would like to use as the cursor s detection point Warning The custom image must be 256 256 pixels at most To avoid rendering issues sizes lower than or equal to 128 128 are recommended On the web platform the maximum allowed cursor image size is 128 128 Using a script Create a Node and attach the following script GDScript C extends Node Load the custom images for the mouse cursor var arrow load res arrow png var beam load res beam png func _ready Changes only the arrow shape of the cursor This is similar to changing it in the project settings Input set_custom_mouse_cursor arrow Changes a specific shape of the cursor here the I beam shape Input set_custom_mouse_cursor beam Input CURSOR_IBEAM Copy to clipboard public override void _Ready Load the custom images for the mouse cursor var arrow ResourceLoader Load res arrow png var beam ResourceLoader Load res beam png Changes only the arrow shape of the cursor This is similar to changing it in the project settings Input SetCustomMouseCursor arrow Changes a specific shape of the cursor here the I beam shape Input SetCustomMouseCursor beam Input CursorShape Ibeam Copy to clipboard See also Check Input set_custom_mouse_cursor s documentation for more information on usage and platform specific caveats Cursor list As documented in the Input class see the CursorShape enum there are multiple mouse cursors you can define Which ones you want to use depends on your use case User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Controllers gamepads and joysticks Godot supports hundreds of controller models thanks to the community sourced SDL game controller database Controllers are supported on Windows macOS Linux Android iOS and HTML5 Note that more specialized devices such as steering wheels rudder pedals and HOTAS are less tested and may not always work as expected Overriding force feedback for those devices is also not implemented yet If you have access to one of those devices don t hesitate to report bugs on GitHub In this guide you will learn How to write your input logic to support both keyboard and controller inputs How controllers can behave differently from keyboard mouse input Troubleshooting issues with controllers in Godot Supporting universal input Thanks to Godot s input action system Godot makes it possible to support both keyboard and controller input without having to write separate code paths Instead of hardcoding keys or controller buttons in your scripts you should create input actions in the Project Settings which will then refer to specified key and controller inputs Input actions are explained in detail on the Using InputEvent page Note Unlike keyboard input supporting both mouse and controller input for an action such as looking around in a first person game will require different code paths since these have to be handled separately Which Input singleton method should I use There are 3 ways to get input in an analog aware way When you have two axes such as joystick or WASD movement and want both axes to behave as a single input use Input get_vector GDScript C velocity will be a Vector2 between Vector2 1 0 1 0 and Vector2 1 0 1 0 This handles deadzone in a correct way for most use cases The resulting deadzone will have a circular shape as it generally should var velocity Input get_vector move_left move_right move_forward move_back The line below is similar to get_vector except that it handles the deadzone in a less optimal way The resulting deadzone will have a square ish shape when it should ideally have a circular shape var velocity Vector2 Input get_action_strength move_right Input get_action_strength move_left Input get_action_strength move_back Input get_action_strength move_forward limit_length 1 0 Copy to clipboard velocity will be a Vector2 between Vector2 1 0 1 0 and Vector2 1 0 1 0 This handles deadzone in a correct way for most use cases The resulting deadzone will have a circular shape as it generally should Vector2 velocity Input GetVector move_left move_right move_forward move_back The line below is similar to get_vector except that it handles the deadzone in a less optimal way The resulting deadzone will have a square ish shape when it should ideally have a circular shape Vector2 velocity new Vector2 Input GetActionStrength move_right Input GetActionStrength move_left Input GetActionStrength move_back Input GetActionStrength move_forward LimitLength 1 0 Copy to clipboard When you have one axis that can go both ways such as a throttle on a flight stick or when you want to handle separate axes individually use Input get_axis GDScript C walk will be a floating point number between 1 0 and 1 0 var walk Input get_axis move_left move_right The line above is a shorter form of var walk Input get_action_strength move_right Input get_action_strength move_left Copy to clipboard walk will be a floating point number between 1 0 and 1 0 float walk Input GetAxis move_left move_right The line above is a shorter form of float walk Input GetActionStrength move_right Input GetActionStrength move_left Copy to clipboard For other types of analog input such as handling a trigger or handling one direction at a time use Input get_action_strength GDScript C strength will be a floating point number between 0 0 and 1 0 var strength Input get_action_strength accelerate Copy to clipboard strength will be a floating point number between 0 0 and 1 0 float strength Input GetActionStrength accelerate Copy to clipboard For non analog digital boolean input only pressed or not pressed values such as controller buttons mouse buttons or keyboard keys use Input is_action_pressed GDScript C jumping will be a boolean with a value of true or false var jumping Input is_action_pressed jump Copy to clipboard jumping will be a boolean with a value of true or false bool jumping Input IsActionPressed jump Copy to clipboard Note If you need to know whether an input was just pressed in the previous frame use Input is_action_just_pressed instead of Input is_action_pressed Unlike Input is_action_pressed which returns true as long as the input is held Input is_action_just_pressed will only return true for one frame after the button has been pressed In Godot versions before 3 4 such as 3 3 Input get_vector and Input get_axis aren t available Only Input get_action_strength and Input is_action_pressed are available in Godot 3 3 Vibration Vibration also called haptic feedback can be used to enhance the feel of a game For instance in a racing game you can convey the surface the car is currently driving on through vibration or create a sudden vibration on a crash Use the Input singleton s start_joy_vibration method to start vibrating a gamepad Use stop_joy_vibration to stop vibration early useful if no duration was specified when starting On mobile devices you can also use vibrate_handheld to vibrate the device itself independently from the gamepad On Android this requires the VIBRATE permission to be enabled in the Android export preset before exporting the project Note Vibration can be uncomfortable for certain players Make sure to provide an in game slider to disable vibration or reduce its intensity Differences between keyboard mouse and controller input If you re used to handling keyboard and mouse input you may be surprised by how controllers handle specific situations Dead zone Unlike keyboards and mice controllers offer axes with analog inputs The upside of analog inputs is that they offer additional flexibility for actions Unlike digital inputs which can only provide strengths of 0 0 and 1 0 an analog input can provide any strength between 0 0 and 1 0 The downside is that without a deadzone system an analog axis strength will never be equal to 0 0 due to how the controller is physically built Instead it will linger at a low value such as 0 062 This phenomenon is known as drifting and can be more noticeable on old or faulty controllers Let s take a racing game as a real world example Thanks to analog inputs we can steer the car slowly in one direction or another However without a deadzone system the car would slowly steer by itself even if the player isn t touching the joystick This is because the directional axis strength won t be equal to 0 0 when we expect it to Since we don t want our car to steer by itself in this case we define a dead zone value of 0 2 which will ignore all input whose strength is lower than 0 2 An ideal dead zone value is high enough to ignore the input caused by joystick drifting but is low enough to not ignore actual input from the player Godot features a built in deadzone system to tackle this problem The default value is 0 5 but you can adjust it on a per action basis in the Project Settings Input Map tab For Input get_vector the deadzone can be specified as an optional 5th parameter If not specified it will calculate the average deadzone value from all of the actions in the vector Echo events Unlike keyboard input holding down a controller button such as a D pad direction will not generate repeated input events at fixed intervals also known as echo events This is because the operating system never sends echo events for controller input in the first place If you want controller buttons to send echo events you will have to generate InputEvent objects by code and parse them using Input parse_input_event at regular intervals This can be accomplished with the help of a Timer node Window focus Unlike keyboard input controller inputs can be seen by all windows on the operating system including unfocused windows While this is useful for third party split screen functionality it can also have adverse effects Players may accidentally send controller inputs to the running project while interacting with another window If you wish to ignore events when the project window isn t focused you will need to create an autoload called Focus with the following script and use it to check all your inputs Focus gd extends Node var focused true func _notification what int void match what NOTIFICATION_APPLICATION_FOCUS_OUT focused false NOTIFICATION_APPLICATION_FOCUS_IN focused true func input_is_action_pressed action StringName bool if focused return Input is_action_pressed action return false func event_is_action_pressed event InputEvent action StringName bool if focused return event is_action_pressed action return false Copy to clipboard Then instead of using Input is_action_pressed action use Focus input_is_action_pressed action where action is the name of the input action Also instead of using event is_action_pressed action use Focus event_is_action_pressed event action where event is an InputEvent reference and action is the name of the input action Power saving prevention Unlike keyboard and mouse input controller inputs do not inhibit sleep and power saving measures such as turning off the screen after a certain amount of time has passed To combat this Godot enables power saving prevention by default when a project is running If you notice the system is turning off its display when playing with a gamepad check the value of Display Window Energy Saving Keep Screen On in the Project Settings On Linux power saving prevention requires the engine to be able to use D Bus Check whether D Bus is installed and reachable if running the project within a Flatpak as sandboxing restrictions may make this impossible by default Troubleshooting See also You can view a list of known issues with controller support on GitHub My controller isn t recognized by Godot First check that your controller is recognized by other applications You can use the Gamepad Tester website to confirm that your controller is recognized On Windows Godot only supports up to 4 controllers at a time This is because Godot uses the XInput API which is limited to supporting 4 controllers at once Additional controllers above this limit are ignored by Godot My controller has incorrectly mapped buttons or axes First if your controller provides some kind of firmware update utility make sure to run it to get the latest fixes from the manufacturer For instance Xbox One and Xbox Series controllers can have their firmware updated using the Xbox Accessories app This application only runs on Windows so you have to use a Windows machine or a Windows virtual machine with USB support to update the controller s firmware After updating the controller s firmware unpair the controller and pair it again with your PC if you are using the controller in wireless mode If buttons are incorrectly mapped this may be due to an erroneous mapping from the SDL game controller database You can contribute an updated mapping to be included in the next Godot version by opening a pull request on the linked repository There are many ways to create mappings One option is to use the mapping wizard in the official Joypads demo Once you have a working mapping for your controller you can test it by defining the SDL_GAMECONTROLLERCONFIG environment variable before running Godot Linux macOS Windows cmd Windows PowerShell export SDL_GAMECONTROLLERCONFIG your mapping here path to godot x86_64 Copy to clipboard set SDL_GAMECONTROLLERCONFIG your mapping here path to godot exe Copy to clipboard env SDL_GAMECONTROLLERCONFIG your mapping here path to godot exe Copy to clipboard To test mappings on non desktop platforms or to distribute your project with additional controller mappings you can add them by calling Input add_joy_mapping as early as possible in a script s _ready function My controller works on a given platform but not on another platform Linux If you re using a self compiled engine binary make sure it was compiled with udev support This is enabled by default but it is possible to disable udev support by specifying udev no on the SCons command line If you re using an engine binary supplied by a Linux distribution double check whether it was compiled with udev support Controllers can still work without udev support but it is less reliable as regular polling must be used to check for controllers being connected or disconnected during gameplay hotplugging HTML5 HTML5 controller support is often less reliable compared to native platforms The quality of controller support tends to vary wildly across browsers As a result you may have to instruct your players to use a different browser if they can t get their controller to work User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Handling quit requests Quitting Most platforms have the option to request the application to quit On desktops this is usually done with the x icon on the window title bar On mobile devices the app can quit at any time while it is suspended to the background Handling the notification On desktop and web platforms Node receives a special NOTIFICATION_WM_CLOSE_REQUEST notification when quitting is requested from the window manager Handling the notification is done as follows on any node GDScript C func _notification what if what NOTIFICATION_WM_CLOSE_REQUEST get_tree quit default behavior Copy to clipboard public override void _Notification int what if what NotificationWMCloseRequest GetTree Quit default behavior Copy to clipboard It is important to note that by default Godot apps have the built in behavior to quit when quit is requested from the window manager This can be changed so that the user can take care of the complete quitting procedure GDScript C get_tree set_auto_accept_quit false Copy to clipboard GetTree AutoAcceptQuit false Copy to clipboard On mobile devices There is no direct equivalent to NOTIFICATION_WM_CLOSE_REQUEST on mobile platforms Due to the nature of mobile operating systems the only place that you can run code prior to quitting is when the app is being suspended to the background On both Android and iOS the app can be killed while suspended at any time by either the user or the OS A way to plan ahead for this possibility is to utilize NOTIFICATION_APPLICATION_PAUSED in order to perform any needed actions as the app is being suspended On Android pressing the Back button will exit the application if Application Config Quit On Go Back is checked in the Project Settings which is the default This will fire NOTIFICATION_WM_GO_BACK_REQUEST Sending your own quit notification While forcing the application to close can be done by calling SceneTree quit doing so will not send the NOTIFICATION_WM_CLOSE_REQUEST to the nodes in the scene tree Quitting by calling SceneTree quit will not allow custom actions to complete such as saving confirming the quit or debugging even if you try to delay the line that forces the quit Instead if you want to notify the nodes in the scene tree about the upcoming program termination you should send the notification yourself GDScript C get_tree root propagate_notification NOTIFICATION_WM_CLOSE_REQUEST Copy to clipboard GetTree Root PropagateNotification int NotificationWMCloseRequest Copy to clipboard Sending this notification will inform all nodes about the program termination but will not terminate the program itself unlike in 3 X In order to achieve the previous behavior SceneTree quit should be called after the notification User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Math Vector math Advanced vector math Matrices and transforms Interpolation Beziers curves and paths Random number generation Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Vector math Introduction This tutorial is a short and practical introduction to linear algebra as it applies to game development Linear algebra is the study of vectors and their uses Vectors have many applications in both 2D and 3D development and Godot uses them extensively Developing a good understanding of vector math is essential to becoming a strong game developer Note This tutorial is not a formal textbook on linear algebra We will only be looking at how it is applied to game development For a broader look at the mathematics see https www khanacademy org math linear algebra Coordinate systems 2D In 2D space coordinates are defined using a horizontal axis x and a vertical axis y A particular position in 2D space is written as a pair of values such as 4 3 Note If you re new to computer graphics it might seem odd that the positive y axis points downwards instead of upwards as you probably learned in math class However this is common in most computer graphics applications Any position in the 2D plane can be identified by a pair of numbers in this way However we can also think of the position 4 3 as an offset from the 0 0 point or origin Draw an arrow pointing from the origin to the point This is a vector A vector represents a lot of useful information As well as telling us that the point is at 4 3 we can also think of it as an angle θ theta and a length or magnitude m In this case the arrow is a position vector it denotes a position in space relative to the origin A very important point to consider about vectors is that they only represent relative direction and magnitude There is no concept of a vector s position The following two vectors are identical Both vectors represent a point 4 units to the right and 3 units below some starting point It does not matter where on the plane you draw the vector it always represents a relative direction and magnitude Vector operations You can use either method x and y coordinates or angle and magnitude to refer to a vector but for convenience programmers typically use the coordinate notation For example in Godot the origin is the top left corner of the screen so to place a 2D node named Node2D 400 pixels to the right and 300 pixels down use the following code GDScript C Node2D position Vector2 400 300 Copy to clipboard var node2D GetNode Node2D Node2D node2D Position new Vector2 400 300 Copy to clipboard Godot supports both Vector2 and Vector3 for 2D and 3D usage respectively The same mathematical rules discussed in this article apply to both types and wherever we link to Vector2 methods in the class reference you can also check out their Vector3 counterparts Member access The individual components of the vector can be accessed directly by name GDScript C Create a vector with coordinates 2 5 var a Vector2 2 5 Create a vector and assign x and y manually var b Vector2 b x 3 b y 1 Copy to clipboard Create a vector with coordinates 2 5 var a new Vector2 2 5 Create a vector and assign x and y manually var b new Vector2 b X 3 b Y 1 Copy to clipboard Adding vectors When adding or subtracting two vectors the corresponding components are added GDScript C var c a b 2 5 3 1 5 6 Copy to clipboard var c a b 2 5 3 1 5 6 Copy to clipboard We can also see this visually by adding the second vector at the end of the first Note that adding a b gives the same result as b a Scalar multiplication Note Vectors represent both direction and magnitude A value representing only magnitude is called a scalar Scalars use the float type in Godot A vector can be multiplied by a scalar GDScript C var c a 2 2 5 2 4 10 var d b 3 3 6 3 1 2 var e d 2 1 2 2 2 4 Copy to clipboard var c a 2 2 5 2 4 10 var d b 3 3 6 3 1 2 var e d 2 1 2 2 2 4 Copy to clipboard Note Multiplying a vector by a positive scalar does not change its direction only its magnitude Multiplying with a negative scalar results in a vector in the opposite direction This is how you scale a vector Practical applications Let s look at two common uses for vector addition and subtraction Movement A vector can represent any quantity with a magnitude and direction Typical examples are position velocity acceleration and force In this image the spaceship at step 1 has a position vector of 1 3 and a velocity vector of 2 1 The velocity vector represents how far the ship moves each step We can find the position for step 2 by adding the velocity to the current position Tip Velocity measures the change in position per unit of time The new position is found by adding the velocity multiplied by the elapsed time here assumed to be one unit e g 1 s to the previous position In a typical 2D game scenario you would have a velocity in pixels per second and multiply it by the delta parameter time elapsed since the previous frame from the _process or _physics_process callbacks Pointing toward a target In this scenario you have a tank that wishes to point its turret at a robot Subtracting the tank s position from the robot s position gives the vector pointing from the tank to the robot Tip To find a vector pointing from A to B use B A Unit vectors A vector with magnitude of 1 is called a unit vector They are also sometimes referred to as direction vectors or normals Unit vectors are helpful when you need to keep track of a direction Normalization Normalizing a vector means reducing its length to 1 while preserving its direction This is done by dividing each of its components by its magnitude Because this is such a common operation Godot provides a dedicated normalized method for this GDScript C a a normalized Copy to clipboard a a Normalized Copy to clipboard Warning Because normalization involves dividing by the vector s length you cannot normalize a vector of length 0 Attempting to do so would normally result in an error In GDScript though trying to call the normalized method on a vector of length 0 leaves the value untouched and avoids the error for you Reflection A common use of unit vectors is to indicate normals Normal vectors are unit vectors aligned perpendicularly to a surface defining its direction They are commonly used for lighting collisions and other operations involving surfaces For example imagine we have a moving ball that we want to bounce off a wall or other object The surface normal has a value of 0 1 because this is a horizontal surface When the ball collides we take its remaining motion the amount left over when it hits the surface and reflect it using the normal In Godot there is a bounce method to handle this Here is a code example of the above diagram using a CharacterBody2D GDScript C var collision KinematicCollision2D move_and_collide velocity delta if collision var reflect collision get_remainder bounce collision get_normal velocity velocity bounce collision get_normal move_and_collide reflect Copy to clipboard KinematicCollision2D collision MoveAndCollide _velocity float delta if collision null var reflect collision GetRemainder Bounce collision GetNormal _velocity _velocity Bounce collision GetNormal MoveAndCollide reflect Copy to clipboard Dot product The dot product is one of the most important concepts in vector math but is often misunderstood Dot product is an operation on two vectors that returns a scalar Unlike a vector which contains both magnitude and direction a scalar value has only magnitude The formula for dot product takes two common forms and The mathematical notation A represents the magnitude of vector A and A x means the x component of vector A However in most cases it is easiest to use the built in dot method Note that the order of the two vectors does not matter GDScript C var c a dot b var d b dot a These are equivalent Copy to clipboard float c a Dot b float d b Dot a These are equivalent Copy to clipboard The dot product is most useful when used with unit vectors making the first formula reduce to just cos θ This means we can use the dot product to tell us something about the angle between two vectors When using unit vectors the result will always be between 1 180 and 1 0 Facing We can use this fact to detect whether an object is facing toward another object In the diagram below the player P is trying to avoid the zombies A and B Assuming a zombie s field of view is 180 can they see the player The green arrows fA and fB are unit vectors representing the zombie s facing direction and the blue semicircle represents its field of view For zombie A we find the direction vector AP pointing to the player using P A and normalize it however Godot has a helper method to do this called direction_to If the angle between this vector and the facing vector is less than 90 then the zombie can see the player In code it would look like this GDScript C var AP A direction_to P if AP dot fA 0 print A sees P Copy to clipboard var AP A DirectionTo P if AP Dot fA 0 GD Print A sees P Copy to clipboard Cross product Like the dot product the cross product is an operation on two vectors However the result of the cross product is a vector with a direction that is perpendicular to both Its magnitude depends on their relative angle If two vectors are parallel the result of their cross product will be a null vector The cross product is calculated like this GDScript C var c Vector3 c x a y b z a z b y c y a z b x a x b z c z a x b y a y b x Copy to clipboard var c new Vector3 c X a Y b Z a Z b Y c Y a Z b X a X b Z c Z a X b Y a Y b X Copy to clipboard With Godot you can use the built in Vector3 cross method GDScript C var c a cross b Copy to clipboard var c a Cross b Copy to clipboard The cross product is not mathematically defined in 2D The Vector2 cross method is a commonly used analog of the 3D cross product for 2D vectors Note In the cross product order matters a cross b does not give the same result as b cross a The resulting vectors point in opposite directions Calculating normals One common use of cross products is to find the surface normal of a plane or surface in 3D space If we have the triangle ABC we can use vector subtraction to find two edges AB and AC Using the cross product AB AC produces a vector perpendicular to both the surface normal Here is a function to calculate a triangle s normal GDScript C func get_triangle_normal a b c Find the surface normal given 3 vertices var side1 b a var side2 c a var normal side1 cross side2 return normal Copy to clipboard Vector3 GetTriangleNormal Vector3 a Vector3 b Vector3 c Find the surface normal given 3 vertices var side1 b a var side2 c a var normal side1 Cross side2 return normal Copy to clipboard Pointing to a target In the dot product section above we saw how it could be used to find the angle between two vectors However in 3D this is not enough information We also need to know what axis to rotate around We can find that by calculating the cross product of the current facing direction and the target direction The resulting perpendicular vector is the axis of rotation More information For more information on using vector math in Godot see the following articles Advanced vector math Matrices and transforms User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Advanced vector math Planes The dot product has another interesting property with unit vectors Imagine that perpendicular to that vector and through the origin passes a plane Planes divide the entire space into positive over the plane and negative under the plane and contrary to popular belief you can also use their math in 2D Unit vectors that are perpendicular to a surface so they describe the orientation of the surface are called unit normal vectors Though usually they are just abbreviated as normals Normals appear in planes 3D geometry to determine where each face or vertex is siding etc A normal is a unit vector but it s called normal because of its usage Just like we call 0 0 the Origin The plane passes by the origin and the surface of it is perpendicular to the unit vector or normal The side towards the vector points to is the positive half space while the other side is the negative half space In 3D this is exactly the same except that the plane is an infinite surface imagine an infinite flat sheet of paper that you can orient and is pinned to the origin instead of a line Distance to plane Now that it s clear what a plane is let s go back to the dot product The dot product between a unit vector and any point in space yes this time we do dot product between vector and position returns the distance from the point to the plane GDScript C var distance normal dot point Copy to clipboard var distance normal Dot point Copy to clipboard But not just the absolute distance if the point is in the negative half space the distance will be negative too This allows us to tell which side of the plane a point is Away from the origin I know what you are thinking So far this is nice but real planes are everywhere in space not only passing through the origin You want real plane action and you want it now Remember that planes not only split space in two but they also have polarity This means that it is possible to have perfectly overlapping planes but their negative and positive half spaces are swapped With this in mind let s describe a full plane as a normal N and a distance from the origin scalar D Thus our plane is represented by N and D For example For 3D math Godot provides a Plane built in type that handles this Basically N and D can represent any plane in space be it for 2D or 3D depending on the amount of dimensions of N and the math is the same for both It s the same as before but D is the distance from the origin to the plane travelling in N direction As an example imagine you want to reach a point in the plane you will just do GDScript C var point_in_plane N D Copy to clipboard var pointInPlane N D Copy to clipboard This will stretch resize the normal vector and make it touch the plane This math might seem confusing but it s actually much simpler than it seems If we want to tell again the distance from the point to the plane we do the same but adjusting for distance GDScript C var distance N dot point D Copy to clipboard var distance N Dot point D Copy to clipboard The same thing using a built in function GDScript C var distance plane distance_to point Copy to clipboard var distance plane DistanceTo point Copy to clipboard This will again return either a positive or negative distance Flipping the polarity of the plane can be done by negating both N and D This will result in a plane in the same position but with inverted negative and positive half spaces GDScript C N N D D Copy to clipboard N N D D Copy to clipboard Godot also implements this operator in Plane So using the format below will work as expected GDScript C var inverted_plane plane Copy to clipboard var invertedPlane plane Copy to clipboard So remember the plane s main practical use is that we can calculate the distance to it So when is it useful to calculate the distance from a point to a plane Let s see some examples Constructing a plane in 2D Planes clearly don t come out of nowhere so they must be built Constructing them in 2D is easy this can be done from either a normal unit vector and a point or from two points in space In the case of a normal and a point most of the work is done as the normal is already computed so calculate D from the dot product of the normal and the point GDScript C var N normal var D normal dot point Copy to clipboard var N normal var D normal Dot point Copy to clipboard For two points in space there are actually two planes that pass through them sharing the same space but with normal pointing to the opposite directions To compute the normal from the two points the direction vector must be obtained first and then it needs to be rotated 90 degrees to either side GDScript C Calculate vector from a to b var dvec point_a direction_to point_b Rotate 90 degrees var normal Vector2 dvec y dvec x Alternatively depending the desired side of the normal var normal Vector2 dvec y dvec x Copy to clipboard Calculate vector from a to b var dvec pointA DirectionTo pointB Rotate 90 degrees var normal new Vector2 dvec Y dvec X Alternatively depending the desired side of the normal var normal new Vector2 dvec Y dvec X Copy to clipboard The rest is the same as the previous example Either point_a or point_b will work as they are in the same plane GDScript C var N normal var D normal dot point_a this works the same var D normal dot point_b Copy to clipboard var N normal var D normal Dot pointA this works the same var D normal Dot pointB Copy to clipboard Doing the same in 3D is a little more complex and is explained further down Some examples of planes Here is an example of what planes are useful for Imagine you have a convex polygon For example a rectangle a trapezoid a triangle or just any polygon where no faces bend inwards For every segment of the polygon we compute the plane that passes by that segment Once we have the list of planes we can do neat things for example checking if a point is inside the polygon We go through all planes if we can find a plane where the distance to the point is positive then the point is outside the polygon If we can t then the point is inside Code should be something like this GDScript C var inside true for p in planes check if distance to plane is positive if p distance_to point 0 inside false break with one that fails it s enough Copy to clipboard var inside true foreach var p in planes check if distance to plane is positive if p DistanceTo point 0 inside false break with one that fails it s enough Copy to clipboard Pretty cool huh But this gets much better With a little more effort similar logic will let us know when two convex polygons are overlapping too This is called the Separating Axis Theorem or SAT and most physics engines use this to detect collision With a point just checking if a plane returns a positive distance is enough to tell if the point is outside With another polygon we must find a plane where all the other polygon points return a positive distance to it This check is performed with the planes of A against the points of B and then with the planes of B against the points of A Code should be something like this GDScript C var overlapping true for p in planes_of_A var all_out true for v in points_of_B if p distance_to v 0 all_out false break if all_out a separating plane was found do not continue testing overlapping false break if overlapping only do this check if no separating plane was found in planes of A for p in planes_of_B var all_out true for v in points_of_A if p distance_to v 0 all_out false break if all_out overlapping false break if overlapping print Polygons Collided Copy to clipboard var overlapping true foreach Plane plane in planesOfA var allOut true foreach Vector3 point in pointsOfB if plane DistanceTo point 0 allOut false break if allOut a separating plane was found do not continue testing overlapping false break if overlapping only do this check if no separating plane was found in planes of A foreach Plane plane in planesOfB var allOut true foreach Vector3 point in pointsOfA if plane DistanceTo point 0 allOut false break if allOut overlapping false break if overlapping GD Print Polygons Collided Copy to clipboard As you can see planes are quite useful and this is the tip of the iceberg You might be wondering what happens with non convex polygons This is usually just handled by splitting the concave polygon into smaller convex polygons or using a technique such as BSP which is not used much nowadays Collision detection in 3D This is another bonus bit a reward for being patient and keeping up with this long tutorial Here is another piece of wisdom This might not be something with a direct use case Godot already does collision detection pretty well but it s used by almost all physics engines and collision detection libraries Remember that converting a convex shape in 2D to an array of 2D planes was useful for collision detection You could detect if a point was inside any convex shape or if two 2D convex shapes were overlapping Well this works in 3D too if two 3D polyhedral shapes are colliding you won t be able to find a separating plane If a separating plane is found then the shapes are definitely not colliding To refresh a bit a separating plane means that all vertices of polygon A are in one side of the plane and all vertices of polygon B are in the other side This plane is always one of the face planes of either polygon A or polygon B In 3D though there is a problem to this approach because it is possible that in some cases a separating plane can t be found This is an example of such situation To avoid it some extra planes need to be tested as separators these planes are the cross product between the edges of polygon A and the edges of polygon B So the final algorithm is something like GDScript C var overlapping true for p in planes_of_A var all_out true for v in points_of_B if p distance_to v 0 all_out false break if all_out a separating plane was found do not continue testing overlapping false break if overlapping only do this check if no separating plane was found in planes of A for p in planes_of_B var all_out true for v in points_of_A if p distance_to v 0 all_out false break if all_out overlapping false break if overlapping for ea in edges_of_A for eb in edges_of_B var n ea cross eb if n length 0 continue var max_A 1e20 tiny number var min_A 1e20 huge number we are using the dot product directly so we can map a maximum and minimum range for each polygon then check if they overlap for v in points_of_A var d n dot v max_A max max_A d min_A min min_A d var max_B 1e20 tiny number var min_B 1e20 huge number for v in points_of_B var d n dot v max_B max max_B d min_B min min_B d if min_A max_B or min_B max_A not overlapping overlapping false break if not overlapping break if overlapping print Polygons collided Copy to clipboard var overlapping true foreach Plane plane in planesOfA var allOut true foreach Vector3 point in pointsOfB if plane DistanceTo point 0 allOut false break if allOut a separating plane was found do not continue testing overlapping false break if overlapping only do this check if no separating plane was found in planes of A foreach Plane plane in planesOfB var allOut true foreach Vector3 point in pointsOfA if plane DistanceTo point 0 allOut false break if allOut overlapping false break if overlapping foreach Vector3 edgeA in edgesOfA foreach Vector3 edgeB in edgesOfB var normal edgeA Cross edgeB if normal Length 0 continue var maxA float MinValue tiny number var minA float MaxValue huge number we are using the dot product directly so we can map a maximum and minimum range for each polygon then check if they overlap foreach Vector3 point in pointsOfA var distance normal Dot point maxA Mathf Max maxA distance minA Mathf Min minA distance var maxB float MinValue tiny number var minB float MaxValue huge number foreach Vector3 point in pointsOfB var distance normal Dot point maxB Mathf Max maxB distance minB Mathf Min minB distance if minA maxB minB maxA not overlapping overlapping false break if overlapping break if overlapping GD Print Polygons Collided Copy to clipboard More information For more information on using vector math in Godot see the following article Matrices and transforms If you would like additional explanation you should check out 3Blue1Brown s excellent video series Essence of Linear Algebra https www youtube com watch v fNk_zzaMoSs list PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Matrices and transforms Introduction Before reading this tutorial we recommend that you thoroughly read and understand the Vector math tutorial as this tutorial requires a knowledge of vectors This tutorial is about transformations and how we represent them in Godot using matrices It is not a full in depth guide to matrices Transformations are most of the time applied as translation rotation and scale so we will focus on how to represent those with matrices Most of this guide focuses on 2D using Transform2D and Vector2 but the way things work in 3D is very similar Note As mentioned in the previous tutorial it is important to remember that in Godot the Y axis points down in 2D This is the opposite of how most schools teach linear algebra with the Y axis pointing up Note The convention is that the X axis is red the Y axis is green and the Z axis is blue This tutorial is color coded to match these conventions but we will also represent the origin vector with a blue color Matrix components and the Identity matrix The identity matrix represents a transform with no translation no rotation and no scale Let s start by looking at the identity matrix and how its components relate to how it visually appears Matrices have rows and columns and a transformation matrix has specific conventions on what each does In the image above we can see that the red X vector is represented by the first column of the matrix and the green Y vector is likewise represented by the second column A change to the columns will change these vectors We will see how they can be manipulated in the next few examples You should not worry about manipulating rows directly as we usually work with columns However you can think of the rows of the matrix as showing which vectors contribute to moving in a given direction When we refer to a value such as t x y that s the Y component of the X column vector In other words the bottom left of the matrix Similarly t x x is top left t y x is top right and t y y is bottom right where t is the Transform2D Scaling the transformation matrix Applying a scale is one of the easiest operations to understand Let s start by placing the Godot logo underneath our vectors so that we can visually see the effects on an object Now to scale the matrix all we need to do is multiply each component by the scale we want Let s scale it up by 2 1 times 2 becomes 2 and 0 times 2 becomes 0 so we end up with this To do this in code we multiply each of the vectors GDScript C var t Transform2D Scale t x 2 t y 2 transform t Change the node s transform to what we calculated Copy to clipboard Transform2D t Transform2D Identity Scale t X 2 t Y 2 Transform t Change the node s transform to what we calculated Copy to clipboard If we wanted to return it to its original scale we can multiply each component by 0 5 That s pretty much all there is to scaling a transformation matrix To calculate the object s scale from an existing transformation matrix you can use length on each of the column vectors Note In actual projects you can use the scaled method to perform scaling Rotating the transformation matrix We ll start the same way as earlier with the Godot logo underneath the identity matrix As an example let s say we want to rotate our Godot logo clockwise by 90 degrees Right now the X axis points right and the Y axis points down If we rotate these in our head we would logically see that the new X axis should point down and the new Y axis should point left You can imagine that you grab both the Godot logo and its vectors and then spin it around the center Wherever you finish spinning the orientation of the vectors determines what the matrix is We need to represent down and left in normal coordinates so means we ll set X to 0 1 and Y to 1 0 These are also the values of Vector2 DOWN and Vector2 LEFT When we do this we get the desired result of rotating the object If you have trouble understanding the above try this exercise Cut a square of paper draw X and Y vectors on top of it place it on graph paper then rotate it and note the endpoints To perform rotation in code we need to be able to calculate the values programmatically This image shows the formulas needed to calculate the transformation matrix from a rotation angle Don t worry if this part seems complicated I promise it s the hardest thing you need to know Note Godot represents all rotations with radians not degrees A full turn is TAU or PI 2 radians and a quarter turn of 90 degrees is TAU 4 or PI 2 radians Working with TAU usually results in more readable code Note Fun fact In addition to Y being down in Godot rotation is represented clockwise This means that all the math and trig functions behave the same as a Y is up CCW system since these differences cancel out You can think of rotations in both systems being from X to Y In order to perform a rotation of 0 5 radians about 28 65 degrees we plug in a value of 0 5 to the formula above and evaluate to find what the actual values should be Here s how that would be done in code place the script on a Node2D GDScript C var rot 0 5 The rotation to apply var t Transform2D t x x cos rot t y y cos rot t x y sin rot t y x sin rot transform t Change the node s transform to what we calculated Copy to clipboard float rot 0 5f The rotation to apply Transform2D t Transform2D Identity t X X t Y Y Mathf Cos rot t X Y t Y X Mathf Sin rot t Y X 1 Transform t Change the node s transform to what we calculated Copy to clipboard To calculate the object s rotation from an existing transformation matrix you can use atan2 t x y t x x where t is the Transform2D Note In actual projects you can use the rotated method to perform rotations Basis of the transformation matrix So far we have only been working with the x and y vectors which are in charge of representing rotation scale and or shearing advanced covered at the end The X and Y vectors are together called the basis of the transformation matrix The terms basis and basis vectors are important to know You might have noticed that Transform2D actually has three Vector2 values x y and origin The origin value is not part of the basis but it is part of the transform and we need it to represent position From now on we ll keep track of the origin vector in all examples You can think of origin as another column but it s often better to think of it as completely separate Note that in 3D Godot has a separate Basis structure for holding the three Vector3 values of the basis since the code can get complex and it makes sense to separate it from Transform3D which is composed of one Basis and one extra Vector3 for the origin Translating the transformation matrix Changing the origin vector is called translating the transformation matrix Translating is basically a technical term for moving the object but it explicitly does not involve any rotation Let s work through an example to help understand this We will start with the identity transform like last time except we will keep track of the origin vector this time If we want to move the object to a position of 1 2 we need to set its origin vector to 1 2 There is also a translated_local method which performs a different operation to adding or changing origin directly The translated_local method will translate the object relative to its own rotation For example an object rotated 90 degrees clockwise will move to the right when translated_local with Vector2 UP To translate relative to the global parent frame use translated instead Note Godot s 2D uses coordinates based on pixels so in actual projects you will want to translate by hundreds of units Putting it all together We re going to apply everything we mentioned so far onto one transform To follow along create a project with a Sprite2D node and use the Godot logo for the texture resource Let s set the translation to 350 150 rotate by 0 5 rad and scale by 3 I ve posted a screenshot and the code to reproduce it but I encourage you to try and reproduce the screenshot without looking at the code GDScript C var t Transform2D Translation t origin Vector2 350 150 Rotation var rot 0 5 The rotation to apply t x x cos rot t y y cos rot t x y sin rot t y x sin rot Scale t x 3 t y 3 transform t Change the node s transform to what we calculated Copy to clipboard Transform2D t Transform2D Identity Translation t Origin new Vector2 350 150 Rotation float rot 0 5f The rotation to apply t X X t Y Y Mathf Cos rot t X Y t Y X Mathf Sin rot t Y X 1 Scale t X 3 t Y 3 Transform t Change the node s transform to what we calculated Copy to clipboard Shearing the transformation matrix advanced Note If you are only looking for how to use transformation matrices feel free to skip this section of the tutorial This section explores an uncommonly used aspect of transformation matrices for the purpose of building an understanding of them Node2D provides a shearing property out of the box You may have noticed that a transform has more degrees of freedom than the combination of the above actions The basis of a 2D transformation matrix has four total numbers in two Vector2 values while a rotation value and a Vector2 for scale only has 3 numbers The high level concept for the missing degree of freedom is called shearing Normally you will always have the basis vectors perpendicular to each other However shearing can be useful in some situations and understanding shearing helps you understand how transforms work To show you visually how it will look let s overlay a grid onto the Godot logo Each point on this grid is obtained by adding the basis vectors together The bottom right corner is X Y while the top right corner is X Y If we change the basis vectors the entire grid moves with it as the grid is composed of the basis vectors All lines on the grid that are currently parallel will remain parallel no matter what changes we make to the basis vectors As an example let s set Y to 1 1 GDScript C var t Transform2D Shear by setting Y to 1 1 t y Vector2 ONE transform t Change the node s transform to what we calculated Copy to clipboard Transform2D t Transform2D Identity Shear by setting Y to 1 1 t Y Vector2 One Transform t Change the node s transform to what we calculated Copy to clipboard Note You can t set the raw values of a Transform2D in the editor so you must use code if you want to shear the object Due to the vectors no longer being perpendicular the object has been sheared The bottom center of the grid which is 0 1 relative to itself is now located at a world position of 1 1 The intra object coordinates are called UV coordinates in textures so let s borrow that terminology for here To find the world position from a relative position the formula is U X V Y where U and V are numbers and X and Y are the basis vectors The bottom right corner of the grid which is always at the UV position of 1 1 is at the world position of 2 1 which is calculated from X 1 Y 1 which is 1 0 1 1 or 1 1 0 1 or 2 1 This matches up with our observation of where the bottom right corner of the image is Similarly the top right corner of the grid which is always at the UV position of 1 1 is at the world position of 0 1 which is calculated from X 1 Y 1 which is 1 0 1 1 or 1 1 0 1 or 0 1 This matches up with our observation of where the top right corner of the image is Hopefully you now fully understand the how a transformation matrix affects the object and the relationship between the basis vectors and how the object s UV or intra coordinates have their world position changed Note In Godot all transform math is done relative to the parent node When we refer to world position that would be relative to the node s parent instead if the node had a parent If you would like additional explanation you should check out 3Blue1Brown s excellent video about linear transformations https www youtube com watch v kYB8IZa5AuE Practical applications of transforms In actual projects you will usually be working with transforms inside transforms by having multiple Node2D or Node3D nodes parented to each other However it s useful to understand how to manually calculate the values we need We will go over how you could use Transform2D or Transform3D to manually calculate transforms of nodes Converting positions between transforms There are many cases where you d want to convert a position in and out of a transform For example if you have a position relative to the player and would like to find the world parent relative position or if you have a world position and want to know where it is relative to the player We can find what a vector relative to the player would be defined in world space as using the operator GDScript C World space vector 100 units below the player print transform Vector2 0 100 Copy to clipboard World space vector 100 units below the player GD Print Transform new Vector2 0 100 Copy to clipboard And we can use the operator in the opposite order to find a what world space position would be if it was defined relative to the player GDScript C Where is 0 100 relative to the player print Vector2 0 100 transform Copy to clipboard Where is 0 100 relative to the player GD Print new Vector2 0 100 Transform Copy to clipboard Note If you know in advance that the transform is positioned at 0 0 you can use the basis_xform or basis_xform_inv methods instead which skip dealing with translation Moving an object relative to itself A common operation especially in 3D games is to move an object relative to itself For example in first person shooter games you would want the character to move forward Z axis when you press W Since the basis vectors are the orientation relative to the parent and the origin vector is the position relative to the parent we can add multiples of the basis vectors to move an object relative to itself This code moves an object 100 units to its own right GDScript C transform origin transform x 100 Copy to clipboard Transform2D t Transform t Origin t X 100 Transform t Copy to clipboard For moving in 3D you would need to replace x with basis x Note In actual projects you can use translate_object_local in 3D or move_local_x and move_local_y in 2D to do this Applying transforms onto transforms One of the most important things to know about transforms is how you can use several of them together A parent node s transform affects all of its children Let s dissect an example In this image the child node has a 2 after the component names to distinguish them from the parent node It might look a bit overwhelming with so many numbers but remember that each number is displayed twice next to the arrows and also in the matrices and that almost half of the numbers are zero The only transformations going on here are that the parent node has been given a scale of 2 1 the child has been given a scale of 0 5 0 5 and both nodes have been given positions All child transformations are affected by the parent transformations The child has a scale of 0 5 0 5 so you would expect it to be a 1 1 ratio square and it is but only relative to the parent The child s X vector ends up being 1 0 in world space because it is scaled by the parent s basis vectors Similarly the child node s origin vector is set to 1 1 but this actually moves it 2 1 in world space due to the parent node s basis vectors To calculate a child transform s world space transform manually this is the code we would use GDScript C Set up transforms like in the image except make positions be 100 times bigger var parent Transform2D Vector2 2 0 Vector2 0 1 Vector2 100 200 var child Transform2D Vector2 0 5 0 Vector2 0 0 5 Vector2 100 100 Calculate the child s world space transform origin 2 0 100 0 1 100 100 200 var origin parent x child origin x parent y child origin y parent origin basis_x 2 0 0 5 0 1 0 var basis_x parent x child x x parent y child x y basis_y 2 0 0 0 1 0 5 var basis_y parent x child y x parent y child y y Change the node s transform to what we calculated transform Transform2D basis_x basis_y origin Copy to clipboard Set up transforms like in the image except make positions be 100 times bigger Transform2D parent new Transform2D 2 0 0 1 100 200 Transform2D child new Transform2D 0 5f 0 0 0 5f 100 100 Calculate the child s world space transform origin 2 0 100 0 1 100 100 200 Vector2 origin parent X child Origin X parent Y child Origin Y parent Origin basisX 2 0 0 5 0 1 0 0 5 0 Vector2 basisX parent X child X X parent Y child X Y basisY 2 0 0 0 1 0 5 0 5 0 Vector2 basisY parent X child Y X parent Y child Y Y Change the node s transform to what we calculated Transform new Transform2D basisX basisY origin Copy to clipboard In actual projects we can find the world transform of the child by applying one transform onto another using the operator GDScript C Set up transforms like in the image except make positions be 100 times bigger var parent Transform2D Vector2 2 0 Vector2 0 1 Vector2 100 200 var child Transform2D Vector2 0 5 0 Vector2 0 0 5 Vector2 100 100 Change the node s transform to what would be the child s world transform transform parent child Copy to clipboard Set up transforms like in the image except make positions be 100 times bigger Transform2D parent new Transform2D 2 0 0 1 100 200 Transform2D child new Transform2D 0 5f 0 0 0 5f 100 100 Change the node s transform to what would be the child s world transform Transform parent child Copy to clipboard Note When multiplying matrices order matters Don t mix them up Lastly applying the identity transform will always do nothing If you would like additional explanation you should check out 3Blue1Brown s excellent video about matrix composition https www youtube com watch v XkY2DOUCWMU Inverting a transformation matrix The affine_inverse function returns a transform that undoes the previous transform This can be useful in some situations Let s take a look at a few examples Multiplying an inverse transform by the normal transform undoes all transformations GDScript C var ti transform affine_inverse var t ti transform The transform is the identity transform Copy to clipboard Transform2D ti Transform AffineInverse Transform2D t ti Transform The transform is the identity transform Copy to clipboard Transforming a position by a transform and its inverse results in the same position GDScript C var ti transform affine_inverse position transform position position ti position The position is the same as before Copy to clipboard Transform2D ti Transform AffineInverse Position Transform Position Position ti Position The position is the same as before Copy to clipboard How does it all work in 3D One of the great things about transformation matrices is that they work very similarly between 2D and 3D transformations All the code and formulas used above for 2D work the same in 3D with 3 exceptions the addition of a third axis that each axis is of type Vector3 and also that Godot stores the Basis separately from the Transform3D since the math can get complex and it makes sense to separate it All of the concepts for how translation rotation scale and shearing work in 3D are all the same compared to 2D To scale we take each component and multiply it to rotate we change where each basis vector is pointing to translate we manipulate the origin and to shear we change the basis vectors to be non perpendicular If you would like it s a good idea to play around with transforms to get an understanding of how they work Godot allows you to edit 3D transform matrices directly from the inspector You can download this project which has colored lines and cubes to help visualize the Basis vectors and the origin in both 2D and 3D https github com godotengine godot demo projects tree master misc matrix_transform Note You cannot edit Node2D s transform matrix directly in Godot 4 0 s inspector This may be changed in a future release of Godot If you would like additional explanation you should check out 3Blue1Brown s excellent video about 3D linear transformations https www youtube com watch v rHLEWRxRGiM Representing rotation in 3D advanced The biggest difference between 2D and 3D transformation matrices is how you represent rotation by itself without the basis vectors With 2D we have an easy way atan2 to switch between a transformation matrix and an angle In 3D rotation is too complex to represent as one number There is something called Euler angles which can represent rotations as a set of 3 numbers however they are limited and not very useful except for trivial cases In 3D we do not typically use angles we either use a transformation basis used pretty much everywhere in Godot or we use quaternions Godot can represent quaternions using the Quaternion struct My suggestion to you is to completely ignore how they work under the hood because they are very complicated and unintuitive However if you really must know how it works here are some great resources which you can follow in order https www youtube com watch v mvmuCPvRoWQ https www youtube com watch v d4EgbgTm0Bg https eater net quaternions User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Interpolation Interpolation is a very basic operation in graphics programming It s good to become familiar with it in order to expand your horizons as a graphics developer The basic idea is that you want to transition from A to B A value t represents the states in between For example if t is 0 then the state is A If t is 1 then the state is B Anything in between is an interpolation Between two real floating point numbers an interpolation can be described as interpolation A 1 t B t Copy to clipboard And often simplified to interpolation A B A t Copy to clipboard The name of this type of interpolation which transforms a value into another at constant speed is linear So when you hear about Linear Interpolation you know they are referring to this formula There are other types of interpolations which will not be covered here A recommended read afterwards is the Bezier page Vector interpolation Vector types Vector2 and Vector3 can also be interpolated they come with handy functions to do it Vector2 lerp and Vector3 lerp For cubic interpolation there are also Vector2 cubic_interpolate and Vector3 cubic_interpolate which do a Bezier style interpolation Here is example pseudo code for going from point A to B using interpolation GDScript C var t 0 0 func _physics_process delta t delta 0 4 Sprite2D position A position lerp B position t Copy to clipboard private float _t 0 0f public override void _PhysicsProcess double delta _t float delta 0 4f Marker2D a GetNode Marker2D A Marker2D b GetNode Marker2D B Sprite2D sprite GetNode Sprite2D Sprite2D sprite Position a Position Lerp b Position _t Copy to clipboard It will produce the following motion Transform interpolation It is also possible to interpolate whole transforms make sure they have either uniform scale or at least the same non uniform scale For this the function Transform3D interpolate_with can be used Here is an example of transforming a monkey from Position1 to Position2 Using the following pseudocode GDScript C var t 0 0 func _physics_process delta t delta Monkey transform Position1 transform interpolate_with Position2 transform t Copy to clipboard private float _t 0 0f public override void _PhysicsProcess double delta _t float delta Marker3D p1 GetNode Marker3D Position1 Marker3D p2 GetNode Marker3D Position2 CSGMesh3D monkey GetNode CSGMesh3D Monkey monkey Transform p1 Transform InterpolateWith p2 Transform _t Copy to clipboard And again it will produce the following motion Smoothing motion Interpolation can be used to smooth movement rotation etc Here is an example of a circle following the mouse using smoothed motion GDScript C const FOLLOW_SPEED 4 0 func _physics_process delta var mouse_pos get_local_mouse_position Sprite2D position Sprite2D position lerp mouse_pos delta FOLLOW_SPEED Copy to clipboard private const float FollowSpeed 4 0f public override void _PhysicsProcess double delta Vector2 mousePos GetLocalMousePosition Sprite2D sprite GetNode Sprite2D Sprite2D sprite Position sprite Position Lerp mousePos float delta FollowSpeed Copy to clipboard Here is how it looks This is useful for smoothing camera movement allies following you ensuring they stay within a certain range and many other common game patterns User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Beziers curves and paths Bezier curves are a mathematical approximation of natural geometric shapes We use them to represent a curve with as little information as possible and with a high level of flexibility Unlike more abstract mathematical concepts Bezier curves were created for industrial design They are a popular tool in the graphics software industry They rely on interpolation which we saw in the previous article combining multiple steps to create smooth curves To better understand how Bezier curves work let s start from its simplest form Quadratic Bezier Quadratic Bezier Take three points the minimum required for Quadratic Bezier to work To draw a curve between them we first interpolate gradually over the two vertices of each of the two segments formed by the three points using values ranging from 0 to 1 This gives us two points that move along the segments as we change the value of t from 0 to 1 GDScript C func _quadratic_bezier p0 Vector2 p1 Vector2 p2 Vector2 t float var q0 p0 lerp p1 t var q1 p1 lerp p2 t Copy to clipboard private Vector2 QuadraticBezier Vector2 p0 Vector2 p1 Vector2 p2 float t Vector2 q0 p0 Lerp p1 t Vector2 q1 p1 Lerp p2 t Copy to clipboard We then interpolate q0 and q1 to obtain a single point r that moves along a curve GDScript C var r q0 lerp q1 t return r Copy to clipboard Vector2 r q0 Lerp q1 t return r Copy to clipboard This type of curve is called a Quadratic Bezier curve Image credit Wikipedia Cubic Bezier Building upon the previous example we can get more control by interpolating between four points We first use a function with four parameters to take four points as an input p0 p1 p2 and p3 GDScript C func _cubic_bezier p0 Vector2 p1 Vector2 p2 Vector2 p3 Vector2 t float Copy to clipboard public Vector2 CubicBezier Vector2 p0 Vector2 p1 Vector2 p2 Vector2 p3 float t Copy to clipboard We apply a linear interpolation to each couple of points to reduce them to three GDScript C var q0 p0 lerp p1 t var q1 p1 lerp p2 t var q2 p2 lerp p3 t Copy to clipboard Vector2 q0 p0 Lerp p1 t Vector2 q1 p1 Lerp p2 t Vector2 q2 p2 Lerp p3 t Copy to clipboard We then take our three points and reduce them to two GDScript C var r0 q0 lerp q1 t var r1 q1 lerp q2 t Copy to clipboard Vector2 r0 q0 Lerp q1 t Vector2 r1 q1 Lerp q2 t Copy to clipboard And to one GDScript C var s r0 lerp r1 t return s Copy to clipboard Vector2 s r0 Lerp r1 t return s Copy to clipboard Here is the full function GDScript C func _cubic_bezier p0 Vector2 p1 Vector2 p2 Vector2 p3 Vector2 t float var q0 p0 lerp p1 t var q1 p1 lerp p2 t var q2 p2 lerp p3 t var r0 q0 lerp q1 t var r1 q1 lerp q2 t var s r0 lerp r1 t return s Copy to clipboard private Vector2 CubicBezier Vector2 p0 Vector2 p1 Vector2 p2 Vector2 p3 float t Vector2 q0 p0 Lerp p1 t Vector2 q1 p1 Lerp p2 t Vector2 q2 p2 Lerp p3 t Vector2 r0 q0 Lerp q1 t Vector2 r1 q1 Lerp q2 t Vector2 s r0 Lerp r1 t return s Copy to clipboard The result will be a smooth curve interpolating between all four points Image credit Wikipedia Note Cubic Bezier interpolation works the same in 3D just use Vector3 instead of Vector2 Adding control points Building upon Cubic Bezier we can change the way two of the points work to control the shape of our curve freely Instead of having p0 p1 p2 and p3 we will store them as point0 p0 Is the first point the source control0 p1 p0 Is a vector relative to the first control point control1 p3 p2 Is a vector relative to the second control point point1 p3 Is the second point the destination This way we have two points and two control points which are relative vectors to the respective points If you ve used graphics or animation software before this might look familiar This is how graphics software presents Bezier curves to the users and how they work and look in Godot Curve2D Curve3D Path and Path2D There are two objects that contain curves Curve3D and Curve2D for 3D and 2D respectively They can contain several points allowing for longer paths It is also possible to set them to nodes Path3D and Path2D also for 3D and 2D respectively Using them however may not be completely obvious so following is a description of the most common use cases for Bezier curves Evaluating Only evaluating them may be an option but in most cases it s not very useful The big drawback with Bezier curves is that if you traverse them at constant speed from t 0 to t 1 the actual interpolation will not move at constant speed The speed is also an interpolation between the distances between points p0 p1 p2 and p3 and there is not a mathematically simple way to traverse the curve at constant speed Let s do an example with the following pseudocode GDScript C var t 0 0 func _process delta t delta position _cubic_bezier p0 p1 p2 p3 t Copy to clipboard private float _t 0 0f public override void _Process double delta _t float delta Position CubicBezier p0 p1 p2 p3 _t Copy to clipboard As you can see the speed in pixels per second of the circle varies even though t is increased at constant speed This makes beziers difficult to use for anything practical out of the box Drawing Drawing beziers or objects based on the curve is a very common use case but it s also not easy For pretty much any case Bezier curves need to be converted to some sort of segments This is normally difficult however without creating a very high amount of them The reason is that some sections of a curve specifically corners may require considerable amounts of points while other sections may not Additionally if both control points were 0 0 remember they are relative vectors the Bezier curve would just be a straight line so drawing a high amount of points would be wasteful Before drawing Bezier curves tessellation is required This is often done with a recursive or divide and conquer function that splits the curve until the curvature amount becomes less than a certain threshold The Curve classes provide this via the Curve2D tessellate function which receives optional stages of recursion and angle tolerance arguments This way drawing something based on a curve is easier Traversal The last common use case for the curves is to traverse them Because of what was mentioned before regarding constant speed this is also difficult To make this easier the curves need to be baked into equidistant points This way they can be approximated with regular interpolation which can be improved further with a cubic option To do this just use the Curve3D sample_baked method together with Curve2D get_baked_length The first call to either of them will bake the curve internally Traversal at constant speed then can be done with the following pseudo code GDScript C var t 0 0 func _process delta t delta position curve sample_baked t curve get_baked_length true Copy to clipboard private float _t 0 0f public override void _Process double delta _t float delta Position curve SampleBaked _t curve GetBakedLength true Copy to clipboard And the output will then move at constant speed User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Random number generation Many games rely on randomness to implement core game mechanics This page guides you through common types of randomness and how to implement them in Godot After giving you a brief overview of useful functions that generate random numbers you will learn how to get random elements from arrays dictionaries and how to use a noise generator in GDScript Lastly we ll take a look at cryptographically secure random number generation and how it differs from typical random number generation Note Computers cannot generate true random numbers Instead they rely on pseudorandom number generators PRNGs Godot internally uses the PCG Family of pseudorandom number generators Global scope versus RandomNumberGenerator class Godot exposes two ways to generate random numbers via global scope methods or using the RandomNumberGenerator class Global scope methods are easier to set up but they don t offer as much control RandomNumberGenerator requires more code to use but allows creating multiple instances each with their own seed and state This tutorial uses global scope methods except when the method only exists in the RandomNumberGenerator class The randomize method Note Since Godot 4 0 the random seed is automatically set to a random value when the project starts This means you don t need to call randomize in _ready anymore to ensure that results are random across project runs However you can still use randomize if you want to use a specific seed number or generate it using a different method In global scope you can find a randomize method This method should be called only once when your project starts to initialize the random seed Calling it multiple times is unnecessary and may impact performance negatively Putting it in your main scene script s _ready method is a good choice GDScript C func _ready randomize Copy to clipboard public override void _Ready GD Randomize Copy to clipboard You can also set a fixed random seed instead using seed Doing so will give you deterministic results across runs GDScript C func _ready seed 12345 To use a string as a seed you can hash it to a number seed Hello world hash Copy to clipboard public override void _Ready GD Seed 12345 GD Seed Hello world Hash Copy to clipboard When using the RandomNumberGenerator class you should call randomize on the instance since it has its own seed GDScript C var random RandomNumberGenerator new random randomize Copy to clipboard var random new RandomNumberGenerator random Randomize Copy to clipboard Getting a random number Let s look at some of the most commonly used functions and methods to generate random numbers in Godot The function randi returns a random number between 0 and 2 32 1 Since the maximum value is huge you most likely want to use the modulo operator to bound the result between 0 and the denominator GDScript C Prints a random integer between 0 and 49 print randi 50 Prints a random integer between 10 and 60 print randi 51 10 Copy to clipboard Prints a random integer between 0 and 49 GD Print GD Randi 50 Prints a random integer between 10 and 60 GD Print GD Randi 51 10 Copy to clipboard randf returns a random floating point number between 0 and 1 This is useful to implement a Weighted random probability system among other things randfn returns a random floating point number following a normal distribution This means the returned value is more likely to be around the mean 0 0 by default varying by the deviation 1 0 by default GDScript C Prints a random floating point number from a normal distribution with a mean 0 0 and deviation 1 0 var random RandomNumberGenerator new random randomize print random randfn Copy to clipboard Prints a normally distributed floating point number between 0 0 and 1 0 var random new RandomNumberGenerator random Randomize GD Print random Randfn Copy to clipboard randf_range takes two arguments from and to and returns a random floating point number between from and to GDScript Prints a random floating point number between 4 and 6 5 print randf_range 4 6 5 Copy to clipboard RandomNumberGenerator randi_range takes two arguments from and to and returns a random integer between from and to GDScript C Prints a random integer between 10 and 10 var random RandomNumberGenerator new random randomize print random randi_range 10 10 Copy to clipboard Prints a random integer number between 10 and 10 random Randomize GD Print random RandiRange 10 10 Copy to clipboard Get a random array element We can use random integer generation to get a random element from an array GDScript C var _fruits apple orange pear banana func _ready randomize for i in range 100 Pick 100 fruits randomly print get_fruit func get_fruit var random_fruit _fruits randi _fruits size Returns apple orange pear or banana every time the code runs We may get the same fruit multiple times in a row return random_fruit Copy to clipboard private string _fruits apple orange pear banana public override void _Ready GD Randomize for int i 0 i 100 i Pick 100 fruits randomly GD Print GetFruit public string GetFruit string randomFruit _fruits GD Randi _fruits Length Returns apple orange pear or banana every time the code runs We may get the same fruit multiple times in a row return randomFruit Copy to clipboard To prevent the same fruit from being picked more than once in a row we can add more logic to this method GDScript C var _fruits apple orange pear banana var _last_fruit func _ready randomize Pick 100 fruits randomly for i in range 100 print get_fruit func get_fruit var random_fruit _fruits randi _fruits size while random_fruit _last_fruit The last fruit was picked try again until we get a different fruit random_fruit _fruits randi _fruits size Note if the random element to pick is passed by reference such as an array or dictionary use _last_fruit random_fruit duplicate instead _last_fruit random_fruit Returns apple orange pear or banana every time the code runs The function will never return the same fruit more than once in a row return random_fruit Copy to clipboard private string _fruits apple orange pear banana private string _lastFruit public override void _Ready GD Randomize for int i 0 i 100 i Pick 100 fruits randomly GD Print GetFruit public string GetFruit string randomFruit _fruits GD Randi _fruits Length while randomFruit _lastFruit The last fruit was picked try again until we get a different fruit randomFruit _fruits GD Randi _fruits Length _lastFruit randomFruit Returns apple orange pear or banana every time the code runs The function will never return the same fruit more than once in a row return randomFruit Copy to clipboard This approach can be useful to make random number generation feel less repetitive Still it doesn t prevent results from ping ponging between a limited set of values To prevent this use the shuffle bag pattern instead Get a random dictionary value We can apply similar logic from arrays to dictionaries as well GDScript var metals copper quantity 50 price 50 silver quantity 20 price 150 gold quantity 3 price 500 func _ready randomize for i in range 20 print get_metal func get_metal var random_metal metals values randi metals size Returns a random metal value dictionary every time the code runs The same metal may be selected multiple times in succession return random_metal Copy to clipboard Weighted random probability The randf method returns a floating point number between 0 0 and 1 0 We can use this to create a weighted probability where different outcomes have different likelihoods GDScript C func _ready randomize for i in range 100 print get_item_rarity func get_item_rarity var random_float randf if random_float 0 8 80 chance of being returned return Common elif random_float 0 95 15 chance of being returned return Uncommon else 5 chance of being returned return Rare Copy to clipboard public override void _Ready GD Randomize for int i 0 i 100 i GD Print GetItemRarity public string GetItemRarity float randomFloat GD Randf if randomFloat 0 8f 80 chance of being returned return Common else if randomFloat 0 95f 15 chance of being returned return Uncommon else 5 chance of being returned return Rare Copy to clipboard Better randomness using shuffle bags Taking the same example as above we would like to pick fruits at random However relying on random number generation every time a fruit is selected can lead to a less uniform distribution If the player is lucky or unlucky they could get the same fruit three or more times in a row You can accomplish this using the shuffle bag pattern It works by removing an element from the array after choosing it After multiple selections the array ends up empty When that happens you reinitialize it to its default value var _fruits apple orange pear banana A copy of the fruits array so we can restore the original value into fruits var _fruits_full func _ready randomize _fruits_full _fruits duplicate _fruits shuffle for i in 100 print get_fruit func get_fruit if _fruits is_empty Fill the fruits array again and shuffle it _fruits _fruits_full duplicate _fruits shuffle Get a random fruit since we shuffled the array and remove it from the _fruits array var random_fruit _fruits pop_front Prints apple orange pear or banana every time the code runs return random_fruit Copy to clipboard When running the above code there is a chance to get the same fruit twice in a row Once we picked a fruit it will no longer be a possible return value unless the array is now empty When the array is empty we reset it back to its default value making it possible to have the same fruit again but only once Random noise The random number generation shown above can show its limits when you need a value that slowly changes depending on the input The input can be a position time or anything else To achieve this you can use random noise functions Noise functions are especially popular in procedural generation to generate realistic looking terrain Godot provides FastNoiseLite for this which supports 1D 2D and 3D noise Here s an example with 1D noise GDScript C var _noise FastNoiseLite new func _ready randomize Configure the FastNoiseLite instance _noise noise_type FastNoiseLite NoiseType TYPE_SIMPLEX_SMOOTH _noise seed randi _noise fractal_octaves 4 _noise frequency 1 0 20 0 for i in 100 Prints a slowly changing series of floating point numbers between 1 0 and 1 0 print _noise get_noise_1d i Copy to clipboard private FastNoiseLite _noise new FastNoiseLite public override void _Ready GD Randomize Configure the FastNoiseLite instance _noise NoiseType NoiseTypeEnum SimplexSmooth _noise Seed int GD Randi _noise FractalOctaves 4 _noise Frequency 1 0f 20 0f for int i 0 i 100 i GD Print _noise GetNoise1D i Copy to clipboard Cryptographically secure pseudorandom number generation So far the approaches mentioned above are not suitable for cryptographically secure pseudorandom number generation CSPRNG This is fine for games but this is not sufficient for scenarios where encryption authentication or signing is involved Godot offers a Crypto class for this This class can perform asymmetric key encryption decryption signing verification while also generating cryptographically secure random bytes RSA keys HMAC digests and self signed X509Certificate s The downside of CSPRNG is that it s much slower than standard pseudorandom number generation Its API is also less convenient to use As a result CSPRNG should be avoided for gameplay elements Example of using the Crypto class to generate 2 random integers between 0 and 2 32 1 inclusive var crypto Crypto new Request as many bytes as you need but try to minimize the amount of separate requests to improve performance Each 32 bit integer requires 4 bytes so we request 8 bytes var byte_array crypto generate_random_bytes 8 Use the decode_u32 method from PackedByteArray to decode a 32 bit unsigned integer from the beginning of byte_array This method doesn t modify byte_array var random_int_1 byte_array decode_u32 0 Do the same as above but with an offset of 4 bytes since we ve already decoded the first 4 bytes previously var random_int_2 byte_array decode_u32 4 prints Random integers random_int_1 random_int_2 Copy to clipboard See also See PackedByteArray s documentation for other methods you can use to decode the generated bytes into various types of data such as integers or floats User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Navigation 2D navigation overview 3D navigation overview Using NavigationServer Using NavigationMaps Using NavigationRegions Using navigation meshes Using NavigationPaths Using NavigationPathQueryObjects Using NavigationAgents Using NavigationObstacles Using NavigationLinks Using NavigationLayers Navigation debug tools Connecting navigation meshes Support different actor types Support different actor locomotion Support different actor area access Optimizing Navigation Performance Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue 2D navigation overview Godot provides multiple objects classes and servers to facilitate grid based or mesh based navigation and pathfinding for 2D and 3D games The following section provides a quick overview over all available navigation related objects in Godot for 2D scenes and their primary use Godot provides the following objects and classes for 2D navigation Astar2D Astar2D objects provide an option to find the shortest path in a graph of weighted points The AStar2D class is best suited for cell based 2D gameplay that does not require actors to reach any possible position within an area but only predefined distinct positions NavigationServer2D NavigationServer2D provides a powerful server API to find the shortest path between two positions on an area defined by a navigation mesh The NavigationServer is best suited for 2D realtime gameplay that does require actors to reach any possible position within a navigation mesh defined area Mesh based navigation scales well with large game worlds as a large area can often be defined with a single polygon when it would require many many grid cells The NavigationServer holds different navigation maps that each consist of regions that hold navigation mesh data Agents can be placed on a map for avoidance calculation RIDs are used to reference internal maps regions and agents when communicating with the server The following NavigationServer RID types are available NavMap RID Reference to a specific navigation map that holds regions and agents The map will attempt to join the navigation meshes of the regions by proximity The map will synchronize regions and agents each physics frame NavRegion RID Reference to a specific navigation region that can hold navigation mesh data The region can be enabled disabled or the use restricted with a navigation layer bitmask NavLink RID Reference to a specific navigation link that connects two navigation mesh positions over arbitrary distances NavAgent RID Reference to a specific avoidance agent The avoidance is specified by a radius value NavObstacle RID Reference to a specific avoidance obstacle used to affect and constrain the avoidance velocity of agents The following scene tree nodes are available as helpers to work with the NavigationServer2D API NavigationRegion2D Node A Node that holds a NavigationPolygon resource that defines a navigation mesh for the NavigationServer2D The region can be enabled disabled The use in pathfinding can be further restricted through the navigation_layers bitmask The NavigationServer2D will join the navigation meshes of regions by proximity for a combined navigation mesh NavigationLink2D Node A Node that connects two positions on navigation meshes over arbitrary distances for pathfinding The link can be enabled disabled The link can be made one way or bidirectional The use in pathfinding can be further restricted through the navigation_layers bitmask Links tell the pathfinding that a connection exists and at what cost The actual agent handling and movement needs to happen in custom scripts NavigationAgent2D Node A helper Node used to facilitate common NavigationServer2D API calls for pathfinding and avoidance Use this Node with a Node2D inheriting parent Node NavigationObstacle2D Node A Node that can be used to affect and constrain the avoidance velocity of avoidance enabled agents This Node does NOT affect the pathfinding of agents You need to change the navigation meshes for that instead The 2D navigation meshes are defined with the following resources NavigationPolygon Resource A resource that holds 2D navigation mesh data It provides polygon drawing tools to allow defining navigation areas inside the Editor as well as at runtime The NavigationRegion2D Node uses this resource to define its navigation area The NavigationServer2D uses this resource to update the navigation mesh of individual regions The TileSet Editor creates and uses this resource internally when defining tile navigation areas See also You can see how 2D navigation works in action using the 2D Navigation Polygon and Grid based Navigation with AStarGrid2D demo projects Setup for 2D scene The following steps show the basic setup for minimal viable navigation in 2D It uses the NavigationServer2D and a NavigationAgent2D for path movement Add a NavigationRegion2D Node to the scene Click on the region node and add a new NavigationPolygon Resource to the region node Define the movable navigation area with the NavigationPolygon draw tool Then click the Bake NavigationPolygon button on the toolbar Note The navigation mesh defines the area where an actor can stand and move with its center Leave enough margin between the navigation polygon edges and collision objects to not get path following actors repeatedly stuck on collision Add a CharacterBody2D node in the scene with a basic collision shape and a sprite or mesh for visuals Add a NavigationAgent2D node below the character node Add the following script to the CharacterBody2D node We make sure to set a movement target after the scene has fully loaded and the NavigationServer had time to sync GDScript C extends CharacterBody2D var movement_speed float 200 0 var movement_target_position Vector2 Vector2 60 0 180 0 onready var navigation_agent NavigationAgent2D NavigationAgent2D func _ready These values need to be adjusted for the actor s speed and the navigation layout navigation_agent path_desired_distance 4 0 navigation_agent target_desired_distance 4 0 Make sure to not await during _ready actor_setup call_deferred func actor_setup Wait for the first physics frame so the NavigationServer can sync await get_tree physics_frame Now that the navigation map is no longer empty set the movement target set_movement_target movement_target_position func set_movement_target movement_target Vector2 navigation_agent target_position movement_target func _physics_process delta if navigation_agent is_navigation_finished return var current_agent_position Vector2 global_position var next_path_position Vector2 navigation_agent get_next_path_position velocity current_agent_position direction_to next_path_position movement_speed move_and_slide Copy to clipboard using Godot public partial class MyCharacterBody2D CharacterBody2D private NavigationAgent2D _navigationAgent private float _movementSpeed 200 0f private Vector2 _movementTargetPosition new Vector2 70 0f 226 0f public Vector2 MovementTarget get return _navigationAgent TargetPosition set _navigationAgent TargetPosition value public override void _Ready base _Ready _navigationAgent GetNode NavigationAgent2D NavigationAgent2D These values need to be adjusted for the actor s speed and the navigation layout _navigationAgent PathDesiredDistance 4 0f _navigationAgent TargetDesiredDistance 4 0f Make sure to not await during _Ready Callable From ActorSetup CallDeferred public override void _PhysicsProcess double delta base _PhysicsProcess delta if _navigationAgent IsNavigationFinished return Vector2 currentAgentPosition GlobalTransform Origin Vector2 nextPathPosition _navigationAgent GetNextPathPosition Velocity currentAgentPosition DirectionTo nextPathPosition _movementSpeed MoveAndSlide private async void ActorSetup Wait for the first physics frame so the NavigationServer can sync await ToSignal GetTree SceneTree SignalName PhysicsFrame Now that the navigation map is no longer empty set the movement target MovementTarget _movementTargetPosition Copy to clipboard Note On the first frame the NavigationServer map has not synchronized region data and any path query will return empty Wait for the NavigationServer synchronization by awaiting one frame in the script User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue 3D navigation overview Godot provides multiple objects classes and servers to facilitate grid based or mesh based navigation and pathfinding for 2D and 3D games The following section provides a quick overview over all available navigation related objects in Godot for 3D scenes and their primary use Godot provides the following objects and classes for 3D navigation Astar3D Astar3D objects provide an option to find the shortest path in a graph of weighted points The AStar3D class is best suited for cell based 3D gameplay that does not require actors to reach any possible position within an area but only predefined distinct positions NavigationServer3D NavigationServer3D provides a powerful server API to find the shortest path between two positions on an area defined by a navigation mesh The NavigationServer is best suited for 3D realtime gameplay that does require actors to reach any possible position within a navigation mesh defined area Mesh based navigation scales well with large game worlds as a large area can often be defined with a single polygon when it would require many many grid cells The NavigationServer holds different navigation maps that each consist of regions that hold navigation mesh data Agents can be placed on a map for avoidance calculation RIDs are used to reference internal maps regions and agents when communicating with the server The following NavigationServer RID types are available NavMap RID Reference to a specific navigation map that holds regions and agents The map will attempt to join the navigation meshes of the regions by proximity The map will synchronize regions and agents each physics frame NavRegion RID Reference to a specific navigation region that can hold navigation mesh data The region can be enabled disabled or the use restricted with a navigation layer bitmask NavLink RID Reference to a specific navigation link that connects two navigation mesh positions over arbitrary distances NavAgent RID Reference to a specific avoidance agent The avoidance is defined by a radius value NavObstacle RID Reference to a specific avoidance obstacle used to affect and constrain the avoidance velocity of agents The following scene tree nodes are available as helpers to work with the NavigationServer3D API NavigationRegion3D Node A Node that holds a Navigation Mesh resource that defines a navigation mesh for the NavigationServer3D The region can be enabled disabled The use in pathfinding can be further restricted through the navigation_layers bitmask The NavigationServer3D will join the navigation meshes of regions by proximity for a combined navigation mesh NavigationLink3D Node A Node that connects two positions on navigation meshes over arbitrary distances for pathfinding The link can be enabled disabled The link can be made one way or bidirectional The use in pathfinding can be further restricted through the navigation_layers bitmask Links tell the pathfinding that a connection exists and at what cost The actual agent handling and movement needs to happen in custom scripts NavigationAgent3D Node A helper Node used to facilitate common NavigationServer3D API calls for pathfinding and avoidance Use this Node with a Node3D inheriting parent Node NavigationObstacle3D Node A Node that can be used to affect and constrain the avoidance velocity of avoidance enabled agents This Node does NOT affect the pathfinding of agents You need to change the navigation meshes for that instead The 3D navigation meshes are defined with the following resources NavigationMesh Resource A resource that holds 3D navigation mesh data It provides 3D geometry baking options to define navigation areas inside the Editor as well as at runtime The NavigationRegion3D Node uses this resource to define its navigation area The NavigationServer3D uses this resource to update the navigation mesh of individual regions The GridMap Editor uses this resource when specific navigation meshes are defined for each grid cell See also You can see how 3D navigation works in action using the 3D Navigation demo project Setup for 3D scene The following steps show a basic setup for minimal viable navigation in 3D It uses the NavigationServer3D and a NavigationAgent3D for path movement Add a NavigationRegion3D Node to the scene Click on the region node and add a new NavigationMesh Resource to the region node Add a new MeshInstance3D node as a child of the region node Select the MeshInstance3D node and add a new PlaneMesh and increase the xy size to 10 Select the region node again and press the Bake Navmesh button on the top bar Now a transparent navigation mesh appears that hovers some distance on top of the PlaneMesh Add a CharacterBody3D node in the scene with a basic collision shape and some mesh for visuals Add a NavigationAgent3D node below the character node Add a script to the CharacterBody3D node with the following content We make sure to set a movement target after the scene has fully loaded and the NavigationServer had time to sync Also add a Camera3D and some light and environment to see something GDScript C extends CharacterBody3D var movement_speed float 2 0 var movement_target_position Vector3 Vector3 3 0 0 0 2 0 onready var navigation_agent NavigationAgent3D NavigationAgent3D func _ready These values need to be adjusted for the actor s speed and the navigation layout navigation_agent path_desired_distance 0 5 navigation_agent target_desired_distance 0 5 Make sure to not await during _ready actor_setup call_deferred func actor_setup Wait for the first physics frame so the NavigationServer can sync await get_tree physics_frame Now that the navigation map is no longer empty set the movement target set_movement_target movement_target_position func set_movement_target movement_target Vector3 navigation_agent set_target_position movement_target func _physics_process delta if navigation_agent is_navigation_finished return var current_agent_position Vector3 global_position var next_path_position Vector3 navigation_agent get_next_path_position velocity current_agent_position direction_to next_path_position movement_speed move_and_slide Copy to clipboard using Godot public partial class MyCharacterBody3D CharacterBody3D private NavigationAgent3D _navigationAgent private float _movementSpeed 2 0f private Vector3 _movementTargetPosition new Vector3 3 0f 0 0f 2 0f public Vector3 MovementTarget get return _navigationAgent TargetPosition set _navigationAgent TargetPosition value public override void _Ready base _Ready _navigationAgent GetNode NavigationAgent3D NavigationAgent3D These values need to be adjusted for the actor s speed and the navigation layout _navigationAgent PathDesiredDistance 0 5f _navigationAgent TargetDesiredDistance 0 5f Make sure to not await during _Ready Callable From ActorSetup CallDeferred public override void _PhysicsProcess double delta base _PhysicsProcess delta if _navigationAgent IsNavigationFinished return Vector3 currentAgentPosition GlobalTransform Origin Vector3 nextPathPosition _navigationAgent GetNextPathPosition Velocity currentAgentPosition DirectionTo nextPathPosition _movementSpeed MoveAndSlide private async void ActorSetup Wait for the first physics frame so the NavigationServer can sync await ToSignal GetTree SceneTree SignalName PhysicsFrame Now that the navigation map is no longer empty set the movement target MovementTarget _movementTargetPosition Copy to clipboard Note On the first frame the NavigationServer map has not synchronized region data and any path query will return empty Wait for the NavigationServer synchronization by awaiting one frame in the script User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using NavigationServer 2D and 3D version of the NavigationServer are available as NavigationServer2D and NavigationServer3D respectively Both 2D and 3D use the same NavigationServer with NavigationServer3D being the primary server The NavigationServer2D is a frontend that converts 2D positions into 3D positions and back Hence it is entirely possible if not a little cumbersome to exclusively use the NavigationServer3D API for 2D navigation Communicating with the NavigationServer To work with the NavigationServer means to prepare parameters for a query that can be sent to the NavigationServer for updates or requesting data To reference the internal NavigationServer objects like maps regions and agents RIDs are used as identification numbers Every navigation related node in the scene tree has a function that returns the RID for this node Threading and Synchronization The NavigationServer does not update every change immediately but waits until the end of the physics frame to synchronize all the changes together Waiting for synchronization is required to apply changes to all maps regions and agents Synchronization is done because some updates like a recalculation of the entire navigation map are very expensive and require updated data from all other objects Also the NavigationServer uses a threadpool by default for some functionality like avoidance calculation between agents Waiting is not required for most get functions that only request data from the NavigationServer without making changes Note that not all data will account for changes made in the same frame E g if an avoidance agent changed the navigation map this frame the agent_get_map function will still return the old map before the synchronization The exception to this are nodes that store their values internally before sending the update to the NavigationServer When a getter on a node is used for a value that was updated in the same frame it will return the already updated value stored on the node The NavigationServer is thread safe as it places all API calls that want to make changes in a queue to be executed in the synchronization phase Synchronization for the NavigationServer happens in the middle of the physics frame after scene input from scripts and nodes are all done Note The important takeaway is that most NavigationServer changes take effect after the next physics frame and not immediately This includes all changes made by navigation related nodes in the scene tree or through scripts Note All setters and delete functions require synchronization 2D and 3D NavigationServer differences NavigationServer2D and NavigationServer3D are equivalent in functionality for their dimension and both use the same NavigationServer behind the scene Strictly technical a NavigationServer2D is a myth The NavigationServer2D is a frontend to facilitate conversions of Vector2 x y to Vector3 x 0 0 z and back for the NavigationServer3D API 2D uses a flat 3D mesh pathfinding and the NavigationServer2D facilitates the conversions When a guide uses just NavigationServer without the 2D or 3D suffix it usually works for both servers by exchange Vector2 x y with Vector3 x 0 0 z or reverse Technically it is possible to use the tools for creating navigation meshes in one dimension for the other dimension e g baking a 2D navigation mesh with the 3D NavigationMesh when using flat 3D source geometry or creating 3D flat navigation meshes with the polygon outline draw tools of NavigationRegion2D and NavigationPolygons Any RID created with the NavigationServer2D API works on the NavigationServer3D API as well and both 2D and 3D avoidance agents can exist on the same map Note Regions created in 2D and 3D will merge their navigation meshes when placed on the same map and merge conditions apply The NavigationServer does not discriminate between NavigationRegion2D and NavigationRegion3D nodes as both are regions on the server By default those nodes register on different navigation maps so this merge can only happen when maps are changed manually e g with scripts Actors with avoidance enabled will avoid both 2D and 3D avoidance agents when placed on the same map Warning It is not possible to use NavigationServer2D while disabling 3D on a Godot custom build Waiting for synchronization At the start of the game a new scene or procedural navigation changes any path query to a NavigationServer will return empty or wrong The navigation map is still empty or not updated at this point All nodes from the scene tree need to first upload their navigation related data to the NavigationServer Each added or changed map region or agent need to be registered with the NavigationServer Afterward the NavigationServer requires a physics frame for synchronization to update the maps regions and agents One workaround is to make a deferred call to a custom setup function so all nodes are ready The setup function makes all the navigation changes e g adding procedural stuff Afterwards the function waits for the next physics frame before continuing with path queries GDScript C extends Node3D func _ready Use call deferred to make sure the entire scene tree nodes are setup else await on physics_frame in a _ready might get stuck custom_setup call_deferred func custom_setup Create a new navigation map var map RID NavigationServer3D map_create NavigationServer3D map_set_up map Vector3 UP NavigationServer3D map_set_active map true Create a new navigation region and add it to the map var region RID NavigationServer3D region_create NavigationServer3D region_set_transform region Transform3D NavigationServer3D region_set_map region map Create a procedural navigation mesh for the region var new_navigation_mesh NavigationMesh NavigationMesh new var vertices PackedVector3Array PackedVector3Array Vector3 0 0 0 Vector3 9 0 0 0 Vector3 0 0 9 0 new_navigation_mesh set_vertices vertices var polygon PackedInt32Array PackedInt32Array 0 1 2 new_navigation_mesh add_polygon polygon NavigationServer3D region_set_navigation_mesh region new_navigation_mesh Wait for NavigationServer sync to adapt to made changes await get_tree physics_frame Query the path from the navigation server var start_position Vector3 Vector3 0 1 0 0 0 1 var target_position Vector3 Vector3 1 0 0 0 1 0 var optimize_path bool true var path PackedVector3Array NavigationServer3D map_get_path map start_position target_position optimize_path print Found a path print path Copy to clipboard using Godot public partial class MyNode3D Node3D public override void _Ready Use call deferred to make sure the entire scene tree nodes are setup else await on physics_frame in a _Ready might get stuck CallDeferred MethodName CustomSetup private async void CustomSetup Create a new navigation map Rid map NavigationServer3D MapCreate NavigationServer3D MapSetUp map Vector3 Up NavigationServer3D MapSetActive map true Create a new navigation region and add it to the map Rid region NavigationServer3D RegionCreate NavigationServer3D RegionSetTransform region Transform3D Identity NavigationServer3D RegionSetMap region map Create a procedural navigation mesh for the region var newNavigationMesh new NavigationMesh Vertices new new Vector3 0 0f 0 0f 0 0f new Vector3 9 0f 0 0f 0 0f new Vector3 0 0f 0 0f 9 0f int polygon new 0 1 2 newNavigationMesh AddPolygon polygon NavigationServer3D RegionSetNavigationMesh region newNavigationMesh Wait for NavigationServer sync to adapt to made changes await ToSignal GetTree SceneTree SignalName PhysicsFrame Query the path from the navigation server var startPosition new Vector3 0 1f 0 0f 0 1f var targetPosition new Vector3 1 0f 0 0f 1 0f Vector3 path NavigationServer3D MapGetPath map startPosition targetPosition optimize true GD Print Found a path GD Print Variant path Copy to clipboard Server Avoidance Callbacks If RVO avoidance agents are registered for avoidance callbacks the NavigationServer dispatches their velocity_computed signals just before the PhysicsServer synchronization To learn more about NavigationAgents see Using NavigationAgents The simplified order of execution for NavigationAgents that use avoidance physics frame starts _physics_process delta velocity property is set on NavigationAgent Node Agent sends velocity and position to NavigationServer NavigationServer waits for synchronization NavigationServer synchronizes and computes avoidance velocities for all registered avoidance agents NavigationServer sends safe velocity vector with signals for each registered avoidance agents Agents receive the signal and move their parent e g with move_and_slide or linear_velocity PhysicsServer synchronizes physics frame ends Therefore moving a physicsbody actor in the callback function with the safe velocity is perfectly thread and physics safe as all happens inside the same physics frame before the PhysicsServer commits to changes and does its own calculations User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using NavigationMaps A NavigationMap is an abstract navigation world on the NavigationServer identified by a NavigationServer RID A map can hold and connect a near infinite number of navigation regions with navigation meshes to build the traversable areas of a game world for pathfinding A map can contain avoidance agents Collision avoidance will be calculated based on the agents present in the map Note Different NavigationMaps are completely isolated from each other but navigation regions and avoidance agents can switch between different maps Switches will become effective on NavigationServer synchronization Default navigation maps By default Godot creates a navigation map for each World2D and World3D of the root viewport The 2D default navigation map RID can be obtained with get_world_2d get_navigation_map from any Node2D inheriting Node The 3D default navigation map RID can be obtained with get_world_3d get_navigation_map from any Node3D inheriting Node 2D GDScript 2D C 3D GDScript 3D C extends Node2D func _ready void var default_navigation_map_rid RID get_world_2d get_navigation_map Copy to clipboard public partial class MyNode2D Node2D public override void _Ready Rid defaultNavigationMapRid GetWorld2D NavigationMap Copy to clipboard extends Node3D func _ready void var default_navigation_map_rid RID get_world_3d get_navigation_map Copy to clipboard public partial class MyNode3D Node3D public override void _Ready Rid defaultNavigationMapRid GetWorld3D NavigationMap Copy to clipboard Creating new navigation maps The NavigationServer can create and support as many navigation maps as required for specific gameplay Additional navigation maps are created and handled by using the NavigationServer API directly e g to support different avoidance agent or actor locomotion types For example uses of different navigation maps see Support different actor types and Support different actor locomotion Each navigation map individually synchronizes queued changes to its navigation regions and avoidance agents A navigation map that has not received changes will consume little to no processing time Navigation regions and avoidance agents can only be part of a single navigation map but they can switch map at any time Note A navigation map switch will take effect only after the next NavigationServer synchronization 2D GDScript 2D C 3D GDScript 3D C extends Node2D func _ready void var new_navigation_map RID NavigationServer2D map_create NavigationServer2D map_set_active new_navigation_map true Copy to clipboard public partial class MyNode2D Node2D public override void _Ready Rid newNavigationMap NavigationServer2D MapCreate NavigationServer2D MapSetActive newNavigationMap true Copy to clipboard extends Node3D func _ready void var new_navigation_map RID NavigationServer3D map_create NavigationServer3D map_set_active new_navigation_map true Copy to clipboard public partial class MyNode3D Node3D public override void _Ready Rid newNavigationMap NavigationServer3D MapCreate NavigationServer3D MapSetActive newNavigationMap true Copy to clipboard Note There is no difference between navigation maps created with the NavigationServer2D API or the NavigationServer3D API User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using NavigationRegions NavigationRegions are the visual Node representation of a region of the navigation map on the NavigationServer Each NavigationRegion node holds a resource for the navigation mesh data Both 2D and 3D version are available as NavigationRegion2D and NavigationRegion3D respectively Individual NavigationRegions upload their 2D NavigationPolygon or 3D NavigationMesh resource data to the NavigationServer The NavigationServer map turns this information into a combined navigation map for pathfinding To create a navigation region using the scene tree add a NavigationRegion2D or NavigationRegion3D node to the scene All regions require a navigation mesh resource to function See Using navigation meshes to learn how to create and apply navigation meshes NavigationRegions will automatically push global_transform changes to the region on the NavigationServer which makes them suitable for moving platforms The NavigationServer will attempt to connect the navigation meshes of individual regions when they are close enough For more details see Connecting navigation meshes To connect NavigationRegions over arbitrary distances see Using NavigationLinks to learn how to create and use NavigationLinks Warning While changing the transform of a NavigationRegion node does update the region position on the NavigationServer changing the scale does not A navigation mesh resource has no scale and needs to be fully updated when source geometry changes scale Regions can be enabled disabled and if disabled will not contribute to future pathfinding queries Note Existing paths will not be automatically updated when a region gets enabled disabled Creating new navigation regions New NavigationRegion nodes will automatically register to the default world navigation map for their 2D 3D dimension The region RID can then be obtained from NavigationRegion Nodes with get_rid 2D GDScript 2D C 3D GDScript 3D C extends NavigationRegion2D var navigationserver_region_rid RID get_rid Copy to clipboard public partial class MyNavigationRegion2D NavigationRegion2D public override void _Ready Rid navigationServerRegionRid GetRid Copy to clipboard extends NavigationRegion3D var navigationserver_region_rid RID get_rid Copy to clipboard public partial class MyNavigationRegion3D NavigationRegion3D public override void _Ready Rid navigationServerRegionRid GetRid Copy to clipboard New regions can also be created with the NavigationServer API and added to any existing map If regions are created with the NavigationServer API directly they need to be assigned a navigation map manually 2D GDScript 2D C 3D GDScript 3D C extends Node2D func _ready void var new_region_rid RID NavigationServer2D region_create var default_map_rid RID get_world_2d get_navigation_map NavigationServer2D region_set_map new_region_rid default_map_rid Copy to clipboard public partial class MyNode2D Node2D public override void _Ready Rid newRegionRid NavigationServer2D RegionCreate Rid defaultMapRid GetWorld2D NavigationMap NavigationServer2D RegionSetMap newRegionRid defaultMapRid Copy to clipboard extends Node3D func _ready void var new_region_rid RID NavigationServer3D region_create var default_map_rid RID get_world_3d get_navigation_map NavigationServer3D region_set_map new_region_rid default_map_rid Copy to clipboard public partial class MyNode3D Node3D public override void _Ready Rid newRegionRid NavigationServer3D RegionCreate Rid defaultMapRid GetWorld3D NavigationMap NavigationServer3D RegionSetMap newRegionRid defaultMapRid Copy to clipboard Note Navigation regions can only be assigned to a single navigation map If an existing region is assigned to a new navigation map it will leave the old map User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using navigation meshes 2D and 3D versions of the navigation mesh are available as NavigationPolygon and NavigationMesh respectively Note A navigation mesh only describes a traversable area for an agent s center position Any radius values an agent may have are ignored If you want pathfinding to account for an agent s collision size you need to shrink the navigation mesh accordingly Navigation works independently from other engine parts like rendering or physics Navigation meshes are the only things considered when doing pathfinding e g visuals and collision shapes for example are completely ignored by the navigation system If you need to take other data like visuals for example into account when doing pathfinding you need to adapt your navigation meshes accordingly The process of factoring in navigation restrictions in navigation meshes is commonly referred to as navigation mesh baking A navigation mesh describes a surface that an agent can stand on safely with its center compared to physics shapes that describe outer collision bounds If you experience clipping or collision problems while following navigation paths always remember that you need to tell the navigation system what your intentions are through an appropriate navigation mesh By itself the navigation system will never know this is a tree rock wall collision shape or visual mesh because it only knows that here I was told I can path safely because it is on a navigation mesh Navigation mesh baking can be done either by using a NavigationRegion2D or NavigationRegion3D or by using the NavigationServer2D and NavigationServer3D API directly Baking a navigation mesh with a NavigationRegion Baking a navigation mesh with agent radius offset from geometry The navigation mesh baking is made more accessible with the NavigationRegion node When baking with a NavigationRegion node the individual parsing baking and region update steps are all combined into one function The nodes are available in 2D and 3D as NavigationRegion2D and NavigationRegion3D respectively Tip The navigation mesh source_geometry_mode can be switched to parse specific node group names so nodes that should be baked can be placed anywhere in the scene Baking with a NavigationRegion2D Baking with a NavigationRegion3D When a NavigationRegion2D node is selected in the Editor bake options as well as polygon draw tools appear in the top bar of the Editor In order for the region to work a NavigationPolygon resource needs to be added The properties to parse and bake a navigation mesh are then part of the used resource and can be found in the resource Inspector The result of the source geometry parsing can be influenced with the following properties The parsed_geometry_type that filters if visual objects or physics objects or both should be parsed from the SceneTree For more details on what objects are parsed and how see the section about parsing source geometry below The collision_mask filters which physics collision objects are included when the parsed_geometry_type includes static colliders The source_geometry_mode that defines on which node s to start the parsing and how to traverse the SceneTree The source_geometry_group_name is used when only a certain node group should be parsed Depends on the selected source_geometry_mode With the source geometry added the result of the baking can be controlled with the following properties The cell_size sets the rasterization grid size and should match the navigation map size The agent_radius shrinks the baked navigation mesh to have enough margin for the agent collision size The NavigationRegion2D baking can also be used at runtime with scripts GDScript var on_thread bool true bake_navigation_polygon on_thread Copy to clipboard To quickly test the 2D baking with default settings Add a NavigationRegion2D Add a NavigationPolygon resource to the NavigationRegion2D Add a Polygon2D below the NavigationRegion2D Draw 1 NavigationPolygon outline with the selected NavigationRegion2D draw tool Draw 1 Polygon2D outline inside the NavigationPolygon outline with the selected Polygon2D draw tool Hit the Editor bake button and a navigation mesh should appear When a NavigationRegion3D node is selected in the Editor bake options appear in the top bar of the Editor In order for the region to work a NavigationMesh resource needs to be added The properties to parse and bake a navigation mesh are then part of the used resource and can be found in the resource Inspector The result of the source geometry parsing can be influenced with the following properties The parsed_geometry_type that filters if visual objects or physics objects or both should be parsed from the SceneTree For more details on what objects are parsed and how see the section about parsing source geometry below The collision_mask filters which physics collision objects are included when the parsed_geometry_type includes static colliders The source_geometry_mode that defines on which node s to start the parsing and how to traverse the SceneTree The source_geometry_group_name is used when only a certain node group should be parsed Depends on the selected source_geometry_mode With the source geometry added the result of the baking can be controlled with the following properties The cell_size and cell_height sets the rasterization voxel grid size and should match the navigation map size The agent_radius shrinks the baked navigation mesh to have enough margin for the agent collision size The agent_height excludes areas from the navigation mesh where the agent is too tall to fit in The agent_max_climb and agent_max_slope removes areas where the height difference between neighboring voxels is too large or where their surface is too steep Warning A too small cell_size or cell_height can create so many voxels that it has the potential to freeze the game or even crash The NavigationRegion3D baking can also be used at runtime with scripts GDScript var on_thread bool true bake_navigation_mesh on_thread Copy to clipboard To quickly test the 3D baking with default settings Add a NavigationRegion3D Add a NavigationMesh resource to the NavigationRegion3D Add a MeshInstance3D below the NavigationRegion3D Add a PlaneMesh to the MeshInstance3D Hit the Editor bake button and a navigation mesh should appear Baking a navigation mesh with the NavigationServer The NavigationServer2D and NavigationServer3D have API functions to call each step of the navigation mesh baking process individually parse_source_geometry_data can be used to parse source geometry to a reusable and serializable resource bake_from_source_geometry_data can be used to bake a navigation mesh from already parsed data e g to avoid runtime performance issues with redundant parsing bake_from_source_geometry_data_async is the same but bakes the navigation mesh deferred with threads not blocking the main thread Compared to a NavigationRegion the NavigationServer offers finer control over the navigation mesh baking process In turn it is more complex to use but also provides more advanced options Some other advantages of the NavigationServer over a NavigationRegion are The server can parse source geometry without baking e g to cache it for later use The server allows selecting the root node at which to start the source geometry parsing manually The server can accept and bake from procedurally generated source geometry data The server can bake multiple navigation meshes in sequence while re using the same source geometry data To bake navigation meshes with the NavigationServer source geometry is required Source geometry is geometry data that should be considered in a navigation mesh baking process Both navigation meshes for 2D and 3D are created by baking them from source geometry 2D and 3D versions of the source geometry resources are available as NavigationMeshSourceGeometryData2D and NavigationMeshSourceGeometryData3D respectively Source geometry can be geometry parsed from visual meshes from physics collision or procedural created arrays of data like outlines 2D and triangle faces 3D For convenience source geometry is commonly parsed directly from node setups in the SceneTree For runtime navigation mesh re bakes be aware that the geometry parsing always happens on the main thread Note The SceneTree is not thread safe Parsing source geometry from the SceneTree can only be done on the main thread Warning The data from visual meshes and polygons needs to be received from the GPU stalling the RenderingServer in the process For runtime re baking prefer using physics shapes as parsed source geometry Source geometry is stored inside resources so the created geometry can be reused for multiple bakes E g baking multiple navigation meshes for different agent sizes from the same source geometry This also allows to save source geometry to disk so it can be loaded later e g to avoid the overhead of parsing it again at runtime The geometry data should be in general kept very simple As many edges as are required but as few as possible Especially in 2D duplicated and nested geometry should be avoided as it forces polygon hole calculation that can result in flipped polygons An example for nested geometry would be a smaller StaticBody2D shape placed completely inside the bounds of another StaticBody2D shape Baking navigation mesh chunks for large worlds Building and updating individual navigation mesh chunks at runtime See also You can see the navigation mesh chunk baking in action in the Navigation Mesh Chunks 2D and Navigation Mesh Chunks 3D demo projects To avoid misaligned edges between different region chunks the navigation meshes have two important properties for the navigation mesh baking process The baking bound and the border size Together they can be used to ensure perfectly aligned edges between region chunks Navigation mesh chunk baked with bake bound or baked with additional border size The baking bound which is an axis aligned Rect2 for 2D and AABB for 3D limits the used source geometry by discarding all the geometry that is outside of the bounds The NavigationPolygon properties baking_rect and baking_rect_offset can be used to create and place the 2D baking bound The NavigationMesh properties filter_baking_aabb and filter_baking_aabb_offset can be used to create and place the 3D baking bound With only the baking bound set another problem still exists The resulting navigation mesh will inevitably be affected by necessary offsets like the agent_radius which makes the edges not align properly Navigation mesh chunks with noticeable gaps due to baked agent radius offset This is where the border_size property for navigation mesh comes in The border size is an inward margin from the baking bound The important characteristic of the border size is that it is unaffected by most offsets and postprocessing like the agent_radius Instead of discarding source geometry the border size discards parts of the final surface of the baked navigation mesh If the baking bound is large enough the border size can remove the problematic surface parts so that only the intended chunk size is left Navigation mesh chunks with aligned edges and without gaps Note The baking bounds need to be large enough to include a reasonable amount of source geometry from all the neighboring chunks Warning In 3D the functionality of the border size is limited to the xz axis Navigation mesh baking common problems There are some common user problems and important caveats to consider when creating or baking navigation meshes Navigation mesh baking creates frame rate problems at runtime The navigation mesh baking is by default done on a background thread so as long as the platform supports threads the actual baking is rarely the source of any performance issues assuming a reasonably sized and complex geometry for runtime rebakes The common source for performance issues at runtime is the parsing step for source geometry that involves nodes and the SceneTree The SceneTree is not thread safe so all the nodes need to be parsed on the main thread Some nodes with a lot of data can be very heavy and slow to parse at runtime e g a TileMap has one or more polygons for every single used cell and TileMapLayer to parse Nodes that hold meshes need to request the data from the RenderingServer stalling the rendering in the process To improve performance use more optimized shapes e g collision shapes over detailed visual meshes and merge and simplify as much geometry as possible upfront If nothing helps don t parse the SceneTree and add the source geometry procedural with scripts If only pure data arrays are used as source geometry the entire baking process can be done on a background thread Navigation mesh creates unintended holes in 2D The navigation mesh baking in 2D is done by doing polygon clipping operations based on outline paths Polygons with holes are a necessary evil to create more complex 2D polygons but can become unpredictable for users with many complex shapes involved To avoid any unexpected problems with polygon hole calculations avoid nesting any outlines inside other outlines of the same type traversable obstruction This includes the parsed shapes from nodes E g placing a smaller StaticBody2D shape inside a larger StaticBody2D shape can result in the resulting polygon being flipped Navigation mesh appears inside geometry in 3D The navigation mesh baking in 3D has no concept of inside The voxel cells used to rasterize the geometry are either occupied or not Remove the geometry that is on the ground inside the other geometry If that is not possible add smaller dummy geometry inside with as few triangles as possible so the cells are occupied with something A NavigationObstacle3D shape set to bake with navigation mesh can be used to discard geometry as well A NavigationObstacle3D shape can be used to discard unwanted navigation mesh parts Navigation mesh script templates The following script uses the NavigationServer to parse source geometry from the scene tree bakes a navigation mesh and updates a navigation region with the updated navigation mesh 2D GDScript 3D GDScript extends Node2D var navigation_mesh NavigationPolygon var source_geometry NavigationMeshSourceGeometryData2D var callback_parsing Callable var callback_baking Callable var region_rid RID func _ready void navigation_mesh NavigationPolygon new navigation_mesh agent_radius 10 0 source_geometry NavigationMeshSourceGeometryData2D new callback_parsing on_parsing_done callback_baking on_baking_done region_rid NavigationServer2D region_create Enable the region and set it to the default navigation map NavigationServer2D region_set_enabled region_rid true NavigationServer2D region_set_map region_rid get_world_2d get_navigation_map Some mega nodes like TileMap are often not ready on the first frame Also the parsing needs to happen on the main thread So do a deferred call to avoid common parsing issues parse_source_geometry call_deferred func parse_source_geometry void source_geometry clear var root_node Node2D self Parse the obstruction outlines from all child nodes of the root node by default NavigationServer2D parse_source_geometry_data navigation_mesh source_geometry root_node callback_parsing func on_parsing_done void If we did not parse a TileMap with navigation mesh cells we may now only have obstruction outlines so add at least one traversable outline so the obstructions outlines have something to cut into source_geometry add_traversable_outline PackedVector2Array Vector2 0 0 0 0 Vector2 500 0 0 0 Vector2 500 0 500 0 Vector2 0 0 500 0 Bake the navigation mesh on a thread with the source geometry data NavigationServer2D bake_from_source_geometry_data_async navigation_mesh source_geometry callback_baking func on_baking_done void Update the region with the updated navigation mesh NavigationServer2D region_set_navigation_polygon region_rid navigation_mesh Copy to clipboard extends Node3D var navigation_mesh NavigationMesh var source_geometry NavigationMeshSourceGeometryData3D var callback_parsing Callable var callback_baking Callable var region_rid RID func _ready void navigation_mesh NavigationMesh new navigation_mesh agent_radius 0 5 source_geometry NavigationMeshSourceGeometryData3D new callback_parsing on_parsing_done callback_baking on_baking_done region_rid NavigationServer3D region_create Enable the region and set it to the default navigation map NavigationServer3D region_set_enabled region_rid true NavigationServer3D region_set_map region_rid get_world_3d get_navigation_map Some mega nodes like GridMap are often not ready on the first frame Also the parsing needs to happen on the main thread So do a deferred call to avoid common parsing issues parse_source_geometry call_deferred func parse_source_geometry void source_geometry clear var root_node Node3D self Parse the geometry from all mesh child nodes of the root node by default NavigationServer3D parse_source_geometry_data navigation_mesh source_geometry root_node callback_parsing func on_parsing_done void Bake the navigation mesh on a thread with the source geometry data NavigationServer3D bake_from_source_geometry_data_async navigation_mesh source_geometry callback_baking func on_baking_done void Update the region with the updated navigation mesh NavigationServer3D region_set_navigation_mesh region_rid navigation_mesh Copy to clipboard The following script uses the NavigationServer to update a navigation region with procedurally generated navigation mesh data 2D GDScript 3D GDScript extends Node2D var navigation_mesh NavigationPolygon var region_rid RID func _ready void navigation_mesh NavigationPolygon new region_rid NavigationServer2D region_create Enable the region and set it to the default navigation map NavigationServer2D region_set_enabled region_rid true NavigationServer2D region_set_map region_rid get_world_2d get_navigation_map Add vertices for a convex polygon navigation_mesh vertices PackedVector2Array Vector2 0 0 0 0 Vector2 100 0 0 0 Vector2 100 0 100 0 Vector2 0 0 100 0 Add indices for the polygon navigation_mesh add_polygon PackedInt32Array 0 1 2 3 NavigationServer2D region_set_navigation_polygon region_rid navigation_mesh Copy to clipboard extends Node3D var navigation_mesh NavigationMesh var region_rid RID func _ready void navigation_mesh NavigationMesh new region_rid NavigationServer3D region_create Enable the region and set it to the default navigation map NavigationServer3D region_set_enabled region_rid true NavigationServer3D region_set_map region_rid get_world_3d get_navigation_map Add vertices for a convex polygon navigation_mesh vertices PackedVector3Array Vector3 1 0 0 0 1 0 Vector3 1 0 0 0 1 0 Vector3 1 0 0 0 1 0 Vector3 1 0 0 0 1 0 Add indices for the polygon navigation_mesh add_polygon PackedInt32Array 0 1 2 3 NavigationServer3D region_set_navigation_mesh region_rid navigation_mesh Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using NavigationPaths Obtaining a NavigationPath Navigation paths can be directly queried from the NavigationServer and do not require any additional nodes or objects as long as the navigation map has a navigation mesh to work with To obtain a 2D path use NavigationServer2D map_get_path map from to optimize navigation_layers To obtain a 3D path use NavigationServer3D map_get_path map from to optimize navigation_layers For more customizable navigation path queries that require additional setup see Using NavigationPathQueryObjects One of the required parameters for the query is the RID of the navigation map Each game world has a default navigation map automatically created The default navigation maps can be retrieved with get_world_2d get_navigation_map from any Node2D inheriting node or get_world_3d get_navigation_map from any Node3D inheriting node The second and third parameters are the starting position and the target position as Vector2 for 2D or Vector3 for 3D If the optimized parameter is true path positions will be shortened along polygon corners with an additional funnel algorithm pass This works well for free movement on navigation meshes with unequally sized polygons as the path will hug around corners along the polygon corridor found by the A algorithm With small cells the A algorithm creates a very narrow funnel corridor that can create ugly corner paths when used with grids If the optimized parameter is false path positions will be placed at the center of each polygon edge This works well for pure grid movement on navigation meshes with equally sized polygons as the path will go through the center of the grid cells Outside of grids due to polygons often covering large open areas with a single long edge this can create paths with unnecessary long detours 2D GDScript 3D GDScript extends Node2D Basic query for a navigation path using the default navigation map func get_navigation_path p_start_position Vector2 p_target_position Vector2 PackedVector2Array if not is_inside_tree return PackedVector2Array var default_map_rid RID get_world_2d get_navigation_map var path PackedVector2Array NavigationServer2D map_get_path default_map_rid p_start_position p_target_position true return path Copy to clipboard extends Node3D Basic query for a navigation path using the default navigation map func get_navigation_path p_start_position Vector3 p_target_position Vector3 PackedVector3Array if not is_inside_tree return PackedVector3Array var default_map_rid RID get_world_3d get_navigation_map var path PackedVector3Array NavigationServer3D map_get_path default_map_rid p_start_position p_target_position true return path Copy to clipboard A returned path by the NavigationServer will be a PackedVector2Array for 2D or a PackedVector3Array for 3D These are just a memory optimized Array of vector positions All position vectors inside the array are guaranteed to be inside a NavigationPolygon or NavigationMesh The path array if not empty has the navigation mesh position closest to the starting position at the first index path 0 position The closest available navigation mesh position to the target position is the last index path path size 1 position All indexes between are the path points that an actor should follow to reach the target without leaving the navigation mesh Note If the target position is on a different navigation mesh that is not merged or connected the navigation path will lead to the closest possible position on the starting position navigation mesh The following script moves a Node3D inheriting node along a navigation path using the default navigation map by setting the target position with set_movement_target GDScript onready var default_3d_map_rid RID get_world_3d get_navigation_map var movement_speed float 4 0 var movement_delta float var path_point_margin float 0 5 var current_path_index int 0 var current_path_point Vector3 var current_path PackedVector3Array func set_movement_target target_position Vector3 var start_position Vector3 global_transform origin current_path NavigationServer3D map_get_path default_3d_map_rid start_position target_position true if not current_path is_empty current_path_index 0 current_path_point current_path 0 func _physics_process delta if current_path is_empty return movement_delta movement_speed delta if global_transform origin distance_to current_path_point path_point_margin current_path_index 1 if current_path_index current_path size current_path current_path_index 0 current_path_point global_transform origin return current_path_point current_path current_path_index var new_velocity Vector3 global_transform origin direction_to current_path_point movement_delta global_transform origin global_transform origin move_toward global_transform origin new_velocity movement_delta Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using NavigationPathQueryObjects NavigationPathQueryObjects can be used together with NavigationServer query_path to obtain a heavily customized navigation path including optional meta data about the path This requires more setup compared to obtaining a normal NavigationPath but lets you tailor the pathfinding and provided path data to the different needs of a project NavigationPathQueryObjects consist of a pair of objects a NavigationPathQueryParameters object holding the customization options for the query and a NavigationPathQueryResult that receives regular updates with the resulting path and meta data from the query 2D and 3D versions of NavigationPathQueryParameters are available as NavigationPathQueryParameters2D and NavigationPathQueryParameters3D respectively 2D and 3D versions of NavigationPathQueryResult are available as NavigationPathQueryResult2D and NavigationPathQueryResult3D respectively Both parameters and result are used as a pair with the NavigationServer query_path function For the available customization options and their use see the class doc of the parameters While not a strict requirement both objects are intended to be created once in advance stored in a persistent variable for the agent and reused for every followup path query with updated parameters This reuse avoids performance implications from frequent object creation if a project has a large quantity of simultaneous agents that regularly update their paths 2D GDScript 3D GDScript Prepare query objects var query_parameters NavigationPathQueryParameters2D new var query_result NavigationPathQueryResult2D new func query_path p_start_position Vector2 p_target_position Vector2 p_navigation_layers int 1 PackedVector2Array if not is_inside_tree return PackedVector2Array query_parameters map get_world_2d get_navigation_map query_parameters start_position p_start_position query_parameters target_position p_target_position query_parameters navigation_layers p_navigation_layers NavigationServer2D query_path query_parameters query_result var path PackedVector2Array query_result get_path return path Copy to clipboard Prepare query objects var query_parameters NavigationPathQueryParameters3D new var query_result NavigationPathQueryResult3D new func query_path p_start_position Vector3 p_target_position Vector3 p_navigation_layers int 1 PackedVector3Array if not is_inside_tree return PackedVector3Array query_parameters map get_world_3d get_navigation_map query_parameters start_position p_start_position query_parameters target_position p_target_position query_parameters navigation_layers p_navigation_layers NavigationServer3D query_path query_parameters query_result var path PackedVector3Array query_result get_path return path Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using NavigationAgents NavigationsAgents are helper nodes that combine functionality for pathfinding path following and agent avoidance for a Node2D 3D inheriting parent node They facilitate common calls to the NavigationServer API on behalf of the parent actor node in a more convenient manner for beginners 2D and 3D version of NavigationAgents are available as NavigationAgent2D and NavigationAgent3D respectively New NavigationAgent nodes will automatically join the default navigation map on the World2D World3D NavigationsAgent nodes are optional and not a hard requirement to use the navigation system Their entire functionality can be replaced with scripts and direct calls to the NavigationServer API NavigationAgent Pathfinding NavigationAgents query a new navigation path on their current navigation map when their target_position is set with a global position The result of the pathfinding can be influenced with the following properties The navigation_layers bitmask can be used to limit the navigation meshes that the agent can use The pathfinding_algorithm controls how the pathfinding travels through the navigation mesh polygons in the path search The path_postprocessing sets if or how the raw path corridor found by the pathfinding is altered before it is returned The path_metadata_flags enable the collection of additional path point meta data returned by the path The simplify_path and simplify_epsilon properties can be used to remove less critical points from the path Warning Disabling path meta flags will disable related signal emissions on the agent NavigationAgent Pathfollowing After a target_position has been set for the agent the next position to follow in the path can be retrieved with the get_next_path_position function Once the next path position is received move the parent actor node of the agent towards this path position with your own movement code Note The navigation system never moves the parent node of a NavigationAgent The movement is entirely in the hands of users and their custom scripts NavigationAgents have their own internal logic to proceed with the current path and call for updates The get_next_path_position function is responsible for updating many of the agent s internal states and properties The function should be repeatedly called once every physics_process until is_navigation_finished tells that the path is finished The function should not be called after the target position or path end has been reached as it can make the agent jitter in place due to the repeated path updates Always check very early in script with is_navigation_finished if the path is already finished The following properties influence the path following behavior The path_desired_distance defines the distance at which the agent advances its internal path index to the next path position The target_desired_distance defines the distance at which the agent considers the target position to be reached and the path at its end The path_max_distance defines when an agent requests a new path cause it was moved too far away from the current path point segment The important updates are all triggered with the get_next_path_position function when called in _physics_process NavigationAgents can be used with process but are still limited to a single update that happens in physics_process Script examples for various nodes commonly used with NavigationAgents can be found further below Pathfollowing common problems There are some common user problems and important caveats to consider when writing agent movement scripts The path is returned empty If an agent queries a path before the navigation map synchronisation e g in a _ready function the path might return empty In this case the get_next_path_position function will return the same position as the agent parent node and the agent will consider the path end reached This is fixed by making a deferred call or using a callback e g waiting for the navigation map changed signal The agent is stuck dancing between two positions This is usually caused by very frequent path updates every single frame either deliberate or by accident e g max path distance set too short The pathfinding needs to find the closest position that are valid on navigation mesh If a new path is requested every single frame the first path positions might end up switching constantly in front and behind the agent s current position causing it to dance between the two positions The agent is backtracking sometimes If an agent moves very fast it might overshoot the path_desired_distance check without ever advancing the path index This can lead to the agent backtracking to the path point now behind it until it passes the distance check to increase the path index Increase the desired distances accordingly for your agent speed and update rate usually fixes this as well as a more balanced navigation mesh polygon layout with not too many polygon edges cramped together in small spaces The agent is sometimes looking backwards for a frame Same as with stuck dancing agents between two positions this is usually caused by very frequent path updates every single frame Depending on your navigation mesh layout and especially when an agent is directly placed over a navigation mesh edge or edge connection expect path positions to be sometimes slightly behind your actors current orientation This happens due to precision issues and can not always be avoided This is usually only a visible problem if actors are instantly rotated to face the current path position NavigationAgent Avoidance This section explains how to use the navigation avoidance specific to NavigationAgents In order for NavigationAgents to use the avoidance feature the enable_avoidance property must be set to true The velocity_computed signal of the NavigationAgent node must be connected to receive the safe velocity calculation result Set the velocity of the NavigationAgent node in _physics_process to update the agent with the current velocity of the agent s parent node While avoidance is enabled on the agent the safe_velocity vector will be received with the velocity_computed signal every physics frame This velocity vector should be used to move the NavigationAgent s parent node in order to avoidance collision with other avoidance using agents or avoidance obstacles Note Only other agents on the same map that are registered for avoidance themself will be considered in the avoidance calculation The following NavigationAgent properties are relevant for avoidance The property height is available in 3D only The height together with the current global y axis position of the agent determines the vertical placement of the agent in the avoidance simulation Agents using the 2D avoidance will automatically ignore other agents or obstacles that are below or above them The property radius controls the size of the avoidance circle or in case of 3D sphere around the agent This area describes the agents body and not the avoidance maneuver distance The property neighbor_distance controls the search radius of the agent when searching for other agents that should be avoided A lower value reduces processing cost The property max_neighbors controls how many other agents are considered in the avoidance calculation if they all have overlapping radius A lower value reduces processing cost but a too low value may result in agents ignoring the avoidance The properties time_horizon_agents and time_horizon_obstacles control the avoidance prediction time for other agents or obstacles in seconds When agents calculate their safe velocities they choose velocities that can be kept for this amount of seconds without colliding with another avoidance object The prediction time should be kept as low as possible as agents will slow down their velocities to avoid collision in that timeframe The property max_speed controls the maximum velocity allowed for the agents avoidance calculation If the agents parents moves faster than this value the avoidance safe_velocity might not be accurate enough to avoid collision The property use_3d_avoidance switches the agent between the 2D avoidance xz axis and the 3D avoidance xyz axis on the next update Note that 2D avoidance and 3D avoidance run in separate avoidance simulations so agents split between them do not affect each other The properties avoidance_layers and avoidance_mask are bitmasks similar to e g physics layers Agents will only avoid other avoidance objects that are on an avoidance layer that matches at least one of their own avoidance mask bits The avoidance_priority makes agents with a higher priority ignore agents with a lower priority This can be used to give certain agents more importance in the avoidance simulation e g important npcs characters without constantly changing their entire avoidance layers or mask Avoidance exists in its own space and has no information from navigation meshes or physics collision Behind the scene avoidance agents are just circles with different radius on a flat 2D plane or spheres in an otherwise empty 3D space NavigationObstacles can be used to add some environment constrains to the avoidance simulation see Using NavigationObstacles Note Avoidance does not affect the pathfinding It should be seen as an additional option for constantly moving objects that cannot be re baked to a navigation mesh efficiently in order to move around them Note RVO avoidance makes implicit assumptions about natural agent behavior E g that agents move on reasonable passing sides that can be assigned when they encounter each other This means that very clinical avoidance test scenarios will commonly fail E g agents moved directly against each other with perfect opposite velocities will fail because the agents can not get their passing sides assigned Using the NavigationAgent enable_avoidance property is the preferred option to toggle avoidance The following code snippets can be used to toggle avoidance on agents create or delete avoidance callbacks or switch avoidance modes 2D GDScript 3D GDScript extends NavigationAgent2D func _ready void var agent RID get_rid Enable avoidance NavigationServer2D agent_set_avoidance_enabled agent true Create avoidance callback NavigationServer2D agent_set_avoidance_callback agent Callable self _avoidance_done Disable avoidance NavigationServer2D agent_set_avoidance_enabled agent false Delete avoidance callback NavigationServer2D agent_set_avoidance_callback agent Callable Copy to clipboard extends NavigationAgent3D func _ready void var agent RID get_rid Enable avoidance NavigationServer3D agent_set_avoidance_enabled agent true Create avoidance callback NavigationServer3D agent_set_avoidance_callback agent Callable self _avoidance_done Switch to 3D avoidance NavigationServer3D agent_set_use_3d_avoidance agent true Disable avoidance NavigationServer3D agent_set_avoidance_enabled agent false Delete avoidance callback NavigationServer3D agent_set_avoidance_callback agent Callable Switch to 2D avoidance NavigationServer3D agent_set_use_3d_avoidance agent false Copy to clipboard NavigationAgent Script Templates The following sections provides script templates for nodes commonly used with NavigationAgents 2D GDScript 3D GDScript Node2D CharacterBody2D RigidBody2D extends Node2D export var movement_speed float 4 0 onready var navigation_agent NavigationAgent2D get_node NavigationAgent2D var movement_delta float func _ready void navigation_agent velocity_computed connect Callable _on_velocity_computed func set_movement_target movement_target Vector2 navigation_agent set_target_position movement_target func _physics_process delta Do not query when the map has never synchronized and is empty if NavigationServer2D map_get_iteration_id navigation_agent get_navigation_map 0 return if navigation_agent is_navigation_finished return movement_delta movement_speed delta var next_path_position Vector2 navigation_agent get_next_path_position var new_velocity Vector2 global_position direction_to next_path_position movement_delta if navigation_agent avoidance_enabled navigation_agent set_velocity new_velocity else _on_velocity_computed new_velocity func _on_velocity_computed safe_velocity Vector2 void global_position global_position move_toward global_position safe_velocity movement_delta Copy to clipboard extends CharacterBody2D export var movement_speed float 4 0 onready var navigation_agent NavigationAgent2D get_node NavigationAgent2D func _ready void navigation_agent velocity_computed connect Callable _on_velocity_computed func set_movement_target movement_target Vector2 navigation_agent set_target_position movement_target func _physics_process delta Do not query when the map has never synchronized and is empty if NavigationServer2D map_get_iteration_id navigation_agent get_navigation_map 0 return if navigation_agent is_navigation_finished return var next_path_position Vector2 navigation_agent get_next_path_position var new_velocity Vector2 global_position direction_to next_path_position movement_speed if navigation_agent avoidance_enabled navigation_agent set_velocity new_velocity else _on_velocity_computed new_velocity func _on_velocity_computed safe_velocity Vector2 velocity safe_velocity move_and_slide Copy to clipboard extends RigidBody2D export var movement_speed float 4 0 onready var navigation_agent NavigationAgent2D get_node NavigationAgent2D func _ready void navigation_agent velocity_computed connect Callable _on_velocity_computed func set_movement_target movement_target Vector2 navigation_agent set_target_position movement_target func _physics_process delta Do not query when the map has never synchronized and is empty if NavigationServer2D map_get_iteration_id navigation_agent get_navigation_map 0 return if navigation_agent is_navigation_finished return var next_path_position Vector2 navigation_agent get_next_path_position var new_velocity Vector2 global_position direction_to next_path_position movement_speed if navigation_agent avoidance_enabled navigation_agent set_velocity new_velocity else _on_velocity_computed new_velocity func _on_velocity_computed safe_velocity Vector2 linear_velocity safe_velocity Copy to clipboard Node3D CharacterBody3D RigidBody3D extends Node3D export var movement_speed float 4 0 onready var navigation_agent NavigationAgent3D get_node NavigationAgent3D var movement_delta float func _ready void navigation_agent velocity_computed connect Callable _on_velocity_computed func set_movement_target movement_target Vector3 navigation_agent set_target_position movement_target func _physics_process delta Do not query when the map has never synchronized and is empty if NavigationServer3D map_get_iteration_id navigation_agent get_navigation_map 0 return if navigation_agent is_navigation_finished return movement_delta movement_speed delta var next_path_position Vector3 navigation_agent get_next_path_position var new_velocity Vector3 global_position direction_to next_path_position movement_delta if navigation_agent avoidance_enabled navigation_agent set_velocity new_velocity else _on_velocity_computed new_velocity func _on_velocity_computed safe_velocity Vector3 void global_position global_position move_toward global_position safe_velocity movement_delta Copy to clipboard extends CharacterBody3D export var movement_speed float 4 0 onready var navigation_agent NavigationAgent3D get_node NavigationAgent3D func _ready void navigation_agent velocity_computed connect Callable _on_velocity_computed func set_movement_target movement_target Vector3 navigation_agent set_target_position movement_target func _physics_process delta Do not query when the map has never synchronized and is empty if NavigationServer3D map_get_iteration_id navigation_agent get_navigation_map 0 return if navigation_agent is_navigation_finished return var next_path_position Vector3 navigation_agent get_next_path_position var new_velocity Vector3 global_position direction_to next_path_position movement_speed if navigation_agent avoidance_enabled navigation_agent set_velocity new_velocity else _on_velocity_computed new_velocity func _on_velocity_computed safe_velocity Vector3 velocity safe_velocity move_and_slide Copy to clipboard extends RigidBody3D export var movement_speed float 4 0 onready var navigation_agent NavigationAgent3D get_node NavigationAgent3D func _ready void navigation_agent velocity_computed connect Callable _on_velocity_computed func set_movement_target movement_target Vector3 navigation_agent set_target_position movement_target func _physics_process delta Do not query when the map has never synchronized and is empty if NavigationServer3D map_get_iteration_id navigation_agent get_navigation_map 0 return if navigation_agent is_navigation_finished return var next_path_position Vector3 navigation_agent get_next_path_position var new_velocity Vector3 global_position direction_to next_path_position movement_speed if navigation_agent avoidance_enabled navigation_agent set_velocity new_velocity else _on_velocity_computed new_velocity func _on_velocity_computed safe_velocity Vector3 linear_velocity safe_velocity Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using NavigationObstacles 2D and 3D versions of NavigationObstacles nodes are available as NavigationObstacle2D and NavigationObstacle3D respectively Navigation obstacles are dual purpose in that they can affect both the navigation mesh baking and the agent avoidance With affect_navigation_mesh enabled the obstacle will affect navigation mesh when baked With avoidance_enabled the obstacle will affect avoidance agents Tip Avoidance is enabled by default If the obstacle is not used for avoidance disable enabled_avoidance to save performance Obstacles and navigation mesh Navigation obstacles affecting navigation mesh baking For navigation mesh baking obstacles can be used to discard parts of all other source geometry inside the obstacle shape This can be used to stop navigation meshes being baked in unwanted places e g inside solid geometry like thick walls or on top of other geometry that should not be included for gameplay like roofs Navigation obstacles discard of unwanted navigation mesh An obstacle does not add geometry in the baking process it only removes geometry It does so by nullifying all the voxel cells with rasterized source geometry that are within the obstacle shape As such its effect and shape detail is limited to the cell resolution used by the baking process For more details on the navigation mesh baking see Using navigation meshes The property affect_navigation_mesh makes the obstacle contribute to the navigation mesh baking It will be parsed or unparsed like all other node objects in a navigation mesh baking process The carve_navigation_mesh property makes the shape unaffected by offsets of the baking e g the offset added by the navigation mesh agent_radius It will basically act as a stencil and cut into the already offset navigation mesh surface It will still be affected by further postprocessing of the baking process like edge simplification The obstacle shape and placement is defined with the height and vertices properties and the global_position of the obstacle The y axis value of any Vector3 used for the vertices is ignored as the obstacle is projected on a flat horizontal plane When baking navigation meshes in scripts obstacles can be added procedurally as a projected obstruction Obstacles are not involved in the source geometry parsing so adding them just before baking is enough 2D GDScript 3D GDScript var obstacle_outline PackedVector2Array Vector2 50 50 Vector2 50 50 Vector2 50 50 Vector2 50 50 var navigation_mesh NavigationPolygon new var source_geometry NavigationMeshSourceGeometryData2D new NavigationServer2D parse_source_geometry_data navigation_mesh source_geometry MyTestRootNode var obstacle_carve bool true source_geometry add_projected_obstruction obstacle_outline obstacle_carve NavigationServer2D bake_from_source_geometry_data navigation_mesh source_geometry Copy to clipboard var obstacle_outline PackedVector3Array Vector3 5 0 5 Vector3 5 0 5 Vector3 5 0 5 Vector3 5 0 5 var navigation_mesh NavigationMesh new var source_geometry NavigationMeshSourceGeometryData3D new NavigationServer3D parse_source_geometry_data navigation_mesh source_geometry MyTestRootNode var obstacle_elevation float MyTestObstacleNode global_position y var obstacle_height float 50 0 var obstacle_carve bool true source_geometry add_projected_obstruction obstacle_outline obstacle_elevation obstacle_height obstacle_carve NavigationServer3D bake_from_source_geometry_data navigation_mesh source_geometry Copy to clipboard Obstacles and agent avoidance For avoidance navigation obstacles can be used either as static or dynamic obstacles to affect avoidance controlled agents When used statically NavigationObstacles constrain avoidance controlled agents outside or inside a polygon defined area When used dynamically NavigationObstacles push away avoidance controlled agents in a radius around them Static avoidance obstacles An avoidance obstacle is considered static when its vertices property is populated with an outline array of positions to form a polygon Static obstacle drawn in the editor to block or contain navigation agents Static obstacles act as hard do not cross boundaries for avoidance using agents e g similar to physics collision but for avoidance Static obstacles define their boundaries with an array of outline vertices positions and in case of 3D with an additional height property Static obstacles only work for agents that use the 2D avoidance mode Static obstacles define through winding order of the vertices if agents are pushed out or sucked in Static obstacles can not change their position They can only be warped to a new position and rebuilt from scratch Static obstacles as a result are ill suited for usages where the position is changed every frame as the constant rebuild has a high performance cost Static obstacles that are warped to another position can not be predicted by agents This creates the risk of getting agents stuck should a static obstacle be warped on top of agents When the 2D avoidance is used in 3D the y axis of Vector3 vertices is ignored Instead the global y axis position of the obstacle is used as the elevation level Agents will ignore static obstacles in 3D that are below or above them This is automatically determined by global y axis position of both obstacle and agent as the elevation level as well as their respective height properties Dynamic avoidance obstacles An avoidance obstacle is considered dynamic when its radius property is greater than zero Dynamic obstacles act as a soft please move away from me object for avoidance using agents e g similar to how they avoid other agents Dynamic obstacles define their boundaries with a single radius for a 2D circle or in case of 3D avoidance a sphere shape Dynamic obstacles can change their position every frame without additional performance cost Dynamic obstacles with a set velocity can be predicted in their movement by agents Dynamic obstacles are not a reliable way to constrain agents in crowded or narrow spaces While both static and dynamic properties can be active at the same time on the same obstacle this is not recommended for performance Ideally when an obstacle is moving the static vertices are removed and instead the radius activated When the obstacle reaches the new final position it should gradually enlarge its radius to push all other agents away With enough created safe space around the obstacle it should add the static vertices again and remove the radius This helps avoid getting agents stuck in the suddenly appearing static obstacle when the rebuilt static boundary is finished Similar to agents the obstacles can make use of the avoidance_layers bitmask All agents with a matching bit on their own avoidance mask will avoid the obstacle Procedural obstacles New obstacles can be created in a script without a Node by using the NavigationServer directly Obstacles created with scripts require at least a map and a position For dynamic use a radius is required For static use an array of vertices is required 2D GDScript 3D GDScript create a new obstacle and place it on the default navigation map var new_obstacle_rid RID NavigationServer2D obstacle_create var default_map_rid RID get_world_2d get_navigation_map NavigationServer2D obstacle_set_map new_obstacle_rid default_map_rid NavigationServer2D obstacle_set_position new_obstacle_rid global_position Use obstacle dynamic by increasing radius above zero NavigationServer2D obstacle_set_radius new_obstacle_rid 5 0 Use obstacle static by adding a square that pushes agents out var outline PackedVector2Array Vector2 100 100 Vector2 100 100 Vector2 100 100 Vector2 100 100 NavigationServer2D obstacle_set_vertices new_obstacle_rid outline Enable the obstacle NavigationServer2D obstacle_set_avoidance_enabled new_obstacle_rid true Copy to clipboard Create a new obstacle and place it on the default navigation map var new_obstacle_rid RID NavigationServer3D obstacle_create var default_map_rid RID get_world_3d get_navigation_map NavigationServer3D obstacle_set_map new_obstacle_rid default_map_rid NavigationServer3D obstacle_set_position new_obstacle_rid global_position Use obstacle dynamic by increasing radius above zero NavigationServer3D obstacle_set_radius new_obstacle_rid 0 5 Use obstacle static by adding a square that pushes agents out var outline PackedVector3Array Vector3 5 0 5 Vector3 5 0 5 Vector3 5 0 5 Vector3 5 0 5 NavigationServer3D obstacle_set_vertices new_obstacle_rid outline Set the obstacle height on the y axis NavigationServer3D obstacle_set_height new_obstacle_rid 1 0 Enable the obstacle NavigationServer3D obstacle_set_avoidance_enabled new_obstacle_rid true Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using NavigationLinks NavigationLinks are used to connect navigation mesh polygons from NavigationRegion2D and NavigationRegion3D over arbitrary distances for pathfinding NavigationLinks are also used to consider movement shortcuts in pathfinding available through interacting with gameplay objects e g ladders jump pads or teleports 2D and 3D versions of NavigationJumplinks nodes are available as NavigationLink2D and NavigationLink3D respectively Different NavigationRegions can connect their navigation meshes without the need for a NavigationLink as long as they have overlapping edges or edges that are within navigation map edge_connection_margin As soon as the distance becomes too large building valid connections becomes a problem a problem that NavigationLinks can solve See Using NavigationRegions to learn more about the use of navigation regions See Connecting navigation meshes to learn more about how to connect navigation meshes NavigationLinks share many properties with NavigationRegions like navigation_layers NavigationLinks add a single connection between two positions over an arbitrary distance compared to NavigationRegions that add a more local traversable area with a navigation mesh resource NavigationLinks have a start_position and end_position and can go in both directions when bidirectional is enabled When placed a navigationlink connects the navigation mesh polygons closest to its start_position and end_position within search radius for pathfinding The polygon search radius can be configured globally in the ProjectSettings under navigation 2d_or_3d default_link_connection_radius or set for each navigation map individually using the NavigationServer map_set_link_connection_radius function Both start_position and end_position have debug markers in the Editor The visible radius of a position shows the polygon search radius All navigation mesh polygons inside are compared and the closest is picked for the edge connection If no valid polygon is found within the search radius the navigation link gets disabled The link debug visuals can be changed in the Editor ProjectSettings under debug shapes navigation The visibility of the debug can also be controlled in the Editor 3D Viewport gizmo menu A navigation link does not provide any specialized movement through the link Instead when an agent reaches the position of a link game code needs to react e g through area triggers and provide means for the agent to move through the link to end up at the links other position e g through teleport or animation Without that an agent will attempt to move itself along the path of the link You could end up with an agent walking over a bottomless pit instead of waiting for a moving platform or walking through a teleporter and proceeding through a wall Navigation link script templates The following script uses the NavigationServer to create a new navigation link 2D GDScript 3D GDScript extends Node2D var link_rid RID var link_start_position Vector2 var link_end_position Vector2 func _ready void link_rid NavigationServer2D link_create var link_owner_id int get_instance_id var link_enter_cost float 1 0 var link_travel_cost float 1 0 var link_navigation_layers int 1 var link_bidirectional bool true NavigationServer2D link_set_owner_id link_rid link_owner_id NavigationServer2D link_set_enter_cost link_rid link_enter_cost NavigationServer2D link_set_travel_cost link_rid link_travel_cost NavigationServer2D link_set_navigation_layers link_rid link_navigation_layers NavigationServer2D link_set_bidirectional link_rid link_bidirectional Enable the link and set it to the default navigation map NavigationServer2D link_set_enabled link_rid true NavigationServer2D link_set_map link_rid get_world_2d get_navigation_map Move the 2 link positions to their intended global positions NavigationServer2D link_set_start_position link_rid link_start_position NavigationServer2D link_set_end_position link_rid link_end_position Copy to clipboard extends Node3D var link_rid RID var link_start_position Vector3 var link_end_position Vector3 func _ready void link_rid NavigationServer3D link_create var link_owner_id int get_instance_id var link_enter_cost float 1 0 var link_travel_cost float 1 0 var link_navigation_layers int 1 var link_bidirectional bool true NavigationServer3D link_set_owner_id link_rid link_owner_id NavigationServer3D link_set_enter_cost link_rid link_enter_cost NavigationServer3D link_set_travel_cost link_rid link_travel_cost NavigationServer3D link_set_navigation_layers link_rid link_navigation_layers NavigationServer3D link_set_bidirectional link_rid link_bidirectional Enable the link and set it to the default navigation map NavigationServer3D link_set_enabled link_rid true NavigationServer3D link_set_map link_rid get_world_3d get_navigation_map Move the 2 link positions to their intended global positions NavigationServer3D link_set_start_position link_rid link_start_position NavigationServer3D link_set_end_position link_rid link_end_position Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using NavigationLayers NavigationLayers are an optional feature to further control which navigation meshes are considered in a path query They work similar to how physics layers control collision between collision objects or how visual layers control what is rendered to the Viewport NavigationLayers can be named in the ProjectSettings the same as physics layers or visual layers If a region has not a single compatible navigation layer with the navigation_layers parameter of a path query this regions navigation mesh will be skipped in pathfinding See Using NavigationPaths for more information on querying the NavigationServer for paths NavigationLayers are a single int value that is used as a bitmask Many navigation related nodes have set_navigation_layer_value and get_navigation_layer_value functions to set and get a layer number directly without the need for more complex bitwise operations In scripts the following helper functions can be used to work with the navigation_layers bitmask 2D GDScript 3D GDScript func change_layers var region NavigationRegion2D get_node NavigationRegion2D enables 4 th layer for this region region navigation_layers enable_bitmask_inx region navigation_layers 4 disables 1 rst layer for this region region navigation_layers disable_bitmask_inx region navigation_layers 1 var agent NavigationAgent2D get_node NavigationAgent2D make future path queries of this agent ignore regions with 4 th layer agent navigation_layers disable_bitmask_inx agent navigation_layers 4 var path_query_navigation_layers int 0 path_query_navigation_layers enable_bitmask_inx path_query_navigation_layers 2 get a path that only considers 2 nd layer regions var path PoolVector2Array NavigationServer2D map_get_path map start_position target_position true path_query_navigation_layers static func is_bitmask_inx_enabled _bitmask int _index int bool return _bitmask 1 _index 0 static func enable_bitmask_inx _bitmask int _index int int return _bitmask 1 _index static func disable_bitmask_inx _bitmask int _index int int return _bitmask 1 _index Copy to clipboard func change_layers var region NavigationRegion3D get_node NavigationRegion3D enables 4 th layer for this region region navigation_layers enable_bitmask_inx region navigation_layers 4 disables 1 rst layer for this region region navigation_layers disable_bitmask_inx region navigation_layers 1 var agent NavigationAgent3D get_node NavigationAgent3D make future path queries of this agent ignore regions with 4 th layer agent navigation_layers disable_bitmask_inx agent navigation_layers 4 var path_query_navigation_layers int 0 path_query_navigation_layers enable_bitmask_inx path_query_navigation_layers 2 get a path that only considers 2 nd layer regions var path PoolVector3Array NavigationServer3D map_get_path map start_position target_position true path_query_navigation_layers static func is_bitmask_inx_enabled _bitmask int _index int bool return _bitmask 1 _index 0 static func enable_bitmask_inx _bitmask int _index int int return _bitmask 1 _index static func disable_bitmask_inx _bitmask int _index int int return _bitmask 1 _index Copy to clipboard Changing navigation layers for path queries is a performance friendly alternative to enabling disabling entire navigation regions Compared to region changes a navigation path query with different navigation layers does not trigger large scale updates on the NavigationServer Changing the navigation layers of NavigationAgent nodes will have an immediate effect on the next path query Changing the navigation layers of regions will have an effect after the next NavigationServer sync User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Navigation debug tools Note The debug tools properties and functions are only available in Godot debug builds Do not use any of them in code that will be part of a release build Enabling navigation debug The navigation debug visualizations are enabled by default inside the editor To visualize navigation meshes and connections at runtime too enable the option Visible Navigation in the editor Debug menu In Godot debug builds the navigation debug can also be toggled through the NavigationServer singletons from scripts GDScript NavigationServer2D set_debug_enabled false NavigationServer3D set_debug_enabled true Copy to clipboard Debug visualizations are currently based on Nodes in the SceneTree If the NavigationServer2D or NavigationServer3D APIs are used exclusively then changes will not be reflected by the debug navigation tools Navigation debug settings The appearance of navigation debug can be changed in the ProjectSettings under debug shapes navigation Certain debug features can also be enabled or disabled at will but may require a scene restart to take effect Debug navigation mesh polygons If enable_edge_lines is enabled the edges of navigation mesh polygons will be highlighted If enable_edge_lines_xray is also enabled the edges of navigation meshes will be visible through geometry If enable_geometry_face_random_color is enabled the color of each navigation mesh face will be mixed with a random color that is itself mixed with the color specified in geometry_face_color Debug edge connections When two navigation meshes are connected within edge_connection_margin distance the connection is overlaid The color of the overlay is controlled by edge_connection_color The connections can be made visible through geometry with enable_edge_connections_xray Note Edge connections are only visible when the NavigationServer is active Debug performance To measure NavigationServer performance a dedicated monitor exists that can be found within the Editor Debugger under Debugger Monitors Navigation Process Navigation Process shows how long the NavigationServer spends updating its internals this update frame in milliseconds Navigation Process works similar to Process for visual frame rendering and Physics Process for collision and fixed updates Navigation Process accounts for all updates to navigation maps navigation regions and navigation agents as well as all the avoidance calculations for the update frame Note Navigation Process does NOT include pathfinding performance cause pathfinding operates on the navigation map data independently from the server process update Navigation Process should be in general kept as low and as stable as possible for runtime performance to avoid frame rate issues Note that since the NavigationServer process update happens in the middle of the physics update an increase in Navigation Process will automatically increase Physics Process by the same amount Navigation also provides more detailed statistics about the current navigation related objects and navigation map composition on the NavigationServer Navigation statistics shown here can not be judged as good or bad for performance as it depends entirely on the project what can be considered as reasonable or horribly excessive Navigation statistics help with identifying performance bottlenecks that are less obvious because the source might not always have a visible representation E g pathfinding performance issues created by overly detailed navigation meshes with thousand of edges polygons or problems caused by procedural navigation gone wrong User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Connecting navigation meshes Different NavigationMeshes are automatically merged by the NavigationServer when at least two vertex positions of one edge exactly overlap To connect over arbitrary distances see Using NavigationLinks The same is true for multiple NavigationPolygon resources As long as their outline points overlap exactly the NavigationServer will merge them NavigationPolygon outlines must be from different NavigationPolygon resources to connect Overlapping or intersecting outlines on the same NavigationPolygon will fail the navigation mesh creation Overlapping or intersecting outlines from different NavigationPolygons will often fail to create the navigation region edge connections on the NavigationServer and should be avoided Warning Exactly means exactly for the vertex position merge Small float errors that happen quite regularly with imported meshes will prevent a successful vertex merge Alternatively navigation meshes are not merged but still considered as connected by the NavigationServer when their edges are nearly parallel and within distance to each other The connection distance is defined by the edge_connection_margin for each navigation map In many cases navigation mesh edges cannot properly connect when they partly overlap Better avoid any navigation mesh overlap at all time for a consistent merge behavior If navigation debug is enabled and the NavigationServer active the established navigation mesh connections will be visualized See Navigation debug tools for more info about navigation debug options The default 2D edge_connection_margin can be changed in the ProjectSettings under navigation 2d default_edge_connection_margin The default 3D edge_connection_margin can be changed in the ProjectSettings under navigation 3d default_edge_connection_margin The edge connection margin value of any navigation map can also be changed at runtime with the NavigationServer API 2D GDScript 3D GDScript extends Node2D func _ready void 2D margins are designed to work with 2D pixel values var default_map_rid RID get_world_2d get_navigation_map NavigationServer2D map_set_edge_connection_margin default_map_rid 50 0 Copy to clipboard extends Node3D func _ready void 3D margins are designed to work with 3D world unit values var default_map_rid RID get_world_3d get_navigation_map NavigationServer3D map_set_edge_connection_margin default_map_rid 0 5 Copy to clipboard Note Changing the edge connection margin will trigger a full update of all navigation mesh connections on the NavigationServer User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Support different actor types To support different actor types due to e g their sizes each type requires its own navigation map and navigation mesh baked with an appropriated agent radius and height The same approach can be used to distinguish between e g landwalking swimming or flying agents Note Agents are exclusively defined by a radius and height value for baking navigation meshes pathfinding and avoidance More complex shapes are not supported GDScript Create a navigation mesh resource for each actor size var navigation_mesh_standard_size NavigationMesh NavigationMesh new var navigation_mesh_small_size NavigationMesh NavigationMesh new var navigation_mesh_huge_size NavigationMesh NavigationMesh new Set appropriated agent parameters navigation_mesh_standard_size agent_radius 0 5 navigation_mesh_standard_size agent_height 1 8 navigation_mesh_small_size agent_radius 0 25 navigation_mesh_small_size agent_height 0 7 navigation_mesh_huge_size agent_radius 1 5 navigation_mesh_huge_size agent_height 2 5 Get the root node to parse geometry for the baking var root_node Node3D get_node NavigationMeshBakingRootNode Create the source geometry resource that will hold the parsed geometry data var source_geometry_data NavigationMeshSourceGeometryData3D NavigationMeshSourceGeometryData3D new Parse the source geometry from the scene tree on the main thread The navigation mesh is only required for the parse settings so any of the three will do NavigationServer3D parse_source_geometry_data navigation_mesh_standard_size source_geometry_data root_node Bake the navigation geometry for each agent size from the same source geometry If required for performance this baking step could also be done on background threads NavigationServer3D bake_from_source_geometry_data navigation_mesh_standard_size source_geometry_data NavigationServer3D bake_from_source_geometry_data navigation_mesh_small_size source_geometry_data NavigationServer3D bake_from_source_geometry_data navigation_mesh_huge_size source_geometry_data Create different navigation maps on the NavigationServer var navigation_map_standard RID NavigationServer3D map_create var navigation_map_small RID NavigationServer3D map_create var navigation_map_huge RID NavigationServer3D map_create Set the new navigation maps as active NavigationServer3D map_set_active navigation_map_standard true NavigationServer3D map_set_active navigation_map_small true NavigationServer3D map_set_active navigation_map_huge true Create a region for each map var navigation_region_standard RID NavigationServer3D region_create var navigation_region_small RID NavigationServer3D region_create var navigation_region_huge RID NavigationServer3D region_create Add the regions to the maps NavigationServer3D region_set_map navigation_region_standard navigation_map_standard NavigationServer3D region_set_map navigation_region_small navigation_map_small NavigationServer3D region_set_map navigation_region_huge navigation_map_huge Set navigation mesh for each region NavigationServer3D region_set_navigation_mesh navigation_region_standard navigation_mesh_standard_size NavigationServer3D region_set_navigation_mesh navigation_region_small navigation_mesh_small_size NavigationServer3D region_set_navigation_mesh navigation_region_huge navigation_mesh_huge_size Create start and end position for the navigation path query var start_pos Vector3 Vector3 0 0 0 0 0 0 var end_pos Vector3 Vector3 2 0 0 0 0 0 var use_corridorfunnel bool true Query paths for each agent size var path_standard_agent NavigationServer3D map_get_path navigation_map_standard start_pos end_pos use_corridorfunnel var path_small_agent NavigationServer3D map_get_path navigation_map_small start_pos end_pos use_corridorfunnel var path_huge_agent NavigationServer3D map_get_path navigation_map_huge start_pos end_pos use_corridorfunnel Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Support different actor locomotion To support different actor locomotion like crouching and crawling a similar map setup as supporting Support different actor types is required Bake different navigation meshes with an appropriate height for crouched or crawling actors so they can find paths through those narrow sections in your game world When an actor changes locomotion state e g stands up starts crouching or crawling query the appropriate map for a path If the avoidance behavior should also change with the locomotion e g only avoid while standing or only avoid other agents in the same locomotion state switch the actor s avoidance agent to another avoidance map with each locomotion change GDScript func update_path if actor_standing path NavigationServer3D map_get_path standing_navigation_map_rid start_position target_position true elif actor_crouching path NavigationServer3D map_get_path crouched_navigation_map_rid start_position target_position true elif actor_crawling path NavigationServer3D map_get_path crawling_navigation_map_rid start_position target_position true func change_agent_avoidance_state if actor_standing NavigationServer3D agent_set_map avoidance_agent_rid standing_navigation_map_rid elif actor_crouching NavigationServer3D agent_set_map avoidance_agent_rid crouched_navigation_map_rid elif actor_crawling NavigationServer3D agent_set_map avoidance_agent_rid crawling_navigation_map_rid Copy to clipboard Note While a path query can be execute immediately for multiple maps the avoidance agent map switch will only take effect after the next server synchronization User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Support different actor area access A typical example for different area access in gameplay are doors that connect rooms with different navigation meshes and are not accessible by all actors all the time Add a NavigationRegion at the door position Add an appropriate navigation mesh the size of the door that can connect with the surrounding navigation meshes In order to control access enable disable navigation layer bits so path queries that use the same navigation layer bits can find a path through the door navigation mesh The bitmask can act as a set of door keys or abilities and only actors with at least one matching and enabled bit layer in their pathfinding query will find a path through this region See Using NavigationLayers for more information on how to work with navigation layers and the bitmask The entire door region can also be enabled disable if required but if disabled will block access for all path queries Prefer working with navigation layers in path queries whenever possible as enabling or disabling navigation layers on a region triggers a costly recalculation of the navigation map connections Warning Changing navigation layers will only affect new path queries but not automatically update existing paths User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Optimizing Navigation Performance Common Navigation related performance problems can be categorized into the following topics Performance problems with parsing scene tree nodes for navigation mesh baking Performance problems with baking the actual navigation mesh Performance problems with NavigationAgent path queries Performance problems with the actual path search Performance problems with synchronizing the navigation map In the following sections information can be found on how to identify and fix or at least mitigate their impact on framerates Performance problems with parsing scene tree nodes Tip Prefer using simple shapes with as few edges as possible e g nothing rounded like a circle sphere or torus Prefer using physics collision shapes over complex visual meshes as source geometry as meshes need to be copied from the GPU and are commonly much more detailed than necessary In general avoid using very complex geometry as source geometry for baking navigation meshes E g never use a very detailed visual mesh as parsing its shape to data arrays and voxelizing it for the navigation mesh baking will take a long time for no real quality gain on the final navigation mesh Instead use a very simplified level of detail version of a shape Even better use very primitive shapes like boxes and rectangles that only roughly cover the same geometry but still yield a baked result good enough for pathfinding Prefer using simple physics collision shapes over visual meshes as the source geometry for baking navigation meshes Physics shapes are by default very limited and optimized shapes that are easy and quick to parse A visual mesh on the other hand can range from simple to complex On top to gain access to visual mesh data the parser needs to request the mesh data arrays from the RenderingServer as visual mesh data is stored directly on the GPU and is not cached on the CPU This requires locking the RenderingServer thread and can severely impact framerate at runtime while the rendering runs multi threaded If the rendering runs single threaded the framerate impact might be even worse and the mesh parsing might freeze the entire game for a few seconds on complex meshes Performance problems with navigation mesh baking Tip At runtime always prefer to use a background thread for baking navigation meshes Increase NavigationMesh cell_size and cell_height to create less voxels Change the SamplePartitionType from watershed to monotone or layers to gain baking performance Warning NEVER scale source geometry with nodes to avoid precision errors Most scale applies only visually and shapes that are very large at their base scale require still a lot of extra processing even while downscaled Baking navigation meshes at runtime should always be done in a background thread if possible Even small sized navigation meshes can take far longer to bake than what is possible to squeeze into a single frame at least if the framerate should stay at a bearable level Complexity of source geometry data parsed from scene tree nodes has big impact on baking performance as everything needs to be mapped to a grid voxels For runtime baking performance the NavigationMesh cell size and cell height should be set as high as possible without causing navigation mesh quality problems for a game If cell size or cell height is set too low the baking is forced to create an excessive amount of voxels to process the source geometry If the source geometry spans over a very large game world it is even possible that the baking process runs out off memory in the middle and crashes the game The partition type can also be lowered depending on how complex the games source geometry is to gain some performance E g games with mostly flat surfaces with blocky geometry can get away with the monotone or layers mode that are a lot faster to bake e g because they require no distance field pass Never scale source geometry with nodes Not only can it result in a lot of precision errors with wrongly matched vertices and edges but also some scaling only exists as visuals and not in the actual parsed data E g if a mesh is downscaled visually in the Editor e g the scale set to 0 001 on a MeshInstance the mesh still requires a gigantic and very complex voxel grid to be processed for the baking Performance problems with NavigationAgent path queries Tip Avoid unnecessary path resets and queries every frame in NavigationAgent scripts Avoid updating all NavigationAgent paths in the same frame Logical errors and wasteful operations in the custom NavigationAgent scripts are very common causes of performance issues e g watch out for resetting the path every single frame By default NavigationAgents are optimized to only query new paths when the target position changes the navigation map changes or they are forced too far away from the desired path distance E g when AI should move to the player the target position should not be set to the player position every single frame as this queries a new path every frame Instead the distance from the current target position to the player position should be compared and only when the player has moved too far away a new target position should be set Do not check beforehand if a target position is reachable every frame What looks like an innocent check is the equivalent of an expensive path query behind the scene If the plan is to request a new path anyway should the position be reachable a path should be queried directly By looking at the last position of the returned path and if that position is in a reachable distance to the checked position it answers the is this position reachable question This avoids doing the equivalent of two full path queries every frame for the same NavigationAgent Divide the total number of NavigationAgents into update groups or use random timers so that they do not all request new paths in the same frame Performance problems with the actual path search Tip Optimize overdetailed navigation meshes by reducing the amount of polygons and edges The cost of the actual path search correlates directly with the amount of navigation mesh polygons and edges and not the real size of a game world If a giant game world uses very optimized navigation meshes with only few polygons that cover large areas performance should be acceptable If the game world is splintered into very small navigation meshes that each have tiny polygons like for TileMaps pathfinding performance will be reduced A common problem is a sudden performance drop when a target position is not reachable in a path query This performance drop is normal and the result of a too large too unoptimized navigation mesh with way to much polygons and edges to search through In normal path searches where the target position can be reached quickly the pathfinding will do an early exit as soon as the position is reached which can hide this lack of optimization for a while If the target position can not be reached the pathfinding has to do a far longer search through the available polygons to confirm that the position is absolutely not reachable Performance problems with navigation map synchronization Tip Merge navigation meshes polygons by vertex instead of by edge connection wherever possible When changes are made to e g navigation meshes or navigation regions the NavigationServer needs to synchronize the navigation map Depending on the complexity of navigation meshes this can take a significant amount of time which may impact the framerate The NavigationServer merges navigation meshes either by vertex or by edge connection The merge by vertex happens when the two vertex of two different edges land in the same map grid cells This is a rather quick and low cost operation The merge by edge connection happens in a second pass for all still unmerged edges All the free edges are checked for possible edge connections by both distance and angle which is rather costly So apart from the general rule to have as few polygon edges as possible as many edges as possible should be merged by vertex upfront so only a few edges are left for the more costly edge connection calculation The debug Navigation PerformanceMonitor can be used to get statistics on how many polygons and edges are available and how many of them are unmerged or not merged by vertex If the ratio between vertex merged and edge connections is way off vertex should be significantly higher the navigation meshes are properly created or placed very inefficient User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Networking High level multiplayer Making HTTP requests HTTP client class TLS SSL certificates WebSocket WebRTC Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue High level multiplayer High level vs low level API The following explains the differences of high and low level networking in Godot as well as some fundamentals If you want to jump in head first and add networking to your first nodes skip to Initializing the network below But make sure to read the rest later on Godot always supported standard low level networking via UDP TCP and some higher level protocols such as HTTP and SSL These protocols are flexible and can be used for almost anything However using them to synchronize game state manually can be a large amount of work Sometimes that work can t be avoided or is worth it for example when working with a custom server implementation on the backend But in most cases it s worthwhile to consider Godot s high level networking API which sacrifices some of the fine grained control of low level networking for greater ease of use This is due to the inherent limitations of the low level protocols TCP ensures packets will always arrive reliably and in order but latency is generally higher due to error correction It s also quite a complex protocol because it understands what a connection is and optimizes for goals that often don t suit applications like multiplayer games Packets are buffered to be sent in larger batches trading less per packet overhead for higher latency This can be useful for things like HTTP but generally not for games Some of this can be configured and disabled e g by disabling Nagle s algorithm for the TCP connection UDP is a simpler protocol which only sends packets and has no concept of a connection No error correction makes it pretty quick low latency but packets may be lost along the way or received in the wrong order Added to that the MTU maximum packet size for UDP is generally low only a few hundred bytes so transmitting larger packets means splitting them reorganizing them and retrying if a part fails In general TCP can be thought of as reliable ordered and slow UDP as unreliable unordered and fast Because of the large difference in performance it often makes sense to re build the parts of TCP wanted for games optional reliability and packet order while avoiding the unwanted parts congestion traffic control features Nagle s algorithm etc Due to this most game engines come with such an implementation and Godot is no exception In summary you can use the low level networking API for maximum control and implement everything on top of bare network protocols or use the high level API based on SceneTree that does most of the heavy lifting behind the scenes in a generally optimized way Note Most of Godot s supported platforms offer all or most of the mentioned high and low level networking features As networking is always largely hardware and operating system dependent however some features may change or not be available on some target platforms Most notably the HTML5 platform currently offers WebSockets and WebRTC support but lacks some of the higher level features as well as raw access to low level protocols like TCP and UDP Note More about TCP IP UDP and networking https gafferongames com post udp_vs_tcp Gaffer On Games has a lot of useful articles about networking in Games here including the comprehensive introduction to networking models in games Warning Adding networking to your game comes with some responsibility It can make your application vulnerable if done wrong and may lead to cheats or exploits It may even allow an attacker to compromise the machines your application runs on and use your servers to send spam attack others or steal your users data if they play your game This is always the case when networking is involved and has nothing to do with Godot You can of course experiment but when you release a networked application always take care of any possible security concerns Mid level abstraction Before going into how we would like to synchronize a game across the network it can be helpful to understand how the base network API for synchronization works Godot uses a mid level object MultiplayerPeer This object is not meant to be created directly but is designed so that several C implementations can provide it This object extends from PacketPeer so it inherits all the useful methods for serializing sending and receiving data On top of that it adds methods to set a peer transfer mode etc It also includes signals that will let you know when peers connect or disconnect This class interface can abstract most types of network layers topologies and libraries By default Godot provides an implementation based on ENet ENetMultiplayerPeer one based on WebRTC WebRTCMultiplayerPeer and one based on WebSocket WebSocketPeer but this could be used to implement mobile APIs for ad hoc WiFi Bluetooth or custom device console specific networking APIs For most common cases using this object directly is discouraged as Godot provides even higher level networking facilities This object is still made available in case a game has specific needs for a lower level API Hosting considerations When hosting a server clients on your LAN can connect using the internal IP address which is usually of the form 192 168 This internal IP address is not reachable by non LAN Internet clients On Windows you can find your internal IP address by opening a command prompt and entering ipconfig On macOS open a Terminal and enter ifconfig On Linux open a terminal and enter ip addr If you re hosting a server on your own machine and want non LAN clients to connect to it you ll probably have to forward the server port on your router This is required to make your server reachable from the Internet since most residential connections use a NAT Godot s high level multiplayer API only uses UDP so you must forward the port in UDP not just TCP After forwarding a UDP port and making sure your server uses that port you can use this website to find your public IP address Then give this public IP address to any Internet clients that wish to connect to your server Godot s high level multiplayer API uses a modified version of ENet which allows for full IPv6 support Initializing the network High level networking in Godot is managed by the SceneTree Each node has a multiplayer property which is a reference to the MultiplayerAPI instance configured for it by the scene tree Initially every node is configured with the same default MultiplayerAPI object It is possible to create a new MultiplayerAPI object and assign it to a NodePath in the the scene tree which will override multiplayer for the node at that path and all of its descendants This allows sibling nodes to be configured with different peers which makes it possible to run a server and a client simultaneously in one instance of Godot GDScript C By default these expressions are interchangeable multiplayer Get the MultiplayerAPI object configured for this node get_tree get_multiplayer Get the default MultiplayerAPI object Copy to clipboard By default these expressions are interchangeable Multiplayer Get the MultiplayerAPI object configured for this node GetTree GetMultiplayer Get the default MultiplayerAPI object Copy to clipboard To initialize networking a MultiplayerPeer object must be created initialized as a server or client and passed to the MultiplayerAPI GDScript C Create client var peer ENetMultiplayerPeer new peer create_client IP_ADDRESS PORT multiplayer multiplayer_peer peer Create server var peer ENetMultiplayerPeer new peer create_server PORT MAX_CLIENTS multiplayer multiplayer_peer peer Copy to clipboard Create client var peer new ENetMultiplayerPeer peer CreateClient IPAddress Port Multiplayer MultiplayerPeer peer Create server var peer new ENetMultiplayerPeer peer CreateServer Port MaxClients Multiplayer MultiplayerPeer peer Copy to clipboard To terminate networking GDScript C multiplayer multiplayer_peer null Copy to clipboard Multiplayer MultiplayerPeer null Copy to clipboard Warning When exporting to Android make sure to enable the INTERNET permission in the Android export preset before exporting the project or using one click deploy Otherwise network communication of any kind will be blocked by Android Managing connections Every peer is assigned a unique ID The server s ID is always 1 and clients are assigned a random positive integer Responding to connections or disconnections is possible by connecting to MultiplayerAPI s signals peer_connected id int This signal is emitted with the newly connected peer s ID on each other peer and on the new peer multiple times once with each other peer s ID peer_disconnected id int This signal is emitted on every remaining peer when one disconnects The rest are only emitted on clients connected_to_server connection_failed server_disconnected To get the unique ID of the associated peer GDScript C multiplayer get_unique_id Copy to clipboard Multiplayer GetUniqueId Copy to clipboard To check whether the peer is server or client GDScript C multiplayer is_server Copy to clipboard Multiplayer IsServer Copy to clipboard Remote procedure calls Remote procedure calls or RPCs are functions that can be called on other peers To create one use the rpc annotation before a function definition To call an RPC use Callable s method rpc to call in every peer or rpc_id to call in a specific peer GDScript C func _ready if multiplayer is_server print_once_per_client rpc rpc func print_once_per_client print I will be printed to the console once per each connected client Copy to clipboard public override void _Ready if Multiplayer IsServer Rpc MethodName PrintOncePerClient Rpc private void PrintOncePerClient GD Print I will be printed to the console once per each connected client Copy to clipboard RPCs will not serialize objects or callables For a remote call to be successful the sending and receiving node need to have the same NodePath which means they must have the same name When using add_child for nodes which are expected to use RPCs set the argument force_readable_name to true Warning If a function is annotated with rpc on the client script resp server script then this function must also be declared on the server script resp client script Both RPCs must have the same signature which is evaluated with a checksum of all RPCs All RPCs in a script are checked at once and all RPCs must be declared on both the client scripts and the server scripts even functions that are currently not in use The signature of the RPC includes the rpc declaration the function return type and the NodePath If an RPC resides in a script attached to root Main Node1 then it must reside in precisely the same path and node on both the client script and the server script Function arguments are not checked for matching between the server and client code example func sendstuff and func sendstuff arg1 arg2 will pass signature matching If these conditions are not met if all RPCs do not pass signature matching the script may print an error or cause unwanted behavior The error message may be unrelated to the RPC function you are currently building and testing See further explanation and troubleshooting on this post The annotation can take a number of arguments which have default values rpc is equivalent to GDScript C rpc authority call_remote unreliable 0 Copy to clipboard Rpc MultiplayerApi RpcMode Authority CallLocal false TransferMode MultiplayerPeer TransferModeEnum Unreliable TransferChannel 0 Copy to clipboard The parameters and their functions are as follows mode authority Only the multiplayer authority can call remotely The authority is the server by default but can be changed per node using Node set_multiplayer_authority any_peer Clients are allowed to call remotely Useful for transferring user input sync call_remote The function will not be called on the local peer call_local The function can be called on the local peer Useful when the server is also a player transfer_mode unreliable Packets are not acknowledged can be lost and can arrive at any order unreliable_ordered Packets are received in the order they were sent in This is achieved by ignoring packets that arrive later if another that was sent after them has already been received Can cause packet loss if used incorrectly reliable Resend attempts are sent until packets are acknowledged and their order is preserved Has a significant performance penalty transfer_channel is the channel index The first 3 can be passed in any order but transfer_channel must always be last The function multiplayer get_remote_sender_id can be used to get the unique id of an rpc sender when used within the function called by rpc GDScript C func _on_some_input Connected to some input transfer_some_input rpc_id 1 Send the input only to the server Call local is required if the server is also a player rpc any_peer call_local reliable func transfer_some_input The server knows who sent the input var sender_id multiplayer get_remote_sender_id Process the input and affect game logic Copy to clipboard private void OnSomeInput Connected to some input RpcId 1 MethodName TransferSomeInput Send the input only to the server Call local is required if the server is also a player Rpc MultiplayerApi RpcMode AnyPeer CallLocal true TransferMode MultiplayerPeer TransferModeEnum Reliable private void TransferSomeInput The server knows who sent the input int senderId Multiplayer GetRemoteSenderId Process the input and affect game logic Copy to clipboard Channels Modern networking protocols support channels which are separate connections within the connection This allows for multiple streams of packets that do not interfere with each other For example game chat related messages and some of the core gameplay messages should all be sent reliably but a gameplay message should not wait for a chat message to be acknowledged This can be achieved by using different channels Channels are also useful when used with the unreliable ordered transfer mode Sending packets of variable size with this transfer mode can cause packet loss since packets which are slower to arrive are ignored Separating them into multiple streams of homogeneous packets by using channels allows ordered transfer with little packet loss and without the latency penalty caused by reliable mode The default channel with index 0 is actually three different channels one for each transfer mode Example lobby implementation This is an example lobby that can handle peers joining and leaving notify UI scenes through signals and start the game after all clients have loaded the game scene GDScript C extends Node Autoload named Lobby These signals can be connected to by a UI lobby scene or the game scene signal player_connected peer_id player_info signal player_disconnected peer_id signal server_disconnected const PORT 7000 const DEFAULT_SERVER_IP 127 0 0 1 IPv4 localhost const MAX_CONNECTIONS 20 This will contain player info for every player with the keys being each player s unique IDs var players This is the local player info This should be modified locally before the connection is made It will be passed to every other peer For example the value of name can be set to something the player entered in a UI scene var player_info name Name var players_loaded 0 func _ready multiplayer peer_connected connect _on_player_connected multiplayer peer_disconnected connect _on_player_disconnected multiplayer connected_to_server connect _on_connected_ok multiplayer connection_failed connect _on_connected_fail multiplayer server_disconnected connect _on_server_disconnected func join_game address if address is_empty address DEFAULT_SERVER_IP var peer ENetMultiplayerPeer new var error peer create_client address PORT if error return error multiplayer multiplayer_peer peer func create_game var peer ENetMultiplayerPeer new var error peer create_server PORT MAX_CONNECTIONS if error return error multiplayer multiplayer_peer peer players 1 player_info player_connected emit 1 player_info func remove_multiplayer_peer multiplayer multiplayer_peer null When the server decides to start the game from a UI scene do Lobby load_game rpc filepath rpc call_local reliable func load_game game_scene_path get_tree change_scene_to_file game_scene_path Every peer will call this when they have loaded the game scene rpc any_peer call_local reliable func player_loaded if multiplayer is_server players_loaded 1 if players_loaded players size root Game start_game players_loaded 0 When a peer connects send them my player info This allows transfer of all desired data for each player not only the unique ID func _on_player_connected id _register_player rpc_id id player_info rpc any_peer reliable func _register_player new_player_info var new_player_id multiplayer get_remote_sender_id players new_player_id new_player_info player_connected emit new_player_id new_player_info func _on_player_disconnected id players erase id player_disconnected emit id func _on_connected_ok var peer_id multiplayer get_unique_id players peer_id player_info player_connected emit peer_id player_info func _on_connected_fail multiplayer multiplayer_peer null func _on_server_disconnected multiplayer multiplayer_peer null players clear server_disconnected emit Copy to clipboard using Godot public partial class Lobby Node public static Lobby Instance get private set These signals can be connected to by a UI lobby scene or the game scene Signal public delegate void PlayerConnectedEventHandler int peerId Godot Collections Dictionary string string playerInfo Signal public delegate void PlayerDisconnectedEventHandler int peerId Signal public delegate void ServerDisconnectedEventHandler private const int Port 7000 private const string DefaultServerIP 127 0 0 1 IPv4 localhost private const int MaxConnections 20 This will contain player info for every player with the keys being each player s unique IDs private Godot Collections Dictionary long Godot Collections Dictionary string string _players new Godot Collections Dictionary long Godot Collections Dictionary string string This is the local player info This should be modified locally before the connection is made It will be passed to every other peer For example the value of name can be set to something the player entered in a UI scene private Godot Collections Dictionary string string _playerInfo new Godot Collections Dictionary string string Name PlayerName private int _playersLoaded 0 public override void _Ready Instance this Multiplayer PeerConnected OnPlayerConnected Multiplayer PeerDisconnected OnPlayerDisconnected Multiplayer ConnectedToServer OnConnectOk Multiplayer ConnectionFailed OnConnectionFail Multiplayer ServerDisconnected OnServerDisconnected private Error JoinGame string address if string IsNullOrEmpty address address DefaultServerIP var peer new ENetMultiplayerPeer Error error peer CreateClient address Port if error Error Ok return error Multiplayer MultiplayerPeer peer return Error Ok private Error CreateGame var peer new ENetMultiplayerPeer Error error peer CreateServer Port MaxConnections if error Error Ok return error Multiplayer MultiplayerPeer peer _players 1 _playerInfo EmitSignal SignalName PlayerConnected 1 _playerInfo return Error Ok private void RemoveMultiplayerPeer Multiplayer MultiplayerPeer null When the server decides to start the game from a UI scene do Rpc Lobby MethodName LoadGame filePath Rpc CallLocal true TransferMode MultiplayerPeer TransferModeEnum Reliable private void LoadGame string gameScenePath GetTree ChangeSceneToFile gameScenePath Every peer will call this when they have loaded the game scene Rpc MultiplayerApi RpcMode AnyPeer CallLocal true TransferMode MultiplayerPeer TransferModeEnum Reliable private void PlayerLoaded if Multiplayer IsServer _playersLoaded 1 if _playersLoaded _players Count GetNode Game root Game StartGame _playersLoaded 0 When a peer connects send them my player info This allows transfer of all desired data for each player not only the unique ID private void OnPlayerConnected long id RpcId id MethodName RegisterPlayer _playerInfo Rpc MultiplayerApi RpcMode AnyPeer TransferMode MultiplayerPeer TransferModeEnum Reliable private void RegisterPlayer Godot Collections Dictionary string string newPlayerInfo int newPlayerId Multiplayer GetRemoteSenderId _players newPlayerId newPlayerInfo EmitSignal SignalName PlayerConnected newPlayerId newPlayerInfo private void OnPlayerDisconnected long id _players Remove id EmitSignal SignalName PlayerDisconnected id private void OnConnectOk int peerId Multiplayer GetUniqueId _players peerId _playerInfo EmitSignal SignalName PlayerConnected peerId _playerInfo private void OnConnectionFail Multiplayer MultiplayerPeer null private void OnServerDisconnected Multiplayer MultiplayerPeer null _players Clear EmitSignal SignalName ServerDisconnected Copy to clipboard The game scene s root node should be named Game In the script attached to it GDScript C extends Node3D Or Node2D func _ready Preconfigure game Lobby player_loaded rpc_id 1 Tell the server that this peer has loaded Called only on the server func start_game All peers are ready to receive RPCs in this scene Copy to clipboard using Godot public partial class Game Node3D Or Node2D public override void _Ready Preconfigure game Lobby Instance RpcId 1 Lobby MethodName PlayerLoaded Tell the server that this peer has loaded Called only on the server public void StartGame All peers are ready to receive RPCs in this scene Copy to clipboard Exporting for dedicated servers Once you ve made a multiplayer game you may want to export it to run it on a dedicated server with no GPU available See Exporting for dedicated servers for more information Note The code samples on this page aren t designed to run on a dedicated server You ll have to modify them so the server isn t considered to be a player You ll also have to modify the game starting mechanism so that the first player who joins can start the game User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Making HTTP requests Why use HTTP HTTP requests are useful to communicate with web servers and other non Godot programs Compared to Godot s other networking features like High level multiplayer HTTP requests have more overhead and take more time to get going so they aren t suited for real time communication and aren t great to send lots of small updates as is common for multiplayer gameplay HTTP however offers interoperability with external web resources and is great at sending and receiving large amounts of data for example to transfer files like game assets These assets can then be loaded using runtime file loading and saving So HTTP may be useful for your game s login system lobby browser to retrieve some information from the web or to download game assets This tutorial assumes some familiarity with Godot and the Godot Editor Refer to the Introduction and the Step by step tutorial especially its Nodes and Scenes and Creating your first script pages if needed HTTP requests in Godot The HTTPRequest node is the easiest way to make HTTP requests in Godot It is backed by the more low level HTTPClient for which a tutorial is available here For this example we will make an HTTP request to GitHub to retrieve the name of the latest Godot release Warning When exporting to Android make sure to enable the Internet permission in the Android export preset before exporting the project or using one click deploy Otherwise network communication of any kind will be blocked by the Android OS Preparing the scene Create a new empty scene add a root Node and add a script to it Then add an HTTPRequest node as a child Scripting the request When the project is started so in _ready we re going to send an HTTP request to Github using our HTTPRequest node and once the request completes we re going to parse the returned JSON data look for the name field and print that to console GDScript C extends Node func _ready HTTPRequest request_completed connect _on_request_completed HTTPRequest request https api github com repos godotengine godot releases latest func _on_request_completed result response_code headers body var json JSON parse_string body get_string_from_utf8 print json name Copy to clipboard using Godot using System Text public partial class MyNode Node public override void _Ready HttpRequest httpRequest GetNode HttpRequest HTTPRequest httpRequest RequestCompleted OnRequestCompleted httpRequest Request https api github com repos godotengine godot releases latest private void OnRequestCompleted long result long responseCode string headers byte body Godot Collections Dictionary json Json ParseString Encoding UTF8 GetString body AsGodotDictionary GD Print json name Copy to clipboard Save the script and the scene and run the project The name of the most recent Godot release on Github should be printed to the output log For more information on parsing JSON see the class references for JSON Note that you may want to check whether the result equals RESULT_SUCCESS and whether a JSON parsing error occurred see the JSON class reference and HTTPRequest for more You have to wait for a request to finish before sending another one Making multiple request at once requires you to have one node per request A common strategy is to create and delete HTTPRequest nodes at runtime as necessary Sending data to the server Until now we have limited ourselves to requesting data from a server But what if you need to send data to the server Here is a common way of doing it GDScript C var json JSON stringify data_to_send var headers Content Type application json HTTPRequest request url headers HTTPClient METHOD_POST json Copy to clipboard string json Json Stringify dataToSend string headers new string Content Type application json HttpRequest httpRequest GetNode HttpRequest HTTPRequest httpRequest Request url headers HttpClient Method Post json Copy to clipboard Setting custom HTTP headers Of course you can also set custom HTTP headers These are given as a string array with each string containing a header in the format header value For example to set a custom user agent the HTTP User Agent header you could use the following GDScript C HTTPRequest request https api github com repos godotengine godot releases latest User Agent YourCustomUserAgent Copy to clipboard HttpRequest httpRequest GetNode HttpRequest HTTPRequest httpRequest Request https api github com repos godotengine godot releases latest new string User Agent YourCustomUserAgent Copy to clipboard Warning Be aware that someone might analyse and decompile your released application and thus may gain access to any embedded authorization information like tokens usernames or passwords That means it is usually not a good idea to embed things such as database access credentials inside your game Avoid providing information useful to an attacker whenever possible User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request HTTP client class HTTPClient provides low level access to HTTP communication For a higher level interface you may want to take a look at HTTPRequest first which has a tutorial available here Warning When exporting to Android make sure to enable the INTERNET permission in the Android export preset before exporting the project or using one click deploy Otherwise network communication of any kind will be blocked by Android Here s an example of using the HTTPClient class It s just a script so it can be run by executing GDScript C c godot godot s http_test gd Copy to clipboard c godot godot s HTTPTest cs Copy to clipboard It will connect and fetch a website GDScript C extends SceneTree HTTPClient demo This simple class can do HTTP requests it will not block but it needs to be polled func _init var err 0 var http HTTPClient new Create the Client err http connect_to_host www php net 80 Connect to host port assert err OK Make sure connection is OK Wait until resolved and connected while http get_status HTTPClient STATUS_CONNECTING or http get_status HTTPClient STATUS_RESOLVING http poll print Connecting await get_tree process_frame assert http get_status HTTPClient STATUS_CONNECTED Check if the connection was made successfully Some headers var headers User Agent Pirulo 1 0 Godot Accept err http request HTTPClient METHOD_GET ChangeLog 5 php headers Request a page from the site this one was chunked assert err OK Make sure all is OK while http get_status HTTPClient STATUS_REQUESTING Keep polling for as long as the request is being processed http poll print Requesting await get_tree process_frame assert http get_status HTTPClient STATUS_BODY or http get_status HTTPClient STATUS_CONNECTED Make sure request finished well print response http has_response Site might not have a response if http has_response If there is a response headers http get_response_headers_as_dictionary Get response headers print code http get_response_code Show response code print headers n headers Show headers Getting the HTTP Body if http is_response_chunked Does it use chunks print Response is Chunked else Or just plain Content Length var bl http get_response_body_length print Response Length bl This method works for both anyway var rb PackedByteArray Array that will hold the data while http get_status HTTPClient STATUS_BODY While there is body left to be read http poll Get a chunk var chunk http read_response_body_chunk if chunk size 0 await get_tree process_frame else rb rb chunk Append to read buffer Done print bytes got rb size var text rb get_string_from_ascii print Text text quit Copy to clipboard using Godot public partial class HTTPTest SceneTree HTTPClient demo This simple class can make HTTP requests it will not block but it needs to be polled public override async void _Initialize Error err HTTPClient http new HTTPClient Create the client err http ConnectToHost www php net 80 Connect to host port Debug Assert err Error Ok Make sure the connection is OK Wait until resolved and connected while http GetStatus HTTPClient Status Connecting http GetStatus HTTPClient Status Resolving http Poll GD Print Connecting OS DelayMsec 500 Debug Assert http GetStatus HTTPClient Status Connected Check if the connection was made successfully Some headers string headers User Agent Pirulo 1 0 Godot Accept err http Request HTTPClient Method Get ChangeLog 5 php headers Request a page from the site Debug Assert err Error Ok Make sure all is OK Keep polling for as long as the request is being processed while http GetStatus HTTPClient Status Requesting http Poll GD Print Requesting if OS HasFeature web Synchronous HTTP requests are not supported on the web so wait for the next main loop iteration await ToSignal Engine GetMainLoop idle_frame else OS DelayMsec 500 Debug Assert http GetStatus HTTPClient Status Body http GetStatus HTTPClient Status Connected Make sure the request finished well GD Print Response http HasResponse The site might not have a response If there is a response if http HasResponse headers http GetResponseHeaders Get response headers GD Print Code http GetResponseCode Show response code GD Print Headers foreach string header in headers Show headers GD Print header if http IsResponseChunked Does it use chunks GD Print Response is Chunked else Or just Content Length GD Print Response Length http GetResponseBodyLength This method works for both anyways List byte rb new List byte List that will hold the data While there is data left to be read while http GetStatus HTTPClient Status Body http Poll byte chunk http ReadResponseBodyChunk Read a chunk if chunk Length 0 If nothing was read wait for the buffer to fill OS DelayMsec 500 else Append the chunk to the read buffer rb AddRange chunk Done GD Print Bytes Downloaded rb Count string text Encoding ASCII GetString rb ToArray GD Print text Quit Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue TLS SSL certificates Introduction It is often desired to use TLS connections also known as SSL connections for communications to avoid man in the middle attacks Godot has a connection wrapper StreamPeerTLS which can take a regular connection and add security around it The HTTPClient and HTTPRequest classes also support HTTPS using this same wrapper Godot will try to use the TLS certificate bundle provided by the operating system but also includes the TLS certificate bundle from Mozilla as a fallback You can alternatively force your own certificate bundle in the Project Settings Setting the TLS certificate bundle override project setting When set this file overrides the operating system provided bundle by default This file should contain any number of public certificates in PEM format There are two ways to obtain certificates Obtain a certificate from a certificate authority The main approach to getting a certificate is to use a certificate authority CA such as Let s Encrypt This is a more cumbersome process than a self signed certificate but it s more official and ensures your identity is clearly represented The resulting certificate is also trusted by applications such as web browsers unlike a self signed certificate which requires additional configuration on the client side before it s considered trusted These certificates do not require any configuration on the client to work since Godot already bundles the Mozilla certificate bundle in the editor and exported projects Generate a self signed certificate For most use cases it s recommended to go through certificate authority as the process is free with certificate authorities such as Let s Encrypt However if using a certificate authority is not an option then you can generate a self signed certificate and tell the client to consider your self signed certificate as trusted To create a self signed certificate generate a private and public key pair and add the public key in PEM format to the CRT file specified in the Project Settings Warning The private key should only go to your server The client must not have access to it otherwise the security of the certificate will be compromised Warning When specifying a self signed certificate as TLS bundle in the project settings normal domain name validation is enforced via the certificate CN and alternative names See TLSOptions to customize domain name validation For development purposes Godot can generate self signed certificates via Crypto generate_self_signed_certificate Alternatively OpenSSL has some documentation about generating keys and certificates User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request WebSocket HTML5 and WebSocket The WebSocket protocol was standardized in 2011 with the original goal of allowing browsers to create stable and bidirectional connections with a server Before that browsers used to only support HTTPRequests which is not well suited for bidirectional communication The protocol is message based and a very powerful tool to send push notifications to browsers and has been used to implement chats turn based games etc It still uses a TCP connection which is good for reliability but not for latency so not good for real time applications like VoIP and fast paced games see WebRTC for those use cases Due to its simplicity its wide compatibility and being easier to use than a raw TCP connection WebSocket soon started to spread outside the browsers in native applications as a mean to communicate with network servers Godot supports WebSocket in both native and HTML5 exports Using WebSocket in Godot WebSocket is implemented in Godot via WebSocketPeer The WebSocket implementation is compatible with the High Level Multiplayer See section on high level multiplayer for more details Warning When exporting to Android make sure to enable the INTERNET permission in the Android export preset before exporting the project or using one click deploy Otherwise network communication of any kind will be blocked by Android Minimal client example This example will show you how to create a WebSocket connection to a remote server and how to send and receive data extends Node The URL we will connect to export var websocket_url wss echo websocket org Our WebSocketClient instance var socket WebSocketPeer new func _ready Initiate connection to the given URL var err socket connect_to_url websocket_url if err OK print Unable to connect set_process false else Wait for the socket to connect await get_tree create_timer 2 timeout Send data socket send_text Test packet func _process _delta Call this in _process or _physics_process Data transfer and state updates will only happen when calling this function socket poll get_ready_state tells you what state the socket is in var state socket get_ready_state WebSocketPeer STATE_OPEN means the socket is connected and ready to send and receive data if state WebSocketPeer STATE_OPEN while socket get_available_packet_count print Got data from server socket get_packet get_string_from_utf8 WebSocketPeer STATE_CLOSING means the socket is closing It is important to keep polling for a clean close elif state WebSocketPeer STATE_CLOSING pass WebSocketPeer STATE_CLOSED means the connection has fully closed It is now safe to stop polling elif state WebSocketPeer STATE_CLOSED The code will be 1 if the disconnection was not properly notified by the remote peer var code socket get_close_code print WebSocket closed with code d Clean s code code 1 set_process false Stop processing Copy to clipboard This will print something similar to Got data from server Request served by 7811941 c69e658 Got data from server Test packet Copy to clipboard Minimal server example This example will show you how to create a WebSocket server that listens for remote connections and how to send and receive data extends Node The port we will listen to const PORT 9080 Our WebSocketServer instance var _server WebSocketServer new func _ready Connect base signals to get notified of new client connections disconnections and disconnect requests _server client_connected connect _connected _server client_disconnected connect _disconnected _server client_close_request connect _close_request This signal is emitted when not using the Multiplayer API every time a full packet is received Alternatively you could check get_peer PEER_ID get_available_packets in a loop for each connected peer _server data_received connect _on_data Start listening on the given port var err _server listen PORT if err OK print Unable to start server set_process false func _connected id proto This is called when a new peer connects id will be the assigned peer id proto will be the selected WebSocket sub protocol which is optional print Client d connected with protocol s id proto func _close_request id code reason This is called when a client notifies that it wishes to close the connection providing a reason string and close code print Client d disconnecting with code d reason s id code reason func _disconnected id was_clean false This is called when a client disconnects id will be the one of the disconnecting client was_clean will tell you if the disconnection was correctly notified by the remote peer before closing the socket print Client d disconnected clean s id str was_clean func _on_data id Print the received packet you MUST always use get_peer id get_packet to receive data and not get_packet directly when not using the MultiplayerAPI var pkt _server get_peer id get_packet print Got data from client d s echoing id pkt get_string_from_utf8 _server get_peer id put_packet pkt func _process delta Call this in _process or _physics_process Data transfer and signals emission will only happen when calling this function _server poll Copy to clipboard This will print when a client connects something similar to this Client 1348090059 connected with protocol selected protocol Got data from client 1348090059 Test packet echoing Copy to clipboard Advanced chat demo A more advanced chat demo which optionally uses the multiplayer mid level abstraction and a high level multiplayer demo are available in the godot demo projects under networking websocket_chat and networking websocket_multiplayer User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request WebRTC HTML5 WebSocket WebRTC One of Godot s great features is its ability to export to the HTML5 WebAssembly platform allowing your game to run directly in the browser when a user visit your webpage This is a great opportunity for both demos and full games but used to come with some limitations In the area of networking browsers used to support only HTTPRequests until recently when first WebSocket and then WebRTC were proposed as standards WebSocket When the WebSocket protocol was standardized in December 2011 it allowed browsers to create stable and bidirectional connections to a WebSocket server The protocol is a very powerful tool to send push notifications to browsers and has been used to implement chats turn based games etc WebSockets though still use a TCP connection which is good for reliability but not for latency so not good for real time applications like VoIP and fast paced games WebRTC For this reason since 2010 Google started working on a new technology called WebRTC which later on in 2017 became a W3C candidate recommendation WebRTC is a much more complex set of specifications and relies on many other technologies behind the scenes ICE DTLS SDP to provide fast real time and secure communication between two peers The idea is to find the fastest route between the two peers and establish whenever possible a direct communication i e try to avoid a relaying server However this comes at a price which is that some media information must be exchanged between the two peers before the communication can start in the form of Session Description Protocol SDP strings This usually takes the form of a so called WebRTC Signaling Server Peers connect to a signaling server for example a WebSocket server and send their media information The server then relays this information to other peers allowing them to establish the desired direct communication Once this step is done peers can disconnect from the signaling server and keep the direct Peer to Peer P2P connection open Using WebRTC in Godot WebRTC is implemented in Godot via two main classes WebRTCPeerConnection and WebRTCDataChannel plus the multiplayer API implementation WebRTCMultiplayerPeer See section on high level multiplayer for more details Note These classes are available automatically in HTML5 but require an external GDExtension plugin on native non HTML5 platforms Check out the webrtc native plugin repository for instructions and to get the latest release Warning When exporting to Android make sure to enable the INTERNET permission in the Android export preset before exporting the project or using one click deploy Otherwise network communication of any kind will be blocked by Android Minimal connection example This example will show you how to create a WebRTC connection between two peers in the same application This is not very useful in real life but will give you a good overview of how a WebRTC connection is set up extends Node Create the two peers var p1 WebRTCPeerConnection new var p2 WebRTCPeerConnection new And a negotiated channel for each each peer var ch1 p1 create_data_channel chat id 1 negotiated true var ch2 p2 create_data_channel chat id 1 negotiated true func _ready Connect P1 session created to itself to set local description p1 session_description_created connect p1 set_local_description Connect P1 session and ICE created to p2 set remote description and candidates p1 session_description_created connect p2 set_remote_description p1 ice_candidate_created connect p2 add_ice_candidate Same for P2 p2 session_description_created connect p2 set_local_description p2 session_description_created connect p1 set_remote_description p2 ice_candidate_created connect p1 add_ice_candidate Let P1 create the offer p1 create_offer Wait a second and send message from P1 await get_tree create_timer 1 timeout ch1 put_packet Hi from P1 to_utf8_buffer Wait a second and send message from P2 await get_tree create_timer 1 timeout ch2 put_packet Hi from P2 to_utf8_buffer func _process _delta Poll connections p1 poll p2 poll Check for messages if ch1 get_ready_state ch1 STATE_OPEN and ch1 get_available_packet_count 0 print P1 received ch1 get_packet get_string_from_utf8 if ch2 get_ready_state ch2 STATE_OPEN and ch2 get_available_packet_count 0 print P2 received ch2 get_packet get_string_from_utf8 Copy to clipboard This will print P1 received Hi from P1 P2 received Hi from P2 Copy to clipboard Local signaling example This example expands on the previous one separating the peers in two different scenes and using a singleton as a signaling server extends Node An example p2p chat client var peer WebRTCPeerConnection new Create negotiated data channel var channel peer create_data_channel chat negotiated true id 1 func _ready Connect all functions peer ice_candidate_created connect self _on_ice_candidate peer session_description_created connect self _on_session Register to the local signaling server see below for the implementation Signaling register String get_path func _on_ice_candidate mid index sdp Send the ICE candidate to the other peer via signaling server Signaling send_candidate String get_path mid index sdp func _on_session type sdp Send the session to other peer via signaling server Signaling send_session String get_path type sdp Set generated description as local peer set_local_description type sdp func _process delta Always poll the connection frequently peer poll if channel get_ready_state WebRTCDataChannel STATE_OPEN while channel get_available_packet_count 0 print String get_path received channel get_packet get_string_from_utf8 func send_message message channel put_packet message to_utf8_buffer Copy to clipboard And now for the local signaling server Note This local signaling server is supposed to be used as a singleton to connect two peers in the same scene A local signaling server Add this to autoloads with name Signaling root Signaling extends Node We will store the two peers here var peers func register path assert peers size 2 peers append path if peers size 2 get_node peers 0 peer create_offer func _find_other path Find the other registered peer for p in peers if p path return p return func send_session path type sdp var other _find_other path assert other get_node other peer set_remote_description type sdp func send_candidate path mid index sdp var other _find_other path assert other get_node other peer add_ice_candidate mid index sdp Copy to clipboard Then you can use it like this Main scene main gd extends Node const Chat preload res chat gd func _ready var p1 Chat new var p2 Chat new add_child p1 add_child p2 Wait a second and send message from P1 await get_tree create_timer 1 timeout p1 send_message Hi from s String p1 get_path Wait a second and send message from P2 await get_tree create_timer 1 timeout p2 send_message Hi from s String p2 get_path Copy to clipboard This will print something similar to this root main 3 received Hi from root main 2 root main 2 received Hi from root main 3 Copy to clipboard Remote signaling with WebSocket A more advanced demo using WebSocket for signaling peers and WebRTCMultiplayerPeer is available in the godot demo projects under networking webrtc_signaling User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Performance Introduction Godot follows a balanced performance philosophy In the performance world there are always tradeoffs which consist of trading speed for usability and flexibility Some practical examples of this are Rendering large amounts of objects efficiently is easy but when a large scene must be rendered it can become inefficient To solve this visibility computation must be added to the rendering This makes rendering less efficient but at the same time fewer objects are rendered Therefore the overall rendering efficiency is improved Configuring the properties of every material for every object that needs to be rendered is also slow To solve this objects are sorted by material to reduce the costs At the same time sorting has a cost In 3D physics a similar situation happens The best algorithms to handle large amounts of physics objects such as SAP are slow at insertion removal of objects and raycasting Algorithms that allow faster insertion and removal as well as raycasting will not be able to handle as many active objects And there are many more examples of this Game engines strive to be general purpose in nature Balanced algorithms are always favored over algorithms that might be fast in some situations and slow in others or algorithms that are fast but are more difficult to use Godot is not an exception to this While it is designed to have backends swappable for different algorithms the default backends prioritize balance and flexibility over performance With this clear the aim of this tutorial section is to explain how to get the maximum performance out of Godot While the tutorials can be read in any order it is a good idea to start from General optimization tips Common General optimization tips Optimization using Servers CPU CPU optimization GPU GPU optimization Optimization using MultiMeshes 3D Optimizing 3D performance Animating thousands of objects Threads Using multiple threads Thread safe APIs Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue General optimization tips Introduction In an ideal world computers would run at infinite speed The only limit to what we could achieve would be our imagination However in the real world it s all too easy to produce software that will bring even the fastest computer to its knees Thus designing games and other software is a compromise between what we would like to be possible and what we can realistically achieve while maintaining good performance To achieve the best results we have two approaches Work faster Work smarter And preferably we will use a blend of the two Smoke and mirrors Part of working smarter is recognizing that in games we can often get the player to believe they re in a world that is far more complex interactive and graphically exciting than it really is A good programmer is a magician and should strive to learn the tricks of the trade while trying to invent new ones The nature of slowness To the outside observer performance problems are often lumped together But in reality there are several different kinds of performance problems A slow process that occurs every frame leading to a continuously low frame rate An intermittent process that causes spikes of slowness leading to stalls A slow process that occurs outside of normal gameplay for instance when loading a level Each of these are annoying to the user but in different ways Measuring performance Probably the most important tool for optimization is the ability to measure performance to identify where bottlenecks are and to measure the success of our attempts to speed them up There are several methods of measuring performance including Putting a start stop timer around code of interest Using the Godot profiler Using external CPU profilers Using external GPU profilers debuggers such as NVIDIA Nsight Graphics Radeon GPU Profiler Intel Graphics Performance Analyzers or Arm Performance Studio Checking the frame rate with V Sync disabled Third party utilities such as RivaTuner Statistics Server Windows or MangoHud Linux can also be useful here Using an unofficial debug menu add on Be very aware that the relative performance of different areas can vary on different hardware It s often a good idea to measure timings on more than one device This is especially the case if you re targeting mobile devices Limitations CPU profilers are often the go to method for measuring performance However they don t always tell the whole story Bottlenecks are often on the GPU as a result of instructions given by the CPU Spikes can occur in the operating system processes outside of Godot as a result of instructions used in Godot for example dynamic memory allocation You may not always be able to profile specific devices like a mobile phone due to the initial setup required You may have to solve performance problems that occur on hardware you don t have access to As a result of these limitations you often need to use detective work to find out where bottlenecks are Detective work Detective work is a crucial skill for developers both in terms of performance and also in terms of bug fixing This can include hypothesis testing and binary search Hypothesis testing Say for example that you believe sprites are slowing down your game You can test this hypothesis by Measuring the performance when you add more sprites or take some away This may lead to a further hypothesis does the size of the sprite determine the performance drop You can test this by keeping everything the same but changing the sprite size and measuring performance Binary search If you know that frames are taking much longer than they should but you re not sure where the bottleneck lies You could begin by commenting out approximately half the routines that occur on a normal frame Has the performance improved more or less than expected Once you know which of the two halves contains the bottleneck you can repeat this process until you ve pinned down the problematic area Profilers Profilers allow you to time your program while running it Profilers then provide results telling you what percentage of time was spent in different functions and areas and how often functions were called This can be very useful both to identify bottlenecks and to measure the results of your improvements Sometimes attempts to improve performance can backfire and lead to slower performance Always use profiling and timing to guide your efforts For more info about using Godot s built in profiler see The Profiler Principles Donald Knuth said Programmers waste enormous amounts of time thinking about or worrying about the speed of noncritical parts of their programs and these attempts at efficiency actually have a strong negative impact when debugging and maintenance are considered We should forget about small efficiencies say about 97 of the time premature optimization is the root of all evil Yet we should not pass up our opportunities in that critical 3 The messages are very important Developer time is limited Instead of blindly trying to speed up all aspects of a program we should concentrate our efforts on the aspects that really matter Efforts at optimization often end up with code that is harder to read and debug than non optimized code It is in our interests to limit this to areas that will really benefit Just because we can optimize a particular bit of code it doesn t necessarily mean that we should Knowing when and when not to optimize is a great skill to develop One misleading aspect of the quote is that people tend to focus on the subquote premature optimization is the root of all evil While premature optimization is by definition undesirable performant software is the result of performant design Performant design The danger with encouraging people to ignore optimization until necessary is that it conveniently ignores that the most important time to consider performance is at the design stage before a key has even hit a keyboard If the design or algorithms of a program are inefficient then no amount of polishing the details later will make it run fast It may run faster but it will never run as fast as a program designed for performance This tends to be far more important in game or graphics programming than in general programming A performant design even without low level optimization will often run many times faster than a mediocre design with low level optimization Incremental design Of course in practice unless you have prior knowledge you are unlikely to come up with the best design the first time Instead you ll often make a series of versions of a particular area of code each taking a different approach to the problem until you come to a satisfactory solution It s important not to spend too much time on the details at this stage until you have finalized the overall design Otherwise much of your work will be thrown out It s difficult to give general guidelines for performant design because this is so dependent on the problem One point worth mentioning though on the CPU side is that modern CPUs are nearly always limited by memory bandwidth This has led to a resurgence in data oriented design which involves designing data structures and algorithms for cache locality of data and linear access rather than jumping around in memory The optimization process Assuming we have a reasonable design and taking our lessons from Knuth our first step in optimization should be to identify the biggest bottlenecks the slowest functions the low hanging fruit Once we ve successfully improved the speed of the slowest area it may no longer be the bottleneck So we should test profile again and find the next bottleneck on which to focus The process is thus Profile Identify bottleneck Optimize bottleneck Return to step 1 Optimizing bottlenecks Some profilers will even tell you which part of a function which data accesses calculations are slowing things down As with design you should concentrate your efforts first on making sure the algorithms and data structures are the best they can be Data access should be local to make best use of CPU cache and it can often be better to use compact storage of data again always profile to test results Often you precalculate heavy computations ahead of time This can be done by performing the computation when loading a level by loading a file containing precalculated data or simply by storing the results of complex calculations into a script constant and reading its value Once algorithms and data are good you can often make small changes in routines which improve performance For instance you can move some calculations outside of loops or transform nested for loops into non nested loops This should be feasible if you know a 2D array s width or height in advance Always retest your timing bottlenecks after making each change Some changes will increase speed others may have a negative effect Sometimes a small positive effect will be outweighed by the negatives of more complex code and you may choose to leave out that optimization Appendix Bottleneck math The proverb a chain is only as strong as its weakest link applies directly to performance optimization If your project is spending 90 of the time in function A then optimizing A can have a massive effect on performance A 9 ms Everything else 1 ms Total frame time 10 ms Copy to clipboard A 1 ms Everything else 1ms Total frame time 2 ms Copy to clipboard In this example improving this bottleneck A by a factor of 9 decreases overall frame time by 5 while increasing frames per second by 5 However if something else is running slowly and also bottlenecking your project then the same improvement can lead to less dramatic gains A 9 ms Everything else 50 ms Total frame time 59 ms Copy to clipboard A 1 ms Everything else 50 ms Total frame time 51 ms Copy to clipboard In this example even though we have hugely optimized function A the actual gain in terms of frame rate is quite small In games things become even more complicated because the CPU and GPU run independently of one another Your total frame time is determined by the slower of the two CPU 9 ms GPU 50 ms Total frame time 50 ms Copy to clipboard CPU 1 ms GPU 50 ms Total frame time 50 ms Copy to clipboard In this example we optimized the CPU hugely again but the frame time didn t improve because we are GPU bottlenecked User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Optimization using Servers Engines like Godot provide increased ease of use thanks to their high level constructs and features Most of them are accessed and used via the Scene System Using nodes and resources simplifies project organization and asset management in complex games There are of course always drawbacks There is an extra layer of complexity Performance is lower than when using simple APIs directly It is not possible to use multiple threads to control them More memory is needed In many cases this is not really a problem Godot is very optimized and most operations are handled with signals so no polling is required Still sometimes it can be For example dealing with tens of thousands of instances for something that needs to be processed every frame can be a bottleneck This type of situation makes programmers regret they are using a game engine and wish they could go back to a more handcrafted low level implementation of game code Still Godot is designed to work around this problem See also You can see how using low level servers works in action using the Bullet Shower demo project Servers One of the most interesting design decisions for Godot is the fact that the whole scene system is optional While it is not currently possible to compile it out it can be completely bypassed At the core Godot uses the concept of Servers They are very low level APIs to control rendering physics sound etc The scene system is built on top of them and uses them directly The most common servers are RenderingServer handles everything related to graphics PhysicsServer3D handles everything related to 3D physics PhysicsServer2D handles everything related to 2D physics AudioServer handles everything related to audio Explore their APIs and you will realize that all the functions provided are low level implementations of everything Godot allows you to do RIDs The key to using servers is understanding Resource ID RID objects These are opaque handles to the server implementation They are allocated and freed manually Almost every function in the servers requires RIDs to access the actual resource Most Godot nodes and resources contain these RIDs from the servers internally and they can be obtained with different functions In fact anything that inherits Resource can be directly casted to an RID Not all resources contain an RID though in such cases the RID will be empty The resource can then be passed to server APIs as an RID Warning Resources are reference counted see RefCounted and references to a resource s RID are not counted when determining whether the resource is still in use Make sure to keep a reference to the resource outside the server or else both it and its RID will be erased For nodes there are many functions available For CanvasItem the CanvasItem get_canvas_item method will return the canvas item RID in the server For CanvasLayer the CanvasLayer get_canvas method will return the canvas RID in the server For Viewport the Viewport get_viewport_rid method will return the viewport RID in the server For 3D the World3D resource obtainable in the Viewport and Node3D nodes contains functions to get the RenderingServer Scenario and the PhysicsServer Space This allows creating 3D objects directly with the server API and using them For 2D the World2D resource obtainable in the Viewport and CanvasItem nodes contains functions to get the RenderingServer Canvas and the Physics2DServer Space This allows creating 2D objects directly with the server API and using them The VisualInstance3D class allows getting the scenario instance and instance base via the VisualInstance3D get_instance and VisualInstance3D get_base respectively Try exploring the nodes and resources you are familiar with and find the functions to obtain the server RIDs It is not advised to control RIDs from objects that already have a node associated Instead server functions should always be used for creating and controlling new ones and interacting with the existing ones Creating a sprite This is an example of how to create a sprite from code and move it using the low level CanvasItem API GDScript C extends Node2D RenderingServer expects references to be kept around var texture func _ready Create a canvas item child of this node var ci_rid RenderingServer canvas_item_create Make this node the parent RenderingServer canvas_item_set_parent ci_rid get_canvas_item Draw a texture on it Remember keep this reference texture load res my_texture png Add it centered RenderingServer canvas_item_add_texture_rect ci_rid Rect2 texture get_size 2 texture get_size texture Add the item rotated 45 degrees and translated var xform Transform2D rotated deg_to_rad 45 translated Vector2 20 30 RenderingServer canvas_item_set_transform ci_rid xform Copy to clipboard public partial class MyNode2D Node2D RenderingServer expects references to be kept around private Texture2D _texture public override void _Ready Create a canvas item child of this node Rid ciRid RenderingServer CanvasItemCreate Make this node the parent RenderingServer CanvasItemSetParent ciRid GetCanvasItem Draw a texture on it Remember keep this reference _texture ResourceLoader Load Texture2D res MyTexture png Add it centered RenderingServer CanvasItemAddTextureRect ciRid new Rect2 _texture GetSize 2 _texture GetSize _texture GetRid Add the item rotated 45 degrees and translated Transform2D xform Transform2D Identity Rotated Mathf DegToRad 45 Translated new Vector2 20 30 RenderingServer CanvasItemSetTransform ciRid xform Copy to clipboard The Canvas Item API in the server allows you to add draw primitives to it Once added they can t be modified The Item needs to be cleared and the primitives re added this is not the case for setting the transform which can be done as many times as desired Primitives are cleared this way GDScript C RenderingServer canvas_item_clear ci_rid Copy to clipboard RenderingServer CanvasItemClear ciRid Copy to clipboard Instantiating a Mesh into 3D space The 3D APIs are different from the 2D ones so the instantiation API must be used GDScript C extends Node3D RenderingServer expects references to be kept around var mesh func _ready Create a visual instance for 3D var instance RenderingServer instance_create Set the scenario from the world this ensures it appears with the same objects as the scene var scenario get_world_3d scenario RenderingServer instance_set_scenario instance scenario Add a mesh to it Remember keep the reference mesh load res mymesh obj RenderingServer instance_set_base instance mesh Move the mesh around var xform Transform3D Basis Vector3 20 100 0 RenderingServer instance_set_transform instance xform Copy to clipboard public partial class MyNode3D Node3D RenderingServer expects references to be kept around private Mesh _mesh public override void _Ready Create a visual instance for 3D Rid instance RenderingServer InstanceCreate Set the scenario from the world this ensures it appears with the same objects as the scene Rid scenario GetWorld3D Scenario RenderingServer InstanceSetScenario instance scenario Add a mesh to it Remember keep the reference _mesh ResourceLoader Load Mesh res MyMesh obj RenderingServer InstanceSetBase instance _mesh GetRid Move the mesh around Transform3D xform new Transform3D Basis Identity new Vector3 20 100 0 RenderingServer InstanceSetTransform instance xform Copy to clipboard Creating a 2D RigidBody and moving a sprite with it This creates a RigidBody2D using the PhysicsServer2D API and moves a CanvasItem when the body moves GDScript Physics2DServer expects references to be kept around var body var shape func _body_moved state index Created your own canvas item use it here RenderingServer canvas_item_set_transform canvas_item state transform func _ready Create the body body Physics2DServer body_create Physics2DServer body_set_mode body Physics2DServer BODY_MODE_RIGID Add a shape shape Physics2DServer rectangle_shape_create Set rectangle extents Physics2DServer shape_set_data shape Vector2 10 10 Make sure to keep the shape reference Physics2DServer body_add_shape body shape Set space so it collides in the same space as current scene Physics2DServer body_set_space body get_world_2d space Move initial position Physics2DServer body_set_state body Physics2DServer BODY_STATE_TRANSFORM Transform2D 0 Vector2 10 20 Add the transform callback when body moves The last parameter is optional can be used as index if you have many bodies and a single callback Physics2DServer body_set_force_integration_callback body self _body_moved 0 Copy to clipboard The 3D version should be very similar as 2D and 3D physics servers are identical using RigidBody3D and PhysicsServer3D respectively Getting data from the servers Try to never request any information from RenderingServer PhysicsServer2D or PhysicsServer3D by calling functions unless you know what you are doing These servers will often run asynchronously for performance and calling any function that returns a value will stall them and force them to process anything pending until the function is actually called This will severely decrease performance if you call them every frame and it won t be obvious why Because of this most APIs in such servers are designed so it s not even possible to request information back until it s actual data that can be saved User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue CPU optimization Measuring performance We have to know where the bottlenecks are to know how to speed up our program Bottlenecks are the slowest parts of the program that limit the rate that everything can progress Focusing on bottlenecks allows us to concentrate our efforts on optimizing the areas which will give us the greatest speed improvement instead of spending a lot of time optimizing functions that will lead to small performance improvements For the CPU the easiest way to identify bottlenecks is to use a profiler CPU profilers Profilers run alongside your program and take timing measurements to work out what proportion of time is spent in each function The Godot IDE conveniently has a built in profiler It does not run every time you start your project it must be manually started and stopped This is because like most profilers recording these timing measurements can slow down your project significantly After profiling you can look back at the results for a frame Results of a profile of one of the demo projects Note We can see the cost of built in processes such as physics and audio as well as seeing the cost of our own scripting functions at the bottom Time spent waiting for various built in servers may not be counted in the profilers This is a known bug When a project is running slowly you will often see an obvious function or process taking a lot more time than others This is your primary bottleneck and you can usually increase speed by optimizing this area For more info about using Godot s built in profiler see Debugger panel External profilers Although the Godot IDE profiler is very convenient and useful sometimes you need more power and the ability to profile the Godot engine source code itself You can use a number of third party C profilers to do this Example results from Callgrind which is part of Valgrind From the left Callgrind is listing the percentage of time within a function and its children Inclusive the percentage of time spent within the function itself excluding child functions Self the number of times the function is called the function name and the file or module In this example we can see nearly all time is spent under the Main iteration function This is the master function in the Godot source code that is called repeatedly It causes frames to be drawn physics ticks to be simulated and nodes and scripts to be updated A large proportion of the time is spent in the functions to render a canvas 66 because this example uses a 2D benchmark Below this we see that almost 50 of the time is spent outside Godot code in libglapi and i965_dri the graphics driver This tells us the a large proportion of CPU time is being spent in the graphics driver This is actually an excellent example because in an ideal world only a very small proportion of time would be spent in the graphics driver This is an indication that there is a problem with too much communication and work being done in the graphics API This specific profiling led to the development of 2D batching which greatly speeds up 2D rendering by reducing bottlenecks in this area Manually timing functions Another handy technique especially once you have identified the bottleneck using a profiler is to manually time the function or area under test The specifics vary depending on the language but in GDScript you would do the following GDScript C var time_start Time get_ticks_usec Your function you want to time update_enemies var time_end Time get_ticks_usec print update_enemies took d microseconds time_end time_start Copy to clipboard var timeStart Time GetTicksUsec Your function you want to time UpdateEnemies var timeEnd Time GetTicksUsec GD Print UpdateEnemies took timeEnd timeStart microseconds Copy to clipboard When manually timing functions it is usually a good idea to run the function many times 1 000 or more times instead of just once unless it is a very slow function The reason for doing this is that timers often have limited accuracy Moreover CPUs will schedule processes in a haphazard manner Therefore an average over a series of runs is more accurate than a single measurement As you attempt to optimize functions be sure to either repeatedly profile or time them as you go This will give you crucial feedback as to whether the optimization is working or not Caches CPU caches are something else to be particularly aware of especially when comparing timing results of two different versions of a function The results can be highly dependent on whether the data is in the CPU cache or not CPUs don t load data directly from the system RAM even though it s huge in comparison to the CPU cache several gigabytes instead of a few megabytes This is because system RAM is very slow to access Instead CPUs load data from a smaller faster bank of memory called cache Loading data from cache is very fast but every time you try and load a memory address that is not stored in cache the cache must make a trip to main memory and slowly load in some data This delay can result in the CPU sitting around idle for a long time and is referred to as a cache miss This means that the first time you run a function it may run slowly because the data is not in the CPU cache The second and later times it may run much faster because the data is in the cache Due to this always use averages when timing and be aware of the effects of cache Understanding caching is also crucial to CPU optimization If you have an algorithm routine that loads small bits of data from randomly spread out areas of main memory this can result in a lot of cache misses a lot of the time the CPU will be waiting around for data instead of doing any work Instead if you can make your data accesses localised or even better access memory in a linear fashion like a continuous list then the cache will work optimally and the CPU will be able to work as fast as possible Godot usually takes care of such low level details for you For example the Server APIs make sure data is optimized for caching already for things like rendering and physics Still you should be especially aware of caching when writing GDExtensions Languages Godot supports a number of different languages and it is worth bearing in mind that there are trade offs involved Some languages are designed for ease of use at the cost of speed and others are faster but more difficult to work with Built in engine functions run at the same speed regardless of the scripting language you choose If your project is making a lot of calculations in its own code consider moving those calculations to a faster language GDScript GDScript is designed to be easy to use and iterate and is ideal for making many types of games However in this language ease of use is considered more important than performance If you need to make heavy calculations consider moving some of your project to one of the other languages C C is popular and has first class support in Godot It offers a good compromise between speed and ease of use Beware of possible garbage collection pauses and leaks that can occur during gameplay though A common approach to workaround issues with garbage collection is to use object pooling which is outside the scope of this guide Other languages Third parties provide support for several other languages including Rust C Godot is written in C Using C will usually result in the fastest code However on a practical level it is the most difficult to deploy to end users machines on different platforms Options for using C include GDExtensions and custom modules Threads Consider using threads when making a lot of calculations that can run in parallel to each other Modern CPUs have multiple cores each one capable of doing a limited amount of work By spreading work over multiple threads you can move further towards peak CPU efficiency The disadvantage of threads is that you have to be incredibly careful As each CPU core operates independently they can end up trying to access the same memory at the same time One thread can be reading to a variable while another is writing this is called a race condition Before you use threads make sure you understand the dangers and how to try and prevent these race conditions Threads can make debugging considerably more difficult For more information on threads see Using multiple threads SceneTree Although Nodes are an incredibly powerful and versatile concept be aware that every node has a cost Built in functions such as _process and _physics_process propagate through the tree This housekeeping can reduce performance when you have a very large numbers of nodes how many exactly depends on the target platform and can range from thousands to tens of thousands so ensure that you profile performance on all target platforms during development Each node is handled individually in the Godot renderer Therefore a smaller number of nodes with more in each can lead to better performance One quirk of the SceneTree is that you can sometimes get much better performance by removing nodes from the SceneTree rather than by pausing or hiding them You don t have to delete a detached node You can for example keep a reference to a node detach it from the scene tree using Node remove_child node then reattach it later using Node add_child node This can be very useful for adding and removing areas from a game for example You can avoid the SceneTree altogether by using Server APIs For more information see Optimization using Servers Physics In some situations physics can end up becoming a bottleneck This is particularly the case with complex worlds and large numbers of physics objects Here are some techniques to speed up physics Try using simplified versions of your rendered geometry for collision shapes Often this won t be noticeable for end users but can greatly increase performance Try removing objects from physics when they are out of view outside the current area or reusing physics objects maybe you allow 8 monsters per area for example and reuse these Another crucial aspect to physics is the physics tick rate In some games you can greatly reduce the tick rate and instead of for example updating physics 60 times per second you may update them only 30 or even 20 times per second This can greatly reduce the CPU load The downside of changing physics tick rate is you can get jerky movement or jitter when the physics update rate does not match the frames per second rendered Also decreasing the physics tick rate will increase input lag It s recommended to stick to the default physics tick rate 60 Hz in most games that feature real time player movement The solution to jitter is to use fixed timestep interpolation which involves smoothing the rendered positions and rotations over multiple frames to match the physics You can either implement this yourself or use a third party addon Performance wise interpolation is a very cheap operation compared to running a physics tick It s orders of magnitude faster so this can be a significant performance win while also reducing jitter User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue GPU optimization Introduction The demand for new graphics features and progress almost guarantees that you will encounter graphics bottlenecks Some of these can be on the CPU side for instance in calculations inside the Godot engine to prepare objects for rendering Bottlenecks can also occur on the CPU in the graphics driver which sorts instructions to pass to the GPU and in the transfer of these instructions And finally bottlenecks also occur on the GPU itself Where bottlenecks occur in rendering is highly hardware specific Mobile GPUs in particular may struggle with scenes that run easily on desktop Understanding and investigating GPU bottlenecks is slightly different to the situation on the CPU This is because often you can only change performance indirectly by changing the instructions you give to the GPU Also it may be more difficult to take measurements In many cases the only way of measuring performance is by examining changes in the time spent rendering each frame Draw calls state changes and APIs Note The following section is not relevant to end users but is useful to provide background information that is relevant in later sections Godot sends instructions to the GPU via a graphics API Vulkan OpenGL OpenGL ES or WebGL The communication and driver activity involved can be quite costly especially in OpenGL OpenGL ES and WebGL If we can provide these instructions in a way that is preferred by the driver and GPU we can greatly increase performance Nearly every API command in OpenGL requires a certain amount of validation to make sure the GPU is in the correct state Even seemingly simple commands can lead to a flurry of behind the scenes housekeeping Therefore the goal is to reduce these instructions to a bare minimum and group together similar objects as much as possible so they can be rendered together or with the minimum number of these expensive state changes 2D batching In 2D the costs of treating each item individually can be prohibitively high there can easily be thousands of them on the screen This is why 2D batching is used with OpenGL based rendering methods Multiple similar items are grouped together and rendered in a batch via a single draw call rather than making a separate draw call for each item In addition this means state changes material and texture changes can be kept to a minimum Vulkan based rendering methods do not use 2D batching yet Since draw calls are much cheaper with Vulkan compared to OpenGL there is less of a need to have 2D batching although it can still be beneficial in some cases 3D batching In 3D we still aim to minimize draw calls and state changes However it can be more difficult to batch together several objects into a single draw call 3D meshes tend to comprise hundreds or thousands of triangles and combining large meshes in real time is prohibitively expensive The costs of joining them quickly exceeds any benefits as the number of triangles grows per mesh A much better alternative is to join meshes ahead of time static meshes in relation to each other This can be done by artists or programmatically within Godot using an add on There is also a cost to batching together objects in 3D Several objects rendered as one cannot be individually culled An entire city that is off screen will still be rendered if it is joined to a single blade of grass that is on screen Thus you should always take objects location and culling into account when attempting to batch 3D objects together Despite this the benefits of joining static objects often outweigh other considerations especially for large numbers of distant or low poly objects For more information on 3D specific optimizations see Optimizing 3D performance Reuse shaders and materials The Godot renderer is a little different to what is out there It s designed to minimize GPU state changes as much as possible StandardMaterial3D does a good job at reusing materials that need similar shaders If custom shaders are used make sure to reuse them as much as possible Godot s priorities are Reusing Materials The fewer different materials in the scene the faster the rendering will be If a scene has a huge amount of objects in the hundreds or thousands try reusing the materials In the worst case use atlases to decrease the amount of texture changes Reusing Shaders If materials can t be reused at least try to reuse shaders Note shaders are automatically reused between StandardMaterial3Ds that share the same configuration features that are enabled or disabled with a check box even if they have different parameters If a scene has for example 20 000 objects with 20 000 different materials each rendering will be slow If the same scene has 20 000 objects but only uses 100 materials rendering will be much faster Pixel cost versus vertex cost You may have heard that the lower the number of polygons in a model the faster it will be rendered This is really relative and depends on many factors On a modern PC and console vertex cost is low GPUs originally only rendered triangles This meant that every frame All vertices had to be transformed by the CPU including clipping All vertices had to be sent to the GPU memory from the main RAM Nowadays all this is handled inside the GPU greatly increasing performance 3D artists usually have the wrong feeling about polycount performance because 3D modeling software such as Blender 3ds Max etc need to keep geometry in CPU memory for it to be edited reducing actual performance Game engines rely on the GPU more so they can render many triangles much more efficiently On mobile devices the story is different PC and console GPUs are brute force monsters that can pull as much electricity as they need from the power grid Mobile GPUs are limited to a tiny battery so they need to be a lot more power efficient To be more efficient mobile GPUs attempt to avoid overdraw Overdraw occurs when the same pixel on the screen is being rendered more than once Imagine a town with several buildings GPUs don t know what is visible and what is hidden until they draw it For example a house might be drawn and then another house in front of it which means rendering happened twice for the same pixel PC GPUs normally don t care much about this and just throw more pixel processors to the hardware to increase performance which also increases power consumption Using more power is not an option on mobile so mobile devices use a technique called tile based rendering which divides the screen into a grid Each cell keeps the list of triangles drawn to it and sorts them by depth to minimize overdraw This technique improves performance and reduces power consumption but takes a toll on vertex performance As a result fewer vertices and triangles can be processed for drawing Additionally tile based rendering struggles when there are small objects with a lot of geometry within a small portion of the screen This forces mobile GPUs to put a lot of strain on a single screen tile which considerably decreases performance as all the other cells must wait for it to complete before displaying the frame To summarize don t worry about vertex count on mobile but avoid concentration of vertices in small parts of the screen If a character NPC vehicle etc is far away which means it looks tiny use a smaller level of detail LOD model Even on desktop GPUs it s preferable to avoid having triangles smaller than the size of a pixel on screen Pay attention to the additional vertex processing required when using Skinning skeletal animation Morphs shape keys Pixel fragment shaders and fill rate In contrast to vertex processing the costs of fragment per pixel shading have increased dramatically over the years Screen resolutions have increased the area of a 4K screen is 8 294 400 pixels versus 307 200 for an old 640 480 VGA screen That is 27 times the area Also the complexity of fragment shaders has exploded Physically based rendering requires complex calculations for each fragment You can test whether a project is fill rate limited quite easily Turn off V Sync to prevent capping the frames per second then compare the frames per second when running with a large window to running with a very small window You may also benefit from similarly reducing your shadow map size if using shadows Usually you will find the FPS increases quite a bit using a small window which indicates you are to some extent fill rate limited On the other hand if there is little to no increase in FPS then your bottleneck lies elsewhere You can increase performance in a fill rate limited project by reducing the amount of work the GPU has to do You can do this by simplifying the shader perhaps turn off expensive options if you are using a StandardMaterial3D or reducing the number and size of textures used Also when using non unshaded particles consider forcing vertex shading in their material to decrease the shading cost See also On supported hardware Variable rate shading can be used to reduce shading processing costs without impacting the sharpness of edges on the final image When targeting mobile devices consider using the simplest possible shaders you can reasonably afford to use Reading textures The other factor in fragment shaders is the cost of reading textures Reading textures is an expensive operation especially when reading from several textures in a single fragment shader Also consider that filtering may slow it down further trilinear filtering between mipmaps and averaging Reading textures is also expensive in terms of power usage which is a big issue on mobiles If you use third party shaders or write your own shaders try to use algorithms that require as few texture reads as possible Texture compression By default Godot compresses textures of 3D models when imported using video RAM VRAM compression Video RAM compression isn t as efficient in size as PNG or JPG when stored but increases performance enormously when drawing large enough textures This is because the main goal of texture compression is bandwidth reduction between memory and the GPU In 3D the shapes of objects depend more on the geometry than the texture so compression is generally not noticeable In 2D compression depends more on shapes inside the textures so the artifacts resulting from 2D compression are more noticeable As a warning most Android devices do not support texture compression of textures with transparency only opaque so keep this in mind Note Even in 3D pixel art textures should have VRAM compression disabled as it will negatively affect their appearance without improving performance significantly due to their low resolution Post processing and shadows Post processing effects and shadows can also be expensive in terms of fragment shading activity Always test the impact of these on different hardware Reducing the size of shadowmaps can increase performance both in terms of writing and reading the shadowmaps On top of that the best way to improve performance of shadows is to turn shadows off for as many lights and objects as possible Smaller or distant OmniLights SpotLights can often have their shadows disabled with only a small visual impact Transparency and blending Transparent objects present particular problems for rendering efficiency Opaque objects especially in 3D can be essentially rendered in any order and the Z buffer will ensure that only the front most objects get shaded Transparent or blended objects are different In most cases they cannot rely on the Z buffer and must be rendered in painter s order i e from back to front to look correct Transparent objects are also particularly bad for fill rate because every item has to be drawn even if other transparent objects will be drawn on top later on Opaque objects don t have to do this They can usually take advantage of the Z buffer by writing to the Z buffer only first then only performing the fragment shader on the winning fragment the object that is at the front at a particular pixel Transparency is particularly expensive where multiple transparent objects overlap It is usually better to use transparent areas as small as possible to minimize these fill rate requirements especially on mobile where fill rate is very expensive Indeed in many situations rendering more complex opaque geometry can end up being faster than using transparency to cheat Multi platform advice If you are aiming to release on multiple platforms test early and test often on all your platforms especially mobile Developing a game on desktop but attempting to port it to mobile at the last minute is a recipe for disaster In general you should design your game for the lowest common denominator then add optional enhancements for more powerful platforms For example you may want to use the Compatibility rendering method for both desktop and mobile platforms where you target both Mobile tiled renderers As described above GPUs on mobile devices work in dramatically different ways from GPUs on desktop Most mobile devices use tile renderers Tile renderers split up the screen into regular sized tiles that fit into super fast cache memory which reduces the number of read write operations to the main memory There are some downsides though Tiled rendering can make certain techniques much more complicated and expensive to perform Tiles that rely on the results of rendering in different tiles or on the results of earlier operations being preserved can be very slow Be very careful to test the performance of shaders viewport textures and post processing User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Optimization using MultiMeshes For large amount of instances in the thousands that need to be constantly processed and certain amount of control needs to be retained using servers directly is the recommended optimization When the amount of objects reach the hundreds of thousands or millions none of these approaches are efficient anymore Still depending on the requirements there is one more optimization possible MultiMeshes A MultiMesh is a single draw primitive that can draw up to millions of objects in one go It s extremely efficient because it uses the GPU hardware to do this in OpenGL ES 2 0 it s less efficient because there is no hardware support for it though The only drawback is that there is no screen or frustum culling possible for individual instances This means that millions of objects will be always or never drawn depending on the visibility of the whole MultiMesh It is possible to provide a custom visibility rect for them but it will always be all or none visibility If the objects are simple enough just a couple of vertices this is generally not much of a problem as most modern GPUs are optimized for this use case A workaround is to create several MultiMeshes for different areas of the world It is also possible to execute some logic inside the vertex shader using the INSTANCE_ID or INSTANCE_CUSTOM built in constants For an example of animating thousands of objects in a MultiMesh see the Animating thousands of fish tutorial Information to the shader can be provided via textures there are floating point Image formats which are ideal for this Another alternative is to use a GDExtension and C which should be extremely efficient it s possible to set the entire state for all objects using linear memory via the RenderingServer multimesh_set_buffer function This way the array can be created with multiple threads then set in one call providing high cache efficiency Finally it s not required to have all MultiMesh instances visible The amount of visible ones can be controlled with the MultiMesh visible_instance_count property The typical workflow is to allocate the maximum amount of instances that will be used then change the amount visible depending on how many are currently needed Multimesh example Here is an example of using a MultiMesh from code Languages other than GDScript may be more efficient for millions of objects but for a few thousands GDScript should be fine GDScript C extends MultiMeshInstance3D func _ready Create the multimesh multimesh MultiMesh new Set the format first multimesh transform_format MultiMesh TRANSFORM_3D Then resize otherwise changing the format is not allowed multimesh instance_count 10000 Maybe not all of them should be visible at first multimesh visible_instance_count 1000 Set the transform of the instances for i in multimesh visible_instance_count multimesh set_instance_transform i Transform3D Basis Vector3 i 20 0 0 Copy to clipboard using Godot public partial class MyMultiMeshInstance3D MultiMeshInstance3D public override void _Ready Create the multimesh Multimesh new MultiMesh Set the format first Multimesh TransformFormat MultiMesh TransformFormatEnum Transform3D Then resize otherwise changing the format is not allowed Multimesh InstanceCount 1000 Maybe not all of them should be visible at first Multimesh VisibleInstanceCount 1000 Set the transform of the instances for int i 0 i Multimesh VisibleInstanceCount i Multimesh SetInstanceTransform i new Transform3D Basis Identity new Vector3 i 20 0 0 Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Optimizing 3D performance Culling Godot will automatically perform view frustum culling in order to prevent rendering objects that are outside the viewport This works well for games that take place in a small area however things can quickly become problematic in larger levels Occlusion culling Walking around a town for example you may only be able to see a few buildings in the street you are in as well as the sky and a few birds flying overhead As far as a naive renderer is concerned however you can still see the entire town It won t just render the buildings in front of you it will render the street behind that with the people on that street the buildings behind that You quickly end up in situations where you are attempting to render 10 or 100 more than what is visible Things aren t quite as bad as they seem because the Z buffer usually allows the GPU to only fully shade the objects that are at the front This is called depth prepass and is enabled by default in Godot when using the Forward or Compatibility rendering methods However unneeded objects are still reducing performance One way we can potentially reduce the amount to be rendered is to take advantage of occlusion Godot 4 0 and later offers a new approach to occlusion culling using occluder nodes See Occlusion culling for instructions on setting up occlusion culling in your scene Note In some cases you may have to adapt your level design to add more occlusion opportunities For example you may have to add more walls to prevent the player from seeing too far away which would decrease performance due to the lost opportunities for occlusion culling Transparent objects Godot sorts objects by Material and Shader to improve performance This however can not be done with transparent objects Transparent objects are rendered from back to front to make blending with what is behind work As a result try to use as few transparent objects as possible If an object has a small section with transparency try to make that section a separate surface with its own material For more information see the GPU optimizations doc Level of detail LOD In some situations particularly at a distance it can be a good idea to replace complex geometry with simpler versions The end user will probably not be able to see much difference Consider looking at a large number of trees in the far distance There are several strategies for replacing models at varying distance You could use lower poly models or use transparency to simulate more complex geometry Godot 4 offers several ways to control level of detail An automatic approach on mesh import using Mesh level of detail LOD A manual approach configured in the 3D node using Visibility ranges HLOD Decals and lights can also benefit from level of detail using their respective Distance Fade properties While they can be used independently these approaches are most effective when used together For example you can set up visibility ranges to hide particle effects that are too far away from the player to notice At the same time you can rely on mesh LOD to make the particle effect s meshes rendered with less detail at a distance Visibility ranges are also a good way to set up impostors for distant geometry see below Billboards and imposters The simplest version of using transparency to deal with LOD is billboards For example you can use a single transparent quad to represent a tree at distance This can be very cheap to render unless of course there are many trees in front of each other In this case transparency may start eating into fill rate for more information on fill rate see GPU optimization An alternative is to render not just one tree but a number of trees together as a group This can be especially effective if you can see an area but cannot physically approach it in a game You can make imposters by pre rendering views of an object at different angles Or you can even go one step further and periodically re render a view of an object onto a texture to be used as an imposter At a distance you need to move the viewer a considerable distance for the angle of view to change significantly This can be complex to get working but may be worth it depending on the type of project you are making Use instancing MultiMesh If several identical objects have to be drawn in the same place or nearby try using MultiMesh instead MultiMesh allows the drawing of many thousands of objects at very little performance cost making it ideal for flocks grass particles and anything else where you have thousands of identical objects See also the Using MultiMesh documentation Bake lighting Lighting objects is one of the most costly rendering operations Realtime lighting shadows especially multiple lights and global illumination are especially expensive They may simply be too much for lower power mobile devices to handle Consider using baked lighting especially for mobile This can look fantastic but has the downside that it will not be dynamic Sometimes this is a tradeoff worth making See Using Lightmap global illumination for instructions on using baked lightmaps For best performance you should set lights bake mode to Static as opposed to the default Dynamic as this will skip real time lighting on meshes that have baked lighting The downside of lights with the Static bake mode is that they can t cast shadows onto meshes with baked lighting This can make scenes with outdoor environments and dynamic objects look flat A good balance between performance and quality is to keep Dynamic for the DirectionalLight3D node and use Static for most if not all omni and spot lights Animation and skinning Animation and vertex animation such as skinning and morphing can be very expensive on some platforms You may need to lower the polycount considerably for animated models or limit the number of them on screen at any given time You can also reduce the animation rate for distant or occluded meshes or pause the animation entirely if the player is unlikely to notice the animation being stopped The VisibleOnScreenEnabler3D and VisibleOnScreenNotifier3D nodes can be useful for this purpose Large worlds If you are making large worlds there are different considerations than what you may be familiar with from smaller games Large worlds may need to be built in tiles that can be loaded on demand as you move around the world This can prevent memory use from getting out of hand and also limit the processing needed to the local area There may also be rendering and physics glitches due to floating point error in large worlds This can be resolved using Large world coordinates If using large world coordinates is not an option you may be able to use techniques such as orienting the world around the player rather than the other way around or shifting the origin periodically to keep things centred around Vector3 0 0 0 User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Animating thousands of objects Animating thousands of fish with MultiMeshInstance3D Controlling thousands of fish with Particles Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Animating thousands of fish with MultiMeshInstance3D This tutorial explores a technique used in the game ABZU for rendering and animating thousands of fish using vertex animation and static mesh instancing In Godot this can be accomplished with a custom Shader and a MultiMeshInstance3D Using the following technique you can render thousands of animated objects even on low end hardware We will start by animating one fish Then we will see how to extend that animation to thousands of fish Animating one Fish We will start with a single fish Load your fish model into a MeshInstance3D and add a new ShaderMaterial Here is the fish we will be using for the example images you can use any fish model you like Note The fish model in this tutorial is made by QuaterniusDev and is shared with a creative commons license CC0 1 0 Universal CC0 1 0 Public Domain Dedication https creativecommons org publicdomain zero 1 0 Typically you would use bones and a Skeleton3D to animate objects However bones are animated on the CPU and so you end having to calculate thousands of operations every frame and it becomes impossible to have thousands of objects Using vertex animation in a vertex shader you avoid using bones and can instead calculate the full animation in a few lines of code and completely on the GPU The animation will be made of four key motions A side to side motion A pivot motion around the center of the fish A panning wave motion A panning twist motion All the code for the animation will be in the vertex shader with uniforms controlling the amount of motion We use uniforms to control the strength of the motion so that you can tweak the animation in editor and see the results in real time without the shader having to recompile All the motions will be made using cosine waves applied to VERTEX in model space We want the vertices to be in model space so that the motion is always relative to the orientation of the fish For example side to side will always move the fish back and forth in its left to right direction instead of on the x axis in the world orientation In order to control the speed of the animation we will start by defining our own time variable using TIME time_scale is a uniform float float time TIME time_scale Copy to clipboard The first motion we will implement is the side to side motion It can be made by offsetting VERTEX x by cos of TIME Each time the mesh is rendered all the vertices will move to the side by the amount of cos time side_to_side is a uniform float VERTEX x cos time side_to_side Copy to clipboard The resulting animation should look something like this Next we add the pivot Because the fish is centered at 0 0 all we have to do is multiply VERTEX by a rotation matrix for it to rotate around the center of the fish We construct a rotation matrix like so angle is scaled by 0 1 so that the fish only pivots and doesn t rotate all the way around pivot is a uniform float float pivot_angle cos time 0 1 pivot mat2 rotation_matrix mat2 vec2 cos pivot_angle sin pivot_angle vec2 sin pivot_angle cos pivot_angle Copy to clipboard And then we apply it in the x and z axes by multiplying it by VERTEX xz VERTEX xz rotation_matrix VERTEX xz Copy to clipboard With only the pivot applied you should see something like this The next two motions need to pan down the spine of the fish For that we need a new variable body body is a float that is 0 at the tail of the fish and 1 at its head float body VERTEX z 1 0 2 0 for a fish centered at 0 0 with a length of 2 Copy to clipboard The next motion is a cosine wave that moves down the length of the fish To make it move along the spine of the fish we offset the input to cos by the position along the spine which is the variable we defined above body wave is a uniform float VERTEX x cos time body wave Copy to clipboard This looks very similar to the side to side motion we defined above but in this one by using body to offset cos each vertex along the spine has a different position in the wave making it look like a wave is moving along the fish The last motion is the twist which is a panning roll along the spine Similarly to the pivot we first construct a rotation matrix twist is a uniform float float twist_angle cos time body 0 3 twist mat2 twist_matrix mat2 vec2 cos twist_angle sin twist_angle vec2 sin twist_angle cos twist_angle Copy to clipboard We apply the rotation in the xy axes so that the fish appears to roll around its spine For this to work the fish s spine needs to be centered on the z axis VERTEX xy twist_matrix VERTEX xy Copy to clipboard Here is the fish with twist applied If we apply all these motions one after another we get a fluid jelly like motion Normal fish swim mostly with the back half of their body Accordingly we need to limit the panning motions to the back half of the fish To do this we create a new variable mask mask is a float that goes from 0 at the front of the fish to 1 at the end using smoothstep to control the point at which the transition from 0 to 1 happens mask_black and mask_white are uniforms float mask smoothstep mask_black mask_white 1 0 body Copy to clipboard Below is an image of the fish with mask used as COLOR For the wave we multiply the motion by mask which will limit it to the back half wave motion with mask VERTEX x cos time body mask wave Copy to clipboard In order to apply the mask to the twist we use mix mix allows us to mix the vertex position between a fully rotated vertex and one that is not rotated We need to use mix instead of multiplying mask by the rotated VERTEX because we are not adding the motion to the VERTEX we are replacing the VERTEX with the rotated version If we multiplied that by mask we would shrink the fish twist motion with mask VERTEX xy mix VERTEX xy twist_matrix VERTEX xy mask Copy to clipboard Putting the four motions together gives us the final animation Go ahead and play with the uniforms in order to alter the swim cycle of the fish You will find that you can create a wide variety of swim styles using these four motions Making a school of fish Godot makes it easy to render thousands of the same object using a MultiMeshInstance3D node A MultiMeshInstance3D node is created and used the same way you would make a MeshInstance3D node For this tutorial we will name the MultiMeshInstance3D node School because it will contain a school of fish Once you have a MultiMeshInstance3D add a MultiMesh and to that MultiMesh add your Mesh with the shader from above MultiMeshes draw your Mesh with three additional per instance properties Transform rotation translation scale Color and Custom Custom is used to pass in 4 multi use variables using a Color instance_count specifies how many instances of the mesh you want to draw For now leave instance_count at 0 because you cannot change any of the other parameters while instance_count is larger than 0 We will set instance count in GDScript later transform_format specifies whether the transforms used are 3D or 2D For this tutorial select 3D For both color_format and custom_data_format you can choose between None Byte and Float None means you won t be passing in that data either a per instance COLOR variable or INSTANCE_CUSTOM to the shader Byte means each number making up the color you pass in will be stored with 8 bits while Float means each number will be stored in a floating point number 32 bits Float is slower but more precise Byte will take less memory and be faster but you may see some visual artifacts Now set instance_count to the number of fish you want to have Next we need to set the per instance transforms There are two ways to set per instance transforms for MultiMeshes The first is entirely in editor and is described in the MultiMeshInstance3D tutorial The second is to loop over all the instances and set their transforms in code Below we use GDScript to loop over all the instances and set their transform to a random position for i in range School multimesh instance_count var position Transform3D position position translated Vector3 randf 100 50 randf 50 25 randf 50 25 School multimesh set_instance_transform i position Copy to clipboard Running this script will place the fish in random positions in a box around the position of the MultiMeshInstance3D Note If performance is an issue for you try running the scene with fewer fish Notice how all the fish are all in the same position in their swim cycle It makes them look very robotic The next step is to give each fish a different position in the swim cycle so the entire school looks more organic Animating a school of fish One of the benefits of animating the fish using cos functions is that they are animated with one parameter time In order to give each fish a unique position in the swim cycle we only need to offset time We do that by adding the per instance custom value INSTANCE_CUSTOM to time float time TIME time_scale 6 28318 INSTANCE_CUSTOM x Copy to clipboard Next we need to pass a value into INSTANCE_CUSTOM We do that by adding one line into the for loop from above In the for loop we assign each instance a set of four random floats to use School multimesh set_instance_custom_data i Color randf randf randf randf Copy to clipboard Now the fish all have unique positions in the swim cycle You can give them a little more individuality by using INSTANCE_CUSTOM to make them swim faster or slower by multiplying by TIME set speed from 50 150 of regular speed float time TIME 0 5 INSTANCE_CUSTOM y time_scale 6 28318 INSTANCE_CUSTOM x Copy to clipboard You can even experiment with changing the per instance color the same way you changed the per instance custom value One problem that you will run into at this point is that the fish are animated but they are not moving You can move them by updating the per instance transform for each fish every frame Although doing so will be faster than moving thousands of MeshInstance3Ds per frame it ll still likely be slow In the next tutorial we will cover how to use GPUParticles3D to take advantage of the GPU and move each fish around individually while still receiving the benefits of instancing User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Controlling thousands of fish with Particles The problem with MeshInstance3D is that it is expensive to update their transform array It is great for placing many static objects around the scene But it is still difficult to move the objects around the scene To make each instance move in an interesting way we will use a GPUParticles3D node Particles take advantage of GPU acceleration by computing and setting the per instance information in a Shader First create a Particles node Then under Draw Passes set the Particle s Draw Pass 1 to your Mesh Then under Process Material create a new ShaderMaterial Set the shader_type to particles shader_type particles Copy to clipboard Then add the following two functions float rand_from_seed in uint seed int k int s int seed if s 0 s 305420679 k s 127773 s 16807 s k 127773 2836 k if s 0 s 2147483647 seed uint s return float seed uint 65536 65535 0 uint hash uint x x x uint 16 x uint 73244475 x x uint 16 x uint 73244475 x x uint 16 x return x Copy to clipboard These functions come from the default ParticleProcessMaterial They are used to generate a random number from each particle s RANDOM_SEED A unique thing about particle shaders is that some built in variables are saved across frames TRANSFORM COLOR and CUSTOM can all be accessed in the shader of the mesh and also in the particle shader the next time it is run Next setup your start function Particles shaders contain a start function and a process function The code in the start function only runs when the particle system starts The code in the process function will always run We need to generate 4 random numbers 3 to create a random position and one for the random offset of the swim cycle First generate 4 seeds inside the start function using the hash function provided above uint alt_seed1 hash NUMBER uint 1 RANDOM_SEED uint alt_seed2 hash NUMBER uint 27 RANDOM_SEED uint alt_seed3 hash NUMBER uint 43 RANDOM_SEED uint alt_seed4 hash NUMBER uint 111 RANDOM_SEED Copy to clipboard Then use those seeds to generate random numbers using rand_from_seed CUSTOM x rand_from_seed alt_seed1 vec3 position vec3 rand_from_seed alt_seed2 2 0 1 0 rand_from_seed alt_seed3 2 0 1 0 rand_from_seed alt_seed4 2 0 1 0 Copy to clipboard Finally assign position to TRANSFORM 3 xyz which is the part of the transform that holds the position information TRANSFORM 3 xyz position 20 0 Copy to clipboard Remember all this code so far goes inside the start function The vertex shader for your mesh can stay the exact same as it was in the previous tutorial Now you can move each fish individually each frame either by adding to the TRANSFORM directly or by writing to VELOCITY Let s transform the fish by setting their VELOCITY in the start function VELOCITY z 10 0 Copy to clipboard This is the most basic way to set VELOCITY every particle or fish will have the same velocity Just by setting VELOCITY you can make the fish swim however you want For example try the code below VELOCITY z cos TIME CUSTOM x 6 28 4 0 6 0 Copy to clipboard This will give each fish a unique speed between 2 and 10 You can also let each fish change its velocity over time if you set the velocity in the process function If you used CUSTOM y in the last tutorial you can also set the speed of the swim animation based on the VELOCITY Just use CUSTOM y CUSTOM y VELOCITY z 0 1 Copy to clipboard This code gives you the following behavior Using a ParticleProcessMaterial you can make the fish behavior as simple or complex as you like In this tutorial we only set Velocity but in your own Shaders you can also set COLOR rotation scale through TRANSFORM Please refer to the Particles Shader Reference for more information on particle shaders User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using multiple threads Threads Threads allow simultaneous execution of code It allows off loading work from the main thread Godot supports threads and provides many handy functions to use them Note If using other languages C C it may be easier to use the threading classes they support Warning Before using a built in class in a thread read Thread safe APIs first to check whether it can be safely used in a thread Creating a Thread To create a thread use the following code GDScript var thread Thread The thread will start here func _ready thread Thread new You can bind multiple arguments to a function Callable thread start _thread_function bind Wafflecopter Run here and exit The argument is the bound data passed from start func _thread_function userdata Print the userdata Wafflecopter print I m a thread Userdata is userdata Thread must be disposed or joined for portability func _exit_tree thread wait_to_finish Copy to clipboard Your function will then run in a separate thread until it returns Even if the function has returned already the thread must collect it so call Thread wait_to_finish which will wait until the thread is done if not done yet then properly dispose of it Warning Creating threads at run time is slow on Windows and should be avoided to prevent stuttering Semaphores explained later on this page should be used instead Mutexes Accessing objects or data from multiple threads is not always supported if you do it it will cause unexpected behaviors or crashes Read the Thread safe APIs documentation to understand which engine APIs support multiple thread access When processing your own data or calling your own functions as a rule try to avoid accessing the same data directly from different threads You may run into synchronization problems as the data is not always updated between CPU cores when modified Always use a Mutex when accessing a piece of data from different threads When calling Mutex lock a thread ensures that all other threads will be blocked put on suspended state if they try to lock the same mutex When the mutex is unlocked by calling Mutex unlock the other threads will be allowed to proceed with the lock but only one at a time Here is an example of using a Mutex GDScript var counter 0 var mutex Mutex var thread Thread The thread will start here func _ready mutex Mutex new thread Thread new thread start _thread_function Increase value protect it with Mutex mutex lock counter 1 mutex unlock Increment the value from the thread too func _thread_function mutex lock counter 1 mutex unlock Thread must be disposed or joined for portability func _exit_tree thread wait_to_finish print Counter is counter Should be 2 Copy to clipboard Semaphores Sometimes you want your thread to work on demand In other words tell it when to work and let it suspend when it isn t doing anything For this Semaphores are used The function Semaphore wait is used in the thread to suspend it until some data arrives The main thread instead uses Semaphore post to signal that data is ready to be processed GDScript var counter 0 var mutex Mutex var semaphore Semaphore var thread Thread var exit_thread false The thread will start here func _ready mutex Mutex new semaphore Semaphore new exit_thread false thread Thread new thread start _thread_function func _thread_function while true semaphore wait Wait until posted mutex lock var should_exit exit_thread Protect with Mutex mutex unlock if should_exit break mutex lock counter 1 Increment counter protect with Mutex mutex unlock func increment_counter semaphore post Make the thread process func get_counter mutex lock Copy counter protect with Mutex var counter_value counter mutex unlock return counter_value Thread must be disposed or joined for portability func _exit_tree Set exit condition to true mutex lock exit_thread true Protect with Mutex mutex unlock Unblock by posting semaphore post Wait until it exits thread wait_to_finish Print the counter print Counter is counter Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Thread safe APIs Threads Threads are used to balance processing power across CPUs and cores Godot supports multithreading but not in the whole engine Below is a list of ways multithreading can be used in different areas of Godot Global scope Global Scope singletons are all thread safe Accessing servers from threads is supported for RenderingServer and Physics servers ensure threaded or thread safe operation is enabled in the project settings This makes them ideal for code that creates dozens of thousands of instances in servers and controls them from threads Of course it requires a bit more code as this is used directly and not within the scene tree Scene tree Interacting with the active scene tree is NOT thread safe Make sure to use mutexes when sending data between threads If you want to call functions from a thread the call_deferred function may be used Unsafe node add_child child_node Safe node add_child call_deferred child_node Copy to clipboard However creating scene chunks nodes in tree arrangement outside the active tree is fine This way parts of a scene can be built or instantiated in a thread then added in the main thread var enemy_scene load res enemy_scene scn var enemy enemy_scene instantiate enemy add_child weapon Set a weapon world add_child call_deferred enemy Copy to clipboard Still this is only really useful if you have one thread loading data Attempting to load or create scene chunks from multiple threads may work but you risk resources which are only loaded once in Godot tweaked by the multiple threads resulting in unexpected behaviors or crashes Only use more than one thread to generate scene data if you really know what you are doing and you are sure that a single resource is not being used or set in multiple ones Otherwise you are safer just using the servers API which is fully thread safe directly and not touching scene or resources Rendering Instancing nodes that render anything in 2D or 3D such as Sprite is not thread safe by default To make rendering thread safe set the Rendering Driver Thread Model project setting to Multi Threaded Note that the Multi Threaded thread model has several known bugs so it may not be usable in all scenarios You should avoid calling functions involving direct interaction with the GPU on other threads such as creating new textures or modifying and retrieving image data these operations can lead to performance stalls because they require synchronization with the RenderingServer as data needs to be transmitted to or updated on the GPU GDScript arrays dictionaries In GDScript reading and writing elements from multiple threads is OK but anything that changes the container size resizing adding or removing elements requires locking a mutex Resources Modifying a unique resource from multiple threads is not supported However handling references on multiple threads is supported hence loading resources on a thread is as well scenes textures meshes etc can be loaded and manipulated on a thread and then added to the active scene on the main thread The limitation here is as described above one must be careful not to load the same resource from multiple threads at once therefore it is easiest to use one thread for loading and modifying resources and then the main thread for adding them User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Physics Physics introduction Using RigidBody Using Area2D Using CharacterBody2D 3D Ray casting Ragdoll system Kinematic character 2D Using SoftBody Collision shapes 2D Collision shapes 3D Large world coordinates Troubleshooting physics issues Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Physics introduction In game development you often need to know when two objects in the game intersect or come into contact This is known as collision detection When a collision is detected you typically want something to happen This is known as collision response Godot offers a number of collision objects in 2D and 3D to provide both collision detection and response Trying to decide which one to use for your project can be confusing You can avoid problems and simplify development if you understand how each works and what their pros and cons are In this guide you will learn Godot s four collision object types How each collision object works When and why to choose one type over another Note This document s examples will use 2D objects Every 2D physics object and collision shape has a direct equivalent in 3D and in most cases they work in much the same way Collision objects Godot offers four kinds of collision objects which all extend CollisionObject2D The last three listed below are physics bodies and additionally extend PhysicsBody2D Area2D Area2D nodes provide detection and influence They can detect when objects overlap and can emit signals when bodies enter or exit An Area2D can also be used to override physics properties such as gravity or damping in a defined area StaticBody2D A static body is one that is not moved by the physics engine It participates in collision detection but does not move in response to the collision They are most often used for objects that are part of the environment or that do not need to have any dynamic behavior RigidBody2D This is the node that implements simulated 2D physics You do not control a RigidBody2D directly but instead you apply forces to it gravity impulses etc and the physics engine calculates the resulting movement Read more about using rigid bodies CharacterBody2D A body that provides collision detection but no physics All movement and collision response must be implemented in code Physics material Static bodies and rigid bodies can be configured to use a PhysicsMaterial This allows adjusting the friction and bounce of an object and set if it s absorbent and or rough Collision shapes A physics body can hold any number of Shape2D objects as children These shapes are used to define the object s collision bounds and to detect contact with other objects Note In order to detect collisions at least one Shape2D must be assigned to the object The most common way to assign a shape is by adding a CollisionShape2D or CollisionPolygon2D as a child of the object These nodes allow you to draw the shape directly in the editor workspace Important Be careful to never scale your collision shapes in the editor The Scale property in the Inspector should remain 1 1 When changing the size of the collision shape you should always use the size handles not the Node2D scale handles Scaling a shape can result in unexpected collision behavior Physics process callback The physics engine runs at a fixed rate a default of 60 iterations per second This rate is typically different from the frame rate which fluctuates based on what is rendered and available resources It is important that all physics related code runs at this fixed rate Therefore Godot differentiates between physics and idle processing Code that runs each frame is called idle processing and code that runs on each physics tick is called physics processing Godot provides two different callbacks one for each of those processing rates The physics callback Node _physics_process is called before each physics step Any code that needs to access a body s properties should be run in here This method will be passed a delta parameter which is a floating point number equal to the time passed in seconds since the last step When using the default 60 Hz physics update rate it will typically be equal to 0 01666 but not always see below Note It s recommended to always use the delta parameter when relevant in your physics calculations so that the game behaves correctly if you change the physics update rate or if the player s device can t keep up Collision layers and masks One of the most powerful but frequently misunderstood collision features is the collision layer system This system allows you to build up complex interactions between a variety of objects The key concepts are layers and masks Each CollisionObject2D has 32 different physics layers it can interact with Let s look at each of the properties in turn collision_layer This describes the layers that the object appears in By default all bodies are on layer 1 collision_mask This describes what layers the body will scan for collisions If an object isn t in one of the mask layers the body will ignore it By default all bodies scan layer 1 These properties can be configured via code or by editing them in the Inspector Keeping track of what you re using each layer for can be difficult so you may find it useful to assign names to the layers you re using Names can be assigned in Project Settings Layer Names GUI example You have four node types in your game Walls Player Enemy and Coin Both Player and Enemy should collide with Walls The Player node should detect collisions with both Enemy and Coin but Enemy and Coin should ignore each other Start by naming layers 1 4 walls player enemies and coins and place each node type in its respective layer using the Layer property Then set each node s Mask property by selecting the layers it should interact with For example the Player s settings would look like this Code example In function calls layers are specified as a bitmask Where a function enables all layers by default the layer mask will be given as 0xffffffff Your code can use binary hexadecimal or decimal notation for layer masks depending on your preference The code equivalent of the above example where layers 1 3 and 4 were enabled would be as follows Example Setting mask value for enabling layers 1 3 and 4 Binary set the bit corresponding to the layers you want to enable 1 3 and 4 to 1 set all other bits to 0 Note Layer 32 is the first bit layer 1 is the last The mask for layers 4 3 and 1 is therefore 0b00000000_00000000_00000000_00001101 This can be shortened to 0b1101 Hexadecimal equivalent 1101 binary converted to hexadecimal 0x000d This value can be shortened to 0xd Decimal Add the results of 2 to the power of layer to be enabled 1 2 1 1 2 3 1 2 4 1 1 4 8 13 pow 2 1 1 pow 2 3 1 pow 2 4 1 Copy to clipboard Area2D Area nodes provide detection and influence They can detect when objects overlap and emit signals when bodies enter or exit Areas can also be used to override physics properties such as gravity or damping in a defined area There are three main uses for Area2D Overriding physics parameters such as gravity in a given region Detecting when other bodies enter or exit a region or what bodies are currently in a region Checking other areas for overlap By default areas also receive mouse and touchscreen input StaticBody2D A static body is one that is not moved by the physics engine It participates in collision detection but does not move in response to the collision However it can impart motion or rotation to a colliding body as if it were moving using its constant_linear_velocity and constant_angular_velocity properties StaticBody2D nodes are most often used for objects that are part of the environment or that do not need to have any dynamic behavior Example uses for StaticBody2D Platforms including moving platforms Conveyor belts Walls and other obstacles RigidBody2D This is the node that implements simulated 2D physics You do not control a RigidBody2D directly Instead you apply forces to it and the physics engine calculates the resulting movement including collisions with other bodies and collision responses such as bouncing rotating etc You can modify a rigid body s behavior via properties such as Mass Friction or Bounce which can be set in the Inspector The body s behavior is also affected by the world s properties as set in Project Settings Physics or by entering an Area2D that is overriding the global physics properties When a rigid body is at rest and hasn t moved for a while it goes to sleep A sleeping body acts like a static body and its forces are not calculated by the physics engine The body will wake up when forces are applied either by a collision or via code Using RigidBody2D One of the benefits of using a rigid body is that a lot of behavior can be had for free without writing any code For example if you were making an Angry Birds style game with falling blocks you would only need to create RigidBody2Ds and adjust their properties Stacking falling and bouncing would automatically be calculated by the physics engine However if you do wish to have some control over the body you should take care altering the position linear_velocity or other physics properties of a rigid body can result in unexpected behavior If you need to alter any of the physics related properties you should use the _integrate_forces callback instead of _physics_process In this callback you have access to the body s PhysicsDirectBodyState2D which allows for safely changing properties and synchronizing them with the physics engine For example here is the code for an Asteroids style spaceship GDScript C extends RigidBody2D var thrust Vector2 0 250 var torque 20000 func _integrate_forces state if Input is_action_pressed ui_up state apply_force thrust rotated rotation else state apply_force Vector2 var rotation_direction 0 if Input is_action_pressed ui_right rotation_direction 1 if Input is_action_pressed ui_left rotation_direction 1 state apply_torque rotation_direction torque Copy to clipboard using Godot public partial class Spaceship RigidBody2D private Vector2 _thrust new Vector2 0 250 private float _torque 20000 public override void _IntegrateForces PhysicsDirectBodyState2D state if Input IsActionPressed ui_up state ApplyForce _thrust Rotated Rotation else state ApplyForce new Vector2 var rotationDir 0 if Input IsActionPressed ui_right rotationDir 1 if Input IsActionPressed ui_left rotationDir 1 state ApplyTorque rotationDir _torque Copy to clipboard Note that we are not setting the linear_velocity or angular_velocity properties directly but rather applying forces thrust and torque to the body and letting the physics engine calculate the resulting movement Note When a rigid body goes to sleep the _integrate_forces function will not be called To override this behavior you will need to keep the body awake by creating a collision applying a force to it or by disabling the can_sleep property Be aware that this can have a negative effect on performance Contact reporting By default rigid bodies do not keep track of contacts because this can require a huge amount of memory if many bodies are in the scene To enable contact reporting set the max_contacts_reported property to a non zero value The contacts can then be obtained via PhysicsDirectBodyState2D get_contact_count and related functions Contact monitoring via signals can be enabled via the contact_monitor property See RigidBody2D for the list of available signals CharacterBody2D CharacterBody2D bodies detect collisions with other bodies but are not affected by physics properties like gravity or friction Instead they must be controlled by the user via code The physics engine will not move a character body When moving a character body you should not set its position directly Instead you use the move_and_collide or move_and_slide methods These methods move the body along a given vector and it will instantly stop if a collision is detected with another body After the body has collided any collision response must be coded manually Character collision response After a collision you may want the body to bounce to slide along a wall or to alter the properties of the object it hit The way you handle collision response depends on which method you used to move the CharacterBody2D move_and_collide When using move_and_collide the function returns a KinematicCollision2D object which contains information about the collision and the colliding body You can use this information to determine the response For example if you want to find the point in space where the collision occurred GDScript C extends PhysicsBody2D var velocity Vector2 250 250 func _physics_process delta var collision_info move_and_collide velocity delta if collision_info var collision_point collision_info get_position Copy to clipboard using Godot public partial class Body PhysicsBody2D private Vector2 _velocity new Vector2 250 250 public override void _PhysicsProcess double delta var collisionInfo MoveAndCollide _velocity float delta if collisionInfo null var collisionPoint collisionInfo GetPosition Copy to clipboard Or to bounce off of the colliding object GDScript C extends PhysicsBody2D var velocity Vector2 250 250 func _physics_process delta var collision_info move_and_collide velocity delta if collision_info velocity velocity bounce collision_info get_normal Copy to clipboard using Godot public partial class Body PhysicsBody2D private Vector2 _velocity new Vector2 250 250 public override void _PhysicsProcess double delta var collisionInfo MoveAndCollide _velocity float delta if collisionInfo null _velocity _velocity Bounce collisionInfo GetNormal Copy to clipboard move_and_slide Sliding is a common collision response imagine a player moving along walls in a top down game or running up and down slopes in a platformer While it s possible to code this response yourself after using move_and_collide move_and_slide provides a convenient way to implement sliding movement without writing much code Warning move_and_slide automatically includes the timestep in its calculation so you should not multiply the velocity vector by delta This does not apply to gravity as it is an acceleration and is time dependent and needs to be scaled by delta For example use the following code to make a character that can walk along the ground including slopes and jump when standing on the ground GDScript C extends CharacterBody2D var run_speed 350 var jump_speed 1000 var gravity 2500 func get_input velocity x 0 var right Input is_action_pressed ui_right var left Input is_action_pressed ui_left var jump Input is_action_just_pressed ui_select if is_on_floor and jump velocity y jump_speed if right velocity x run_speed if left velocity x run_speed func _physics_process delta velocity y gravity delta get_input move_and_slide Copy to clipboard using Godot public partial class Body CharacterBody2D private float _runSpeed 350 private float _jumpSpeed 1000 private float _gravity 2500 private void GetInput var velocity Velocity velocity X 0 var right Input IsActionPressed ui_right var left Input IsActionPressed ui_left var jump Input IsActionPressed ui_select if IsOnFloor jump velocity Y _jumpSpeed if right velocity X _runSpeed if left velocity X _runSpeed Velocity velocity public override void _PhysicsProcess double delta var velocity Velocity velocity Y _gravity float delta Velocity velocity GetInput MoveAndSlide Copy to clipboard See Kinematic character 2D for more details on using move_and_slide including a demo project with detailed code User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using RigidBody What is a rigid body A rigid body is one that is directly controlled by the physics engine in order to simulate the behavior of physical objects In order to define the shape of the body it must have one or more Shape3D objects assigned Note that setting the position of these shapes will affect the body s center of mass How to control a rigid body A rigid body s behavior can be altered by setting its properties such as mass and weight A physics material needs to be added to the rigid body to adjust its friction and bounce and set if it s absorbent and or rough These properties can be set in the Inspector or via code See RigidBody3D and PhysicsMaterial for the full list of properties and their effects There are several ways to control a rigid body s movement depending on your desired application If you only need to place a rigid body once for example to set its initial location you can use the methods provided by the Node3D node such as set_global_transform or look_at However these methods cannot be called every frame or the physics engine will not be able to correctly simulate the body s state As an example consider a rigid body that you want to rotate so that it points towards another object A common mistake when implementing this kind of behavior is to use look_at every frame which breaks the physics simulation Below we ll demonstrate how to implement this correctly The fact that you can t use set_global_transform or look_at methods doesn t mean that you can t have full control of a rigid body Instead you can control it by using the _integrate_forces callback In this method you can add forces apply impulses or set the velocity in order to achieve any movement you desire The look at method As described above using the Node3D s look_at method can t be used each frame to follow a target Here is a custom look_at method called look_follow that will work with rigid bodies GDScript C extends RigidBody3D var speed float 0 1 func look_follow state PhysicsDirectBodyState3D current_transform Transform3D target_position Vector3 void var forward_local_axis Vector3 Vector3 1 0 0 var forward_dir Vector3 current_transform basis forward_local_axis normalized var target_dir Vector3 target_position current_transform origin normalized var local_speed float clampf speed 0 acos forward_dir dot target_dir if forward_dir dot target_dir 1e 4 state angular_velocity local_speed forward_dir cross target_dir state step func _integrate_forces state var target_position my_target_node3d_node global_transform origin look_follow state global_transform target_position Copy to clipboard using Godot public partial class MyRigidBody3D RigidBody3D private float _speed 0 1f private void LookFollow PhysicsDirectBodyState3D state Transform3D currentTransform Vector3 targetPosition Vector3 forwardLocalAxis new Vector3 1 0 0 Vector3 forwardDir currentTransform Basis forwardLocalAxis Normalized Vector3 targetDir targetPosition currentTransform Origin Normalized float localSpeed Mathf Clamp _speed 0 0f Mathf Acos forwardDir Dot targetDir if forwardDir Dot targetDir 1e 4 state AngularVelocity forwardDir Cross targetDir localSpeed state Step public override void _IntegrateForces PhysicsDirectBodyState3D state Vector3 targetPosition GetNode Node3D MyTargetNode3DNode GlobalTransform Origin LookFollow state GlobalTransform targetPosition Copy to clipboard This method uses the rigid body s angular_velocity property to rotate the body The axis to rotate around is given by the cross product between the current forward direction and the direction one wants to look in The clamp is a simple method used to prevent the amount of rotation from going past the direction which is wanted to be looked in as the total amount of rotation needed is given by the arccosine of the dot product This method can be used with axis_lock_angular_ as well If more precise control is needed solutions such as ones relying on Quaternion may be required as discussed in Using 3D transforms User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using Area2D Introduction Godot offers a number of collision objects to provide both collision detection and response Trying to decide which one to use for your project can be confusing You can avoid problems and simplify development if you understand how each of them works and what their pros and cons are In this tutorial we ll look at the Area2D node and show some examples of how it can be used Note This document assumes you re familiar with Godot s various physics bodies Please read Physics introduction first What is an area An Area2D defines a region of 2D space In this space you can detect other CollisionObject2D nodes overlapping entering and exiting Areas also allow for overriding local physics properties We ll explore each of these functions below Area properties Areas have many properties you can use to customize their behavior The Gravity Linear Damp and Angular Damp sections are used to configure the area s physics override behavior We ll look at how to use those in the Area influence section below Monitoring and Monitorable are used to enable and disable the area The Audio Bus section allows you to override audio in the area for example to apply an audio effect when the player moves through Note that Area2D extends CollisionObject2D so it also provides properties inherited from that class The Collision section of CollisionObject2D is where you configure the area s collision layer s and mask s Overlap detection Perhaps the most common use of Area2D nodes is for contact and overlap detection When you need to know that two objects have touched but don t need physical collision you can use an area to notify you of the contact For example let s say we re making a coin for the player to pick up The coin is not a solid object the player can t stand on it or push it we just want it to disappear when the player touches it Here s the node setup for the coin To detect the overlap we ll connect the appropriate signal on the Area2D Which signal to use depends on the player s node type If the player is another area use area_entered However let s assume our player is a CharacterBody2D and therefore a CollisionObject2D type so we ll connect the body_entered signal Note If you re not familiar with using signals see Using signals for an introduction GDScript C extends Area2D func _on_coin_body_entered body queue_free Copy to clipboard using Godot public partial class Coin Area2D private void OnCoinBodyEntered PhysicsBody2D body QueueFree Copy to clipboard Now our player can collect the coins Some other usage examples Areas are great for bullets and other projectiles that hit and deal damage but don t need any other physics such as bouncing Use a large circular area around an enemy to define its detect radius When the player is outside the area the enemy can t see it Security cameras In a large level with multiple cameras attach areas to each camera and activate them when the player enters See the Your first 2D game for an example of using Area2D in a game Area influence The second major use for area nodes is to alter physics By default the area won t do this but you can enable this with the Space Override property When areas overlap they are processed in Priority order higher priority areas are processed first There are four options for override Combine The area adds its values to what has been calculated so far Replace The area replaces physics properties and lower priority areas are ignored Combine Replace The area adds its gravity damping values to whatever has been calculated so far in priority order ignoring any lower priority areas Replace Combine The area replaces any gravity damping calculated so far but keeps calculating the rest of the areas Using these properties you can create very complex behavior with multiple overlapping areas The physics properties that can be overridden are Gravity Gravity s strength inside the area Gravity Direction This vector does not need to be normalized Linear Damp How quickly objects stop moving linear velocity lost per second Angular Damp How quickly objects stop spinning angular velocity lost per second Point gravity The Gravity Point property allows you to create an attractor Gravity in the area will be calculated towards a point given by the Point Center property Values are relative to the Area2D so for example using 0 0 will attract objects to the center of the area Examples The example project attached below has three areas demonstrating physics override You can download this project here area_2d_starter zip User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using CharacterBody2D 3D Introduction Godot offers several collision objects to provide both collision detection and response Trying to decide which one to use for your project can be confusing You can avoid problems and simplify development if you understand how each of them works and what their pros and cons are In this tutorial we ll look at the CharacterBody2D node and show some examples of how to use it Note While this document uses CharacterBody2D in its examples the same concepts apply in 3D as well What is a character body CharacterBody2D is for implementing bodies that are controlled via code Character bodies detect collisions with other bodies when moving but are not affected by engine physics properties like gravity or friction While this means that you have to write some code to create their behavior it also means you have more precise control over how they move and react Note This document assumes you re familiar with Godot s various physics bodies Please read Physics introduction first for an overview of the physics options Tip A CharacterBody2D can be affected by gravity and other forces but you must calculate the movement in code The physics engine will not move a CharacterBody2D Movement and collision When moving a CharacterBody2D you should not set its position property directly Instead you use the move_and_collide or move_and_slide methods These methods move the body along a given vector and detect collisions Warning You should handle physics body movement in the _physics_process callback The two movement methods serve different purposes and later in this tutorial you ll see examples of how they work move_and_collide This method takes one required parameter a Vector2 indicating the body s relative movement Typically this is your velocity vector multiplied by the frame timestep delta If the engine detects a collision anywhere along this vector the body will immediately stop moving If this happens the method will return a KinematicCollision2D object KinematicCollision2D is an object containing data about the collision and the colliding object Using this data you can calculate your collision response move_and_collide is most useful when you just want to move the body and detect collision but don t need any automatic collision response For example if you need a bullet that ricochets off a wall you can directly change the angle of the velocity when you detect a collision See below for an example move_and_slide The move_and_slide method is intended to simplify the collision response in the common case where you want one body to slide along the other It is especially useful in platformers or top down games for example When calling move_and_slide the function uses a number of node properties to calculate its slide behavior These properties can be found in the Inspector or set in code velocity default value Vector2 0 0 This property represents the body s velocity vector in pixels per second move_and_slide will modify this value automatically when colliding motion_mode default value MOTION_MODE_GROUNDED This property is typically used to distinguish between side scrolling and top down movement When using the default value you can use the is_on_floor is_on_wall and is_on_ceiling methods to detect what type of surface the body is in contact with and the body will interact with slopes When using MOTION_MODE_FLOATING all collisions will be considered walls up_direction default value Vector2 0 1 This property allows you to define what surfaces the engine should consider being the floor Its value lets you use the is_on_floor is_on_wall and is_on_ceiling methods to detect what type of surface the body is in contact with The default value means that the top side of horizontal surfaces will be considered ground floor_stop_on_slope default value true This parameter prevents a body from sliding down slopes when standing still wall_min_slide_angle default value 0 261799 in radians equivalent to 15 degrees This is the minimum angle where the body is allowed to slide when it hits a slope floor_max_angle default value 0 785398 in radians equivalent to 45 degrees This parameter is the maximum angle before a surface is no longer considered a floor There are many other properties that can be used to modify the body s behavior under specific circumstances See the CharacterBody2D docs for full details Detecting collisions When using move_and_collide the function returns a KinematicCollision2D directly and you can use this in your code When using move_and_slide it s possible to have multiple collisions occur as the slide response is calculated To process these collisions use get_slide_collision_count and get_slide_collision GDScript C Using move_and_collide var collision move_and_collide velocity delta if collision print I collided with collision get_collider name Using move_and_slide move_and_slide for i in get_slide_collision_count var collision get_slide_collision i print I collided with collision get_collider name Copy to clipboard Using MoveAndCollide var collision MoveAndCollide Velocity float delta if collision null GD Print I collided with Node collision GetCollider Name Using MoveAndSlide MoveAndSlide for int i 0 i GetSlideCollisionCount i var collision GetSlideCollision i GD Print I collided with Node collision GetCollider Name Copy to clipboard Note get_slide_collision_count only counts times the body has collided and changed direction See KinematicCollision2D for details on what collision data is returned Which movement method to use A common question from new Godot users is How do you decide which movement function to use Often the response is to use move_and_slide because it seems simpler but this is not necessarily the case One way to think of it is that move_and_slide is a special case and move_and_collide is more general For example the following two code snippets result in the same collision response GDScript C using move_and_collide var collision move_and_collide velocity delta if collision velocity velocity slide collision get_normal using move_and_slide move_and_slide Copy to clipboard using MoveAndCollide var collision MoveAndCollide Velocity float delta if collision null Velocity Velocity Slide collision GetNormal using MoveAndSlide MoveAndSlide Copy to clipboard Anything you do with move_and_slide can also be done with move_and_collide but it might take a little more code However as we ll see in the examples below there are cases where move_and_slide doesn t provide the response you want In the example above move_and_slide automatically alters the velocity variable This is because when the character collides with the environment the function recalculates the speed internally to reflect the slowdown For example if your character fell on the floor you don t want it to accumulate vertical speed due to the effect of gravity Instead you want its vertical speed to reset to zero move_and_slide may also recalculate the kinematic body s velocity several times in a loop as to produce a smooth motion it moves the character and collides up to five times by default At the end of the process the character s new velocity is available for use on the next frame Examples To see these examples in action download the sample project character_body_2d_starter zip Movement and walls If you ve downloaded the sample project this example is in basic_movement tscn For this example add a CharacterBody2D with two children a Sprite2D and a CollisionShape2D Use the Godot icon svg as the Sprite2D s texture drag it from the Filesystem dock to the Texture property of the Sprite2D In the CollisionShape2D s Shape property select New RectangleShape2D and size the rectangle to fit over the sprite image Note See 2D movement overview for examples of implementing 2D movement schemes Attach a script to the CharacterBody2D and add the following code GDScript C extends CharacterBody2D var speed 300 func get_input var input_dir Input get_vector ui_left ui_right ui_up ui_down velocity input_dir speed func _physics_process delta get_input move_and_collide velocity delta Copy to clipboard using Godot public partial class MyCharacterBody2D CharacterBody2D private int _speed 300 public void GetInput Vector2 inputDir Input GetVector ui_left ui_right ui_up ui_down Velocity inputDir _speed public override void _PhysicsProcess double delta GetInput MoveAndCollide Velocity float delta Copy to clipboard Run this scene and you ll see that move_and_collide works as expected moving the body along the velocity vector Now let s see what happens when you add some obstacles Add a StaticBody2D with a rectangular collision shape For visibility you can use a Sprite2D a Polygon2D or turn on Visible Collision Shapes from the Debug menu Run the scene again and try moving into the obstacle You ll see that the CharacterBody2D can t penetrate the obstacle However try moving into the obstacle at an angle and you ll find that the obstacle acts like glue it feels like the body gets stuck This happens because there is no collision response move_and_collide stops the body s movement when a collision occurs We need to code whatever response we want from the collision Try changing the function to move_and_slide and running again move_and_slide provides a default collision response of sliding the body along the collision object This is useful for a great many game types and may be all you need to get the behavior you want Bouncing reflecting What if you don t want a sliding collision response For this example bounce_and_collide tscn in the sample project we have a character shooting bullets and we want the bullets to bounce off the walls This example uses three scenes The main scene contains the Player and Walls The Bullet and Wall are separate scenes so that they can be instanced The Player is controlled by the w and s keys for forward and back Aiming uses the mouse pointer Here is the code for the Player using move_and_slide GDScript C extends CharacterBody2D var Bullet preload res bullet tscn var speed 200 func get_input Add these actions in Project Settings Input Map var input_dir Input get_axis backward forward velocity transform x input_dir speed if Input is_action_just_pressed shoot shoot func shoot Muzzle is a Marker2D placed at the barrel of the gun var b Bullet instantiate b start Muzzle global_position rotation get_tree root add_child b func _physics_process delta get_input var dir get_global_mouse_position global_position Don t move if too close to the mouse pointer if dir length 5 rotation dir angle move_and_slide Copy to clipboard using Godot public partial class MyCharacterBody2D CharacterBody2D private PackedScene _bullet GD Load PackedScene res Bullet tscn private int _speed 200 public void GetInput Add these actions in Project Settings Input Map float inputDir Input GetAxis backward forward Velocity Transform X inputDir _speed if Input IsActionPressed shoot Shoot public void Shoot Muzzle is a Marker2D placed at the barrel of the gun var b Bullet _bullet Instantiate b Start GetNode Node2D Muzzle GlobalPosition Rotation GetTree Root AddChild b public override void _PhysicsProcess double delta GetInput var dir GetGlobalMousePosition GlobalPosition Don t move if too close to the mouse pointer if dir Length 5 Rotation dir Angle MoveAndSlide Copy to clipboard And the code for the Bullet GDScript C extends CharacterBody2D var speed 750 func start _position _direction rotation _direction position _position velocity Vector2 speed 0 rotated rotation func _physics_process delta var collision move_and_collide velocity delta if collision velocity velocity bounce collision get_normal if collision get_collider has_method hit collision get_collider hit func _on_VisibilityNotifier2D_screen_exited Deletes the bullet when it exits the screen queue_free Copy to clipboard using Godot public partial class Bullet CharacterBody2D public int _speed 750 public void Start Vector2 position float direction Rotation direction Position position Velocity new Vector2 speed 0 Rotated Rotation public override void _PhysicsProcess double delta var collision MoveAndCollide Velocity float delta if collision null Velocity Velocity Bounce collision GetNormal if collision GetCollider HasMethod Hit collision GetCollider Call Hit private void OnVisibilityNotifier2DScreenExited Deletes the bullet when it exits the screen QueueFree Copy to clipboard The action happens in _physics_process After using move_and_collide if a collision occurs a KinematicCollision2D object is returned otherwise the return is null If there is a returned collision we use the normal of the collision to reflect the bullet s velocity with the Vector2 bounce method If the colliding object collider has a hit method we also call it In the example project we ve added a flashing color effect to the Wall to demonstrate this Platformer movement Let s try one more popular example the 2D platformer move_and_slide is ideal for quickly getting a functional character controller up and running If you ve downloaded the sample project you can find this in platformer tscn For this example we ll assume you have a level made of one or more StaticBody2D objects They can be any shape and size In the sample project we re using Polygon2D to create the platform shapes Here s the code for the player body GDScript C extends CharacterBody2D var speed 300 0 var jump_speed 400 0 Get the gravity from the project settings so you can sync with rigid body nodes var gravity ProjectSettings get_setting physics 2d default_gravity func _physics_process delta Add the gravity velocity y gravity delta Handle Jump if Input is_action_just_pressed jump and is_on_floor velocity y jump_speed Get the input direction var direction Input get_axis ui_left ui_right velocity x direction speed move_and_slide Copy to clipboard using Godot public partial class MyCharacterBody2D CharacterBody2D private float _speed 100 0f private float _jumpSpeed 400 0f Get the gravity from the project settings so you can sync with rigid body nodes public float Gravity ProjectSettings GetSetting physics 2d default_gravity AsSingle public override void _PhysicsProcess double delta Vector2 velocity Velocity Add the gravity velocity Y Gravity float delta Handle jump if Input IsActionJustPressed jump IsOnFloor velocity Y _jumpSpeed Get the input direction float direction Input GetAxis ui_left ui_right velocity X direction _speed Velocity velocity MoveAndSlide Copy to clipboard In this code we re using move_and_slide as described above to move the body along its velocity vector sliding along any collision surfaces such as the ground or a platform We re also using is_on_floor to check if a jump should be allowed Without this you d be able to jump in midair great if you re making Flappy Bird but not for a platformer game There is a lot more that goes into a complete platformer character acceleration double jumps coyote time and many more The code above is just a starting point You can use it as a base to expand into whatever movement behavior you need for your own projects User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Ray casting Introduction One of the most common tasks in game development is casting a ray or custom shaped object and checking what it hits This enables complex behaviors AI etc to take place This tutorial will explain how to do this in 2D and 3D Godot stores all the low level game information in servers while the scene is only a frontend As such ray casting is generally a lower level task For simple raycasts nodes like RayCast3D and RayCast2D will work as they return every frame what the result of a raycast is Many times though ray casting needs to be a more interactive process so a way to do this by code must exist Space In the physics world Godot stores all the low level collision and physics information in a space The current 2d space for 2D Physics can be obtained by accessing CanvasItem get_world_2d space For 3D it s Node3D get_world_3d space The resulting space RID can be used in PhysicsServer3D and PhysicsServer2D respectively for 3D and 2D Accessing space Godot physics runs by default in the same thread as game logic but may be set to run on a separate thread to work more efficiently Due to this the only time accessing space is safe is during the Node _physics_process callback Accessing it from outside this function may result in an error due to space being locked To perform queries into physics space the PhysicsDirectSpaceState2D and PhysicsDirectSpaceState3D must be used Use the following code in 2D GDScript C func _physics_process delta var space_rid get_world_2d space var space_state PhysicsServer2D space_get_direct_state space_rid Copy to clipboard public override void _PhysicsProcess double delta var spaceRid GetWorld2D Space var spaceState PhysicsServer2D SpaceGetDirectState spaceRid Copy to clipboard Or more directly GDScript C func _physics_process delta var space_state get_world_2d direct_space_state Copy to clipboard public override void _PhysicsProcess double delta var spaceState GetWorld2D DirectSpaceState Copy to clipboard And in 3D GDScript C func _physics_process delta var space_state get_world_3d direct_space_state Copy to clipboard public override void _PhysicsProcess double delta var spaceState GetWorld3D DirectSpaceState Copy to clipboard Raycast query For performing a 2D raycast query the method PhysicsDirectSpaceState2D intersect_ray may be used For example GDScript C func _physics_process delta var space_state get_world_2d direct_space_state use global coordinates not local to node var query PhysicsRayQueryParameters2D create Vector2 0 0 Vector2 50 100 var result space_state intersect_ray query Copy to clipboard public override void _PhysicsProcess double delta var spaceState GetWorld2D DirectSpaceState use global coordinates not local to node var query PhysicsRayQueryParameters2D Create Vector2 Zero new Vector2 50 100 var result spaceState IntersectRay query Copy to clipboard The result is a dictionary If the ray didn t hit anything the dictionary will be empty If it did hit something it will contain collision information GDScript C if result print Hit at point result position Copy to clipboard if result Count 0 GD Print Hit at point result position Copy to clipboard The result dictionary when a collision occurs contains the following data position Vector2 point in world space for collision normal Vector2 normal in world space for collision collider Object Object collided or null if unassociated collider_id ObjectID Object it collided against rid RID RID it collided against shape int shape index of collider metadata Variant metadata of collider Copy to clipboard The data is similar in 3D space using Vector3 coordinates Note that to enable collisions with Area3D the boolean parameter collide_with_areas must be set to true GDScript const RAY_LENGTH 1000 func _physics_process delta var space_state get_world_3d direct_space_state var cam Camera3D var mousepos get_viewport get_mouse_position var origin cam project_ray_origin mousepos var end origin cam project_ray_normal mousepos RAY_LENGTH var query PhysicsRayQueryParameters3D create origin end query collide_with_areas true var result space_state intersect_ray query Copy to clipboard Collision exceptions A common use case for ray casting is to enable a character to gather data about the world around it One problem with this is that the same character has a collider so the ray will only detect its parent s collider as shown in the following image To avoid self intersection the intersect_ray parameters object can take an array of exceptions via its exclude property This is an example of how to use it from a CharacterBody2D or any other collision object node GDScript C extends CharacterBody2D func _physics_process delta var space_state get_world_2d direct_space_state var query PhysicsRayQueryParameters2D create global_position player_position query exclude self var result space_state intersect_ray query Copy to clipboard using Godot public partial class MyCharacterBody2D CharacterBody2D public override void _PhysicsProcess double delta var spaceState GetWorld2D DirectSpaceState var query PhysicsRayQueryParameters2D Create globalPosition playerPosition query Exclude new Godot Collections Array Rid GetRid var result spaceState IntersectRay query Copy to clipboard The exceptions array can contain objects or RIDs Collision Mask While the exceptions method works fine for excluding the parent body it becomes very inconvenient if you need a large and or dynamic list of exceptions In this case it is much more efficient to use the collision layer mask system The intersect_ray parameters object can also be supplied a collision mask For example to use the same mask as the parent body use the collision_mask member variable The array of exceptions can be supplied as the last argument as well GDScript C extends CharacterBody2D func _physics_process delta var space_state get_world_2d direct_space_state var query PhysicsRayQueryParameters2D create global_position target_position collision_mask self var result space_state intersect_ray query Copy to clipboard using Godot public partial class MyCharacterBody2D CharacterBody2D public override void _PhysicsProcess double delta var spaceState GetWorld2D DirectSpaceState var query PhysicsRayQueryParameters2D Create globalPosition targetPosition CollisionMask new Godot Collections Array Rid GetRid var result spaceState IntersectRay query Copy to clipboard See Code example for details on how to set the collision mask 3D ray casting from screen Casting a ray from screen to 3D physics space is useful for object picking There is not much need to do this because CollisionObject3D has an input_event signal that will let you know when it was clicked but in case there is any desire to do it manually here s how To cast a ray from the screen you need a Camera3D node A Camera3D can be in two projection modes perspective and orthogonal Because of this both the ray origin and direction must be obtained This is because origin changes in orthogonal mode while normal changes in perspective mode To obtain it using a camera the following code can be used GDScript C const RAY_LENGTH 1000 0 func _input event if event is InputEventMouseButton and event pressed and event button_index 1 var camera3d Camera3D var from camera3d project_ray_origin event position var to from camera3d project_ray_normal event position RAY_LENGTH Copy to clipboard private const float RayLength 1000 0f public override void _Input InputEvent event if event is InputEventMouseButton eventMouseButton eventMouseButton Pressed eventMouseButton ButtonIndex MouseButton Left var camera3D GetNode Camera3D Camera3D var from camera3D ProjectRayOrigin eventMouseButton Position var to from camera3D ProjectRayNormal eventMouseButton Position RayLength Copy to clipboard Remember that during _input the space may be locked so in practice this query should be run in _physics_process User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Ragdoll system Introduction Since version 3 1 Godot supports ragdoll physics Ragdolls rely on physics simulation to create realistic procedural animation They are used for death animations in many games In this tutorial we will be using the Platformer3D demo to set up a ragdoll Note You can download the Platformer3D demo on GitHub or using the Asset Library Setting up the ragdoll Creating physical bones Like many other features in the engine there is a node to set up a ragdoll the PhysicalBone3D node To simplify the setup you can generate PhysicalBone nodes with the Create physical skeleton feature in the skeleton node Open the platformer demo in Godot and then the Robi scene Select the Skeleton node A skeleton button appears on the top bar menu Click it and select the Create physical skeleton option Godot will generate PhysicalBone nodes and collision shapes for each bone in the skeleton and pin joints to connect them together Some of the generated bones aren t necessary the MASTER bone for example So we re going to clean up the skeleton by removing them Cleaning up the skeleton Each PhysicalBone the engine needs to simulate has a performance cost so you want to remove every bone that is too small to make a difference in the simulation as well as all utility bones For example if we take a humanoid you do not want to have physical bones for each finger You can use a single bone for the entire hand instead or one for the palm one for the thumb and a last one for the other four fingers Remove these physical bones MASTER waist neck headtracker This gives us an optimized skeleton and makes it easier to control the ragdoll Collision shape adjustment The next task is adjusting the collision shape and the size of physical bones to match the part of the body that each bone should simulate Joints adjustment Once you adjusted the collision shapes your ragdoll is almost ready You just want to adjust the pin joints to get a better simulation PhysicalBone nodes have an unconstrained pin joint assigned to them by default To change the pin joint select the PhysicalBone and change the constraint type in the Joint section There you can change the constraint s orientation and its limits This is the final result Simulating the ragdoll The ragdoll is now ready to use To start the simulation and play the ragdoll animation you need to call the physical_bones_start_simulation method Attach a script to the skeleton node and call the method in the _ready method GDScript func _ready physical_bones_start_simulation Copy to clipboard To stop the simulation call the physical_bones_stop_simulation method You can also limit the simulation to only a few bones To do so pass the bone names as a parameter Here s an example of partial ragdoll simulation Collision layer and mask Make sure to set up your collision layers and masks properly so the CharacterBody3D s capsule doesn t get in the way of the physics simulation For more information read Collision layers and masks User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Kinematic character 2D Introduction Yes the name sounds strange Kinematic Character What is that The reason for the name is that when physics engines came out they were called Dynamics engines because they dealt mainly with collision responses Many attempts were made to create a character controller using the dynamics engines but it wasn t as easy as it seemed Godot has one of the best implementations of dynamic character controller you can find as it can be seen in the 2d platformer demo but using it requires a considerable level of skill and understanding of physics engines or a lot of patience with trial and error Some physics engines such as Havok seem to swear by dynamic character controllers as the best option while others PhysX would rather promote the kinematic one So what is the difference A dynamic character controller uses a rigid body with an infinite inertia tensor It s a rigid body that can t rotate Physics engines always let objects move and collide then solve their collisions all together This makes dynamic character controllers able to interact with other physics objects seamlessly as seen in the platformer demo However these interactions are not always predictable Collisions can take more than one frame to be solved so a few collisions may seem to displace a tiny bit Those problems can be fixed but require a certain amount of skill A kinematic character controller is assumed to always begin in a non colliding state and will always move to a non colliding state If it starts in a colliding state it will try to free itself like rigid bodies do but this is the exception not the rule This makes their control and motion a lot more predictable and easier to program However as a downside they can t directly interact with other physics objects unless done by hand in code This short tutorial focuses on the kinematic character controller It uses the old school way of handling collisions which is not necessarily simpler under the hood but well hidden and presented as an API Physics process To manage the logic of a kinematic body or character it is always advised to use physics process because it s called before physics step and its execution is in sync with physics server also it is called the same amount of times per second always This makes physics and motion calculation work in a more predictable way than using regular process which might have spikes or lose precision if the frame rate is too high or too low GDScript C extends CharacterBody2D func _physics_process delta pass Copy to clipboard using Godot public partial class MyCharacterBody2D CharacterBody2D public override void _PhysicsProcess double delta Copy to clipboard Scene setup To have something to test here s the scene from the tilemap tutorial kinematic_character_2d_starter zip We ll be creating a new scene for the character Use the robot sprite and create a scene like this You ll notice that there s a warning icon next to our CollisionShape2D node that s because we haven t defined a shape for it Create a new CircleShape2D in the shape property of CollisionShape2D Click on CircleShape2D to go to the options for it and set the radius to 30 Note As mentioned before in the physics tutorial the physics engine can t handle scale on most types of shapes only collision polygons planes and segments work so always change the parameters such as radius of the shape instead of scaling it The same is also true for the kinematic rigid static bodies themselves as their scale affects the shape scale Now create a script for the character the one used as an example above should work as a base Finally instance that character scene in the tilemap and make the map scene the main one so it runs when pressing play Moving the kinematic character Go back to the character scene and open the script the magic begins now Kinematic body will do nothing by default but it has a useful function called CharacterBody2D move_and_collide This function takes a Vector2 as an argument and tries to apply that motion to the kinematic body If a collision happens it stops right at the moment of the collision So let s move our sprite downwards until it hits the floor GDScript C extends CharacterBody2D func _physics_process delta move_and_collide Vector2 0 1 Move down 1 pixel per physics frame Copy to clipboard using Godot public partial class MyCharacterBody2D CharacterBody2D public override void _PhysicsProcess double delta Move down 1 pixel per physics frame MoveAndCollide new Vector2 0 1 Copy to clipboard The result is that the character will move but stop right when hitting the floor Pretty cool huh The next step will be adding gravity to the mix this way it behaves a little more like a regular game character GDScript C extends CharacterBody2D const GRAVITY 200 0 func _physics_process delta velocity y delta GRAVITY var motion velocity delta move_and_collide motion Copy to clipboard using Godot public partial class MyCharacterBody2D CharacterBody2D private const float Gravity 200 0f public override void _PhysicsProcess double delta var velocity Velocity velocity Y float delta Gravity Velocity velocity var motion velocity float delta MoveAndCollide motion Copy to clipboard Now the character falls smoothly Let s make it walk to the sides left and right when touching the directional keys Remember that the values being used for speed at least are pixels second This adds basic support for walking when pressing left and right GDScript C extends CharacterBody2D const GRAVITY 200 0 const WALK_SPEED 200 func _physics_process delta velocity y delta GRAVITY if Input is_action_pressed ui_left velocity x WALK_SPEED elif Input is_action_pressed ui_right velocity x WALK_SPEED else velocity x 0 move_and_slide already takes delta time into account move_and_slide Copy to clipboard using Godot public partial class MyCharacterBody2D CharacterBody2D private const float Gravity 200 0f private const int WalkSpeed 200 public override void _PhysicsProcess double delta var velocity Velocity velocity Y float delta Gravity if Input IsActionPressed ui_left velocity X WalkSpeed else if Input IsActionPressed ui_right velocity X WalkSpeed else velocity X 0 Velocity velocity MoveAndSlide already takes delta time into account MoveAndSlide Copy to clipboard And give it a try This is a good starting point for a platformer A more complete demo can be found in the demo zip distributed with the engine or in the https github com godotengine godot demo projects tree master 2d kinematic_character User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Using SoftBody Soft bodies or soft body dynamics simulate movement changing shape and other physical properties of deformable objects This can for example be used to simulate cloth or to create more realistic characters Basic set up A SoftBody3D node is used for soft body simulations We will create a bouncy cube to demonstrate the setup of a soft body Create a new scene with a Node3D node as root Then create a Softbody node Add a CubeMesh in the mesh property of the node in the inspector and increase the subdivision of the mesh for simulation Set the parameters to obtain the type of soft body you aim for Try to keep the Simulation Precision above 5 otherwise the soft body may collapse Note Handle some parameters with care as some value can lead to strange results For example if the shape is not completely closed and you set pressure to more than 0 the softbody will fly around like a plastic bag under strong wind Play the scene to view the simulation Tip To improve the simulation s result increase the Simulation Precision this will give significant improvement at the cost of performance Cloak simulation Let s make a cloak in the Platformer3D demo Note You can download the Platformer3D demo on GitHub or the Asset Library Open the Player scene add a SoftBody node and assign a PlaneMesh to it Open the PlaneMesh properties and set the size x 0 5 y 1 then set Subdivide Width and Subdivide Depth to 5 Adjust the SoftBody s position You should end up with something like this Tip Subdivision generates a more tessellated mesh for better simulations Add a BoneAttachment3D node under the skeleton node and select the Neck bone to attach the cloak to the character skeleton Note BoneAttachment3D node is to attach objects to a bone of an armature The attached object will follow the bone s movement weapon of a character can be attached this way To create pinned joints select the upper vertices in the SoftBody node The pinned joints can be found in SoftBody s Attachments property choose the BoneAttachment as the SpatialAttachment for each pinned joints the pinned joints are now attached to the neck Last step is to avoid clipping by adding the Kinematic Body Player to Parent Collision Ignore of the SoftBody Play the scene and the cloak should simulate correctly This covers the basic settings of softbody experiment with the parameters to achieve the effect you are aiming for when making your game User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Collision shapes 2D This guide explains The types of collision shapes available in 2D in Godot Using an image converted to a polygon as a collision shape Performance considerations regarding 2D collisions Godot provides many kinds of collision shapes with different performance and accuracy tradeoffs You can define the shape of a PhysicsBody2D by adding one or more CollisionShape2Ds or CollisionPolygon2Ds as child nodes Note that you must add a Shape2D resource to collision shape nodes in the Inspector dock Note When you add multiple collision shapes to a single PhysicsBody2D you don t have to worry about them overlapping They won t collide with each other Primitive collision shapes Godot provides the following primitive collision shape types RectangleShape2D CircleShape2D CapsuleShape2D SegmentShape2D SeparationRayShape2D designed for characters WorldBoundaryShape2D infinite plane You can represent the collision of most smaller objects using one or more primitive shapes However for more complex objects such as a large ship or a whole level you may need convex or concave shapes instead More on that below We recommend favoring primitive shapes for dynamic objects such as RigidBodies and CharacterBodies as their behavior is the most reliable They often provide better performance as well Convex collision shapes Warning Godot currently doesn t offer a built in way to create 2D convex collision shapes This section is mainly here for reference purposes Convex collision shapes are a compromise between primitive collision shapes and concave collision shapes They can represent shapes of any complexity but with an important caveat As their name implies an individual shape can only represent a convex shape For instance a pyramid is convex but a hollow box is concave To define a concave object with a single collision shape you need to use a concave collision shape Depending on the object s complexity you may get better performance by using multiple convex shapes instead of a concave collision shape Godot lets you use convex decomposition to generate convex shapes that roughly match a hollow object Note this performance advantage no longer applies after a certain amount of convex shapes For large and complex objects such as a whole level we recommend using concave shapes instead Concave or trimesh collision shapes Concave collision shapes also called trimesh collision shapes can take any form from a few triangles to thousands of triangles Concave shapes are the slowest option but are also the most accurate in Godot You can only use concave shapes within StaticBodies They will not work with CharacterBodies or RigidBodies unless the RigidBody s mode is Static Note Even though concave shapes offer the most accurate collision contact reporting can be less precise than primitive shapes When not using TileMaps for level design concave shapes are the best approach for a level s collision You can configure the CollisionPolygon2D node s build mode in the inspector If it is set to Solids the default collisions will include the polygon and its contained area If it is set to Segments collisions will only include the polygon edges You can generate a concave collision shape from the editor by selecting a Sprite2D and using the Sprite2D menu at the top of the 2D viewport The Sprite2D menu dropdown exposes an option called Create CollisionPolygon2D Sibling Once you click it it displays a menu with 3 settings Simplification Higher values will result in a less detailed shape which improves performance at the cost of accuracy Shrink Pixels Higher values will shrink the generated collision polygon relative to the sprite s edges Grow Pixels Higher values will grow the generated collision polygon relative to the sprite s edges Note that setting Grow and Shrink to equal values may yield different results than leaving both of them on 0 Note If you have an image with many small details it s recommended to create a simplified version and use it to generate the collision polygon This can result in better performance and game feel since the player won t be blocked by small decorative details To use a separate image for collision polygon generation create another Sprite2D generate a collision polygon sibling from it then remove the Sprite2D node This way you can exclude small details from the generated collision Performance caveats You aren t limited to a single collision shape per PhysicsBody Still we recommend keeping the number of shapes as low as possible to improve performance especially for dynamic objects like RigidBodies and CharacterBodies On top of that avoid translating rotating or scaling CollisionShapes to benefit from the physics engine s internal optimizations When using a single non transformed collision shape in a StaticBody the engine s broad phase algorithm can discard inactive PhysicsBodies The narrow phase will then only have to take into account the active bodies shapes If a StaticBody has many collision shapes the broad phase will fail The narrow phase which is slower must then perform a collision check against each shape If you run into performance issues you may have to make tradeoffs in terms of accuracy Most games out there don t have a 100 accurate collision They find creative ways to hide it or otherwise make it unnoticeable during normal gameplay User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Collision shapes 3D This guide explains The types of collision shapes available in 3D in Godot Using a convex or a concave mesh as a collision shape Performance considerations regarding 3D collisions Godot provides many kinds of collision shapes with different performance and accuracy tradeoffs You can define the shape of a PhysicsBody3D by adding one or more CollisionShape3Ds as child nodes Note that you must add a Shape3D resource to collision shape nodes in the Inspector dock Note When you add multiple collision shapes to a single PhysicsBody you don t have to worry about them overlapping They won t collide with each other Primitive collision shapes Godot provides the following primitive collision shape types BoxShape3D SphereShape3D CapsuleShape3D CylinderShape3D You can represent the collision of most smaller objects using one or more primitive shapes However for more complex objects such as a large ship or a whole level you may need convex or concave shapes instead More on that below We recommend favoring primitive shapes for dynamic objects such as RigidBodies and CharacterBodies as their behavior is the most reliable They often provide better performance as well Convex collision shapes Convex collision shapes are a compromise between primitive collision shapes and concave collision shapes They can represent shapes of any complexity but with an important caveat As their name implies an individual shape can only represent a convex shape For instance a pyramid is convex but a hollow box is concave To define a concave object with a single collision shape you need to use a concave collision shape Depending on the object s complexity you may get better performance by using multiple convex shapes instead of a concave collision shape Godot lets you use convex decomposition to generate convex shapes that roughly match a hollow object Note this performance advantage no longer applies after a certain amount of convex shapes For large and complex objects such as a whole level we recommend using concave shapes instead You can generate one or several convex collision shapes from the editor by selecting a MeshInstance3D and using the Mesh menu at the top of the 3D viewport The editor exposes two generation modes Create Single Convex Collision Sibling uses the Quickhull algorithm It creates one CollisionShape node with an automatically generated convex collision shape Since it only generates a single shape it provides good performance and is ideal for small objects Create Multiple Convex Collision Siblings uses the V HACD algorithm It creates several CollisionShape nodes each with a convex shape Since it generates multiple shapes it is more accurate for concave objects at the cost of performance For objects with medium complexity it will likely be faster than using a single concave collision shape Concave or trimesh collision shapes Concave collision shapes also called trimesh collision shapes can take any form from a few triangles to thousands of triangles Concave shapes are the slowest option but are also the most accurate in Godot You can only use concave shapes within StaticBodies They will not work with CharacterBodies or RigidBodies unless the RigidBody s mode is Static Note Even though concave shapes offer the most accurate collision contact reporting can be less precise than primitive shapes When not using GridMaps for level design concave shapes are the best approach for a level s collision That said if your level has small details you may want to exclude those from collision for performance and game feel To do so you can build a simplified collision mesh in a 3D modeler and have Godot generate a collision shape for it automatically More on that below Note that unlike primitive and convex shapes a concave collision shape doesn t have an actual volume You can place objects both outside of the shape as well as inside You can generate a concave collision shape from the editor by selecting a MeshInstance3D and using the Mesh menu at the top of the 3D viewport The editor exposes two options Create Trimesh Static Body is a convenient option It creates a StaticBody containing a concave shape matching the mesh s geometry Create Trimesh Collision Sibling creates a CollisionShape node with a concave shape matching the mesh s geometry See also See Importing 3D scenes for information on how to export models for Godot and automatically generate collision shapes on import Performance caveats You aren t limited to a single collision shape per PhysicsBody Still we recommend keeping the number of shapes as low as possible to improve performance especially for dynamic objects like RigidBodies and CharacterBodies On top of that avoid translating rotating or scaling CollisionShapes to benefit from the physics engine s internal optimizations When using a single non transformed collision shape in a StaticBody the engine s broad phase algorithm can discard inactive PhysicsBodies The narrow phase will then only have to take into account the active bodies shapes If a StaticBody has many collision shapes the broad phase will fail The narrow phase which is slower must then perform a collision check against each shape If you run into performance issues you may have to make tradeoffs in terms of accuracy Most games out there don t have a 100 accurate collision They find creative ways to hide it or otherwise make it unnoticeable during normal gameplay User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Large world coordinates Note Large world coordinates are mainly useful in 3D projects they are rarely required in 2D projects Also unlike 3D rendering 2D rendering currently doesn t benefit from increased precision when large world coordinates are enabled Why use large world coordinates In Godot physics simulation and rendering both rely on floating point numbers However in computing floating point numbers have limited precision and range This can be a problem for games with huge worlds such as space or planetary scale simulation games Precision is the greatest when the value is close to 0 0 Precision becomes gradually lower as the value increases or decreases away from 0 0 This occurs every time the floating point number s exponent increases which happens when the floating point number surpasses a power of 2 value 2 4 8 16 Every time this occurs the number s minimum step will increase resulting in a loss of precision In practice this means that as the player moves away from the world origin Vector2 0 0 in 2D games or Vector3 0 0 0 in 3D games precision will decrease This loss of precision can result in objects appearing to vibrate when far away from the world origin as the model s position will snap to the nearest value that can be represented in a floating point number This can also result in physics glitches that only occur when the player is far from the world origin The range determines the minimum and maximum values that can be stored in the number If the player tries to move past this range they will simply not be able to However in practice floating point precision almost always becomes a problem before the range does The range and precision minimum step between two exponent intervals are determined by the floating point number type The theoretical range allows extremely high values to be stored in single precision floats but with very low precision In practice a floating point type that cannot represent all integer values is not very useful At extreme values precision becomes so low that the number cannot even distinguish two separate integer values from each other This is the range where individual integer values can be represented in a floating point number Single precision float range represent all integers Between 16 777 216 and 16 777 216 Double precision float range represent all integers Between 9 quadrillion and 9 quadrillion Range Single step Double step Comment 1 2 0 0000001 1e 15 Precision becomes greater near 0 0 this table is abbreviated 2 4 0 0000002 1e 15 4 8 0 0000005 1e 15 8 16 0 000001 1e 14 16 32 0 000002 1e 14 32 64 0 000004 1e 14 64 128 0 000008 1e 13 128 256 0 000015 1e 13 256 512 0 00003 1e 13 512 1024 0 00006 1e 12 1024 2048 0 0001 1e 12 2048 4096 0 0002 1e 12 Maximum recommended single precision range for a first person 3D game without rendering artifacts or physics glitches 4096 8192 0 0005 1e 12 Maximum recommended single precision range for a third person 3D game without rendering artifacts or physics glitches 8192 16384 0 001 1e 12 16384 32768 0 0019 1e 11 Maximum recommended single precision range for a top down 3D game without rendering artifacts or physics glitches 32768 65536 0 0039 1e 11 Maximum recommended single precision range for any 3D game Double precision large world coordinates is usually required past this point 65536 131072 0 0078 1e 11 131072 262144 0 0156 1e 10 262144 0 0313 1e 10 0 0000000001 Double precision remains far more precise than single precision past this value When using single precision floats it is possible to go past the suggested ranges but more visible artifacting will occur and physics glitches will be more common such as the player not walking straight in certain directions See also See the Demystifying Floating Point Precision article for more information How large world coordinates work Large world coordinates also known as double precision physics increase the precision level of all floating point computations within the engine By default float is 64 bit in GDScript but Vector2 Vector3 and Vector4 are 32 bit This means that the precision of vector types is much more limited To resolve this we can increase the number of bits used to represent a floating point number in a Vector type This results in an exponential increase in precision which means the final value is not just twice as precise but potentially thousands of times more precise at high values The maximum value that can be represented is also greatly increased by going from a single precision float to a double precision float To avoid model snapping issues when far away from the world origin Godot s 3D rendering engine will increase its precision for rendering operations when large world coordinates are enabled The shaders do not use double precision floats for performance reasons but an alternative solution is used to emulate double precision for rendering using single precision floats Note Enabling large world coordinates comes with a performance and memory usage penalty especially on 32 bit CPUs Only enable large world coordinates if you actually need them This feature is tailored towards mid range high end desktop platforms Large world coordinates may not perform well on low end mobile devices unless you take steps to reduce CPU usage with other means such as decreasing the number of physics ticks per second On low end platforms an origin shifting approach can be used instead to allow for large worlds without using double precision physics and rendering Origin shifting works with single precision floats but it introduces more complexity to game logic especially in multiplayer games Therefore origin shifting is not detailed on this page Who are large world coordinates for Large world coordinates are typically required for 3D space or planetary scale simulation games This extends to games that require supporting very fast movement speeds but also very slow and precise movements at times On the other hand it s important to only use large world coordinates when actually required for performance reasons Large world coordinates are usually not required for 2D games as precision issues are usually less noticeable Games with small scale or medium scale worlds Games with large worlds but split into different levels with loading sequences in between You can center each level portion around the world origin to avoid precision issues without a performance penalty Open world games with a playable on foot area not exceeding 8192 8192 meters centered around the world origin As shown in the above table the level of precision remains acceptable within that range even for a first person game If in doubt you probably don t need to use large world coordinates in your project For reference most modern AAA open world titles don t use a large world coordinates system and still rely on single precision floats for both rendering and physics Enabling large world coordinates This process requires recompiling the editor and all export template binaries you intend to use If you only intend to export your project in release mode you can skip the compilation of debug export templates In any case you ll need to compile an editor build so you can test your large precision world without having to export the project every time See the Compiling section for compiling instructions for each target platform You will need to add the precision double SCons option when compiling the editor and export templates The resulting binaries will be named with a double suffix to distinguish them from single precision binaries which lack any precision suffix You can then specify the binaries as custom export templates in your project s export presets in the Export dialog Compatibility between single precision and double precision builds When saving a binary resource using the ResourceSaver singleton a special flag is stored in the file if the resource was saved using a build that uses double precision numbers As a result all binary resources will change on disk when you switch to a double precision build and save over them Both single precision and double precision builds support using the ResourceLoader singleton on resources that use this special flag This means single precision builds can load resources saved using double precision builds and vice versa Text based resources don t store a double precision flag as they don t require such a flag for correct reading Known incompatibilities In a networked multiplayer game the server and all clients should be using the same build type to ensure precision remains consistent across clients Using different build types may work but various issues can occur The GDExtension API changes in an incompatible way in double precision builds This means extensions must be rebuilt to work with double precision builds On the extension developer s end the REAL_T_IS_DOUBLE define is enabled when building a GDExtension with precision double real_t can be used as an alias for float in single precision builds and double in double precision builds Limitations Since 3D rendering shaders don t actually use double precision floats there are some limitations when it comes to 3D rendering precision Shaders using the skip_vertex_transform or world_vertex_coords don t benefit from increased precision Triplanar mapping doesn t benefit from increased precision Materials using triplanar mapping will exhibit visible jittering when far away from the world origin 2D rendering currently doesn t benefit from increased precision when large world coordinates are enabled This can cause visible model snapping to occur when far away from the world origin starting from a few million pixels at typical zoom levels 2D physics calculations will still benefit from increased precision though User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Troubleshooting physics issues When working with a physics engine you may encounter unexpected results While many of these issues can be resolved through configuration some of them are the result of engine bugs For known issues related to the physics engine see open physics related issues on GitHub Looking through closed issues can also help answer questions related to physics engine behavior Objects are passing through each other at high speeds This is known as tunneling Enabling Continuous CD in the RigidBody properties can sometimes resolve this issue If this does not help there are other solutions you can try Make your static collision shapes thicker For example if you have a thin floor that the player can t get below in some way you can make the collider thicker than the floor s visual representation Modify your fast moving object s collision shape depending on its movement speed The faster the object moves the larger the collision shape should extend outside of the object to ensure it can collide with thin walls more reliably Increase Physics Ticks Per Second in the advanced Project Settings While this has other benefits such as more stable simulation and reduced input lag this increases CPU utilization and may not be viable for mobile web platforms Multipliers of the default value of 60 such as 120 180 or 240 should be preferred for a smooth appearance on most displays Stacked objects are unstable and wobbly Despite seeming like a simple problem stable RigidBody simulation with stacked objects is difficult to implement in a physics engine This is caused by integrating forces going against each other The more stacked objects are present the stronger the forces will be against each other This eventually causes the simulation to become wobbly making the objects unable to rest on top of each other without moving Increasing the physics simulation rate can help alleviate this issue To do so increase Physics Ticks Per Second in the advanced Project Settings Note that increases CPU utilization and may not be viable for mobile web platforms Multipliers of the default value of 60 such as 120 180 or 240 should be preferred for a smooth appearance on most displays Scaled physics bodies or collision shapes do not collide correctly Godot does not currently support scaling of physics bodies or collision shapes As a workaround change the collision shape s extents instead of changing its scale If you want the visual representation s scale to change as well change the scale of the underlying visual representation Sprite2D MeshInstance3D and change the collision shape s extents separately Make sure the collision shape is not a child of the visual representation in this case Since resources are shared by default you ll have to make the collision shape resource unique if you don t want the change to be applied to all nodes using the same collision shape resource in the scene This can be done by calling duplicate in a script on the collision shape resource before changing its size Thin objects are wobbly when resting on the floor This can be due to one of two causes The floor s collision shape is too thin The RigidBody s collision shape is too thin In the first case this can be alleviated by making the floor s collision shape thicker For example if you have a thin floor that the player can t get below in some way you can make the collider thicker than the floor s visual representation In the second case this can usually only be resolved by increasing the physics simulation rate as making the shape thicker would cause a disconnect between the RigidBody s visual representation and its collision In both cases increasing the physics simulation rate can also help alleviate this issue To do so increase Physics Ticks Per Second in the advanced Project Settings Note that this increases CPU utilization and may not be viable for mobile web platforms Multipliers of the default value of 60 such as 120 180 or 240 should be preferred for a smooth appearance on most displays Cylinder collision shapes are unstable During the transition from Bullet to GodotPhysics in Godot 4 cylinder collision shapes had to be reimplemented from scratch However cylinder collision shapes are one of the most difficult shapes to support which is why many other physics engines don t provide any support for them There are several known bugs with cylinder collision shapes currently We recommend using box or capsule collision shapes for characters for now Boxes generally provide the best reliability but have the downside of making the character take more space diagonally Capsule collision shapes do not have this downside but their shape can make precision platforming more difficult VehicleBody simulation is unstable especially at high speeds When a physics body moves at a high speed it travels a large distance between each physics step For instance when using the 1 unit 1 meter convention in 3D a vehicle moving at 360 km h will travel 100 units per second With the default physics simulation rate of 60 Hz the vehicle moves by 1 67 units each physics tick This means that small objects may be ignored entirely by the vehicle due to tunneling but also that the simulation has little data to work with in general at such a high speed Fast moving vehicles can benefit a lot from an increased physics simulation rate To do so increase Physics Ticks Per Second in the advanced Project Settings Note that this increases CPU utilization and may not be viable for mobile web platforms Multipliers of the default value of 60 such as 120 180 or 240 should be preferred for a smooth appearance on most displays Collision results in bumps when an object moves across tiles This is a known issue in the physics engine caused by the object bumping on a shape s edges even though that edge is covered by another shape This can occur in both 2D and 3D The best way to work around this issue is to create a composite collider This means that instead of individual tiles having their collision you create a single collision shape representing the collision for a group of tiles Typically you should split composite colliders on a per island basis which means each group of touching tiles gets its own collider Using a composite collider can also improve physics simulation performance in certain cases However since the composite collision shape is much more complex this may not be a net performance win in all cases Framerate drops when an object touches another object This is likely due to one of the objects using a collision shape that is too complex Convex collision shapes should use a number of shapes as low as possible for performance reasons When relying on Godot s automatic generation it s possible that you ended up with dozens if not hundreds of shapes created for a single convex shape collision resource In some cases replacing a convex collider with a couple of primitive collision shapes box sphere or capsule can deliver better performance This issue can also occur with StaticBodies that use very detailed trimesh concave collisions In this case use a simplified representation of the level geometry as a collider Not only this will improve physics simulation performance significantly but this can also improve stability by letting you remove small fixtures and crevices from being considered by collision Physics simulation is unreliable when far away from the world origin This is caused by floating point precision errors which become more pronounced as the physics simulation occurs further away from the world origin This issue also affects rendering which results in wobbly camera movement when far away from the world origin See Large world coordinates for more information User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Platform specific Android iOS plugins Web Console support in Godot Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Android Godot Android library Godot Android plugins Android in app purchases Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Godot Android library The Godot Engine for Android platforms is designed to be used as an Android library This architecture enables several key features on Android platforms Ability to integrate the Gradle build system within the Godot Editor which provides the ability to leverage more components from the Android ecosystem such as libraries and tools Ability to make the engine portable and embeddable Key in enabling the port of the Godot Editor to Android and mobile XR devices Key in allowing the integration and reuse of Godot s capabilities within existing codebase Below we describe some of the use cases and scenarios this architecture enables Using the Godot Android library The Godot Android library is packaged as an AAR archive file and hosted on MavenCentral along with its documentation It provides access to Godot APIs and capabilities on Android platforms for the following non exhaustive use cases Godot Android plugins Android plugins are powerful tools to extend the capabilities of the Godot Engine by tapping into the functionality provided by Android platforms and ecosystem An Android plugin is an Android library with a dependency on the Godot Android library which the plugin uses to integrate into the engine s lifecycle and to access Godot APIs granting it powerful capabilities such as GDExtension support which allows to update mod the engine behavior as needed For more information see Godot Android plugins Embedding Godot in existing Android projects The Godot Engine can be embedded within existing Android applications or libraries allowing developers to leverage mature and battle tested code and libraries better suited to a specific task The hosting component is responsible for driving the engine lifecycle via Godot s Android APIs These APIs can also be used to provide bidirectional communication between the host and the embedded Godot instance allowing for greater control over the desired experience We showcase how this is done using a sample Android app that embeds the Godot Engine as an Android view and uses it to render 3D glTF models The GLTF Viewer sample app uses an Android RecyclerView component to create a list of glTF items populated from Kenney s Food Kit pack When an item on the list is selected the app s logic interacts with the embedded Godot Engine to render the selected glTF item as a 3D model The sample app source code can be found on GitHub Follow the instructions on its README to build and install it Below we break down the steps used to create the GLTF Viewer app Warning Currently only a single instance of the Godot Engine is supported per process You can configure the process the Android Activity runs under using the android process attribute Warning Automatic resizing orientation configuration events are not supported and may cause a crash You can disable those events By locking to a specific orientation using the android screenOrientation attribute By declaring that the Activity will handle these configuration events using the android configChanges attribute 1 Create the Android app Note The Android sample app was created using Android Studio and using Gradle as the build system The Android ecosystem provides multiple tools IDEs build systems for creating Android apps so feel free to use what you re familiar with and update the steps below accordingly contributions to this documentation are welcomed as well Set up an Android application project It may be a brand new empty project or an existing project Add the maven dependency for the Godot Android library If using gradle add the following to the dependency section of the app s gradle build file Make sure to update version to the latest version of the Godot Android library implementation org godotengine godot version Copy to clipboard If using gradle include the following aaptOptions configuration under the android defaultConfig section of the app s gradle build file Doing so allows gradle to include Godot s hidden directories when building the app binary If your build system does not support including hidden directories you can configure the Godot project to not use hidden directories by deselecting Project Settings Application Config Use Hidden Project Data Directory android defaultConfig The default ignore pattern for the assets directory includes hidden files and directories which are used by Godot projects so we override it with the following aaptOptions ignoreAssetsPattern svn git gitignore ds_store scc dir _ CVS thumbs db picasa ini Copy to clipboard Create update the application s Activity that will be hosting the Godot Engine instance For the sample app this is MainActivity The host Activity should implement the GodotHost interface The sample app uses Fragments to organize its UI so it uses GodotFragment a fragment component provided by the Godot Android library to automatically host and manage the Godot Engine instance private var godotFragment GodotFragment null override fun onCreate savedInstanceState Bundle super onCreate savedInstanceState setContentView R layout activity_main val currentGodotFragment supportFragmentManager findFragmentById R id godot_fragment_container if currentGodotFragment is GodotFragment godotFragment currentGodotFragment else godotFragment GodotFragment supportFragmentManager beginTransaction replace R id godot_fragment_container godotFragment commitNowAllowingStateLoss Copy to clipboard Note The Godot Android library also provide GodotActivity an Activity component that can be extended to automatically host and manage the Godot Engine instance Alternatively applications can directly create a Godot instance host and manage it themselves Using GodotHost getHostPlugins the sample app creates a runtime GodotPlugin instance that s used to send signals to the gdscript logic The runtime GodotPlugin can also be used by gdscript logic to access JVM methods For more information see Godot Android plugins Add any additional logic that will be used by your application For the sample app this includes adding the ItemsSelectionFragment fragment and related classes a fragment used to build and show the list of glTF items Open the AndroidManifest xml file and configure the orientation if needed using the android screenOrientation attribute If needed disable automatic resizing orientation configuration changes using the android configChanges attribute activity android name MainActivity android screenOrientation fullUser android configChanges orientation screenSize smallestScreenSize screenLayout android exported true activity Copy to clipboard 2 Create the Godot project Note On Android Godot s project files are exported to the assets directory of the generated apk binary We leverage that architecture to bind our Android app and Godot project together by creating the Godot project in the Android app s assets directory Note that it s also possible to create the Godot project in a separate directory and export it as a PCK or ZIP file to the Android app s assets directory Using this approach requires passing the main pack pck_or_zip_filepath_relative_to_assets_dir argument to the hosted Godot Engine instance using GodotHost getCommandLine The instructions below and the sample app follow the first approach of creating the Godot project in the Android app s assets directory As mentioned in the note above open the Godot Editor and create a Godot project directly no subfolder in the assets directory of the Android application project See the sample app s Godot project for reference Configure the Godot project as desired Make sure the orientation set for the Godot project matches the one set in the Android app s manifest For Android make sure textures vram_compression import_etc2_astc is set to true Update the Godot project script logic as needed For the sample app the script logic queries for the runtime GodotPlugin instance and uses it to register for signals fired by the app logic The app logic fires a signal every time an item is selected in the list The signal contains the filepath of the glTF model which is used by the gdscript logic to render the model extends Node3D Reference to the gltf model that s currently being shown var current_gltf_node Node3D null func _ready Default asset to load when the app starts _load_gltf res gltfs food_kit turkey glb var appPlugin Engine get_singleton AppPlugin if appPlugin print App plugin is available Signal fired from the app logic to update the gltf model being shown appPlugin connect show_gltf _load_gltf else print App plugin is not available Load the gltf model specified by the given path func _load_gltf gltf_path String if current_gltf_node null remove_child current_gltf_node current_gltf_node load gltf_path instantiate add_child current_gltf_node Copy to clipboard 3 Build and run the app Once you complete configuration of your Godot project build and run the Android app If set up correctly the host Activity will initialize the embedded Godot Engine on startup The Godot Engine will check the assets directory for project files to load unless configured to look for a main pack and will proceed to run the project While the app is running on device you can check Android logcat to investigate any errors or crashes For reference check the build and install instructions for the GLTF Viewer sample app User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Godot Android plugins Introduction Android plugins are powerful tools to extend the capabilities of the Godot engine by tapping into the functionality provided by Android platforms and ecosystem For example in Godot 4 Android plugins are used to support multiple Android based XR platforms without encumbering the core codebase with vendor specific code or binaries Android plugin Version 1 v1 of the Android plugin system was introduced in Godot 3 and compatible with Godot 4 0 and 4 1 That version allowed developers to augment the Godot engine with Java Kotlin and native functionality Starting in Godot 4 2 Android plugins built on the v1 architecture are now deprecated Instead Godot 4 2 introduces a new Version 2 v2 architecture for Android plugins v2 Architecture Note Godot Android plugin leverages the Gradle build system Building on the previous v1 architecture Android plugins continue to be derived from the Android archive library At its core a Godot Android plugin v2 is an Android library with a dependency on the Godot Android library and a custom Android library manifest This architecture allows Android plugins to extend the functionality of the engine with Android platform APIs Android libraries Kotlin and Java libraries Native libraries via JNI GDExtension libraries Each plugin has an init class extending from the GodotPlugin class which is provided by the Godot Android library The GodotPlugin class provides APIs to access the running Godot instance and hook into its lifecycle It is loaded at runtime by the Godot engine v2 Packaging format v1 Android plugins required a custom gdap configuration file that was used by the Godot Editor to detect and load them However this approach had several drawbacks primary ones being that it lacked flexibility and departed from the existing Godot EditorExportPlugin format delivery and installation flow This has been resolved for v2 Android plugins by deprecating the gdap packaging and configuration mechanism in favor of the existing Godot EditorExportPlugin packaging format The EditorExportPlugin API in turn has been extended to properly support Android plugins Building a v2 Android plugin A github project template is provided at https github com m4gr3d Godot Android Plugin Template as a quickstart for building Godot Android plugins for Godot 4 2 You can follow the template README to set up your own Godot Android plugin project To provide further understanding here is a break down of the steps used to create the project template Create an Android library module using these instructions Add the Godot Android library as a dependency by updating the module s gradle build file dependencies implementation org godotengine godot 4 2 0 stable Copy to clipboard The Godot Android library is hosted on MavenCentral and updated for each release Create GodotAndroidPlugin an init class for the plugin extending GodotPlugin If the plugin exposes Kotlin or Java methods to be called from GDScript they must be annotated with UsedByGodot The name called from GDScript must match the method name exactly There is no coercing snake_case to camelCase For example from GDScript if Engine has_singleton MyPlugin var singleton Engine get_singleton MyPlugin print singleton myPluginFunction World Copy to clipboard If the plugin uses signals the init class must return the set of signals used by overriding GodotPlugin getPluginSignals To emit signals the plugin can use the GodotPlugin emitSignal method Update the plugin AndroidManifest xml file with the following meta data meta data android name org godotengine plugin v2 PluginName android value plugin init ClassFullName Copy to clipboard Where PluginName is the name of the plugin plugin init ClassFullName is the full component name package class name of the plugin init class e g org godotengine plugin android template GodotAndroidPlugin Create the EditorExportPlugin configuration to package the plugin The steps used to create the configuration can be seen in the Packaging a v2 Android plugin section Building a v2 Android plugin with GDExtension capabilities Similar to GDNative support in v1 Android plugins v2 Android plugins support the ability to integrate GDExtension capabilities A github project template is provided at https github com m4gr3d GDExtension Android Plugin Template as a quickstart for building GDExtension Android plugins for Godot 4 2 You can follow the template s README to set up your own Godot Android plugin project Migrating a v1 Android plugin to v2 Use the following steps if you have a v1 Android plugin you want to migrate to v2 Update the plugin s manifest file Change the org godotengine plugin v1 prefix to org godotengine plugin v2 Update the Godot Android library build dependency You can continue using the godot lib version status aar binary from Godot s download page if that s your preference Make sure it s updated to the latest stable version Or you can switch to the MavenCentral provided dependency dependencies implementation org godotengine godot 4 2 0 stable Copy to clipboard After updating the Godot Android library dependency sync or build the plugin and resolve any compile errors The Godot instance provided by GodotPlugin getGodot no longer has access to a android content Context reference Use GodotPlugin getActivity instead Delete the gdap configuration file s and follow the instructions in the Packaging a v2 Android plugin section to set up the plugin configuration Packaging a v2 Android plugin As mentioned a v2 Android plugin is now provided to the Godot Editor as an EditorExportPlugin plugin so it shares a lot of the same packaging steps Add the plugin output binaries within the plugin directory e g in addons plugin_name Add the tool script for the export functionality within the plugin directory e g in addons plugin_name The created script must be a tool script or else it will not work properly The export tool script is used to configure the Android plugin and hook it within the Godot Editor s export process It should look something like this tool extends EditorPlugin A class member to hold the editor export plugin during its lifecycle var export_plugin AndroidExportPlugin func _enter_tree Initialization of the plugin goes here export_plugin AndroidExportPlugin new add_export_plugin export_plugin func _exit_tree Clean up of the plugin goes here remove_export_plugin export_plugin export_plugin null class AndroidExportPlugin extends EditorExportPlugin Plugin s name var _plugin_name plugin_name Specifies which platform is supported by the plugin func _supports_platform platform if platform is EditorExportPlatformAndroid return true return false Return the paths of the plugin s AAR binaries relative to the addons directory func _get_android_libraries platform debug if debug return PackedStringArray paths_to_debug_android_plugin_aar_binaries else return PackedStringArray paths_to_release_android_plugin_aar_binaries Return the plugin s name func _get_name return _plugin_name Copy to clipboard Here are the set of EditorExportPlugin APIs most relevant to use in this tool script _supports_platform returns true if the plugin supports the given platform For Android plugins this must return true when platform is EditorExportPlatformAndroid _get_android_libraries retrieve the local paths of the Android libraries binaries AAR files provided by the plugin _get_android_dependencies retrieve the set of Android maven dependencies e g org godot example my plugin 0 0 0 provided by the plugin _get_android_dependencies_maven_repos retrieve the urls of the maven repos for the android dependencies provided by _get_android_dependencies _get_android_manifest_activity_element_contents update the contents of the activity element in the generated Android manifest _get_android_manifest_application_element_contents update the contents of the application element in the generated Android manifest _get_android_manifest_element_contents update the contents of the manifest element in the generated Android manifest The _get_android_manifest_ methods allow the plugin to automatically provide changes to the app s manifest which are preserved when the Godot Editor is updated resolving a long standing issue with v1 Android plugins Create a plugin cfg This is an INI file with metadata about your plugin plugin name plugin_name description plugin_description author plugin_author version plugin_version script relative_path_to_the_export_tool_script Copy to clipboard For reference here is the folder structure for the Godot Android plugin project template At build time the contents of the export_scripts_template directory as well as the generated plugin binaries are copied to the addons plugin_name directory export_scripts_template export_plugin gd export plugin tool script plugin cfg plugin INI file Copy to clipboard Packaging a v2 Android plugin with GDExtension capabilities For GDExtension we follow the same steps as for Packaging a v2 Android plugin and add the GDExtension config file in the same location as plugin cfg For reference here is the folder structure for the GDExtension Android plugin project template At build time the contents of the export_scripts_template directory as well as the generated plugin binaries are copied to the addons plugin_name directory export_scripts_template export_plugin gd export plugin tool script plugin cfg plugin INI file plugin gdextension GDExtension config file Copy to clipboard Here is what the plugin gdextension config file should look like configuration entry_symbol plugin_library_init compatibility_minimum 4 2 android_aar_plugin true libraries android debug arm64 res addons GDExtensionAndroidPluginTemplate bin debug arm64 v8a libGDExtensionAndroidPluginTemplate so android release arm64 res addons GDExtensionAndroidPluginTemplate bin release arm64 v8a libGDExtensionAndroidPluginTemplate so Copy to clipboard Of note is the android_aar_plugin field that specifies this GDExtension module is provided as part of a v2 Android plugin During the export process this will indicate to the Godot Editor that the GDExtension native shared libraries are exported by the Android plugin AAR binaries For GDExtension Android plugins the plugin init class must override GodotPlugin getPluginGDExtensionLibrariesPaths and return the paths to the bundled GDExtension libraries config files gdextension The paths must be relative to the Android library s assets directory At runtime the plugin will provide these paths to the Godot engine which will use them to load and initialize the bundled GDExtension libraries Using a v2 Android plugin Note Godot 4 2 or higher is required v2 Android plugin requires the use of the Gradle build process The provided github project templates include demo Godot projects for quick testing Copy the plugin s output directory addons plugin_name to the target Godot project s directory Open the project in the Godot Editor the Editor should detect the plugin Navigate to Project Project Settings Plugins and ensure the plugin is enabled Install the Godot Android build template by clicking on Project Install Android Build Template Navigate to Project Export In the Export window create an Android export preset In the Android export preset scroll to Gradle Build and set Use Gradle Build to true Update the project s scripts as needed to access the plugin s functionality For example if Engine has_singleton MyPlugin var singleton Engine get_singleton MyPlugin print singleton myPluginFunction World Copy to clipboard Connect an Android device to your machine and run the project on it Using a v2 Android plugin as an Android library Since they are also Android libraries Godot v2 Android plugins can be stripped from their EditorExportPlugin packaging and provided as raw AAR binaries for use as libraries alongside the Godot Android library by Android apps If targeting this use case make sure to include additional instructions for how the AAR binaries should be included e g custom additions to the Android app s manifest Reference implementations Godot Android Plugins Samples Godot Android Plugin Template GDExtension Android Plugin Template Godot OpenXR Loaders Tips and Guidelines Simplify access to the exposed Java Kotlin APIs To make it easier to access the exposed Java Kotlin APIs in the Godot Editor it s recommended to provide one or multiple gdscript wrapper class es for your plugin users to interface with For example class_name PluginInterface extends Object Interface used to access the functionality provided by this plugin var _plugin_name GDExtensionAndroidPluginTemplate var _plugin_singleton func _init if Engine has_singleton _plugin_name _plugin_singleton Engine get_singleton _plugin_name else printerr Initialization error unable to access the java logic Print a Hello World message to the logcat func helloWorld if _plugin_singleton _plugin_singleton helloWorld else printerr Initialization error Copy to clipboard Support using the GDExtension functionality in the Godot Editor If planning to use the GDExtension functionality in the Godot Editor it is recommended that the GDExtension s native binaries are compiled not just for Android but also for the OS onto which developers users intend to run the Godot Editor Not doing so may prevent developers users from writing code that accesses the plugin from within the Godot Editor This may involve creating dummy plugins for the host OS just so the API is published to the editor You can use the godot cpp template github template for reference on how to do so Godot crashes upon load Check adb logcat for possible problems then Check that the methods exposed by the plugin used the following Java types void boolean int float java lang String org godotengine godot Dictionary int byte float java lang String More complex datatypes are not supported for now User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Android in app purchases Godot offers a first party GodotGooglePlayBilling Android plugin compatible with Godot 4 which uses the Google Play Billing library Usage Getting started Make sure you have enabled and successfully set up Android Gradle Builds Follow the compiling instructions on the GodotGooglePlayBilling github page Then put the files godot google play billing build outputs aar GodotGooglePlayBilling release aar and GodotGooglePlayBilling gdap into your project in the res android plugins folder The plugin should now show up in the Android export settings where you can enable it Initialize the plugin To use the GodotGooglePlayBilling API Obtain a reference to the GodotGooglePlayBilling singleton Connect handlers for the plugin signals Call startConnection Initialization example var payment func _ready if Engine has_singleton GodotGooglePlayBilling payment Engine get_singleton GodotGooglePlayBilling These are all signals supported by the API You can drop some of these based on your needs payment billing_resume connect _on_billing_resume No params payment connected connect _on_connected No params payment disconnected connect _on_disconnected No params payment connect_error connect _on_connect_error Response ID int Debug message string payment price_change_acknowledged connect _on_price_acknowledged Response ID int payment purchases_updated connect _on_purchases_updated Purchases Dictionary payment purchase_error connect _on_purchase_error Response ID int Debug message string payment sku_details_query_completed connect _on_product_details_query_completed Products Dictionary payment sku_details_query_error connect _on_product_details_query_error Response ID int Debug message string Queried SKUs string payment purchase_acknowledged connect _on_purchase_acknowledged Purchase token string payment purchase_acknowledgement_error connect _on_purchase_acknowledgement_error Response ID int Debug message string Purchase token string payment purchase_consumed connect _on_purchase_consumed Purchase token string payment purchase_consumption_error connect _on_purchase_consumption_error Response ID int Debug message string Purchase token string payment query_purchases_response connect _on_query_purchases_response Purchases Dictionary payment startConnection else print Android IAP support is not enabled Make sure you have enabled Gradle Build and the GodotGooglePlayBilling plugin in your Android export settings IAP will not work Copy to clipboard The API must be in a connected state prior to use The connected signal is sent when the connection process succeeds You can also use isReady to determine if the plugin is ready for use The getConnectionState function returns the current connection state of the plugin Return values for getConnectionState Matches BillingClient ConnectionState in the Play Billing Library enum ConnectionState DISCONNECTED not yet connected to billing service or was already closed CONNECTING currently in process of connecting to billing service CONNECTED currently connected to billing service CLOSED already closed and shouldn t be used again Copy to clipboard Query available items Once the API has connected query SKUs using querySkuDetails You must successfully complete an SKU query before calling the purchase or queryPurchases functions or they will return an error querySkuDetails takes two parameters an array of SKU name strings and a string specifying the type of SKU being queried The SKU type string should be inapp for normal in app purchases or subs for subscriptions The name strings in the array should match the SKU product ids defined in the Google Play Console entry for your app Example use of querySkuDetails func _on_connected payment querySkuDetails my_iap_item inapp subs for subscriptions func _on_product_details_query_completed product_details for available_product in product_details print available_product func _on_product_details_query_error response_id error_message products_queried print on_product_details_query_error id response_id message error_message products products_queried Copy to clipboard Query user purchases To retrieve a user s purchases call the queryPurchases function passing a string with the type of SKU to query The SKU type string should be inapp for normal in app purchases or subs for subscriptions The query_purchases_response signal is sent with the result The signal has a single parameter a Dictionary with a status code and either an array of purchases or an error message Only active subscriptions and non consumed one time purchases are included in the purchase array Example use of queryPurchases func _query_purchases payment queryPurchases inapp Or subs for subscriptions func _on_query_purchases_response query_result if query_result status OK for purchase in query_result purchases _process_purchase purchase else print queryPurchases failed response code query_result response_code debug message query_result debug_message Copy to clipboard You should query purchases during startup after successfully retrieving SKU details Since the user may make a purchase or resolve a pending transaction from outside your app you should recheck for purchases when resuming from the background To accomplish this you can use the billing_resume signal Example use of billing_resume func _on_billing_resume if payment getConnectionState ConnectionState CONNECTED _query_purchases Copy to clipboard For more information on processing the purchase items returned by queryPurchases see Processing a purchase item Purchase an item To initiate the purchase flow for an item call purchase passing the product id string of the SKU you wish to purchase Reminder you must query the SKU details for an item before you can pass it to purchase Example use of purchase payment purchase my_iap_item Copy to clipboard The payment flow will send a purchases_updated signal on success or a purchase_error signal on failure func _on_purchases_updated purchases for purchase in purchases _process_purchase purchase func _on_purchase_error response_id error_message print purchase_error id response_id message error_message Copy to clipboard Processing a purchase item The query_purchases_response and purchases_updated signals provide an array of purchases in Dictionary format The purchase Dictionary includes keys that map to values of the Google Play Billing Purchase class Purchase fields dictionary put order_id purchase getOrderId dictionary put package_name purchase getPackageName dictionary put purchase_state purchase getPurchaseState dictionary put purchase_time purchase getPurchaseTime dictionary put purchase_token purchase getPurchaseToken dictionary put quantity purchase getQuantity dictionary put signature purchase getSignature PBL V4 replaced getSku with getSkus to support multi sku purchases use the first entry for sku and generate an array for skus ArrayList String skus purchase getSkus dictionary put sku skus get 0 Not available in plugin String skusArray skus toArray new String 0 dictionary put products productsArray dictionary put is_acknowledged purchase isAcknowledged dictionary put is_auto_renewing purchase isAutoRenewing Copy to clipboard Check purchase state Check the purchase_state value of a purchase to determine if a purchase was completed or is still pending PurchaseState values Matches Purchase PurchaseState in the Play Billing Library enum PurchaseState UNSPECIFIED PURCHASED PENDING Copy to clipboard If a purchase is in a PENDING state you should not award the contents of the purchase or do any further processing of the purchase until it reaches the PURCHASED state If you have a store interface you may wish to display information about pending purchases needing to be completed in the Google Play Store For more details on pending purchases see Handling pending transactions in the Google Play Billing Library documentation Consumables If your in app item is not a one time purchase but a consumable item e g coins which can be purchased multiple times you can consume an item by calling consumePurchase passing the purchase_token value from the purchase dictionary Calling consumePurchase automatically acknowledges a purchase Consuming a product allows the user to purchase it again it will no longer appear in subsequent queryPurchases calls unless it is repurchased Example use of consumePurchase func _process_purchase purchase if my_consumable_iap_item in purchase products and purchase purchase_state PurchaseState PURCHASED Add code to store payment so we can reconcile the purchase token in the completion callback against the original purchase payment consumePurchase purchase purchase_token func _on_purchase_consumed purchase_token _handle_purchase_token purchase_token true func _on_purchase_consumption_error response_id error_message purchase_token print _on_purchase_consumption_error id response_id message error_message _handle_purchase_token purchase_token false Find the sku associated with the purchase token and award the product if successful func _handle_purchase_token purchase_token purchase_successful check award logic remove purchase from tracking list Copy to clipboard Acknowledging purchases If your in app item is a one time purchase you must acknowledge the purchase by calling the acknowledgePurchase function passing the purchase_token value from the purchase dictionary If you do not acknowledge a purchase within three days the user automatically receives a refund and Google Play revokes the purchase If you are calling comsumePurchase it automatically acknowledges the purchase and you do not need to call acknowledgePurchase Example use of acknowledgePurchase func _process_purchase purchase if my_one_time_iap_item in purchase products and purchase purchase_state PurchaseState PURCHASED and not purchase is_acknowledged Add code to store payment so we can reconcile the purchase token in the completion callback against the original purchase payment acknowledgePurchase purchase purchase_token func _on_purchase_acknowledged purchase_token _handle_purchase_token purchase_token true func _on_purchase_acknowledgement_error response_id error_message purchase_token print _on_purchase_acknowledgement_error id response_id message error_message _handle_purchase_token purchase_token false Find the sku associated with the purchase token and award the product if successful func _handle_purchase_token purchase_token purchase_successful check award logic remove purchase from tracking list Copy to clipboard Subscriptions Subscriptions work mostly like regular in app items Use subs as the second argument to querySkuDetails to get subscription details Pass subs to queryPurchases to get subscription purchase details You can check is_auto_renewing in the a subscription purchase returned from queryPurchases to see if a user has cancelled an auto renewing subscription You need to acknowledge new subscription purchases but not automatic subscription renewals If you support upgrading or downgrading between different subscription levels you should use updateSubscription to use the subscription update flow to change an active subscription Like purchase results are returned by the purchases_updated and purchase_error signals There are three parameters to updateSubscription The purchase token of the currently active subscription The product id string of the subscription SKU to change to The proration mode to apply to the subscription The proration values are defined as enum SubscriptionProrationMode Replacement takes effect immediately and the remaining time will be prorated and credited to the user IMMEDIATE_WITH_TIME_PRORATION 1 Replacement takes effect immediately and the billing cycle remains the same The price for the remaining period will be charged This option is only available for subscription upgrade IMMEDIATE_AND_CHARGE_PRORATED_PRICE Replacement takes effect immediately and the new price will be charged on next recurrence time The billing cycle stays the same IMMEDIATE_WITHOUT_PRORATION Replacement takes effect when the old plan expires and the new price will be charged at the same time DEFERRED Replacement takes effect immediately and the user is charged full price of new plan and is given a full billing cycle of subscription plus remaining prorated time from the old plan IMMEDIATE_AND_CHARGE_FULL_PRICE Copy to clipboard Default behavior is IMMEDIATE_WITH_TIME_PRORATION Example use of updateSubscription payment updateSubscription _active_subscription_purchase purchase_token new_sub_sku SubscriptionProrationMode IMMEDIATE_WITH_TIME_PRORATION Copy to clipboard The confirmPriceChange function can be used to launch price change confirmation flow for a subscription Pass the product id of the subscription SKU subject to the price change The result will be sent by the price_change_acknowledged signal Example use of confirmPriceChange enum BillingResponse SUCCESS 0 CANCELLED 1 func confirm_price_change product_id payment confirmPriceChange product_id func _on_price_acknowledged response_id if response_id BillingResponse SUCCESS print price_change_accepted elif response_id BillingResponse CANCELED print price_change_canceled Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request iOS plugins Creating iOS plugins Plugins for iOS Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Creating iOS plugins This page explains what iOS plugins can do for you how to use an existing plugin and the steps to code a new one iOS plugins allow you to use third party libraries and support iOS specific features like In App Purchases GameCenter integration ARKit support and more Loading and using an existing plugin An iOS plugin requires a gdip configuration file a binary file which can be either a static library or xcframework containing a static libraries and possibly other dependencies To use it you need to Copy the plugin s files to your Godot project s res ios plugins directory You can also group files in a sub directory like res ios plugins my_plugin The Godot editor automatically detects and imports gdip files inside res ios plugins and its subdirectories You can find and activate detected plugins by going to Project Export iOS and in the Options tab scrolling to the Plugins section When a plugin is active you can access it in your using Engine get_singleton if Engine has_singleton MyPlugin var singleton Engine get_singleton MyPlugin print singleton foo Copy to clipboard Note The plugin s files have to be in the res ios plugins directory or a subdirectory otherwise the Godot editor will not automatically detect them Creating an iOS plugin At its core a Godot iOS plugin is an iOS library a archive file or xcframework containing static libraries with the following requirements The library must have a dependency on the Godot engine headers The library must come with a gdip configuration file An iOS plugin can have the same functionality as a Godot module but provides more flexibility and doesn t require to rebuild the engine Here are the steps to get a plugin s development started We recommend using Xcode as your development environment See also The Godot iOS Plugins The Godot iOS plugin template gives you all the boilerplate you need to get your iOS plugin started To build an iOS plugin Create an Objective C static library for your plugin inside Xcode Add the Godot engine header files as a dependency for your plugin library in HEADER_SEARCH_PATHS You can find the setting inside the Build Settings tab Download the Godot engine source from the Godot GitHub page Run SCons to generate headers You can learn the process by reading Compiling for iOS You don t have to wait for compilation to complete to move forward as headers are generated before the engine starts to compile You should use the same header files for iOS plugins and for the iOS export template In the Build Settings tab specify the compilation flags for your static library in OTHER_CFLAGS The most important ones are fcxx modules fmodules and DDEBUG if you need debug support Other flags should be the same you use to compile Godot For instance DPTRCALL_ENABLED DDEBUG_ENABLED DDEBUG_MEMORY_ALLOC DDISABLE_FORCED_INLINE DTYPED_METHOD_BIND Copy to clipboard Add the required logic for your plugin and build your library to generate a a file You will probably need to build both debug and release target a files Depending on your needs pick either or both If you need both debug and release a files their name should match following pattern PluginName TargetType a You can also build the static library with your SCons configuration The iOS plugin system also supports xcframework files To generate one you can use a command such as xcodebuild create xcframework library DeviceLibrary a library SimulatorLibrary a output PluginName xcframework Copy to clipboard Create a Godot iOS Plugin configuration file to help the system detect and load your plugin The configuration file extension must be gdip e g MyPlugin gdip The configuration file format is as follow config name MyPlugin binary MyPlugin a initialization init_my_plugin deinitialization deinit_my_plugin dependencies linked embedded system Foundation framework capabilities arkit metal files data json linker_flags ObjC plist PlistKeyWithDefaultType Some Info plist key you might need StringPlistKey string String value IntegerPlistKey integer 42 BooleanPlistKey boolean true RawPlistKey raw array string UIInterfaceOrientationPortrait string array StringPlistKeyToInput string_input Type something Copy to clipboard The config section and fields are required and defined as follow name name of the plugin binary this should be the filepath of the plugin library a or xcframework file The filepath can be relative e g MyPlugin a MyPlugin xcframework in which case it s relative to the directory where the gdip file is located The filepath can be absolute res some_path MyPlugin a or res some_path MyPlugin xcframework In case you need multitarget library usage the filename should be MyPlugin a and a files should be named as MyPlugin release a and MyPlugin debug a In case you use multitarget xcframework libraries their filename in the configuration should be MyPlugin xcframework The xcframework files should be named as MyPlugin release xcframework and MyPlugin debug xcframework The dependencies and plist sections are optional and defined as follow dependencies linked contains a list of iOS frameworks that the iOS application should be linked with embedded contains a list of iOS frameworks or libraries that should be both linked and embedded into the resulting iOS application system contains a list of iOS system frameworks that are required for plugin capabilities contains a list of iOS capabilities that is required for plugin A list of available capabilities can be found at Apple UIRequiredDeviceCapabilities documentation page files contains a list of files that should be copied on export This is useful for data files or images linker_flags contains a list of linker flags to add to the Xcode project when exporting the plugin plist should have keys and values that should be present in Info plist file Each line should follow pattern KeyName KeyType KeyValue Supported values for KeyType are string integer boolean raw string_input If no type is used e g KeyName KeyValue string type will be used If raw type is used value for corresponding key will be stored in Info plist as is If string_input type is used you will be able to modify value in Export window User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Plugins for iOS Godot provides StoreKit GameCenter iCloud services and other plugins They are using same model of asynchronous calls explained below ARKit and Camera access are also provided as plugins Latest updates documentation and source code can be found at Godot iOS plugins repository Accessing plugin singletons To access plugin functionality you first need to check that the plugin is exported and available by calling the Engine has_singleton function which returns a registered singleton Here s an example of how to do this in GDScript var in_app_store var game_center func _ready if Engine has_singleton InAppStore in_app_store Engine get_singleton InAppStore else print iOS IAP plugin is not available on this platform if Engine has_singleton GameCenter game_center Engine get_singleton GameCenter else print iOS Game Center plugin is not available on this platform Copy to clipboard Asynchronous methods When requesting an asynchronous operation the method will look like this Error purchase Variant params Copy to clipboard The parameter will usually be a Dictionary with the information necessary to make the request and the call will have two phases First the method will immediately return an Error value If the Error is not OK the call operation is completed with an error probably caused locally no internet connection API incorrectly configured etc If the error value is OK a response event will be produced and added to the pending events queue Example func on_purchase_pressed var result in_app_store purchase product_id my_product if result OK animation play busy show the waiting for response animation else show_error put this on a 1 second timer or something func check_events while in_app_store get_pending_event_count 0 var event in_app_store pop_pending_event if event type purchase if event result ok show_success event product_id else show_error Copy to clipboard Remember that when a call returns OK the API will always produce an event through the pending_event interface even if it s an error or a network timeout etc You should be able to for example safely block the interface waiting for a reply from the server If any of the APIs don t behave this way it should be treated as a bug The pending event interface consists of two methods get_pending_event_count Returns the number of pending events on the queue Variant pop_pending_event Pops the first event from the queue and returns it Store Kit Implemented in Godot iOS InAppStore plugin The Store Kit API is accessible through the InAppStore singleton It is initialized automatically The following methods are available and documented below Error purchase Variant params Error request_product_info Variant params Error restore_purchases void set_auto_finish_transaction bool enable void finish_transaction String product_id and the pending events interface int get_pending_event_count Variant pop_pending_event Copy to clipboard purchase Purchases a product ID through the Store Kit API You have to call finish_transaction product_id once you receive a successful response or call set_auto_finish_transaction true prior to calling purchase These two methods ensure the transaction is completed Parameters Takes a dictionary as a parameter with one field product_id a string with your product ID Example var result in_app_store purchase product_id my_product Copy to clipboard Response event The response event will be a dictionary with the following fields On error type purchase result error product_id the product ID requested Copy to clipboard On success type purchase result ok product_id the product ID requested Copy to clipboard request_product_info Requests the product info on a list of product IDs Parameters Takes a dictionary as a parameter with a single product_ids key to which a string array of product IDs is assigned Example var result in_app_store request_product_info product_ids my_product1 my_product2 Copy to clipboard Response event The response event will be a dictionary with the following fields type product_info result ok invalid_ids list of requested IDs that were invalid ids list of IDs that were valid titles list of valid product titles corresponds with list of valid IDs descriptions list of valid product descriptions prices list of valid product prices localized_prices list of valid product localized prices Copy to clipboard restore_purchases Restores previously made purchases on user s account This will create response events for each previously purchased product ID Response event The response events will be dictionaries with the following fields type restore result ok product_id product ID of restored purchase Copy to clipboard set_auto_finish_transaction If set to true once a purchase is successful your purchase will be finalized automatically Call this method prior to calling purchase Parameters Takes a boolean as a parameter which specifies if purchases should be automatically finalized Example in_app_store set_auto_finish_transaction true Copy to clipboard finish_transaction If you don t want transactions to be automatically finalized call this method after you receive a successful purchase response Parameters Takes a string product_id as an argument product_id specifies what product to finalize the purchase on Example in_app_store finish_transaction my_product1 Copy to clipboard Game Center Implemented in Godot iOS GameCenter plugin The Game Center API is available through the GameCenter singleton It has the following methods Error authenticate bool is_authenticated Error post_score Variant score Error award_achievement Variant params void reset_achievements void request_achievements void request_achievement_descriptions Error show_game_center Variant params Error request_identity_verification_signature Copy to clipboard and the pending events interface int get_pending_event_count Variant pop_pending_event Copy to clipboard authenticate Authenticates a user in Game Center Response event The response event will be a dictionary with the following fields On error type authentication result error error_code the value from NSError code error_description the value from NSError localizedDescription Copy to clipboard On success type authentication result ok player_id the value from GKLocalPlayer playerID Copy to clipboard post_score Posts a score to a Game Center leaderboard Parameters Takes a dictionary as a parameter with two fields score a float number category a string with the category name Example var result game_center post_score score 100 category my_leaderboard Copy to clipboard Response event The response event will be a dictionary with the following fields On error type post_score result error error_code the value from NSError code error_description the value from NSError localizedDescription Copy to clipboard On success type post_score result ok Copy to clipboard award_achievement Modifies the progress of a Game Center achievement Parameters Takes a Dictionary as a parameter with 3 fields name string the achievement name progress float the achievement progress from 0 0 to 100 0 passed to GKAchievement percentComplete show_completion_banner bool whether Game Center should display an achievement banner at the top of the screen Example var result award_achievement name hard_mode_completed progress 6 1 Copy to clipboard Response event The response event will be a dictionary with the following fields On error type award_achievement result error error_code the error code taken from NSError code Copy to clipboard On success type award_achievement result ok Copy to clipboard reset_achievements Clears all Game Center achievements The function takes no parameters Response event The response event will be a dictionary with the following fields On error type reset_achievements result error error_code the value from NSError code Copy to clipboard On success type reset_achievements result ok Copy to clipboard request_achievements Request all the Game Center achievements the player has made progress on The function takes no parameters Response event The response event will be a dictionary with the following fields On error type achievements result error error_code the value from NSError code Copy to clipboard On success type achievements result ok names list of the name of each achievement progress list of the progress made on each achievement Copy to clipboard request_achievement_descriptions Request the descriptions of all existing Game Center achievements regardless of progress The function takes no parameters Response event The response event will be a dictionary with the following fields On error type achievement_descriptions result error error_code the value from NSError code Copy to clipboard On success type achievement_descriptions result ok names list of the name of each achievement titles list of the title of each achievement unachieved_descriptions list of the description of each achievement when it is unachieved achieved_descriptions list of the description of each achievement when it is achieved maximum_points list of the points earned by completing each achievement hidden list of booleans indicating whether each achievement is initially visible replayable list of booleans indicating whether each achievement can be earned more than once Copy to clipboard show_game_center Displays the built in Game Center overlay showing leaderboards achievements and challenges Parameters Takes a Dictionary as a parameter with two fields view string optional the name of the view to present Accepts default leaderboards achievements or challenges Defaults to default leaderboard_name string optional the name of the leaderboard to present Only used when view is leaderboards or default is configured to show leaderboards If not specified Game Center will display the aggregate leaderboard Examples var result show_game_center view leaderboards leaderboard_name best_time_leaderboard var result show_game_center view achievements Copy to clipboard Response event The response event will be a dictionary with the following fields On close type show_game_center result ok Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Web The JavaScriptBridge Singleton HTML5 shell class reference Custom HTML page for Web export Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue The JavaScriptBridge Singleton In web builds the JavaScriptBridge singleton allows interaction with JavaScript and web browsers and can be used to implement some functionalities unique to the web platform Interacting with JavaScript Sometimes when exporting Godot for the Web it might be necessary to interface with external JavaScript code like third party SDKs libraries or simply to access browser features that are not directly exposed by Godot The JavaScriptBridge singleton provides methods to wrap a native JavaScript object into a Godot JavaScriptObject that tries to feel natural in the context of Godot scripting e g GDScript and C The JavaScriptBridge get_interface method retrieves an object in the global scope extends Node func _ready Retrieve the window console object var console JavaScriptBridge get_interface console Call the window console log method console log test Copy to clipboard The JavaScriptBridge create_object creates a new object via the JavaScript new constructor extends Node func _ready Call the JavaScript new operator on the window Array object Passing 10 as argument to the constructor JS new Array 10 var arr JavaScriptBridge create_object Array 10 Set the first element of the JavaScript array to the number 42 arr 0 42 Call the pop function on the JavaScript array arr pop Print the value of the length property of the array 9 after the pop print arr length Copy to clipboard As you can see by wrapping JavaScript objects into JavaScriptObject you can interact with them like they were native Godot objects calling their methods and retrieving or even setting their properties Base types int floats strings booleans are automatically converted floats might lose precision when converted from Godot to JavaScript Anything else i e objects arrays functions are seen as JavaScriptObjects themselves Callbacks Calling JavaScript code from Godot is nice but sometimes you need to call a Godot function from JavaScript instead This case is a bit more complicated JavaScript relies on garbage collection while Godot uses reference counting for memory management This means you have to explicitly create callbacks which are returned as JavaScriptObjects themselves and you have to keep their reference Arguments passed by JavaScript to the callback will be passed as a single Godot Array extends Node Here we create a reference to the _my_callback function below This reference will be kept until the node is freed var _callback_ref JavaScriptBridge create_callback _my_callback func _ready Get the JavaScript window object var window JavaScriptBridge get_interface window Set the window onbeforeunload DOM event listener window onbeforeunload _callback_ref func _my_callback args Get the first argument the DOM event in our case var js_event args 0 Call preventDefault and set the returnValue property of the DOM event js_event preventDefault js_event returnValue Copy to clipboard Here is another example that asks the user for the Notification permission and waits asynchronously to deliver a notification if the permission is granted extends Node Here we create a reference to the _on_permissions function below This reference will be kept until the node is freed var _permission_callback JavaScriptBridge create_callback _on_permissions func _ready NOTE This is done in _ready for simplicity but SHOULD BE done in response to user input instead e g during _input or button_pressed event etc otherwise it might not work Get the window Notification JavaScript object var notification JavaScriptBridge get_interface Notification Call the window Notification requestPermission method which returns a JavaScript Promise and bind our callback to it notification requestPermission then _permission_callback func _on_permissions args The first argument of this callback is the string granted if the permission is granted var permission args 0 if permission granted print Permission granted sending notification Create the notification new Notification Hi there JavaScriptBridge create_object Notification Hi there else print No notification permission Copy to clipboard Can I use my favorite library You most likely can First you have to include your library in the page You can simply customize the Head Include during export see below or even write your own template In the example below we customize the Head Include to add an external library axios from a content delivery network and a second script tag to define our own custom function Axios script src https cdn jsdelivr net npm axios dist axios min js script Custom function script function myFunc alert My func script Copy to clipboard We can then access both the library and the function from Godot like we did in previous examples extends Node Here create a reference to the _on_get function below This reference will be kept until the node is freed var _callback JavaScriptBridge create_callback _on_get func _ready Get the window object where globally defined functions are var window JavaScriptBridge get_interface window Call the JavaScript myFunc function defined in the custom HTML head window myFunc Get the axios library loaded from a CDN in the custom HTML head var axios JavaScriptBridge get_interface axios Make a GET request to the current location and receive the callback when done axios get window location toString then _callback func _on_get args OS alert On Get Copy to clipboard The eval interface The eval method works similarly to the JavaScript function of the same name It takes a string as an argument and executes it as JavaScript code This allows interacting with the browser in ways not possible with script languages integrated into Godot GDScript C func my_func JavaScriptBridge eval alert Calling JavaScript per GDScript Copy to clipboard private void MyFunc JavaScriptBridge Eval alert Calling JavaScript per C Copy to clipboard The value of the last JavaScript statement is converted to a GDScript value and returned by eval under certain circumstances JavaScript number is returned as float JavaScript boolean is returned as bool JavaScript string is returned as String JavaScript ArrayBuffer TypedArray and DataView are returned as PackedByteArray GDScript C func my_func2 var js_return JavaScriptBridge eval var myNumber 1 myNumber 2 print js_return prints 3 0 Copy to clipboard private void MyFunc2 var jsReturn JavaScriptBridge Eval var myNumber 1 myNumber 2 GD Print jsReturn prints 3 0 Copy to clipboard Any other JavaScript value is returned as null HTML5 export templates may be built without support for the singleton to improve security With such templates and on platforms other than HTML5 calling JavaScriptBridge eval will also return null The availability of the singleton can be checked with the web feature tag GDScript C func my_func3 if OS has_feature web JavaScriptBridge eval console log The JavaScriptBridge singleton is available else print The JavaScriptBridge singleton is NOT available Copy to clipboard private void MyFunc3 if OS HasFeature web JavaScriptBridge Eval console log The JavaScriptBridge singleton is available else GD Print The JavaScriptBridge singleton is NOT available Copy to clipboard Tip GDScript s multi line strings surrounded by 3 quotes as in my_func3 above are useful to keep JavaScript code readable The eval method also accepts a second optional Boolean argument which specifies whether to execute the code in the global execution context defaulting to false to prevent polluting the global namespace GDScript C func my_func4 execute in global execution context thus adding a new JavaScript global variable SomeGlobal JavaScriptBridge eval var SomeGlobal true Copy to clipboard private void MyFunc4 execute in global execution context thus adding a new JavaScript global variable SomeGlobal JavaScriptBridge Eval var SomeGlobal true Copy to clipboard Downloading files Downloading files e g a save game from the Godot Web export to the user s computer can be done by directly interacting with JavaScript but given it is a very common use case Godot exposes this functionality to scripting via a dedicated JavaScriptBridge download_buffer function which lets you download any generated buffer Here is a minimal example on how to use it extends Node func _ready Asks the user download a file called hello txt whose content will be the string Hello JavaScriptBridge download_buffer Hello to_utf8_buffer hello txt Copy to clipboard And here is a more complete example on how to download a previously saved file extends Node Open a file for reading and download it via the JavaScript singleton func _download_file path var file FileAccess open path FileAccess READ if file null push_error Failed to load file return Get the file name var fname path get_file Read the whole file to memory var buffer file get_buffer file get_len Prompt the user to download the file will have the same name as the input file JavaScriptBridge download_buffer buffer fname func _ready Create a temporary file var config ConfigFile new config set_value option one false config save tmp test cfg Download it _download_file tmp test cfg Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request HTML5 shell class reference Projects exported for the Web expose the Engine class to the JavaScript environment that allows fine control over the engine s start up process This API is built in an asynchronous manner and requires basic understanding of Promises Engine The Engine class provides methods for loading and starting exported projects on the Web For default export settings this is already part of the exported HTML page To understand practical use of the Engine class see Custom HTML page for Web export Static Methods Promise load string basePath void unload boolean isWebGLAvailable number majorVersion 1 Instance Methods Promise init string basePath Promise preloadFile string ArrayBuffer file string path Promise start EngineConfig override Promise startGame EngineConfig override void copyToFS string path ArrayBuffer buffer void requestQuit class Engine initConfig Create a new Engine instance with the given configuration Arguments initConfig EngineConfig The initial config for this instance Static Methods Engine load basePath Load the engine from the specified base path Arguments basePath string Base path of the engine to load Returns A Promise that resolves once the engine is loaded Return type Promise Engine unload Unload the engine to free memory This method will be called automatically depending on the configuration See unloadAfterInit Engine isWebGLAvailable majorVersion 1 Check whether WebGL is available Optionally specify a particular version of WebGL to check for Arguments majorVersion number The major WebGL version to check for Returns If the given major version of WebGL is available Return type boolean Instance Methods Engine prototype init basePath Initialize the engine instance Optionally pass the base path to the engine to load it if it hasn t been loaded yet See Engine load Arguments basePath string Base path of the engine to load Returns A Promise that resolves once the engine is loaded and initialized Return type Promise Engine prototype preloadFile file path Load a file so it is available in the instance s file system once it runs Must be called before starting the instance If not provided the path is derived from the URL of the loaded file Arguments file string ArrayBuffer The file to preload If a string the file will be loaded from that path If an ArrayBuffer or a view on one the buffer will used as the content of the file path string Path by which the file will be accessible Required if file is not a string Returns A Promise that resolves once the file is loaded Return type Promise Engine prototype start override Start the engine instance using the given override configuration if any startGame can be used in typical cases instead This will initialize the instance if it is not initialized For manual initialization see init The engine must be loaded beforehand Fails if a canvas cannot be found on the page or not specified in the configuration Arguments override EngineConfig An optional configuration override Returns Promise that resolves once the engine started Return type Promise Engine prototype startGame override Start the game instance using the given configuration override if any This will initialize the instance if it is not initialized For manual initialization see init This will load the engine if it is not loaded and preload the main pck This method expects the initial config or the override to have both the executable and mainPack properties set normally done by the editor during export Arguments override EngineConfig An optional configuration override Returns Promise that resolves once the game started Return type Promise Engine prototype copyToFS path buffer Create a file at the specified path with the passed as buffer in the instance s file system Arguments path string The location where the file will be created buffer ArrayBuffer The content of the file Engine prototype requestQuit Request that the current instance quit This is akin the user pressing the close button in the window manager and will have no effect if the engine has crashed or is stuck in a loop Engine configuration An object used to configure the Engine instance based on godot export options and to override those in custom HTML templates if needed Properties type name boolean unloadAfterInit HTMLCanvasElement canvas string executable string mainPack string locale number canvasResizePolicy Array string args function onExecute function onExit function onProgress function onPrint function onPrintError EngineConfig The Engine configuration object This is just a typedef create it like a regular object e g const MyConfig executable godot unloadAfterInit false Property Descriptions unloadAfterInit Whether the unload the engine automatically after the instance is initialized Type boolean Value true canvas The HTML DOM Canvas object to use By default the first canvas element in the document will be used is none is specified Type HTMLCanvasElement Value null executable The name of the WASM file without the extension Set by Godot Editor export process Type string Value mainPack An alternative name for the game pck to load The executable name is used otherwise Type string Value null locale Specify a language code to select the proper localization for the game The browser locale will be used if none is specified See complete list of supported locales Type string Value null canvasResizePolicy The canvas resize policy determines how the canvas should be resized by Godot 0 means Godot won t do any resizing This is useful if you want to control the canvas size from javascript code in your template 1 means Godot will resize the canvas on start and when changing window size via engine functions 2 means Godot will adapt the canvas size to match the whole browser window Type number Value 2 args The arguments to be passed as command line arguments on startup See command line tutorial Note startGame will always add the main pack argument Type Array string Value onExecute path args A callback function for handling Godot s OS execute calls This is for example used in the Web Editor template to switch between Project Manager and editor and for running the game Arguments path string The path that Godot s wants executed args Array The arguments of the command to execute onExit status_code A callback function for being notified when the Godot instance quits Note This function will not be called if the engine crashes or become unresponsive Arguments status_code number The status code returned by Godot on exit onProgress current total A callback function for displaying download progress The function is called once per frame while downloading files so the usage of requestAnimationFrame is not necessary If the callback function receives a total amount of bytes as 0 this means that it is impossible to calculate Possible reasons include Files are delivered with server side chunked compression Files are delivered with server side compression on Chromium Not all file downloads have started yet usually on servers without multi threading Arguments current number The current amount of downloaded bytes so far total number The total amount of bytes to be downloaded onPrint var_args A callback function for handling the standard output stream This method should usually only be used in debug pages By default console log is used Arguments var_args A variadic number of arguments to be printed onPrintError var_args A callback function for handling the standard error stream This method should usually only be used in debug pages By default console error is used Arguments var_args A variadic number of arguments to be printed as errors User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Custom HTML page for Web export While Web export templates provide a default HTML page fully capable of launching the project without any further customization it may be beneficial to create a custom HTML page While the game itself cannot easily be directly controlled from the outside yet such page allows to customize the initialization process for the engine Some use cases where customizing the default page is useful include Loading files from a different directory than the page Loading a zip file instead of a pck file as the main pack Loading the engine from a different directory than the main pack file Adding a click to play button so that games can be started in the fullscreen mode Loading some extra files before the engine starts making them available in the project file system as soon as possible Passing custom command line arguments e g s to start a MainLoop script The default HTML page is available in the Godot Engine repository at misc dist html full size html but the following template can be used as a much simpler example DOCTYPE html html head title My Template title meta charset UTF 8 head body canvas id canvas canvas script src GODOT_URL script script var engine new Engine GODOT_CONFIG engine startGame script body html Copy to clipboard Setup As shown by the example above it is mostly a regular HTML document with few placeholders which needs to be replaced during export an html canvas element and some simple JavaScript code that calls the Engine class The only required placeholders are GODOT_URL The name of the main JavaScript file which provides the Engine class required to start the engine and that must be included in the HTML as a script The name is generated from the Export Path during the export process GODOT_CONFIG A JavaScript object containing the export options and can be later overridden See EngineConfig for the full list of overrides The following optional placeholders will enable some extra features in your custom HTML template GODOT_PROJECT_NAME The project name as defined in the Project Settings It is a good idea to use it as a title in your template GODOT_HEAD_INCLUDE A custom string to include in the HTML document just before the end of the head tag It is customized in the export options under the Html Head Include section While you fully control the HTML page you create this variable can be useful for configuring parts of the HTML head element from the Godot Editor e g for different Web export presets GODOT_SPLASH Path to an image used as the boot splash as defined in the Project Settings When the custom page is ready it can be selected in the export options under the Html Custom Html Shell section Starting the project To be able to start the game you need to write a script that initializes the engine the control code This process consists of three steps but as shown here most of them can be skipped depending on how much customization is needed See the HTML5 shell class reference for the full list of methods and options available First the engine must be loaded then it needs to be initialized and after this the project can finally be started You can perform every of these steps manually and with great control However in the simplest case all you need to do is to create an instance of the Engine class with the exported configuration and then call the engine startGame method optionally overriding any EngineConfig parameters const engine new Engine GODOT_CONFIG engine startGame optional override configuration eg unloadAfterInit false canvasResizePolicy 0 Copy to clipboard This snippet of code automatically loads and initializes the engine before starting the game It uses the given configuration to load the engine The engine startGame method is asynchronous and returns a Promise This allows your control code to track if the game was loaded correctly without blocking execution or relying on polling In case your project needs to have special control over the start arguments and dependency files the engine start method can be used instead Note that this method do not automatically preload the pck file so you will probably want to manually preload it and any other extra file via the engine preloadFile method Optionally you can also manually engine init to perform specific actions after the module initialization but before the engine starts This process is a bit more complex but gives you full control over the engine startup process const myWasm mygame wasm const myPck mygame pck const engine new Engine Promise all Load and init the engine engine init myWasm And the pck concurrently engine preloadFile myPck then Now start the engine return engine start args main pack myPck then console log Engine has started Copy to clipboard To load the engine manually the Engine load static method must be called As this method is static multiple engine instances can be spawned if the share the same wasm Note Multiple instances cannot be spawned by default as the engine is immediately unloaded after it is initialized To prevent this from happening see the unloadAfterInit override option It is still possible to unload the engine manually afterwards by calling the Engine unload static method Unloading the engine frees browser memory by unloading files that are no longer needed once the instance is initialized Customizing the behavior In the Web environment several methods can be used to guarantee that the game will work as intended If you target a specific version of WebGL or just want to check if WebGL is available at all you can call the Engine isWebGLAvailable method It optionally takes an argument that allows to test for a specific major version of WebGL As the real executable file does not exist in the Web environment the engine only stores a virtual filename formed from the base name of loaded engine files This value affects the output of the OS get_executable_path method and defines the name of the automatically started main pack The executable override option can be used to override this value Customizing the presentation Several configuration options can be used to further customize the look and behavior of the game on your page By default the first canvas element on the page is used for rendering To use a different canvas element the canvas override option can be used It requires a reference to the DOM element itself const canvasElement document querySelector my canvas element engine startGame canvas canvasElement Copy to clipboard The way the engine resize the canvas can be configured via the canvasResizePolicy override option If your game takes some time to load it may be useful to display a custom loading UI which tracks the progress This can be achieved with the onProgress callback option which allows to set up a callback function that will be called regularly as the engine loads new bytes function printProgress current total console log Loaded current of total bytes engine startGame onProgress printProgress Copy to clipboard Be aware that in some cases total can be 0 This means that it cannot be calculated If your game supports multiple languages the locale override option can be used to force a specific locale provided you have a valid language code string It may be good to use server side logic to determine which languages a user may prefer This way the language code can be taken from the Accept Language HTTP header or determined by a GeoIP service Debugging To debug exported projects it may be useful to read the standard output and error streams generated by the engine This is similar to the output shown in the editor console window By default standard console log and console warn are used for the output and error streams respectively This behavior can be customized by setting your own functions to handle messages Use the onPrint override option to set a callback function for the output stream and the onPrintError override option to set a callback function for the error stream function print text console log text function printError text console warn text engine startGame onPrint print onPrintError printError Copy to clipboard When handling the engine output keep in mind that it may not be desirable to print it out in the finished product User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Console support in Godot Console porting process In order to develop for consoles in Godot you need access to the console SDK and export templates for it These export templates need to be developed either by yourself or someone hired to do it or provided by a third party company Currently the only console Godot officially supports is Steam Deck through the official Linux export templates The reason other consoles are not officially supported are To develop for consoles one must be licensed as a company As an open source project Godot has no legal structure to provide console ports Console SDKs are secret and covered by non disclosure agreements Even if we could get access to them we could not publish the platform specific code under an open source license As explained however it is possible to port your games to consoles thanks to services provided by third party companies Note In practice the process is quite similar to Unity and Unreal Engine In other words there is no engine that is legally allowed to distribute console export templates without requiring the user to prove that they are a licensed console developer Console publishing process Regardless of the engine used to create the game the process to publish a game to a console platform is as follows Register a developer account on the console manufacturer s website then sign NDAs and publishing contracts This requires you to have a registered legal entity Gain access to the publishing platform by passing the acceptance process This can take up to several months Note that this step is significantly easier if an established publisher is backing your game Nintendo is generally known to be more accepting of smaller developers but this is not guaranteed Get access to developer tools and order a console specially made for developers devkit The cost of those devkits is confidential Port the engine to the console platform or pay a company to do it To be published your game needs to be rated in the regions you d like to sell it in For example game ratings are handled by ESRB in North America and PEGI in Europe Indie developers can generally get a rating for cheaper compared to more established developers Due to the complexity of the process many studios and developers prefer to outsource console porting You can read more about the console publishing process in this article Godot and consoles all you need to know Third party support Console ports of Godot are offered by third party companies which have ported Godot on their own These companies also offer publishing of your games to various consoles Following is the list of providers Lone Wolf Technology offers Switch and Playstation 4 porting and publishing of Godot games Pineapple Works offers Switch Xbox One Xbox Series X S GDK porting and publishing of Godot games GDScript C RAWRLAB games offers Switch porting of Godot games mazette games offers Switch Xbox One and Xbox Series X S porting and publishing of Godot games Olde Sküül offers Switch Xbox One Playstation 4 Playstation 5 porting and publishing of Godot games Tuanisapps offers Switch porting and publishing of Godot games Seaven Studio offers Switch Xbox One Xbox Series PlayStation 4 PlayStation 5 porting of Godot games Sickhead Games offers console porting to Nintendo Switch PlayStation 4 PlayStation 5 Xbox One and Xbox Series X S for Godot games If your company offers porting or porting and publishing services for Godot games feel free to contact the Godot Foundation to add your company to the list above User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Plugins Editor plugins Running code in the editor Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Editor plugins Installing plugins Making plugins Making main screen plugins Import plugins 3D gizmo plugins Inspector plugins Visual Shader plugins Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Installing plugins Godot features an editor plugin system with numerous plugins developed by the community Plugins can extend the editor s functionality with new nodes additional docks convenience features and more Finding plugins The preferred way to find Godot plugins is to use the Asset Library While it can be browsed online it s more convenient to use it directly from the editor To do so click the AssetLib tab at the top of the editor You can also find assets on code hosting websites such as GitHub Note Some repositories describe themselves as plugins but may not actually be editor plugins This is especially the case for scripts that are intended to be used in a running project You don t need to enable such plugins to use them Download them and extract the files in your project folder One way to distinguish editor plugins from non editor plugins is to look for a plugin cfg file in the repository that hosts the plugin If the repository contains a plugin cfg file in a folder placed in the addons folder then it is an editor plugin Installing a plugin To install a plugin download it as a ZIP archive On the Asset Library this can be done using the Download button either from the editor or using the Web interface On GitHub if a plugin has tags versions declared go to the Releases tab to download a stable release This ensures you download a version that was declared to be stable by its author On GitHub if the plugin doesn t have any tags declared use the Download ZIP button to download a ZIP of the latest revision Extract the ZIP archive and move the addons folder it contains into your project folder If your project already contains an addons folder move the plugin s addons folder into your project folder to merge the new folder contents with the existing one Your file manager may ask you whether to write into the folder answer Yes No files will be overwritten in the process Enabling a plugin To enable the freshly installed plugin open Project Project Settings at the top of the editor then go the Plugins tab If the plugin was packaged correctly you should see it in the list of plugins Click on the Enable checkbox to enable the plugin You can use the plugin immediately after enabling it there s no need to restart the editor Likewise disabling a plugin can be done without having to restart the editor User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Making plugins About plugins A plugin is a great way to extend the editor with useful tools It can be made entirely with GDScript and standard scenes without even reloading the editor Unlike modules you don t need to create C code nor recompile the engine While this makes plugins less powerful there are still many things you can do with them Note that a plugin is similar to any scene you can already make except it is created using a script to add editor functionality This tutorial will guide you through the creation of two plugins so you can understand how they work and be able to develop your own The first is a custom node that you can add to any scene in the project and the other is a custom dock added to the editor Creating a plugin Before starting create a new empty project wherever you want This will serve as a base to develop and test the plugins The first thing you need for the editor to identify a new plugin is to create two files a plugin cfg for configuration and a tool script with the functionality Plugins have a standard path like addons plugin_name inside the project folder Godot provides a dialog for generating those files and placing them where they need to be In the main toolbar click the Project dropdown Then click Project Settings Go to the Plugins tab and then click on the Create New Plugin button in the top right You will see the dialog appear like so The placeholder text in each field describes how it affects the plugin s creation of the files and the config file s values To continue with the example use the following values GDScript C Plugin Name My Custom Node Subfolder my_custom_node Description A custom node made to extend the Godot Engine Author Your Name Here Version 1 0 0 Language GDScript Script Name custom_node gd Activate now No Copy to clipboard Plugin Name My Custom Node Subfolder MyCustomNode Description A custom node made to extend the Godot Engine Author Your Name Here Version 1 0 0 Language C Script Name CustomNode cs Activate now No Copy to clipboard Warning Unchecking the Activate now option in C is always required because like every other C script the EditorPlugin script needs to be compiled which requires building the project After building the project the plugin can be enabled in the Plugins tab of Project Settings You should end up with a directory structure like this plugin cfg is an INI file with metadata about your plugin The name and description help people understand what it does Your name helps you get properly credited for your work The version number helps others know if they have an outdated version if you are unsure on how to come up with the version number check out Semantic Versioning The main script file will instruct Godot what your plugin does in the editor once it is active The script file Upon creation of the plugin the dialog will automatically open the EditorPlugin script for you The script has two requirements that you cannot change it must be a tool script or else it will not load properly in the editor and it must inherit from EditorPlugin Warning In addition to the EditorPlugin script any other GDScript that your plugin uses must also be a tool Any GDScript without tool used by the editor will act like an empty file It s important to deal with initialization and clean up of resources A good practice is to use the virtual function _enter_tree to initialize your plugin and _exit_tree to clean it up Thankfully the dialog generates these callbacks for you Your script should look something like this GDScript C tool extends EditorPlugin func _enter_tree Initialization of the plugin goes here pass func _exit_tree Clean up of the plugin goes here pass Copy to clipboard if TOOLS using Godot Tool public partial class CustomNode EditorPlugin public override void _EnterTree Initialization of the plugin goes here public override void _ExitTree Clean up of the plugin goes here endif Copy to clipboard This is a good template to use when creating new plugins A custom node Sometimes you want a certain behavior in many nodes such as a custom scene or control that can be reused Instancing is helpful in a lot of cases but sometimes it can be cumbersome especially if you re using it in many projects A good solution to this is to make a plugin that adds a node with a custom behavior Warning Nodes added via an EditorPlugin are CustomType nodes While they work with any scripting language they have fewer features than the Script Class system If you are writing GDScript or NativeScript we recommend using Script Classes instead To create a new node type you can use the function add_custom_type from the EditorPlugin class This function can add new types to the editor nodes or resources However before you can create the type you need a script that will act as the logic for the type While that script doesn t have to use the tool annotation it can be added so the script runs in the editor For this tutorial we ll create a button that prints a message when clicked For that we ll need a script that extends from Button It could also extend BaseButton if you prefer GDScript C tool extends Button func _enter_tree pressed connect clicked func clicked print You clicked me Copy to clipboard using Godot Tool public partial class MyButton Button public override void _EnterTree Pressed Clicked public void Clicked GD Print You clicked me Copy to clipboard That s it for our basic button You can save this as my_button gd inside the plugin folder You ll also need a 16 16 icon to show in the scene tree If you don t have one you can grab the default one from the engine and save it in your addons my_custom_node folder as icon png or use the default Godot logo preload res icon svg Tip SVG images that are used as custom node icons should have the Editor Scale With Editor Scale and Editor Convert Colors With Editor Theme import options enabled This allows icons to follow the editor s scale and theming settings if the icons are designed with the same color palette as Godot s own icons Now we need to add it as a custom type so it shows on the Create New Node dialog For that change the custom_node gd script to the following GDScript C tool extends EditorPlugin func _enter_tree Initialization of the plugin goes here Add the new type with a name a parent type a script and an icon add_custom_type MyButton Button preload my_button gd preload icon png func _exit_tree Clean up of the plugin goes here Always remember to remove it from the engine when deactivated remove_custom_type MyButton Copy to clipboard if TOOLS using Godot Tool public partial class CustomNode EditorPlugin public override void _EnterTree Initialization of the plugin goes here Add the new type with a name a parent type a script and an icon var script GD Load Script res addons MyCustomNode MyButton cs var texture GD Load Texture2D res addons MyCustomNode Icon png AddCustomType MyButton Button script texture public override void _ExitTree Clean up of the plugin goes here Always remember to remove it from the engine when deactivated RemoveCustomType MyButton endif Copy to clipboard With that done the plugin should already be available in the plugin list in the Project Settings so activate it as explained in Checking the results Then try it out by adding your new node When you add the node you can see that it already has the script you created attached to it Set a text to the button save and run the scene When you click the button you can see some text in the console A custom dock Sometimes you need to extend the editor and add tools that are always available An easy way to do it is to add a new dock with a plugin Docks are just scenes based on Control so they are created in a way similar to usual GUI scenes Creating a custom dock is done just like a custom node Create a new plugin cfg file in the addons my_custom_dock folder then add the following content to it GDScript C plugin name My Custom Dock description A custom dock made so I can learn how to make plugins author Your Name Here version 1 0 script custom_dock gd Copy to clipboard plugin name My Custom Dock description A custom dock made so I can learn how to make plugins author Your Name Here version 1 0 script CustomDock cs Copy to clipboard Then create the script custom_dock gd in the same folder Fill it with the template we ve seen before to get a good start Since we re trying to add a new custom dock we need to create the contents of the dock This is nothing more than a standard Godot scene just create a new scene in the editor then edit it For an editor dock the root node must be a Control or one of its child classes For this tutorial you can create a single button The name of the root node will also be the name that appears on the dock tab so be sure to give it a short and descriptive name Also don t forget to add some text to your button Save this scene as my_dock tscn Now we need to grab the scene we created then add it as a dock in the editor For this you can rely on the function add_control_to_dock from the EditorPlugin class You need to select a dock position and define the control to add which is the scene you just created Don t forget to remove the dock when the plugin is deactivated The script could look like this GDScript C tool extends EditorPlugin A class member to hold the dock during the plugin life cycle var dock func _enter_tree Initialization of the plugin goes here Load the dock scene and instantiate it dock preload res addons my_custom_dock my_dock tscn instantiate Add the loaded scene to the docks add_control_to_dock DOCK_SLOT_LEFT_UL dock Note that LEFT_UL means the left of the editor upper left dock func _exit_tree Clean up of the plugin goes here Remove the dock remove_control_from_docks dock Erase the control from the memory dock free Copy to clipboard if TOOLS using Godot Tool public partial class CustomDock EditorPlugin private Control _dock public override void _EnterTree _dock GD Load PackedScene res addons MyCustomDock MyDock tscn Instantiate Control AddControlToDock DockSlot LeftUl _dock public override void _ExitTree Clean up of the plugin goes here Remove the dock RemoveControlFromDocks _dock Erase the control from the memory _dock Free endif Copy to clipboard Note that while the dock will initially appear at its specified position the user can freely change its position and save the resulting layout Checking the results It s now time to check the results of your work Open the Project Settings and click on the Plugins tab Your plugin should be the only one on the list You can see the plugin is not enabled Click the Enable checkbox to activate the plugin The dock should become visible before you even close the settings window You should now have a custom dock Going beyond Now that you ve learned how to make basic plugins you can extend the editor in several ways Lots of functionality can be added to the editor with GDScript it is a powerful way to create specialized editors without having to delve into C modules You can make your own plugins to help yourself and share them in the Asset Library so that people can benefit from your work Registering autoloads singletons in plugins It is possible for editor plugins to automatically register autoloads when the plugin is enabled This also includes unregistering the autoload when the plugin is disabled This makes setting up plugins faster for users as they no longer have to manually add autoloads to their project settings if your editor plugin requires the use of an autoload Use the following code to register a singleton from an editor plugin GDScript C tool extends EditorPlugin Replace this value with a PascalCase autoload name as per the GDScript style guide const AUTOLOAD_NAME SomeAutoload func _enter_tree The autoload can be a scene or script file add_autoload_singleton AUTOLOAD_NAME res addons my_addon some_autoload tscn func _exit_tree remove_autoload_singleton AUTOLOAD_NAME Copy to clipboard if TOOLS using Godot Tool public partial class MyEditorPlugin EditorPlugin Replace this value with a PascalCase autoload name private const string AutoloadName SomeAutoload public override void _EnterTree The autoload can be a scene or script file AddAutoloadSingleton AutoloadName res addons MyAddon SomeAutoload tscn public override void _ExitTree RemoveAutoloadSingleton AutoloadName endif Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Making main screen plugins What this tutorial covers Main screen plugins allow you to create new UIs in the central part of the editor which appear next to the 2D 3D Script and AssetLib buttons Such editor plugins are referred as Main screen plugins This tutorial leads you through the creation of a basic main screen plugin For the sake of simplicity our main screen plugin will contain a single button that prints text to the console Initializing the plugin First create a new plugin from the Plugins menu For this tutorial we ll put it in a folder called main_screen but you can use any name you d like The plugin script will come with _enter_tree and _exit_tree methods but for a main screen plugin we need to add a few extra methods Add five extra methods such that the script looks like this GDScript C tool extends EditorPlugin func _enter_tree pass func _exit_tree pass func _has_main_screen return true func _make_visible visible pass func _get_plugin_name return Main Screen Plugin func _get_plugin_icon return EditorInterface get_editor_theme get_icon Node EditorIcons Copy to clipboard if TOOLS using Godot Tool public partial class MainScreenPlugin EditorPlugin public override void _EnterTree public override void _ExitTree public override bool _HasMainScreen return true public override void _MakeVisible bool visible public override string _GetPluginName return Main Screen Plugin public override Texture2D _GetPluginIcon return EditorInterface GetEditorTheme GetIcon Node EditorIcons endif Copy to clipboard The important part in this script is the _has_main_screen function which is overloaded so it returns true This function is automatically called by the editor on plugin activation to tell it that this plugin adds a new center view to the editor For now we ll leave this script as is and we ll come back to it later Main screen scene Create a new scene with a root node derived from Control for this example plugin we ll make the root node a CenterContainer Select this root node and in the viewport click the Layout menu and select Full Rect You also need to enable the Expand vertical size flag in the inspector The panel now uses all the space available in the main viewport Next let s add a button to our example main screen plugin Add a Button node and set the text to Print Hello or similar Add a script to the button like this GDScript C tool extends Button func _on_print_hello_pressed print Hello from the main screen plugin Copy to clipboard using Godot Tool public partial class PrintHello Button private void OnPrintHelloPressed GD Print Hello from the main screen plugin Copy to clipboard Then connect the pressed signal to itself If you need help with signals see the Using signals article We are done with the main screen panel Save the scene as main_panel tscn Update the plugin script We need to update the main_screen_plugin gd script so the plugin instances our main panel scene and places it where it needs to be Here is the full plugin script GDScript C tool extends EditorPlugin const MainPanel preload res addons main_screen main_panel tscn var main_panel_instance func _enter_tree main_panel_instance MainPanel instantiate Add the main panel to the editor s main viewport EditorInterface get_editor_main_screen add_child main_panel_instance Hide the main panel Very much required _make_visible false func _exit_tree if main_panel_instance main_panel_instance queue_free func _has_main_screen return true func _make_visible visible if main_panel_instance main_panel_instance visible visible func _get_plugin_name return Main Screen Plugin func _get_plugin_icon Must return some kind of Texture for the icon return EditorInterface get_editor_theme get_icon Node EditorIcons Copy to clipboard if TOOLS using Godot Tool public partial class MainScreenPlugin EditorPlugin PackedScene MainPanel ResourceLoader Load PackedScene res addons main_screen main_panel tscn Control MainPanelInstance public override void _EnterTree MainPanelInstance Control MainPanel Instantiate Add the main panel to the editor s main viewport EditorInterface GetEditorMainScreen AddChild MainPanelInstance Hide the main panel Very much required _MakeVisible false public override void _ExitTree if MainPanelInstance null MainPanelInstance QueueFree public override bool _HasMainScreen return true public override void _MakeVisible bool visible if MainPanelInstance null MainPanelInstance Visible visible public override string _GetPluginName return Main Screen Plugin public override Texture2D _GetPluginIcon Must return some kind of Texture for the icon return EditorInterface GetEditorTheme GetIcon Node EditorIcons endif Copy to clipboard A couple of specific lines were added MainPanel is a constant that holds a reference to the scene and we instance it into main_panel_instance The _enter_tree function is called before _ready This is where we instance the main panel scene and add them as children of specific parts of the editor We use EditorInterface get_editor_main_screen to obtain the main editor screen and add our main panel instance as a child to it We call the _make_visible false function to hide the main panel so it doesn t compete for space when first activating the plugin The _exit_tree function is called when the plugin is deactivated If the main screen still exists we call queue_free to free the instance and remove it from memory The _make_visible function is overridden to hide or show the main panel as needed This function is automatically called by the editor when the user clicks on the main viewport buttons at the top of the editor The _get_plugin_name and _get_plugin_icon functions control the displayed name and icon for the plugin s main viewport button Another function you can add is the handles function which allows you to handle a node type automatically focusing the main screen when the type is selected This is similar to how clicking on a 3D node will automatically switch to the 3D viewport Try the plugin Activate the plugin in the Project Settings You ll observe a new button next to 2D 3D Script above the main viewport Clicking it will take you to your new main screen plugin and the button in the middle will print text If you would like to try a finished version of this plugin check out the plugin demos here https github com godotengine godot demo projects tree master plugins If you would like to see a more complete example of what main screen plugins are capable of check out the 2 5D demo projects here https github com godotengine godot demo projects tree master misc 2 5d User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Import plugins Note This tutorial assumes you already know how to make generic plugins If in doubt refer to the Making plugins page This also assumes you are acquainted with Godot s import system Introduction An import plugin is a special type of editor tool that allows custom resources to be imported by Godot and be treated as first class resources The editor itself comes bundled with a lot of import plugins to handle the common resources like PNG images Collada and glTF models Ogg Vorbis sounds and many more This tutorial shows how to create an import plugin to load a custom text file as a material resource This text file will contain three numeric values separated by comma which represents the three channels of a color and the resulting color will be used as the albedo main color of the imported material In this example it contains the pure blue color zero red zero green and full blue 0 0 255 Copy to clipboard Configuration First we need a generic plugin that will handle the initialization and destruction of our import plugin Let s add the plugin cfg file first plugin name Silly Material Importer description Imports a 3D Material from an external text file author Yours Truly version 1 0 script material_import gd Copy to clipboard Then we need the material_import gd file to add and remove the import plugin when needed material_import gd tool extends EditorPlugin var import_plugin func _enter_tree import_plugin preload import_plugin gd new add_import_plugin import_plugin func _exit_tree remove_import_plugin import_plugin import_plugin null Copy to clipboard When this plugin is activated it will create a new instance of the import plugin which we ll soon make and add it to the editor using the add_import_plugin method We store a reference to it in a class member import_plugin so we can refer to it later when removing it The remove_import_plugin method is called when the plugin is deactivated to clean up the memory and let the editor know the import plugin isn t available anymore Note that the import plugin is a reference type so it doesn t need to be explicitly released from memory with the free function It will be released automatically by the engine when it goes out of scope The EditorImportPlugin class The main character of the show is the EditorImportPlugin class It is responsible for implementing the methods that are called by Godot when it needs to know how to deal with files Let s begin to code our plugin one method at time import_plugin gd tool extends EditorImportPlugin func _get_importer_name return demos sillymaterial Copy to clipboard The first method is the _get_importer_name This is a unique name for your plugin that is used by Godot to know which import was used in a certain file When the files needs to be reimported the editor will know which plugin to call func _get_visible_name return Silly Material Copy to clipboard The _get_visible_name method is responsible for returning the name of the type it imports and it will be shown to the user in the Import dock You should choose this name as a continuation to Import as e g Import as Silly Material You can name it whatever you want but we recommend a descriptive name for your plugin func _get_recognized_extensions return mtxt Copy to clipboard Godot s import system detects file types by their extension In the _get_recognized_extensions method you return an array of strings to represent each extension that this plugin can understand If an extension is recognized by more than one plugin the user can select which one to use when importing the files Tip Common extensions like json and txt might be used by many plugins Also there could be files in the project that are just data for the game and should not be imported You have to be careful when importing to validate the data Never expect the file to be well formed func _get_save_extension return material Copy to clipboard The imported files are saved in the import folder at the project s root Their extension should match the type of resource you are importing but since Godot can t tell what you ll use because there might be multiple valid extensions for the same resource you need to declare what will be used in the import Since we re importing a Material we ll use the special extension for such resource types If you are importing a scene you can use scn Generic resources can use the res extension However this is not enforced in any way by the engine func _get_resource_type return StandardMaterial3D Copy to clipboard The imported resource has a specific type so the editor can know which property slot it belongs to This allows drag and drop from the FileSystem dock to a property in the Inspector In our case it s a StandardMaterial3D which can be applied to 3D objects Note If you need to import different types from the same extension you have to create multiple import plugins You can abstract the import code on another file to avoid duplication in this regard Options and presets Your plugin can provide different options to allow the user to control how the resource will be imported If a set of selected options is common you can also create different presets to make it easier for the user The following image shows how the options will appear in the editor Since there might be many presets and they are identified with a number it s a good practice to use an enum so you can refer to them using names tool extends EditorImportPlugin enum Presets DEFAULT Copy to clipboard Now that the enum is defined let s keep looking at the methods of an import plugin func _get_preset_count return Presets size Copy to clipboard The _get_preset_count method returns the amount of presets that this plugins defines We only have one preset now but we can make this method future proof by returning the size of our Presets enumeration func _get_preset_name preset_index match preset_index Presets DEFAULT return Default _ return Unknown Copy to clipboard Here we have the _get_preset_name method which gives names to the presets as they will be presented to the user so be sure to use short and clear names We can use the match statement here to make the code more structured This way it s easy to add new presets in the future We use the catch all pattern to return something too Although Godot won t ask for presets beyond the preset count you defined it s always better to be on the safe side If you have only one preset you could simply return its name directly but if you do this you have to be careful when you add more presets func _get_import_options path preset_index match preset_index Presets DEFAULT return name use_red_anyway default_value false _ return Copy to clipboard This is the method which defines the available options _get_import_options returns an array of dictionaries and each dictionary contains a few keys that are checked to customize the option as its shown to the user The following table shows the possible keys Key Type Description name String The name of the option When showed underscores become spaces and first letters are capitalized default_value Any The default value of the option for this preset property_hint Enum value One of the PropertyHint values to use as hint hint_string String The hint text of the property The same as you d add in the export statement in GDScript usage Enum value One of the PropertyUsageFlags values to define the usage The name and default_value keys are mandatory the rest are optional Note that the _get_import_options method receives the preset number so you can configure the options for each different preset especially the default value In this example we use the match statement but if you have lots of options and the presets only change the value you may want to create the array of options first and then change it based on the preset Warning The _get_import_options method is called even if you don t define presets by making _get_preset_count return zero You have to return an array even it s empty otherwise you can get errors func _get_option_visibility path option_name options return true Copy to clipboard For the _get_option_visibility method we simply return true because all of our options i e the single one we defined are visible all the time If you need to make certain option visible only if another is set with a certain value you can add the logic in this method The import method The heavy part of the process responsible for converting the files into resources is covered by the _import method Our sample code is a bit long so let s split in a few parts func _import source_file save_path options r_platform_variants r_gen_files var file FileAccess open source_file FileAccess READ if file null return FileAccess get_open_error var line file get_line Copy to clipboard The first part of our import method opens and reads the source file We use the FileAccess class to do that passing the source_file parameter which is provided by the editor If there s an error when opening the file we return it to let the editor know that the import wasn t successful var channels line split if channels size 3 return ERR_PARSE_ERROR var color if options use_red_anyway color Color8 255 0 0 else color Color8 int channels 0 int channels 1 int channels 2 Copy to clipboard This code takes the line of the file it read before and splits it in pieces that are separated by a comma If there are more or less than the three values it considers the file invalid and reports an error Then it creates a new Color variable and sets its values according to the input file If the use_red_anyway option is enabled then it sets the color as a pure red instead var material StandardMaterial3D new material albedo_color color Copy to clipboard This part makes a new StandardMaterial3D that is the imported resource We create a new instance of it and then set its albedo color as the value we got before return ResourceSaver save material s s save_path _get_save_extension Copy to clipboard This is the last part and quite an important one because here we save the made resource to the disk The path of the saved file is generated and informed by the editor via the save_path parameter Note that this comes without the extension so we add it using string formatting For this we call the _get_save_extension method that we defined earlier so we can be sure that they won t get out of sync We also return the result from the ResourceSaver save method so if there s an error in this step the editor will know about it Platform variants and generated files You may have noticed that our plugin ignored two arguments of the import method Those are return arguments hence the r at the beginning of their name which means that the editor will read from them after calling your import method Both of them are arrays that you can fill with information The r_platform_variants argument is used if you need to import the resource differently depending on the target platform While it s called platform variants it is based on the presence of feature tags so even the same platform can have multiple variants depending on the setup To import a platform variant you need to save it with the feature tag before the extension and then push the tag to the r_platform_variants array so the editor can know that you did For example let s say we save a different material for a mobile platform We would need to do something like the following r_platform_variants push_back mobile return ResourceSaver save mobile_material s s s save_path mobile _get_save_extension Copy to clipboard The r_gen_files argument is meant for extra files that are generated during your import process and need to be kept The editor will look at it to understand the dependencies and make sure the extra file is not inadvertently deleted This is also an array and should be filled with full paths of the files you save As an example let s create another material for the next pass and save it in a different file var next_pass StandardMaterial3D new next_pass albedo_color color inverted var next_pass_path s next_pass s save_path _get_save_extension err ResourceSaver save next_pass next_pass_path if err OK return err r_gen_files push_back next_pass_path Copy to clipboard Trying the plugin This has been theoretical but now that the import plugin is done let s test it Make sure you created the sample file with the contents described in the introduction section and save it as test mtxt Then activate the plugin in the Project Settings If everything goes well the import plugin is added to the editor and the file system is scanned making the custom resource appear on the FileSystem dock If you select it and focus the Import dock you can see the only option to select there Create a MeshInstance3D node in the scene and for its Mesh property set up a new SphereMesh Unfold the Material section in the Inspector and then drag the file from the FileSystem dock to the material property The object will update in the viewport with the blue color of the imported material Go to Import dock enable the Use Red Anyway option and click on Reimport This will update the imported material and should automatically update the view showing the red color instead And that s it Your first import plugin is done Now get creative and make plugins for your own beloved formats This can be quite useful to write your data in a custom format and then use it in Godot as if they were native resources This shows how the import system is powerful and extendable User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request 3D gizmo plugins Introduction 3D gizmo plugins are used by the editor and custom plugins to define the gizmos attached to any kind of Node3D node This tutorial shows the two main approaches to defining your own custom gizmos The first option works well for simple gizmos and creates less clutter in your plugin structure and the second one will let you store some per gizmo data Note This tutorial assumes you already know how to make generic plugins If in doubt refer to the Making plugins page The EditorNode3DGizmoPlugin Regardless of the approach we choose we will need to create a new EditorNode3DGizmoPlugin This will allow us to set a name for the new gizmo type and define other behaviors such as whether the gizmo can be hidden or not This would be a basic setup my_custom_gizmo_plugin gd extends EditorNode3DGizmoPlugin func _get_gizmo_name return CustomNode Copy to clipboard MyCustomEditorPlugin gd tool extends EditorPlugin const MyCustomGizmoPlugin preload res addons my addon my_custom_gizmo_plugin gd var gizmo_plugin MyCustomGizmoPlugin new func _enter_tree add_node_3d_gizmo_plugin gizmo_plugin func _exit_tree remove_node_3d_gizmo_plugin gizmo_plugin Copy to clipboard For simple gizmos inheriting EditorNode3DGizmoPlugin is enough If you want to store some per gizmo data or you are porting a Godot 3 0 gizmo to 3 1 you should go with the second approach Simple approach The first step is to in our custom gizmo plugin override the _has_gizmo method so that it returns true when the node parameter is of our target type func _has_gizmo node return node is MyCustomNode3D Copy to clipboard Then we can override methods like _redraw or all the handle related ones func _init create_material main Color 1 0 0 create_handle_material handles func _redraw gizmo gizmo clear var node3d gizmo get_node_3d var lines PackedVector3Array lines push_back Vector3 0 1 0 lines push_back Vector3 0 node3d my_custom_value 0 var handles PackedVector3Array handles push_back Vector3 0 1 0 handles push_back Vector3 0 node3d my_custom_value 0 gizmo add_lines lines get_material main gizmo false gizmo add_handles handles get_material handles gizmo Copy to clipboard Note that we created a material in the _init method and retrieved it in the _redraw method using get_material This method retrieves one of the material s variants depending on the state of the gizmo selected and or editable So the final plugin would look somewhat like this extends EditorNode3DGizmoPlugin const MyCustomNode3D preload res addons my addon my_custom_node_3d gd func _init create_material main Color 1 0 0 create_handle_material handles func _has_gizmo node return node is MyCustomNode3D func _redraw gizmo gizmo clear var node3d gizmo get_node_3d var lines PackedVector3Array lines push_back Vector3 0 1 0 lines push_back Vector3 0 node3d my_custom_value 0 var handles PackedVector3Array handles push_back Vector3 0 1 0 handles push_back Vector3 0 node3d my_custom_value 0 gizmo add_lines lines get_material main gizmo false gizmo add_handles handles get_material handles gizmo You should implement the rest of handle related callbacks _get_handle_name _get_handle_value _commit_handle Copy to clipboard Note that we just added some handles in the _redraw method but we still need to implement the rest of handle related callbacks in EditorNode3DGizmoPlugin to get properly working handles Alternative approach In some cases we want to provide our own implementation of EditorNode3DGizmo maybe because we want to have some state stored in each gizmo or because we are porting an old gizmo plugin and we don t want to go through the rewriting process In these cases all we need to do is in our new gizmo plugin override _create_gizmo so it returns our custom gizmo implementation for the Node3D nodes we want to target my_custom_gizmo_plugin gd extends EditorNode3DGizmoPlugin const MyCustomNode3D preload res addons my addon my_custom_node_3d gd const MyCustomGizmo preload res addons my addon my_custom_gizmo gd func _init create_material main Color 1 0 0 create_handle_material handles func _create_gizmo node if node is MyCustomNode3D return MyCustomGizmo new else return null Copy to clipboard This way all the gizmo logic and drawing methods can be implemented in a new class extending EditorNode3DGizmo like so my_custom_gizmo gd extends EditorNode3DGizmo You can store data in the gizmo itself more useful when working with handles var gizmo_size 3 0 func _redraw clear var node3d get_node_3d var lines PackedVector3Array lines push_back Vector3 0 1 0 lines push_back Vector3 gizmo_size node3d my_custom_value 0 var handles PackedVector3Array handles push_back Vector3 0 1 0 handles push_back Vector3 gizmo_size node3d my_custom_value 0 var material get_plugin get_material main self add_lines lines material false var handles_material get_plugin get_material handles self add_handles handles handles_material You should implement the rest of handle related callbacks _get_handle_name _get_handle_value _commit_handle Copy to clipboard Note that we just added some handles in the _redraw method but we still need to implement the rest of handle related callbacks in EditorNode3DGizmo to get properly working handles User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Inspector plugins The inspector dock allows you to create custom widgets to edit properties through plugins This can be beneficial when working with custom datatypes and resources although you can use the feature to change the inspector widgets for built in types You can design custom controls for specific properties entire objects and even separate controls associated with particular datatypes This guide explains how to use the EditorInspectorPlugin and EditorProperty classes to create a custom interface for integers replacing the default behavior with a button that generates random values between 0 and 99 The default behavior on the left and the end result on the right Setting up your plugin Create a new empty plugin to get started See also See Making plugins guide to set up your new plugin Let s assume you ve called your plugin folder my_inspector_plugin If so you should end up with a new addons my_inspector_plugin folder that contains two files plugin cfg and plugin gd As before plugin gd is a script extending EditorPlugin and you need to introduce new code for its _enter_tree and _exit_tree methods To set up your inspector plugin you must load its script then create and add the instance by calling add_inspector_plugin If the plugin is disabled you should remove the instance you have added by calling remove_inspector_plugin Note Here you are loading a script and not a packed scene Therefore you should use new instead of instantiate GDScript C plugin gd tool extends EditorPlugin var plugin func _enter_tree plugin preload res addons my_inspector_plugin my_inspector_plugin gd new add_inspector_plugin plugin func _exit_tree remove_inspector_plugin plugin Copy to clipboard Plugin cs if TOOLS using Godot Tool public partial class Plugin EditorPlugin private MyInspectorPlugin _plugin public override void _EnterTree _plugin new MyInspectorPlugin AddInspectorPlugin _plugin public override void _ExitTree RemoveInspectorPlugin _plugin endif Copy to clipboard Interacting with the inspector To interact with the inspector dock your my_inspector_plugin gd script must extend the EditorInspectorPlugin class This class provides several virtual methods that affect how the inspector handles properties To have any effect at all the script must implement the _can_handle method This function is called for each edited Object and must return true if this plugin should handle the object or its properties Note This includes any Resource attached to the object You can implement four other methods to add controls to the inspector at specific positions The _parse_begin and _parse_end methods are called only once at the beginning and the end of parsing for each object respectively They can add controls at the top or bottom of the inspector layout by calling add_custom_control As the editor parses the object it calls the _parse_category and _parse_property methods There in addition to add_custom_control you can call both add_property_editor and add_property_editor_for_multiple_properties Use these last two methods to specifically add EditorProperty based controls GDScript C my_inspector_plugin gd extends EditorInspectorPlugin var RandomIntEditor preload res addons my_inspector_plugin random_int_editor gd func _can_handle object We support all objects in this example return true func _parse_property object type name hint_type hint_string usage_flags wide We handle properties of type integer if type TYPE_INT Create an instance of the custom property editor and register it to a specific property path add_property_editor name RandomIntEditor new Inform the editor to remove the default property editor for this property type return true else return false Copy to clipboard MyInspectorPlugin cs if TOOLS using Godot public partial class MyInspectorPlugin EditorInspectorPlugin public override bool _CanHandle GodotObject object We support all objects in this example return true public override bool _ParseProperty GodotObject object Variant Type type string name PropertyHint hintType string hintString PropertyUsageFlags usageFlags bool wide We handle properties of type integer if type Variant Type Int Create an instance of the custom property editor and register it to a specific property path AddPropertyEditor name new RandomIntEditor Inform the editor to remove the default property editor for this property type return true return false endif Copy to clipboard Adding an interface to edit properties The EditorProperty class is a special type of Control that can interact with the inspector dock s edited objects It doesn t display anything but can house any other control nodes including complex scenes There are three essential parts to the script extending EditorProperty You must define the _init method to set up the control nodes structure You should implement the _update_property to handle changes to the data from the outside A signal must be emitted at some point to inform the inspector that the control has changed the property using emit_changed You can display your custom widget in two ways Use just the default add_child method to display it to the right of the property name and use add_child followed by set_bottom_editor to position it below the name GDScript C random_int_editor gd extends EditorProperty The main control for editing the property var property_control Button new An internal value of the property var current_value 0 A guard against internal changes when the property is updated var updating false func _init Add the control as a direct child of EditorProperty node add_child property_control Make sure the control is able to retain the focus add_focusable property_control Setup the initial state and connect to the signal to track changes refresh_control_text property_control pressed connect _on_button_pressed func _on_button_pressed Ignore the signal if the property is currently being updated if updating return Generate a new random integer between 0 and 99 current_value randi 100 refresh_control_text emit_changed get_edited_property current_value func _update_property Read the current value from the property var new_value get_edited_object get_edited_property if new_value current_value return Update the control with the new value updating true current_value new_value refresh_control_text updating false func refresh_control_text property_control text Value str current_value Copy to clipboard RandomIntEditor cs if TOOLS using Godot public partial class RandomIntEditor EditorProperty The main control for editing the property private Button _propertyControl new Button An internal value of the property private int _currentValue 0 A guard against internal changes when the property is updated private bool _updating false public RandomIntEditor Add the control as a direct child of EditorProperty node AddChild _propertyControl Make sure the control is able to retain the focus AddFocusable _propertyControl Setup the initial state and connect to the signal to track changes RefreshControlText _propertyControl Pressed OnButtonPressed private void OnButtonPressed Ignore the signal if the property is currently being updated if _updating return Generate a new random integer between 0 and 99 _currentValue int GD Randi 100 RefreshControlText EmitChanged GetEditedProperty _currentValue public override void _UpdateProperty Read the current value from the property var newValue int GetEditedObject Get GetEditedProperty if newValue _currentValue return Update the control with the new value _updating true _currentValue newValue RefreshControlText _updating false private void RefreshControlText _propertyControl Text Value _currentValue endif Copy to clipboard Using the example code above you should be able to make a custom widget that replaces the default SpinBox control for integers with a Button that generates random values User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Visual Shader plugins Visual Shader plugins are used to create custom VisualShader nodes in GDScript The creation process is different from usual editor plugins You do not need to create a plugin cfg file to register it instead create and save a script file and it will be ready to use provided the custom node is registered with class_name This short tutorial will explain how to make a Perlin 3D noise node original code from this GPU noise shaders plugin Create a Sprite2D and assign a ShaderMaterial to its material slot Assign VisualShader to the shader slot of the material Don t forget to change its mode to CanvasItem if you are using a Sprite2D Create a script which derives from VisualShaderNodeCustom This is all you need to initialize your plugin perlin_noise_3d gd tool extends VisualShaderNodeCustom class_name VisualShaderNodePerlinNoise3D func _get_name return PerlinNoise3D func _get_category return MyShaderNodes func _get_description return Classic Perlin Noise 3D function by Curly Brace func _init set_input_port_default_value 2 0 0 func _get_return_icon_type return VisualShaderNode PORT_TYPE_SCALAR func _get_input_port_count return 4 func _get_input_port_name port match port 0 return uv 1 return offset 2 return scale 3 return time func _get_input_port_type port match port 0 return VisualShaderNode PORT_TYPE_VECTOR_3D 1 return VisualShaderNode PORT_TYPE_VECTOR_3D 2 return VisualShaderNode PORT_TYPE_SCALAR 3 return VisualShaderNode PORT_TYPE_SCALAR func _get_output_port_count return 1 func _get_output_port_name port return result func _get_output_port_type port return VisualShaderNode PORT_TYPE_SCALAR func _get_global_code mode return vec3 mod289_3 vec3 x return x floor x 1 0 289 0 289 0 vec4 mod289_4 vec4 x return x floor x 1 0 289 0 289 0 vec4 permute vec4 x return mod289_4 x 34 0 1 0 x vec4 taylorInvSqrt vec4 r return 1 79284291400159 0 85373472095314 r vec3 fade vec3 t return t t t t t 6 0 15 0 10 0 Classic Perlin noise float cnoise vec3 P vec3 Pi0 floor P Integer part for indexing vec3 Pi1 Pi0 vec3 1 0 Integer part 1 Pi0 mod289_3 Pi0 Pi1 mod289_3 Pi1 vec3 Pf0 fract P Fractional part for interpolation vec3 Pf1 Pf0 vec3 1 0 Fractional part 1 0 vec4 ix vec4 Pi0 x Pi1 x Pi0 x Pi1 x vec4 iy vec4 Pi0 yy Pi1 yy vec4 iz0 vec4 Pi0 z vec4 iz1 vec4 Pi1 z vec4 ixy permute permute ix iy vec4 ixy0 permute ixy iz0 vec4 ixy1 permute ixy iz1 vec4 gx0 ixy0 1 0 7 0 vec4 gy0 fract floor gx0 1 0 7 0 0 5 gx0 fract gx0 vec4 gz0 vec4 0 5 abs gx0 abs gy0 vec4 sz0 step gz0 vec4 0 0 gx0 sz0 step 0 0 gx0 0 5 gy0 sz0 step 0 0 gy0 0 5 vec4 gx1 ixy1 1 0 7 0 vec4 gy1 fract floor gx1 1 0 7 0 0 5 gx1 fract gx1 vec4 gz1 vec4 0 5 abs gx1 abs gy1 vec4 sz1 step gz1 vec4 0 0 gx1 sz1 step 0 0 gx1 0 5 gy1 sz1 step 0 0 gy1 0 5 vec3 g000 vec3 gx0 x gy0 x gz0 x vec3 g100 vec3 gx0 y gy0 y gz0 y vec3 g010 vec3 gx0 z gy0 z gz0 z vec3 g110 vec3 gx0 w gy0 w gz0 w vec3 g001 vec3 gx1 x gy1 x gz1 x vec3 g101 vec3 gx1 y gy1 y gz1 y vec3 g011 vec3 gx1 z gy1 z gz1 z vec3 g111 vec3 gx1 w gy1 w gz1 w vec4 norm0 taylorInvSqrt vec4 dot g000 g000 dot g010 g010 dot g100 g100 dot g110 g110 g000 norm0 x g010 norm0 y g100 norm0 z g110 norm0 w vec4 norm1 taylorInvSqrt vec4 dot g001 g001 dot g011 g011 dot g101 g101 dot g111 g111 g001 norm1 x g011 norm1 y g101 norm1 z g111 norm1 w float n000 dot g000 Pf0 float n100 dot g100 vec3 Pf1 x Pf0 yz float n010 dot g010 vec3 Pf0 x Pf1 y Pf0 z float n110 dot g110 vec3 Pf1 xy Pf0 z float n001 dot g001 vec3 Pf0 xy Pf1 z float n101 dot g101 vec3 Pf1 x Pf0 y Pf1 z float n011 dot g011 vec3 Pf0 x Pf1 yz float n111 dot g111 Pf1 vec3 fade_xyz fade Pf0 vec4 n_z mix vec4 n000 n100 n010 n110 vec4 n001 n101 n011 n111 fade_xyz z vec2 n_yz mix n_z xy n_z zw fade_xyz y float n_xyz mix n_yz x n_yz y fade_xyz x return 2 2 n_xyz func _get_code input_vars output_vars mode type return output_vars 0 cnoise vec3 s xy s xy s s 0 5 0 5 input_vars 0 input_vars 1 input_vars 2 input_vars 3 Copy to clipboard Save it and open the Visual Shader You should see your new node type within the member s dialog under the Addons category if you can t see your new node try restarting the editor Place it on a graph and connect the required ports That is everything you need to do as you can see it is easy to create your own custom VisualShader nodes User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Running code in the editor What is tool tool is a powerful line of code that when added at the top of your script makes it execute in the editor You can also decide which parts of the script execute in the editor which in game and which in both You can use it for doing many things but it is mostly useful in level design for visually presenting things that are hard to predict ourselves Here are some use cases If you have a cannon that shoots cannonballs affected by physics gravity you can draw the cannonball s trajectory in the editor making level design a lot easier If you have jumppads with varying jump heights you can draw the maximum jump height a player would reach if it jumped on one also making level design easier If your player doesn t use a sprite but draws itself using code you can make that drawing code execute in the editor to see your player Danger tool scripts run inside the editor and let you access the scene tree of the currently edited scene This is a powerful feature which also comes with caveats as the editor does not include protections for potential misuse of tool scripts Be extremely cautious when manipulating the scene tree especially via Node queue_free as it can cause crashes if you free a node while the editor runs logic involving it How to use tool To turn a script into a tool add the tool annotation at the top of your code To check if you are currently in the editor use Engine is_editor_hint For example if you want to execute some code only in the editor use GDScript C if Engine is_editor_hint Code to execute when in editor Copy to clipboard if Engine IsEditorHint Code to execute when in editor Copy to clipboard On the other hand if you want to execute code only in game simply negate the same statement GDScript C if not Engine is_editor_hint Code to execute when in game Copy to clipboard if Engine IsEditorHint Code to execute when in game Copy to clipboard Pieces of code that do not have either of the 2 conditions above will run both in editor and in game Here is how a _process function might look for you GDScript C func _process delta if Engine is_editor_hint Code to execute in editor if not Engine is_editor_hint Code to execute in game Code to execute both in editor and in game Copy to clipboard public override void _Process double delta if Engine IsEditorHint Code to execute in editor if Engine IsEditorHint Code to execute in game Code to execute both in editor and in game Copy to clipboard Important information Any other GDScript that your tool script uses must also be a tool Any GDScript without tool used by the editor will act like an empty file Extending a tool script does not automatically make the extending script a tool Omitting tool from the extending script will disable tool behavior from the super class Therefore the extending script should also specify the tool annotation Modifications in the editor are permanent For example in the next section when we remove the script the node will keep its rotation Be careful to avoid making unwanted modifications Try tool out Add a Sprite2D node to your scene and set the texture to Godot icon Attach and open a script and change it to this GDScript C tool extends Sprite2D func _process delta rotation PI delta Copy to clipboard using Godot Tool public partial class MySprite Sprite2D public override void _Process double delta Rotation Mathf Pi float delta Copy to clipboard Save the script and return to the editor You should now see your object rotate If you run the game it will also rotate Note If you don t see the changes reload the scene close it and open it again Now let s choose which code runs when Modify your _process function to look like this GDScript C func _process delta if Engine is_editor_hint rotation PI delta else rotation PI delta Copy to clipboard public override void _Process double delta if Engine IsEditorHint Rotation Mathf Pi float delta else Rotation Mathf Pi float delta Copy to clipboard Save the script Now the object will spin clockwise in the editor but if you run the game it will spin counter clockwise Editing variables Add and export a variable speed to the script To update the speed and also reset the rotation angle add a setter set new_speed which is executed with the input from the inspector Modify _process to include the rotation speed GDScript C tool extends Sprite2D export var speed 1 Update speed and reset the rotation set new_speed speed new_speed rotation 0 func _process delta rotation PI delta speed Copy to clipboard using Godot Tool public partial class MySprite Sprite2D private float _speed 1 Export public float Speed get _speed set Update speed and reset the rotation _speed value Rotation 0 public override void _Process double delta Rotation Mathf Pi float delta speed Copy to clipboard Note Code from other nodes doesn t run in the editor Your access to other nodes is limited You can access the tree and nodes and their default properties but you can t access user variables If you want to do so other nodes have to run in the editor too Autoload nodes cannot be accessed in the editor at all Getting notified when resources change Sometimes you want your tool to use a resource However when you change a property of that resource in the editor the set method of your tool will not be called GDScript C tool class_name MyTool extends Node export var resource MyResource set new_resource resource new_resource _on_resource_set This will only be called when you create delete or paste a resource You will not get an update when tweaking properties of it func _on_resource_set print My resource was set Copy to clipboard using Godot Tool public partial class MyTool Node private MyResource _resource Export public MyResource Resource get _resource set _resource value OnResourceSet This will only be called when you create delete or paste a resource You will not get an update when tweaking properties of it private void OnResourceSet GD Print My resource was set Copy to clipboard To get around this problem you first have to make your resource a tool and make it emit the changed signal whenever a property is set GDScript C Make Your Resource a tool tool class_name MyResource extends Resource export var property 1 set new_setting property new_setting Emit a signal when the property is changed changed emit Copy to clipboard using Godot Tool public partial class MyResource Resource private float _property 1 Export public float Property get _property set _property value Emit a signal when the property is changed EmitChanged Copy to clipboard You then want to connect the signal when a new resource is set GDScript C tool class_name MyTool extends Node export var resource MyResource set new_resource resource new_resource Connect the changed signal as soon as a new resource is being added resource changed connect _on_resource_changed func _on_resource_changed print My resource just changed Copy to clipboard using Godot Tool public partial class MyTool Node private MyResource _resource Export public MyResource Resource get _resource set _resource value Connect the changed signal as soon as a new resource is being added _resource Changed OnResourceChanged private void OnResourceChanged GD Print My resource just changed Copy to clipboard Lastly remember to disconnect the signal as the old resource being used and changed somewhere else would cause unneeded updates GDScript C export var resource MyResource set new_resource Disconnect the signal if the previous resource was not null if resource null resource changed disconnect _on_resource_changed resource new_resource resource changed connect _on_resource_changed Copy to clipboard Export public MyResource Resource get _resource set Disconnect the signal if the previous resource was not null if _resource null _resource Changed OnResourceChanged _resource value _resource Changed OnResourceChanged Copy to clipboard Reporting node configuration warnings Godot uses a node configuration warning system to warn users about incorrectly configured nodes When a node isn t configured correctly a yellow warning sign appears next to the node s name in the Scene dock When you hover or click on the icon a warning message pops up You can use this feature in your scripts to help you and your team avoid mistakes when setting up scenes When using node configuration warnings when any value that should affect or remove the warning changes you need to call update_configuration_warnings By default the warning only updates when closing and reopening the scene GDScript Use setters to update the configuration warning automatically export var title set p_title if p_title title title p_title update_configuration_warnings export var description set p_description if p_description description description p_description update_configuration_warnings func _get_configuration_warnings var warnings if title warnings append Please set title to a non empty value if description length 100 warnings append description should be less than 100 characters long Returning an empty array means no warning return warnings Copy to clipboard Running one off scripts using EditorScript Sometimes you need to run code just one time to automate a certain task that is not available in the editor out of the box Some examples might be Use as a playground for GDScript or C scripting without having to run a project print output is displayed in the editor Output panel Scale all light nodes in the currently edited scene as you noticed your level ends up looking too dark or too bright after placing lights where desired Replace nodes that were copy pasted with scene instances to make them easier to modify later This is available in Godot by extending EditorScript in a script This provides a way to run individual scripts in the editor without having to create an editor plugin To create an EditorScript right click a folder or empty space in the FileSystem dock then choose New Script In the script creation dialog click the tree icon to choose an object to extend from or enter EditorScript directly in the field on the left though note this is case sensitive Creating an editor script in the script editor creation dialog This will automatically select a script template that is suited for EditorScripts with a _run method already inserted tool extends EditorScript Called when the script is executed using File Run in Script Editor func _run pass Copy to clipboard This _run method is executed when you use File Run or the keyboard shortcut Ctrl Shift X while the EditorScript is the currently open script in the script editor This keyboard shortcut is only effective when currently focused on the script editor Scripts that extend EditorScript must be tool scripts to function Warning EditorScripts have no undo redo functionality so make sure to save your scene before running one if the script is designed to modify any data To access nodes in the currently edited scene use the EditorScript get_scene method which returns the root Node of the currently edited scene Here s an example that recursively gets all nodes in the currently edited scene and doubles the range of all OmniLight3D nodes tool extends EditorScript func _run for node in get_all_children get_scene if node is OmniLight3D Don t operate on instanced subscene children as changes are lost when reloading the scene See the Instancing scenes section below for a description of owner var is_instanced_subscene_child node get_scene and node owner get_scene if not is_instanced_subscene_child node omni_range 2 0 This function is recursive it calls itself to get lower levels of child nodes as needed children_acc is the accumulator parameter that allows this function to work It should be left to its default value when you call this function directly func get_all_children in_node children_acc children_acc push_back in_node for child in in_node get_children children_acc get_all_children child children_acc return children_acc Copy to clipboard Tip You can change the currently edited scene at the top of the editor even while the Script view is open This will affect the return value of EditorScript get_scene so make sure you ve selected the scene you intend to iterate upon before running the script Instancing scenes You can instantiate packed scenes normally and add them to the scene currently opened in the editor By default nodes or scenes added with Node add_child node are not visible in the Scene tree dock and are not persisted to disk If you wish the node or scene to be visible in the scene tree dock and persisted to disk when saving the scene you need to set the child node s owner property to the currently edited scene root If you are using tool GDScript C func _ready var node Node3D new add_child node Parent could be any node in the scene The line below is required to make the node visible in the Scene tree dock and persist changes made by the tool script to the saved scene file node owner get_tree edited_scene_root Copy to clipboard public override void _Ready var node new Node3D AddChild node Parent could be any node in the scene The line below is required to make the node visible in the Scene tree dock and persist changes made by the tool script to the saved scene file node Owner GetTree EditedSceneRoot Copy to clipboard If you are using EditorScript GDScript C func _run parent could be any node in the scene var parent get_scene get_node Parent var node Node3D new parent add_child node The line below is required to make the node visible in the Scene tree dock and persist changes made by the tool script to the saved scene file node owner get_scene Copy to clipboard public override void _Run parent could be any node in the scene var parent GetScene GetNode Parent var node new Node3D parent AddChild node The line below is required to make the node visible in the Scene tree dock and persist changes made by the tool script to the saved scene file node Owner GetScene Copy to clipboard Warning Using tool improperly can yield many errors It is advised to first write the code how you want it and only then add the tool annotation to the top Also make sure to separate code that runs in editor from code that runs in game This way you can find bugs more easily User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Rendering Using Viewports Multiple resolutions Fixing jitter stutter and input lag The Compositor Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using Viewports Introduction Think of a Viewport as a screen onto which the game is projected In order to see the game we need to have a surface on which to draw it That surface is the Root Viewport SubViewports are a kind of Viewport that can be added to the scene so that there are multiple surfaces to draw on When we are drawing to a SubViewport we call it a render target We can access the contents of a render target by accessing its corresponding texture By using a SubViewport as render target we can either render multiple scenes simultaneously or we can render to a ViewportTexture which is applied to an object in the scene for example a dynamic skybox SubViewports have a variety of use cases including Rendering 3D objects within a 2D game Rendering 2D elements in a 3D game Rendering dynamic textures Generating procedural textures at runtime Rendering multiple cameras in the same scene What all these use cases have in common is that you are given the ability to draw objects to a texture as if it were another screen and can then choose what to do with the resulting texture Another kind of Viewports in Godot are Windows They allow their content to be projected onto a window While the Root Viewport is a Window they are less flexible If you want to use the texture of a Viewport you ll be working with SubViewports most of the time Input Viewports are also responsible for delivering properly adjusted and scaled input events to their children nodes By default SubViewports don t automatically receive input unless they receive it from their direct SubViewportContainer parent node In this case input can be disabled with the Disable Input property For more information on how Godot handles input please read the Input Event Tutorial Listener Godot supports 3D sound in both 2D and 3D nodes More on this can be found in the Audio Streams Tutorial For this type of sound to be audible the Viewport needs to be enabled as a listener for 2D or 3D If you are using a SubViewport to display your World3D or World2D don t forget to enable this Cameras 2D 3D When using a Camera3D or Camera2D it will always display on the closest parent Viewport going towards the root For example in the following hierarchy CameraA will display on the Root Viewport and it will draw MeshA CameraB will be captured by the SubViewport along with MeshB Even though MeshB is in the scene hierarchy it will still not be drawn to the Root Viewport Similarly MeshA will not be visible from the SubViewport because SubViewports only capture nodes below them in the hierarchy There can only be one active camera per Viewport so if there is more than one make sure that the desired one has the current property set or make it the current camera by calling GDScript C camera make_current Copy to clipboard camera MakeCurrent Copy to clipboard By default cameras will render all objects in their world In 3D cameras can use their cull_mask property combined with the VisualInstance3D s layer property to restrict which objects are rendered Scale stretching SubViewports have a size property which represents the size of the SubViewport in pixels For SubViewports which are children of SubViewportContainers these values are overridden but for all others this sets their resolution It is also possible to scale the 2D content and make the SubViewport resolution different from the one specified in size by calling GDScript C sub_viewport set_size_2d_override Vector2i width height Custom size for 2D sub_viewport set_size_2d_override_stretch true Enable stretch for custom size Copy to clipboard subViewport Size2DOverride new Vector2I width height Custom size for 2D subViewport Size2DOverrideStretch true Enable stretch for custom size Copy to clipboard For information on scaling and stretching with the Root Viewport visit the Multiple Resolutions Tutorial Worlds For 3D a Viewport will contain a World3D This is basically the universe that links physics and rendering together Node3D based nodes will register using the World3D of the closest Viewport By default newly created Viewports do not contain a World3D but use the same as their parent Viewport The Root Viewport always contains a World3D which is the one objects are rendered to by default A World3D can be set in a Viewport using the World 3D property that will separate all children nodes of this Viewport and will prevent them from interacting with the parent Viewport s World3D This is especially useful in scenarios where for example you might want to show a separate character in 3D imposed over the game like in StarCraft As a helper for situations where you want to create Viewports that display single objects and don t want to create a World3D Viewport has the option to use its Own World3D This is useful when you want to instance 3D characters or objects in World2D For 2D each Viewport always contains its own World2D This suffices in most cases but in case sharing them may be desired it is possible to do so by setting world_2d on the Viewport through code For an example of how this works see the demo projects 3D in 2D and 2D in 3D respectively Capture It is possible to query a capture of the Viewport contents For the Root Viewport this is effectively a screen capture This is done with the following code GDScript C Retrieve the captured Image using get_image var img get_viewport get_texture get_image Convert Image to ImageTexture var tex ImageTexture create_from_image img Set sprite texture sprite texture tex Copy to clipboard Retrieve the captured Image using get_image var img GetViewport GetTexture GetImage Convert Image to ImageTexture var tex ImageTexture CreateFromImage img Set sprite texture sprite Texture tex Copy to clipboard But if you use this in _ready or from the first frame of the Viewport s initialization you will get an empty texture because there is nothing to get as texture You can deal with it using for example GDScript C Wait until the frame has finished before getting the texture await RenderingServer frame_post_draw You can get the image after this Copy to clipboard Wait until the frame has finished before getting the texture await RenderingServer Singleton ToSignal RenderingServer SignalName FramePostDraw You can get the image after this Copy to clipboard Viewport Container If the SubViewport is a child of a SubViewportContainer it will become active and display anything it has inside The layout looks like this The SubViewport will cover the area of its parent SubViewportContainer completely if Stretch is set to true in the SubViewportContainer Note The size of the SubViewportContainer cannot be smaller than the size of the SubViewport Rendering Due to the fact that the Viewport is an entryway into another rendering surface it exposes a few rendering properties that can be different from the project settings You can choose to use a different level of MSAA for each Viewport The default behavior is Disabled If you know that the Viewport is only going to be used for 2D you can Disable 3D Godot will then restrict how the Viewport is drawn Disabling 3D is slightly faster and uses less memory compared to enabled 3D It s a good idea to disable 3D if your viewport doesn t render anything in 3D Note If you need to render 3D shadows in the viewport make sure to set the viewport s positional_shadow_atlas_size property to a value higher than 0 Otherwise shadows won t be rendered By default the equivalent project setting is set to 4096 on desktop platforms and 2048 on mobile platforms Godot also provides a way of customizing how everything is drawn inside Viewports using Debug Draw Debug Draw allows you to specify a mode which determines how the Viewport will display things drawn inside it Debug Draw is Disabled by default Some other options are Unshaded Overdraw and Wireframe For a full list refer to the Viewport Documentation Debug Draw Disabled default The scene is drawn normally Debug Draw Unshaded Unshaded draws the scene without using lighting information so all the objects appear flatly colored in their albedo color Debug Draw Overdraw Overdraw draws the meshes semi transparent with an additive blend so you can see how the meshes overlap Debug Draw Wireframe Wireframe draws the scene using only the edges of triangles in the meshes Note Debug Draw modes are currently not supported when using the Compatibility rendering method They will appear as regular draw modes Render target When rendering to a SubViewport whatever is inside will not be visible in the scene editor To display the contents you have to draw the SubViewport s ViewportTexture somewhere This can be requested via code using for example GDScript C This gives us the ViewportTexture var tex viewport get_texture sprite texture tex Copy to clipboard This gives us the ViewportTexture var tex viewport GetTexture sprite Texture tex Copy to clipboard Or it can be assigned in the editor by selecting New ViewportTexture and then selecting the Viewport you want to use Every frame the Viewport s texture is cleared away with the default clear color or a transparent color if Transparent BG is set to true This can be changed by setting Clear Mode to Never or Next Frame As the name implies Never means the texture will never be cleared while next frame will clear the texture on the next frame and then set itself to Never By default re rendering of the SubViewport happens when its ViewportTexture has been drawn in a frame If visible it will be rendered otherwise it will not This behavior can be changed by setting Update Mode to Never Once Always or When Parent Visible Never and Always will never or always re render respectively Once will re render the next frame and change to Never afterwards This can be used to manually update the Viewport This flexibility allows users to render an image once and then use the texture without incurring the cost of rendering every frame Note Make sure to check the Viewport demos They are available in the viewport folder of the demos archive or at https github com godotengine godot demo projects tree master viewport User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Multiple resolutions The problem of multiple resolutions Developers often have trouble understanding how to best support multiple resolutions in their games For desktop and console games this is more or less straightforward as most screen aspect ratios are 16 9 and resolutions are standard 720p 1080p 1440p 4K For mobile games at first it was easy For many years the iPhone and iPad used the same resolution When Retina was implemented they just doubled the pixel density most developers had to supply assets in default and double resolutions Nowadays this is no longer the case as there are plenty of different screen sizes densities and aspect ratios Non conventional sizes are also becoming increasingly popular such as ultrawide displays For 3D games there is not much of a need to support multiple resolutions from the aesthetic point of view The 3D geometry will just fill the screen based on the field of view disregarding the aspect ratio The main reason one may want to support this in this case is for performance reasons running in lower resolution to increase frames per second For 2D and game UIs this is a different matter as art needs to be created using specific pixel sizes in software such as Photoshop GIMP or Krita Since layouts aspect ratios resolutions and pixel densities can change so much it is no longer possible to design UIs for every specific screen Another method must be used One size fits all The most common approach is to use a single base resolution and then fit it to everything else This resolution is how most players are expected to play the game given their hardware For mobile Google has useful stats online and for desktop Steam also does As an example Steam shows that the most common primary display resolution is 1920 1080 so a sensible approach is to develop a game for this resolution then handle scaling for different sizes and aspect ratios Godot provides several useful tools to do this easily See also You can see how Godot s support for multiple resolutions works in action using the Multiple Resolutions and Aspect Ratios demo project Base size A base size for the window can be specified in the Project Settings under Display Window However what it does is not completely obvious the engine will not attempt to switch the monitor to this resolution Rather think of this setting as the design size i e the size of the area that you work with in the editor This setting corresponds directly to the size of the blue rectangle in the 2D editor There is often a need to support devices with screen and window sizes that are different from this base size Godot offers many ways to control how the viewport will be resized and stretched to different screen sizes Note On this page window refers to the screen area allotted to your game by the system while viewport refers to the root object accessible from get_tree root which the game controls to fill this screen area This viewport is a Window instance Recall from the introduction that all Window objects are viewports To configure the stretch base size at runtime from a script use the get_tree root content_scale_size property see Window content_scale_size Changing this value can indirectly change the size of 2D elements However to provide a user accessible scaling option using Stretch Scale is recommended as it s easier to adjust Note Godot follows a modern approach to multiple resolutions The engine will never change the monitor s resolution on its own While changing the monitor s resolution is the most efficient approach it s also the least reliable approach as it can leave the monitor stuck on a low resolution if the game crashes This is especially common on macOS or Linux which don t handle resolution changes as well as Windows Changing the monitor s resolution also removes any control from the game developer over filtering and aspect ratio stretching which can be important to ensure correct display for pixel art games On top of that changing the monitor s resolution makes alt tabbing in and out of a game much slower since the monitor has to change resolutions every time this is done Resizing There are several types of devices with several types of screens which in turn have different pixel density and resolutions Handling all of them can be a lot of work so Godot tries to make the developer s life a little easier The Viewport node has several functions to handle resizing and the root node of the scene tree is always a viewport scenes loaded are instanced as a child of it and it can always be accessed by calling get_tree root or get_node root In any case while changing the root Viewport params is probably the most flexible way to deal with the problem it can be a lot of work code and guessing so Godot provides a set of parameters in the project settings to handle multiple resolutions Stretch settings Stretch settings are located in the project settings and provide several options Stretch Mode The Stretch Mode setting defines how the base size is stretched to fit the resolution of the window or screen The animations below use a base size of just 16 9 pixels to demonstrate the effect of different stretch modes A single sprite also 16 9 pixels in size covers the entire viewport and a diagonal Line2D is added on top of it Stretch Mode Disabled default No stretching happens One unit in the scene corresponds to one pixel on the screen In this mode the Stretch Aspect setting has no effect Stretch Mode Canvas Items In this mode the base size specified in width and height in the project settings is stretched to cover the whole screen taking the Stretch Aspect setting into account This means that everything is rendered directly at the target resolution 3D is unaffected while in 2D there is no longer a 1 1 correspondence between sprite pixels and screen pixels which may result in scaling artifacts Stretch Mode Viewport Viewport scaling means that the size of the root Viewport is set precisely to the base size specified in the Project Settings Display section The scene is rendered to this viewport first Finally this viewport is scaled to fit the screen taking the Stretch Aspect setting into account To configure the stretch mode at runtime from a script use the get_tree root content_scale_mode property see Window content_scale_mode and the ContentScaleMode enum Stretch Aspect The second setting is the stretch aspect Note that this only takes effect if Stretch Mode is set to something other than Disabled In the animations below you will notice gray and black areas The black areas are added by the engine and cannot be drawn into The gray areas are part of your scene and can be drawn to The gray areas correspond to the region outside the blue frame you see in the 2D editor Stretch Aspect Ignore Ignore the aspect ratio when stretching the screen This means that the original resolution will be stretched to exactly fill the screen even if it s wider or narrower This may result in nonuniform stretching things looking wider or taller than designed Stretch Aspect Keep Keep aspect ratio when stretching the screen This means that the viewport retains its original size regardless of the screen resolution and black bars will be added to the top bottom of the screen letterboxing or the sides pillarboxing This is a good option if you know the aspect ratio of your target devices in advance or if you don t want to handle different aspect ratios Stretch Aspect Keep Width Keep aspect ratio when stretching the screen If the screen is wider than the base size black bars are added at the left and right pillarboxing But if the screen is taller than the base resolution the viewport will be grown in the vertical direction and more content will be visible to the bottom You can also think of this as Expand Vertically This is usually the best option for creating GUIs or HUDs that scale so some controls can be anchored to the bottom Size and anchors Stretch Aspect Keep Height Keep aspect ratio when stretching the screen If the screen is taller than the base size black bars are added at the top and bottom letterboxing But if the screen is wider than the base resolution the viewport will be grown in the horizontal direction and more content will be visible to the right You can also think of this as Expand Horizontally This is usually the best option for 2D games that scroll horizontally like runners or platformers Stretch Aspect Expand Keep aspect ratio when stretching the screen but keep neither the base width nor height Depending on the screen aspect ratio the viewport will either be larger in the horizontal direction if the screen is wider than the base size or in the vertical direction if the screen is taller than the original size Tip To support both portrait and landscape mode with a similar automatically determined scale factor set your project s base resolution to be a square 1 1 aspect ratio instead of a rectangle For instance if you wish to design for 1280 720 as the base resolution but wish to support both portrait and landscape mode use 720 720 as the project s base window size in the Project Settings To allow the user to choose their preferred screen orientation at run time remember to set Display Window Handheld Orientation to sensor To configure the stretch aspect at runtime from a script use the get_tree root content_scale_aspect property see Window content_scale_aspect and the ContentScaleAspect enum Stretch Scale The Scale setting allows you to add an extra scaling factor on top of what the Stretch options above already provide The default value of 1 0 means that no additional scaling occurs For example if you set Scale to 2 0 and leave Stretch Mode on Disabled each unit in your scene will correspond to 2 2 pixels on the screen This is a good way to provide scaling options for non game applications If Stretch Mode is set to canvas_items 2D elements will be scaled relative to the base window size then multiplied by the Scale setting This can be exposed to players to allow them to adjust the automatically determined scale to their liking for better accessibility If Stretch Mode is set to viewport the viewport s resolution is divided by Scale This makes pixels look larger and reduces rendering resolution with a given window size which can improve performance To configure the stretch scale at runtime from a script use the get_tree root content_scale_factor property see Window content_scale_factor Stretch Scale Mode Since Godot 4 2 the Stretch Scale Mode setting allows you to constrain the automatically determined scale factor as well as the manually specified Stretch Scale setting to integer values By default this setting is set to fractional which allows any scale factor to be applied including fractional values such as 2 5 When set to integer the value is rounded down to the nearest integer For example instead of using a scale factor of 2 5 it would be rounded down to 2 0 This is useful to prevent distortion when displaying pixel art Compare this pixel art which is displayed with the viewport stretch mode with the stretch scale mode set to fractional Checkerboard doesn t look even Line widths in the logo and text varies wildly This pixel art is also displayed with the viewport stretch mode but the stretch scale mode is set to integer this time Checkerboard looks perfectly even Line widths are consistent For example if your viewport base size is 640 360 and the window size is 1366 768 When using fractional the viewport is displayed at a resolution of 1366 768 scale factor is roughly 2 133 The entire window space is used Each pixel in the viewport corresponds to 2 133 2 133 pixels in the displayed area However since displays can only display whole pixels this will lead to uneven pixel scaling which results in incorrect appearance of pixel art When using integer the viewport is displayed at a resolution of 1280 720 scale factor is 2 The remaining space is filled with black bars on all four sides so that each pixel in the viewport corresponds to 2 2 pixels in the displayed area This setting is effective with any stretch mode However when using the disabled stretch mode it will only affect the Stretch Scale setting by rounding it down to the nearest integer value This can be used for 3D games that have a pixel art UI so that the visible area in the 3D viewport doesn t reduce in size which occurs when using canvas_items or viewport stretch mode with the integer scale mode Tip Games should use the Exclusive Fullscreen window mode as opposed to Fullscreen which is designed to prevent Windows from automatically treating the window as if it was exclusive fullscreen Fullscreen is meant to be used by GUI applications that want to use per pixel transparency without a risk of having it disabled by the OS It achieves this by leaving a 1 pixel line at the bottom of the screen By contrast Exclusive Fullscreen uses the actual screen size and allows Windows to reduce jitter and input lag for fullscreen games When using integer scaling this is particularly important as the 1 pixel height reduction from the Fullscreen mode can cause integer scaling to use a smaller scale factor than expected Common use case scenarios The following settings are recommended to support multiple resolutions and aspect ratios well Desktop game Non pixel art Set the base window width to 1920 and window height to 1080 If you have a display smaller than 1920 1080 set Window Width Override and Window Height Override to lower values to make the window smaller when the project starts Alternatively if you re targeting high end devices primarily set the base window width to 3840 and window height to 2160 This allows you to provide higher resolution 2D assets resulting in crisper visuals at the cost of higher memory usage and file sizes Note that this will make non mipmapped textures grainy on low resolution devices so make sure to follow the instructions described in Reducing aliasing on downsampling Set the stretch mode to canvas_items Set the stretch aspect to expand This allows for supporting multiple aspect ratios and makes better use of tall smartphone displays such as 18 9 or 19 9 aspect ratios Configure Control nodes anchors to snap to the correct corners using the Layout menu Pixel art Set the base window size to the viewport size you intend to use Most pixel art games use viewport sizes between 256 224 and 640 480 640 360 is a good baseline as it scales to 1280 720 1920 1080 2560 1440 and 3840 2160 without any black bars when using integer scaling Higher viewport sizes will require using higher resolution artwork unless you intend to show more of the game world at a given time Set the stretch mode to viewport Set the stretch aspect to keep to enforce a single aspect ratio with black bars As an alternative you can set the stretch aspect to expand to support multiple aspect ratios If using the expand stretch aspect Configure Control nodes anchors to snap to the correct corners using the Layout menu Set the stretch scale mode to integer This prevents uneven pixel scaling from occurring which makes pixel art not display as intended Note The viewport stretch mode provides low resolution rendering that is then stretched to the final window size If you are OK with sprites being able to move or rotate in sub pixel positions or wish to have a high resolution 3D viewport you should use the canvas_items stretch mode instead of the viewport stretch mode Mobile game in landscape mode Godot is configured to use landscape mode by default This means you don t need to change the display orientation project setting Set the base window width to 1280 and window height to 720 Alternatively if you re targeting high end devices primarily set the base window width to 1920 and window height to 1080 This allows you to provide higher resolution 2D assets resulting in crisper visuals at the cost of higher memory usage and file sizes Many devices have even higher resolution displays 1440p but the difference with 1080p is barely visible given the small size of smartphone displays Note that this will make non mipmapped textures grainy on low resolution devices so make sure to follow the instructions described in Reducing aliasing on downsampling Set the stretch mode to canvas_items Set the stretch aspect to expand This allows for supporting multiple aspect ratios and makes better use of tall smartphone displays such as 18 9 or 19 9 aspect ratios Configure Control nodes anchors to snap to the correct corners using the Layout menu Tip To better support tablets and foldable phones which frequently feature displays with aspect ratios close to 4 3 consider using a base resolution that has a 4 3 aspect ratio while following the rest of the instructions here For instance you can set the base window width to 1280 and the base window height to 960 Mobile game in portrait mode Set the base window width to 720 and window height to 1280 Alternatively if you re targeting high end devices primarily set the base window width to 1080 and window height to 1920 This allows you to provide higher resolution 2D assets resulting in crisper visuals at the cost of higher memory usage and file sizes Many devices have even higher resolution displays 1440p but the difference with 1080p is barely visible given the small size of smartphone displays Note that this will make non mipmapped textures grainy on low resolution devices so make sure to follow the instructions described in Reducing aliasing on downsampling Set Display Window Handheld Orientation to portrait Set the stretch mode to canvas_items Set the stretch aspect to expand This allows for supporting multiple aspect ratios and makes better use of tall smartphone displays such as 18 9 or 19 9 aspect ratios Configure Control nodes anchors to snap to the correct corners using the Layout menu Tip To better support tablets and foldable phones which frequently feature displays with aspect ratios close to 4 3 consider using a base resolution that has a 3 4 aspect ratio while following the rest of the instructions here For instance you can set the base window width to 960 and the base window height to 1280 Non game application Set the base window width and height to the smallest window size that you intend to target This is not required but this ensures that you design your UI with small window sizes in mind Keep the stretch mode to its default value disabled Keep the stretch aspect to its default value ignore its value won t be used since the stretch mode is disabled You can define a minimum window size by calling get_window set_min_size in a script s _ready function This prevents the user from resizing the application below a certain size which could break the UI layout Note Godot doesn t support manually overriding the 2D scale factor yet so it is not possible to have hiDPI support in non game applications Due to this it is recommended to leave Allow Hidpi disabled in non game applications to allow for the OS to use its low DPI fallback hiDPI support By default Godot projects are considered DPI aware by the operating system This is controlled by the Display Window Dpi Allow Hidpi project setting which should be left enabled whenever possible Disabling DPI awareness can break fullscreen behavior on Windows Since Godot projects are DPI aware they may appear at a very small window size when launching on an hiDPI display proportionally to the screen resolution For a game the most common way to work around this issue is to make them fullscreen by default Alternatively you could set the window size in an autoload s _ready function according to the screen size To ensure 2D elements don t appear too small on hiDPI displays For games use the canvas_items or viewport stretch modes so that 2D elements are automatically resized according to the current window size For non game applications use the disabled stretch mode and set the stretch scale to a value corresponding to the display scale factor in an autoload s _ready function The display scale factor is set in the operating system s settings and can be queried using screen_get_scale This method is currently only implemented on macOS On other operating systems you will need to implement a method to guess the display scale factor based on the screen resolution with a setting to let the user override this if needed This is the approach currently used by the Godot editor The Allow Hidpi setting is only effective on Windows and macOS It s ignored on all other platforms Note The Godot editor itself is always marked as DPI aware Running the project from the editor will only be DPI aware if Allow Hidpi is enabled in the Project Settings Reducing aliasing on downsampling If the game has a very high base resolution e g 3840 2160 aliasing might appear when downsampling to something considerably lower like 1280 720 To resolve this you can enable mipmaps on all your 2D textures However enabling mipmaps will increase memory usage which can be an issue on low end mobile devices Handling aspect ratios Once scaling for different resolutions is accounted for make sure that your user interface also scales for different aspect ratios This can be done using anchors and or containers Field of view scaling The 3D Camera node s Keep Aspect property defaults to the Keep Height scaling mode also called Hor This is usually the best value for desktop games and mobile games in landscape mode as widescreen displays will automatically use a wider field of view However if your 3D game is intended to be played in portrait mode it may make more sense to use Keep Width instead also called Vert This way smartphones with an aspect ratio taller than 16 9 e g 19 9 will use a taller field of view which is more logical here Scaling 2D and 3D elements differently using Viewports Using multiple Viewport nodes you can have different scales for various elements For instance you can use this to render the 3D world at a low resolution while keeping 2D elements at the native resolution This can improve performance significantly while keeping the HUD and other 2D elements crisp This is done by using the root Viewport node only for 2D elements then creating a Viewport node to display the 3D world and displaying it using a SubViewportContainer or TextureRect node There will effectively be two viewports in the final project One upside of using TextureRect over SubViewportContainer is that it allows enable linear filtering This makes scaled 3D viewports look better in many cases See the 3D viewport scaling demo for examples User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Fixing jitter stutter and input lag What is jitter stutter and input lag Jitter and stutter are two different alterations to visible motion of objects on screen that may affect a game even when running at full speed These effects are mostly visible in games where the world moves at a constant speed in a fixed direction like runners or platformers Input lag is unrelated to jitter and stutter but is sometimes discussed alongside Input lag refers to visible on screen delay when performing actions with the mouse keyboard controller or touchscreen It can be related to game code engine code or external factors such as hardware Input lag is most noticeable in games that use the mouse to aim such as first person games Input lag can t be completely eliminated but it can be reduced in several ways Distinguishing between jitter and stutter A game running at a normal framerate without exhibiting any effect will appear smooth A game exhibiting jitter will shake constantly in a very subtle way Finally a game exhibiting stutter will appear smooth but appear to stop or roll back a frame every few seconds Jitter There can be many causes of jitter the most typical one happens when the game physics frequency usually 60 Hz runs at a different resolution than the monitor refresh rate Check whether your monitor refresh rate is different from 60 Hz This is generally not a problem given that most monitors are 60 Hz and starting with Godot 3 1 a frame timer was introduced that tries to synchronize with refresh as well as possible Sometimes only some objects appear to jitter character or background This happens when they are processed in different time sources one is processed in the physics step while another is processed in the idle step Godot 3 1 does some improvements to this from allowing kinematic bodies to be animated in the regular _process loop to further fixes in the frame timer Stutter Stutter may happen due to two different reasons The first and most obvious one is the game not being able to keep full framerate performance Solving this is game specific and will require optimization The second is more complicated because it is often not associated to the engine or game but the underlying operating system Here is some information regarding stutter on different OSs On platforms that support disabling V Sync stuttering can be made less noticeable by disabling V Sync in the project settings This will however cause tearing to appear especially on monitors with low refresh rates If your monitor supports it consider enabling variable refresh rate G Sync FreeSync while leaving V Sync enabled This avoids mitigating some forms of stuttering without introducing tearing Forcing your graphics card to use the maximum performance profile can also help reduce stuttering at the cost of increased GPU power draw Windows Windows is known to cause stutter in windowed games This mostly depends on the hardware installed drivers version and processes running in parallel e g having many browser tabs open may cause stutter in a running game To avoid this starting with 3 1 Godot raises the game priority to Above Normal This helps considerably but may not completely eliminate stutter Eliminating this completely requires giving your game full privileges to become time critical which is not advised Some games may do it but it is advised to learn to live with this problem as it is common for Windows games and most users won t play games windowed games that are played in a window e g puzzle games will usually not exhibit this problem anyway For fullscreen Windows gives special priority to the game so stutter is no longer visible and very rare This is how most games are played When using a mouse with a polling rate of 1 000 Hz or more consider using a fully up to date Windows 11 installation which comes with fixes related to high CPU utilization with high polling rate mice These fixes are not available in Windows 10 and older versions Tip Games should use the Exclusive Fullscreen window mode as opposed to Fullscreen which is designed to prevent Windows from automatically treating the window as if it was exclusive fullscreen Fullscreen is meant to be used by GUI applications that want to use per pixel transparency without a risk of having it disabled by the OS It achieves this by leaving a 1 pixel line at the bottom of the screen By contrast Exclusive Fullscreen uses the actual screen size and allows Windows to reduce jitter and input lag for fullscreen games Linux Stutter may be visible on desktop Linux but this is usually associated with different video drivers and compositors Some compositors may also trigger this problem e g KWin so it is advised to try using a different one to rule it out as the cause Some window managers such as KWin and Xfwm allow you to manually disable compositing which can improve performance at the cost of tearing There is no workaround for driver or compositor stuttering other than reporting it as an issue to the driver or compositor developers Stutter may be more present when playing in windowed mode as opposed to fullscreen even with compositing disabled Feral GameMode can be used to automatically apply optimizations such as forcing the GPU performance profile when running specific processes macOS Generally macOS is stutter free although recently some bugs were reported when running on fullscreen this is a macOS bug If you have a machine exhibiting this behavior please let us know Android Generally Android is stutter and jitter free because the running activity gets all the priority That said there may be problematic devices older Kindle Fire is known to be one If you see this problem on Android please let us know iOS iOS devices are generally stutter free but older devices running newer versions of the operating system may exhibit problems This is generally unavoidable Input lag Project configuration On platforms that support disabling V Sync input lag can be made less noticeable by disabling V Sync in the project settings This will however cause tearing to appear especially on monitors with low refresh rates It s suggested to make V Sync available as an option for players to toggle When using the Forward or Mobile rendering methods another way to reduce visual latency when V Sync is enabled is to use double buffered V Sync instead of the default triple buffered V Sync Since Godot 4 3 this can be achieved by reducing the Display Window V Sync Swapchain Image Count project setting to 2 The downside of using double buffering is that framerate will be less stable if the display refresh rate can t be reached due to a CPU or GPU bottleneck For instance on a 60 Hz display if the framerate would normally drop to 55 FPS during gameplay with triple buffering it will have to drop down to 30 FPS momentarily with double buffering and then go back to 60 FPS when possible As a result double buffered V Sync is only recommended if you can consistently reach the display refresh rate on the target hardware Increasing the number of physics iterations per second can also reduce physics induced input latency This is especially noticeable when using physics interpolation which improves smoothness but increases latency To do so set Physics Common Physics Ticks Per Second to a value higher than the default 60 or set Engine physics_ticks_per_second at run time in a script Values that are a multiple of the monitor refresh rate typically 60 work best when physics interpolation is disabled as they will avoid jitter This means values such as 120 180 and 240 are good starting points As a bonus higher physics FPSes make tunneling and physics instability issues less likely to occur The downside of increasing physics FPS is that CPU usage will increase which can lead to performance bottlenecks in games that have heavy physics simulation code This can be alleviated by increasing physics FPS only in situations where low latency is critical or by letting players adjust physics FPS to match their hardware However different physics FPS will lead to different outcomes in physics simulation even when delta is consistently used in your game logic This can give certain players an advantage over others Therefore allowing the player to change the physics FPS themselves should be avoided for competitive multiplayer games Lastly you can disable input buffering on a per rendered frame basis by calling Input set_use_accumulated_input false in a script This will make it so the _input and _unhandled_input functions in your scripts are called on every input rather than accumulating inputs and waiting for a frame to be rendered Disabling input accumulation will increase CPU usage so it should be done with caution Tip On any Godot project you can use the disable vsync command line argument to forcibly disable V Sync Since Godot 4 2 max fps fps can also be used to set a FPS limit 0 is unlimited These arguments can be used at the same time Hardware OS specific If your monitor supports it consider enabling variable refresh rate G Sync FreeSync while leaving V Sync enabled then cap the framerate in the project settings to a slightly lower value than your monitor s maximum refresh rate as per this page For example on a 144 Hz monitor you can set the project s framerate cap to 141 This may be counterintuitive at first but capping the FPS below the maximum refresh rate range ensures that the OS never has to wait for vertical blanking to finish This leads to similar input lag as V Sync disabled with the same framerate cap usually less than 1 ms greater but without any tearing This can be done by changing the Application Run Max FPS project setting or assigning Engine max_fps at run time in a script On some platforms you can also opt into a low latency mode in the graphics driver options such as the NVIDIA Control Panel on Windows The Ultra setting will give you the lowest possible latency at the cost of slightly lower average framerates Forcing the GPU to use the maximum performance profile can also further reduce input lag at the cost of higher power consumption and resulting heat fan noise Finally make sure your monitor is running at its highest possible refresh rate in the OS display settings Also ensure that your mouse is configured to use its highest polling rate typically 1 000 Hz for gaming mice sometimes more High USB polling rates can however result in high CPU usage so 500 Hz may be a safer bet on low end CPUs If your mouse offers multiple DPI settings consider also using the highest possible setting and reducing in game sensitivity to reduce mouse latency On Linux disabling compositing in window managers that allow it such as KWin or Xfwm can reduce input lag significantly Reporting jitter stutter or input lag problems If you are reporting a stutter or jitter problem opening an issue not caused by any of the above reasons please specify very clearly all the information possible about device operating system driver versions etc This may help to better troubleshoot it If you are reporting input lag problems please include a capture made with a high speed camera such as your phone s slow motion video mode The capture must have both the screen and the input device visible so that the number of frames between an input and the on screen result can be counted Also make sure to mention your monitor s refresh rate and your input device s polling rate especially for mice Also make sure to use the correct term jitter stutter input lag based on the exhibited behavior This will help understand your issue much faster Provide a project that can be used to reproduce the issue and if possible include a screen capture demonstrating the bug User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue The Compositor The compositor is a new feature in Godot 4 that allows control over the rendering pipeline when rendering the contents of a Viewport It can be configured on a WorldEnvironment node where it applies to all Viewports or it can be configured on a Camera3D and apply only to the Viewport using that camera The Compositor resource is used to configure the compositor To get started simply create a new compositor on the appropriate node Note The compositor is currently a feature that is only supported by the Mobile and Forward renderers Compositor effects Compositor effects allow you to insert additional logic into the rendering pipeline at various stages This is an advanced feature that requires a high level of understanding of the rendering pipeline to use to its best advantage As the core logic of the compositor effect is called from the rendering pipeline it is important to note that this logic will thus run within the thread on which rendering takes place Care needs to be taken to ensure we don t run into threading issues To illustrate how to use compositor effects we ll create a simple post processing effect that allows you to write your own shader code and apply this full screen through a compute shader You can find the finished demo project here We start by creating a new script called post_process_shader gd We ll make this a tool script so we can see the compositor effect work in the editor We need to extend our node from CompositorEffect We must also give our script a class name tool extends CompositorEffect class_name PostProcessShader Copy to clipboard Next we re going to define a constant for our shader template code This is the boilerplate code that makes our compute shader work const template_shader String version 450 Invocations in the x y z dimension layout local_size_x 8 local_size_y 8 local_size_z 1 in layout rgba16f set 0 binding 0 uniform image2D color_image Our push constant layout push_constant std430 uniform Params vec2 raster_size vec2 reserved params The code we want to execute in each invocation void main ivec2 uv ivec2 gl_GlobalInvocationID xy ivec2 size ivec2 params raster_size if uv x size x uv y size y return vec4 color imageLoad color_image uv COMPUTE_CODE imageStore color_image uv color Copy to clipboard For more information on how compute shaders work please check Using compute shaders The important bit here is that for every pixel on our screen our main function is executed and inside of this we load the current color value of our pixel execute our user code and write our modified color back to our color image COMPUTE_CODE gets replaced by our user code In order to set our user code we need an export variable We ll also define a few script variables we ll be using export_multiline var shader_code String set value mutex lock shader_code value shader_is_dirty true mutex unlock var rd RenderingDevice var shader RID var pipeline RID var mutex Mutex Mutex new var shader_is_dirty bool true Copy to clipboard Note the use of a Mutex in our code Most of our implementation gets called from the rendering engine and thus runs within our rendering thread We need to ensure that we set our new shader code and mark our shader code as dirty without our render thread accessing this data at the same time Next we initialize our effect Called when this resource is constructed func _init effect_callback_type EFFECT_CALLBACK_TYPE_POST_TRANSPARENT rd RenderingServer get_rendering_device Copy to clipboard The main thing here is setting our effect_callback_type which tells the rendering engine at what stage of the render pipeline to call our code Note Currently we only have access to the stages of the 3D rendering pipeline We also get a reference to our rendering device which will come in very handy We also need to clean up after ourselves for this we react to the NOTIFICATION_PREDELETE notification System notifications we want to react on the notification that alerts us we are about to be destroyed func _notification what if what NOTIFICATION_PREDELETE if shader is_valid Freeing our shader will also free any dependents such as the pipeline rd free_rid shader Copy to clipboard Note that we do not use our mutex here even though we create our shader inside of our render thread The methods on our rendering server are thread safe and free_rid will be postponed cleaning up the shader until after any frames currently being rendered are finished Also note that we are not freeing our pipeline The rendering device does dependency tracking and as the pipeline is dependent on the shader it will be automatically freed when the shader is destructed From this point onwards our code will run on the rendering thread Our next step is a helper function that will recompile the shader if the user code was changed Check if our shader has changed and needs to be recompiled func _check_shader bool if not rd return false var new_shader_code String Check if our shader is dirty mutex lock if shader_is_dirty new_shader_code shader_code shader_is_dirty false mutex unlock We don t have a new shader if new_shader_code is_empty return pipeline is_valid Apply template new_shader_code template_shader replace COMPUTE_CODE new_shader_code Out with the old if shader is_valid rd free_rid shader shader RID pipeline RID In with the new var shader_source RDShaderSource RDShaderSource new shader_source language RenderingDevice SHADER_LANGUAGE_GLSL shader_source source_compute new_shader_code var shader_spirv RDShaderSPIRV rd shader_compile_spirv_from_source shader_source if shader_spirv compile_error_compute push_error shader_spirv compile_error_compute push_error In new_shader_code return false shader rd shader_create_from_spirv shader_spirv if not shader is_valid return false pipeline rd compute_pipeline_create shader return pipeline is_valid Copy to clipboard At the top of this method we again use our mutex to protect accessing our user shader code and our is dirty flag We make a local copy of the user shader code if our user shader code is dirty If we don t have a new code fragment we return true if we already have a valid pipeline If we do have a new code fragment we embed it in our template code and then compile it Warning The code shown here compiles our new code in runtime This is great for prototyping as we can immediately see the effect of the changed shader This prevents precompiling and caching this shader which may be an issues on some platforms such as consoles Note that the demo project comes with an alternative example where a glsl file contains the entire compute shader and this is used Godot is able to precompile and cache the shader with this approach Finally we need to implement our effect callback the rendering engine will call this at the right stage of rendering Called by the rendering thread every frame func _render_callback p_effect_callback_type p_render_data if rd and p_effect_callback_type EFFECT_CALLBACK_TYPE_POST_TRANSPARENT and _check_shader Get our render scene buffers object this gives us access to our render buffers Note that implementation differs per renderer hence the need for the cast var render_scene_buffers RenderSceneBuffersRD p_render_data get_render_scene_buffers if render_scene_buffers Get our render size this is the 3D render resolution var size render_scene_buffers get_internal_size if size x 0 and size y 0 return We can use a compute shader here var x_groups size x 1 8 1 var y_groups size y 1 8 1 var z_groups 1 Push constant var push_constant PackedFloat32Array PackedFloat32Array push_constant push_back size x push_constant push_back size y push_constant push_back 0 0 push_constant push_back 0 0 Loop through views just in case we re doing stereo rendering No extra cost if this is mono var view_count render_scene_buffers get_view_count for view in range view_count Get the RID for our color image we will be reading from and writing to it var input_image render_scene_buffers get_color_layer view Create a uniform set this will be cached the cache will be cleared if our viewports configuration is changed var uniform RDUniform RDUniform new uniform uniform_type RenderingDevice UNIFORM_TYPE_IMAGE uniform binding 0 uniform add_id input_image var uniform_set UniformSetCacheRD get_cache shader 0 uniform Run our compute shader var compute_list rd compute_list_begin rd compute_list_bind_compute_pipeline compute_list pipeline rd compute_list_bind_uniform_set compute_list uniform_set 0 rd compute_list_set_push_constant compute_list push_constant to_byte_array push_constant size 4 rd compute_list_dispatch compute_list x_groups y_groups z_groups rd compute_list_end Copy to clipboard At the start of this method we check if we have a rendering device if our callback type is the correct one and check if we have our shader Note The check for the effect type is only a safety mechanism We ve set this in our _init function however it is possible for the user to change this in the UI Our p_render_data parameter gives us access to an object that holds data specific to the frame we re currently rendering We re currently only interested in our render scene buffers which provide us access to all the internal buffers used by the rendering engine Note that we cast this to RenderSceneBuffersRD to expose the full API to this data Next we obtain our internal size which is the resolution of our 3D render buffers before they are upscaled if applicable upscaling happens after our post processes have run From our internal size we calculate our group size see our local size in our template shader We also populate our push constant so our shader knows our size Godot does not support structs here yet so we use a PackedFloat32Array to store this data into Note that we have to pad this array with a 16 byte alignment In other words the length of our array needs to be a multiple of 4 Now we loop through our views this is in case we re using multiview rendering which is applicable for stereo rendering XR In most cases we will only have one view Note There is no performance benefit to use multiview for post processing here handling the views separately like this will still enable the GPU to use parallelism if beneficial Next we obtain the color buffer for this view This is the buffer into which our 3D scene has been rendered We then prepare a uniform set so we can communicate the color buffer to our shader Note the use of our UniformSetCacheRD cache which ensures we can check for our uniform set each frame As our color buffer can change from frame to frame and our uniform cache will automatically clean up uniform sets when buffers are freed this is the safe way to ensure we do not leak memory or use an outdated set Finally we build our compute list by binding our pipeline binding our uniform set pushing our push constant data and calling dispatch for our groups With our compositor effect completed we now need to add it to our compositor On our compositor we expand the compositor effects property and press Add Element Now we can add our compositor effect After selecting our PostProcessShader we need to set our user shader code float gray color r 0 2125 color g 0 7154 color b 0 0721 color rgb vec3 gray Copy to clipboard With that all done our output is in grayscale Note For a more advanced example of post effects check out the Radial blur based sky rays example project created by Bastiaan Olij User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Scripting This section covers programming languages and core features to code your games in Godot Here you will find information that is not already covered in more specific sections For instance to learn about inputs we recommend you to read Inputs Programming languages The sections below each focus on a given programming language GDScript C NET GDExtension Core features Some features are specific to the engine and are available in all supported languages Whether you code in GDScript C or another language the pages below will help you make the most of Godot How to read the Godot API Debug Idle and Physics Processing Groups Nodes and scene instances Overridable functions Cross language scripting Creating script templates Evaluating expressions Change scenes manually Instancing with signals Pausing games and process mode File system Resources Singletons Autoload Using SceneTree Scene Unique Nodes Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue GDScript GDScript reference GDScript An introduction to dynamic languages GDScript exported properties GDScript documentation comments GDScript style guide Static typing in GDScript GDScript warning system GDScript format strings See also See GDScript grammar if you are interested in writing a third party tool that interacts with GDScript such as a linter or formatter Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue GDScript reference GDScript is a high level object oriented imperative and gradually typed programming language built for Godot It uses an indentation based syntax similar to languages like Python Its goal is to be optimized for and tightly integrated with Godot Engine allowing great flexibility for content creation and integration GDScript is entirely independent from Python and is not based on it History Note Documentation about GDScript s history has been moved to the Frequently Asked Questions Example of GDScript Some people can learn better by taking a look at the syntax so here s an example of how GDScript looks Everything after is a comment A file is a class optional icon to show in the editor dialogs icon res path to optional icon svg optional class definition class_name MyClass Inheritance extends BaseClass Member variables var a 5 var s Hello var arr 1 2 3 var dict key value 2 3 var other_dict key value other_key 2 var typed_var int var inferred_type String Constants const ANSWER 42 const THE_NAME Charly Enums enum UNIT_NEUTRAL UNIT_ENEMY UNIT_ALLY enum Named THING_1 THING_2 ANOTHER_THING 1 Built in vector types var v2 Vector2 1 2 var v3 Vector3 1 2 3 Functions func some_function param1 param2 param3 const local_const 5 if param1 local_const print param1 elif param2 5 print param2 else print Fail for i in range 20 print i while param2 0 param2 1 match param3 3 print param3 is 3 _ print param3 is not 3 var local_var param1 3 return local_var Functions override functions with the same name on the base super class If you still want to call them use super func something p1 p2 super p1 p2 It s also possible to call another function in the super class func other_something p1 p2 super something p1 p2 Inner class class Something var a 10 Constructor func _init print Constructed var lv Something new print lv a Copy to clipboard If you have previous experience with statically typed languages such as C C or C but never used a dynamically typed one before it is advised you read this tutorial GDScript An introduction to dynamic languages Language In the following an overview is given to GDScript Details such as which methods are available to arrays or other objects should be looked up in the linked class descriptions Identifiers Any string that restricts itself to alphabetic characters a to z and A to Z digits 0 to 9 and _ qualifies as an identifier Additionally identifiers must not begin with a digit Identifiers are case sensitive foo is different from FOO Identifiers may also contain most Unicode characters part of UAX 31 This allows you to use identifier names written in languages other than English Unicode characters that are considered confusable for ASCII characters and emoji are not allowed in identifiers Keywords The following is the list of keywords supported by the language Since keywords are reserved words tokens they can t be used as identifiers Operators like in not and or or and names of built in types as listed in the following sections are also reserved Keywords are defined in the GDScript tokenizer in case you want to take a look under the hood Keyword Description if See if else elif elif See if else elif else See if else elif for See for while See while match See match when Used by pattern guards in match statements break Exits the execution of the current for or while loop continue Immediately skips to the next iteration of the for or while loop pass Used where a statement is required syntactically but execution of code is undesired e g in empty functions return Returns a value from a function class Defines an inner class See Inner classes class_name Defines the script as a globally accessible class with the specified name See Registering named classes extends Defines what class to extend with the current class is Tests whether a variable extends a given class or is of a given built in type in Tests whether a value is within a string array range dictionary or node When used with for it iterates through them instead of testing as Cast the value to a given type if possible self Refers to current class instance super Resolves the scope of the parent method See Inheritance signal Defines a signal func Defines a function static Defines a static function or a static member variable const Defines a constant enum Defines an enum var Defines a variable breakpoint Editor helper for debugger breakpoints Unlike breakpoints created by clicking in the gutter breakpoint is stored in the script itself This makes it persistent across different machines when using version control preload Preloads a class or variable See Classes as resources await Waits for a signal or a coroutine to finish See Awaiting signals or coroutines yield Previously used for coroutines Kept as keyword for transition assert Asserts a condition logs error on failure Ignored in non debug builds See Assert keyword void Used to represent that a function does not return any value PI PI constant TAU TAU constant INF Infinity constant Used for comparisons and as result of calculations NAN NAN not a number constant Used as impossible result from calculations Operators The following is the list of supported operators and their precedence All binary operators are left associative including the operator This means that 2 2 3 is equal to 2 2 3 Use parentheses to explicitly specify precedence you need for example 2 2 3 The ternary if else operator is right associative Operator Description Grouping highest priority Parentheses are not really an operator but allow you to explicitly specify the precedence of an operation x index Subscription x attribute Attribute reference foo Function call await x Awaiting signals or coroutines x is Node x is not Node Type checking See also is_instance_of function x y Power Multiplies x by itself y times similar to calling pow function x Bitwise NOT x x Identity Negation x y x y x y Multiplication Division Remainder The operator is additionally used for format strings Note These operators have the same behavior as C which may be unexpected for users coming from Python JavaScript etc See a detailed note after the table x y x y Addition or Concatenation Subtraction x y x y Bit shifting x y Bitwise AND x y Bitwise XOR x y Bitwise OR x y x y x y x y x y x y Comparison See a detailed note after the table x in y x not in y Inclusion checking in is also used with the for keyword as part of the syntax not x x Boolean NOT and its unrecommended alias x and y x y Boolean AND and its unrecommended alias x or y x y Boolean OR and its unrecommended alias true_expr if cond else false_expr Ternary if else x as Node Type casting x y x y x y x y x y x y x y x y x y x y x y x y Assignment lowest priority You cannot use an assignment operator inside an expression Note The behavior of some operators may differ from what you expect If both operands of the operator are int then integer division is performed instead of fractional For example 5 2 2 not 2 5 If this is not desired use at least one float literal x 2 0 cast float x y or multiply by 1 0 x 1 0 y The operator is only available for ints for floats use the fmod function For negative values the operator and fmod use truncation instead of rounding towards negative infinity This means that the remainder has a sign If you need the remainder in a mathematical sense use the posmod and fposmod functions instead The and operators sometimes allow you to compare values of different types for example 1 1 0 is true but in other cases it can cause a runtime error If you re not sure about the types of the operands you can safely use the is_same function but note that it is more strict about types and references To compare floats use the is_equal_approx and is_zero_approx functions instead Literals Example s Description null Null value false true Boolean values 45 Base 10 integer 0x8f51 Base 16 hexadecimal integer 0b101010 Base 2 binary integer 3 14 58 1e 10 Floating point number real Hello Hi Regular strings Hello Hi Triple quoted regular strings r Hello r Hi Raw strings r Hello r Hi Triple quoted raw strings name StringName Node Label NodePath There are also two constructs that look like literals but actually are not Example Description NodePath Shorthand for get_node NodePath UniqueNode Shorthand for get_node UniqueNode Integers and floats can have their numbers separated with _ to make them more readable The following ways to write numbers are all valid 12_345_678 Equal to 12345678 3 141_592_7 Equal to 3 1415927 0x8080_0000_ffff Equal to 0x80800000ffff 0b11_00_11_00 Equal to 0b11001100 Copy to clipboard Regular string literals can contain the following escape sequences Escape sequence Expands to n Newline line feed t Horizontal tab character r Carriage return a Alert beep bell b Backspace f Formfeed page break v Vertical tab character Double quote Single quote Backslash uXXXX UTF 16 Unicode codepoint XXXX hexadecimal case insensitive UXXXXXX UTF 32 Unicode codepoint XXXXXX hexadecimal case insensitive There are two ways to represent an escaped Unicode character above 0xFFFF as a UTF 16 surrogate pair uXXXX uXXXX as a single UTF 32 codepoint UXXXXXX Also using followed by a newline inside a string will allow you to continue it in the next line without inserting a newline character in the string itself A string enclosed in quotes of one type for example can contain quotes of another type for example without escaping Triple quoted strings allow you to avoid escaping up to two consecutive quotes of the same type unless they are adjacent to the string edges Raw string literals always encode the string as it appears in the source code This is especially useful for regular expressions A raw string literal doesn t process escape sequences however it does recognize and and replaces them with themselves Thus a string can have a quote that matches the opening one but only if it s preceded by a backslash print t char t Prints char t print r tchar t Prints tchar t Copy to clipboard Note Some strings cannot be represented using raw string literals you cannot have an odd number of backslashes at the end of a string or have an unescaped opening quote inside the string However in practice this doesn t matter since you can use a different quote type or use concatenation with a regular string literal GDScript also supports format strings Annotations Annotations are special tokens in GDScript that act as modifiers to a script or its code and may affect how the script is treated by the Godot engine or editor Every annotation starts with the character and is specified by a name A detailed description and example for each annotation can be found inside the GDScript class reference For instance you can use it to export a value to the editor export_range 1 100 1 or_greater var ranged_var int 50 Copy to clipboard For more information about exporting properties read the GDScript exports article Any constant expression compatible with the required argument type can be passed as an annotation argument value const MAX_SPEED 120 0 export_range 0 0 0 5 MAX_SPEED var initial_speed float 0 25 MAX_SPEED Copy to clipboard Annotations can be specified one per line or all in the same line They affect the next statement that isn t an annotation Annotations can have arguments sent between parentheses and separated by commas Both of these are the same annotation_a annotation_b var variable annotation_a annotation_b var variable Copy to clipboard onready annotation When using nodes it s common to desire to keep references to parts of the scene in a variable As scenes are only warranted to be configured when entering the active scene tree the sub nodes can only be obtained when a call to Node _ready is made var my_label func _ready my_label get_node MyLabel Copy to clipboard This can get a little cumbersome especially when nodes and external references pile up For this GDScript has the onready annotation that defers initialization of a member variable until _ready is called It can replace the above code with a single line onready var my_label get_node MyLabel Copy to clipboard Warning Applying onready and any export annotation to the same variable doesn t work as you might expect The onready annotation will cause the default value to be set after the export takes effect and will override it export var a init_value_a onready export var b init_value_b func _init prints a b init_value_a null func _notification what if what NOTIFICATION_SCENE_INSTANTIATED prints a b exported_value_a exported_value_b func _ready prints a b exported_value_a init_value_b Copy to clipboard Therefore the ONREADY_WITH_EXPORT warning is generated which is treated as an error by default We do not recommend disabling or ignoring it Comments Anything from a to the end of the line is ignored and is considered a comment This is a comment Copy to clipboard Tip In the Godot script editor special keywords are highlighted within comments to bring the user s attention to specific comments Critical appears in red ALERT ATTENTION CAUTION CRITICAL DANGER SECURITY Warning appears in yellow BUG DEPRECATED FIXME HACK TASK TBD TODO WARNING Notice appears in green INFO NOTE NOTICE TEST TESTING These keywords are case sensitive so they must be written in uppercase for them to be recognized In the example below TODO will appear in yellow by default The symbol after the keyword is not required but it s often used TODO Add more items for the player to choose from Copy to clipboard The list of highlighted keywords and their colors can be changed in the Text Editor Theme Comment Markers section of the Editor Settings Code regions Code regions are special types of comments that the script editor understands as foldable regions This means that after writing code region comments you can collapse and expand the region by clicking the arrow that appears at the left of the comment This arrow appears within a purple square to be distinguishable from standard code folding The syntax is as follows Important There must be no space between the and region or endregion Region without a description region endregion Region with a description region Some description that is displayed even when collapsed endregion Copy to clipboard Tip To create a code region quickly select several lines in the script editor right click the selection then choose Create Code Region The region description will be selected automatically for editing It is possible to nest code regions within other code regions Here s a concrete usage example of code regions This comment is outside the code region It will be visible when collapsed region Terrain generation This comment is inside the code region It won t be visible when collapsed func generate_lakes pass func generate_hills pass endregion region Terrain population func place_vegetation pass func place_roads pass endregion Copy to clipboard This can be useful to organize large chunks of code into easier to understand sections However remember that external editors generally don t support this feature so make sure your code is easy to follow even when not relying on folding code regions Note Individual functions and indented sections such as if and for can always be collapsed in the script editor This means you should avoid using a code region to contain a single function or indented section as it won t bring much of a benefit Code regions work best when they re used to group multiple elements together Line continuation A line of code in GDScript can be continued on the next line by using a backslash Add one at the end of a line and the code on the next line will act like it s where the backslash is Here is an example var a 1 2 Copy to clipboard A line can be continued multiple times like this var a 1 4 10 4 Copy to clipboard Built in types Built in types are stack allocated They are passed as values This means a copy is created on each assignment or when passing them as arguments to functions The exceptions are Object Array Dictionary and packed arrays such as PackedByteArray which are passed by reference so they are shared All arrays Dictionary and some objects Node Resource have a duplicate method that allows you to make a copy Basic built in types A variable in GDScript can be assigned to several built in types null null is an empty data type that contains no information and can not be assigned any other value bool Short for boolean it can only contain true or false int Short for integer it stores whole numbers positive and negative It is stored as a 64 bit value equivalent to int64_t in C float Stores real numbers including decimals using floating point values It is stored as a 64 bit value equivalent to double in C Note Currently data structures such as Vector2 Vector3 and PackedFloat32Array store 32 bit single precision float values String A sequence of characters in Unicode format StringName An immutable string that allows only one instance of each name They are slower to create and may result in waiting for locks when multithreading In exchange they re very fast to compare which makes them good candidates for dictionary keys NodePath A pre parsed path to a node or a node property It can be easily assigned to and from a String They are useful to interact with the tree to get a node or affecting properties like with Tweens Vector built in types Vector2 2D vector type containing x and y fields Can also be accessed as an array Vector2i Same as a Vector2 but the components are integers Useful for representing items in a 2D grid Rect2 2D Rectangle type containing two vectors fields position and size Also contains an end field which is position size Vector3 3D vector type containing x y and z fields This can also be accessed as an array Vector3i Same as Vector3 but the components are integers Can be use for indexing items in a 3D grid Transform2D 3 2 matrix used for 2D transforms Plane 3D Plane type in normalized form that contains a normal vector field and a d scalar distance Quaternion Quaternion is a datatype used for representing a 3D rotation It s useful for interpolating rotations AABB Axis aligned bounding box or 3D box contains 2 vectors fields position and size Also contains an end field which is position size Basis 3x3 matrix used for 3D rotation and scale It contains 3 vector fields x y and z and can also be accessed as an array of 3D vectors Transform3D 3D Transform contains a Basis field basis and a Vector3 field origin Engine built in types Color Color data type contains r g b and a fields It can also be accessed as h s and v for hue saturation value RID Resource ID RID Servers use generic RIDs to reference opaque data Object Base class for anything that is not a built in type Container built in types Array Generic sequence of arbitrary object types including other arrays or dictionaries see below The array can resize dynamically Arrays are indexed starting from index 0 Negative indices count from the end var arr arr 1 2 3 var b arr 1 This is 2 var c arr arr size 1 This is 3 var d arr 1 Same as the previous line but shorter arr 0 Hi Replacing value 1 with Hi arr append 4 Array is now Hi 2 3 4 Copy to clipboard Typed arrays Godot 4 0 added support for typed arrays On write operations Godot checks that element values match the specified type so the array cannot contain invalid values The GDScript static analyzer takes typed arrays into account however array methods like front and back still have the Variant return type Typed arrays have the syntax Array Type where Type can be any Variant type native or user class or enum Nested array types like Array Array int are not supported var a Array int var b Array Node var c Array MyClass var d Array MyEnum var e Array Variant Copy to clipboard Array and Array Variant are the same thing Note Arrays are passed by reference so the array element type is also an attribute of the in memory structure referenced by a variable in runtime The static type of a variable restricts the structures that it can reference to Therefore you cannot assign an array with a different element type even if the type is a subtype of the required type If you want to convert a typed array you can create a new array and use the Array assign method var a Array Node2D Node2D new OK You can add the value to the array because Node2D extends Node var b Array Node a 0 Error You cannot assign an Array Node2D to an Array Node variable b a OK But you can use the assign method instead Unlike the operator the assign method copies the contents of the array not the reference b assign a Copy to clipboard The only exception was made for the Array Array Variant type for user convenience and compatibility with old code However operations on untyped arrays are considered unsafe Packed arrays GDScript arrays are allocated linearly in memory for speed Large arrays more than tens of thousands of elements may however cause memory fragmentation If this is a concern special types of arrays are available These only accept a single data type They avoid memory fragmentation and use less memory but are atomic and tend to run slower than generic arrays They are therefore only recommended to use for large data sets PackedByteArray An array of bytes integers from 0 to 255 PackedInt32Array An array of 32 bit integers PackedInt64Array An array of 64 bit integers PackedFloat32Array An array of 32 bit floats PackedFloat64Array An array of 64 bit floats PackedStringArray An array of strings PackedVector2Array An array of Vector2 values PackedVector3Array An array of Vector3 values PackedVector4Array An array of Vector4 values PackedColorArray An array of Color values Dictionary Associative container which contains values referenced by unique keys var d 4 5 A key A value 28 1 2 3 d Hi 0 d 22 value some_key 2 other_key 2 3 4 more_key Hello Copy to clipboard Lua style table syntax is also supported Lua style uses instead of and doesn t use quotes to mark string keys making for slightly less to write However keys written in this form can t start with a digit like any GDScript identifier and must be string literals var d test22 value some_key 2 other_key 2 3 4 more_key Hello Copy to clipboard To add a key to an existing dictionary access it like an existing key and assign to it var d Create an empty Dictionary d waiting 14 Add String waiting as a key and assign the value 14 to it d 4 hello Add integer 4 as a key and assign the String hello as its value d Godot 3 01 Add String Godot as a key and assign the value 3 01 to it var test 4 Prints hello by indexing the dictionary with a dynamic key This is not the same as d test The bracket syntax equivalent to d test is d test print d test Copy to clipboard Note The bracket syntax can be used to access properties of any Object not just Dictionaries Keep in mind it will cause a script error when attempting to index a non existing property To avoid this use the Object get and Object set methods instead Signal A signal is a message that can be emitted by an object to those who want to listen to it The Signal type can be used for passing the emitter around Signals are better used by getting them from actual objects e g Button button_up Callable Contains an object and a function which is useful for passing functions as values e g when connecting to signals Getting a method as a member returns a callable var x Sprite2D rotate will set the value of x to a callable with Sprite2D as the object and rotate as the method You can call it using the call method x call PI Data Variables Variables can exist as class members or local to functions They are created with the var keyword and may optionally be assigned a value upon initialization var a Data type is null by default var b 5 var c 3 8 var d b c Variables are always initialized in direct order see below Copy to clipboard Variables can optionally have a type specification When a type is specified the variable will be forced to have always that same type and trying to assign an incompatible value will raise an error Types are specified in the variable declaration using a colon symbol after the variable name followed by the type var my_vector2 Vector2 var my_node Node Sprite2D new Copy to clipboard If the variable is initialized within the declaration the type can be inferred so it s possible to omit the type name var my_vector2 Vector2 my_vector2 is of type Vector2 var my_node Sprite2D new my_node is of type Sprite2D Copy to clipboard Type inference is only possible if the assigned value has a defined type otherwise it will raise an error Valid types are Built in types Array Vector2 int String etc Engine classes Node Resource Reference etc Constant names if they contain a script resource MyScript if you declared const MyScript preload res my_script gd Other classes in the same script respecting scope InnerClass NestedClass if you declared class NestedClass inside the class InnerClass in the same scope Script classes declared with the class_name keyword Autoloads registered as singletons Note While Variant is a valid type specification it s not an actual type It only means there s no set type and is equivalent to not having a static type at all Therefore inference is not allowed by default for Variant since it s likely a mistake You can turn off this check or make it only a warning by changing it in the project settings See GDScript warning system for details Initialization order Member variables are initialized in the following order Depending on the variable s static type the variable is either null untyped variables and objects or has a default value of the type 0 for int false for bool etc The specified values are assigned in the order of the variables in the script from top to bottom Only for Node derived classes If the onready annotation is applied to a variable its initialization is deferred to step 5 If defined the _init method is called When instantiating scenes and resources the exported values are assigned Only for Node derived classes onready variables are initialized Only for Node derived classes If defined the _ready method is called Warning You can specify a complex expression as a variable initializer including function calls Make sure the variables are initialized in the correct order otherwise your values may be overwritten For example var a int proxy a 1 var b int proxy b 2 var _data Dictionary func proxy key String value int _data key value print _data return value func _init void print _data Copy to clipboard Will print a 1 a 1 b 2 Copy to clipboard To fix this move the _data variable definition above the a definition or remove the empty dictionary assignment Static variables A class member variable can be declared static static var a Copy to clipboard Static variables belong to the class not instances This means that static variables share values between multiple instances unlike regular member variables From inside a class you can access static variables from any function both static and non static From outside the class you can access static variables using the class or an instance the second is not recommended as it is less readable Note The export and onready annotations cannot be applied to a static variable Local variables cannot be static The following example defines a Person class with a static variable named max_id We increment the max_id in the _init function This makes it easy to keep track of the number of Person instances in our game person gd class_name Person static var max_id 0 var id var name func _init p_name max_id 1 id max_id name p_name Copy to clipboard In this code we create two instances of our Person class and check that the class and every instance have the same max_id value because the variable is static and accessible to every instance test gd extends Node func _ready var person1 Person new John Doe var person2 Person new Jane Doe print person1 id 1 print person2 id 2 print Person max_id 2 print person1 max_id 2 print person2 max_id 2 Copy to clipboard Static variables can have type hints setters and getters static var balance int 0 static var debt int get return balance set value balance value Copy to clipboard A base class static variable can also be accessed via a child class class A static var x 1 class B extends A pass func _ready prints A x B x 1 1 A x 2 prints A x B x 2 2 B x 3 prints A x B x 3 3 Copy to clipboard static_unload annotation Since GDScript classes are resources having static variables in a script prevents it from being unloaded even if there are no more instances of that class and no other references left This can be important if static variables store large amounts of data or hold references to other project resources such as scenes You should clean up this data manually or use the static_unload annotation if static variables don t store important data and can be reset Warning Currently due to a bug scripts are never freed even if static_unload annotation is used Note that static_unload applies to the entire script including inner classes and must be placed at the top of the script before class_name and extends static_unload class_name MyNode extends Node Copy to clipboard See also Static functions and Static constructor Casting Values assigned to typed variables must have a compatible type If it s needed to coerce a value to be of a certain type in particular for object types you can use the casting operator as Casting between object types results in the same object if the value is of the same type or a subtype of the cast type var my_node2D Node2D my_node2D Sprite2D as Node2D Works since Sprite2D is a subtype of Node2D Copy to clipboard If the value is not a subtype the casting operation will result in a null value var my_node2D Node2D my_node2D Button as Node2D Results in null since a Button is not a subtype of Node2D Copy to clipboard For built in types they will be forcibly converted if possible otherwise the engine will raise an error var my_int int my_int 123 as int The string can be converted to int my_int Vector2 as int A Vector2 can t be converted to int this will cause an error Copy to clipboard Casting is also useful to have better type safe variables when interacting with the scene tree Will infer the variable to be of type Sprite2D var my_sprite Character as Sprite2D Will fail if AnimPlayer is not an AnimationPlayer even if it has the method play AnimPlayer as AnimationPlayer play walk Copy to clipboard Constants Constants are values you cannot change when the game is running Their value must be known at compile time Using the const keyword allows you to give a constant value a name Trying to assign a value to a constant after it s declared will give you an error We recommend using constants whenever a value is not meant to change const A 5 const B Vector2 20 20 const C 10 20 Constant expression const D Vector2 20 30 x Constant expression 20 const E 1 2 3 4 0 Constant expression 1 const F sin 20 sin can be used in constant expressions const G x 20 Invalid this is not a constant expression const H A 20 Constant expression 25 A is a constant Copy to clipboard Although the type of constants is inferred from the assigned value it s also possible to add explicit type specification const A int 5 const B Vector2 Vector2 Copy to clipboard Assigning a value of an incompatible type will raise an error You can also create constants inside a function which is useful to name local magic values Enums Enums are basically a shorthand for constants and are pretty useful if you want to assign consecutive integers to some constant enum TILE_BRICK TILE_FLOOR TILE_SPIKE TILE_TELEPORT Is the same as const TILE_BRICK 0 const TILE_FLOOR 1 const TILE_SPIKE 2 const TILE_TELEPORT 3 Copy to clipboard If you pass a name to the enum it will put all the keys inside a constant Dictionary of that name This means all constant methods of a dictionary can also be used with a named enum Important Keys in a named enum are not registered as global constants They should be accessed prefixed by the enum s name Name KEY enum State STATE_IDLE STATE_JUMP 5 STATE_SHOOT Is the same as const State STATE_IDLE 0 STATE_JUMP 5 STATE_SHOOT 6 Access values with State STATE_IDLE etc func _ready Access values with Name KEY prints 5 print State STATE_JUMP Use dictionary methods prints STATE_IDLE STATE_JUMP STATE_SHOOT print State keys prints STATE_IDLE 0 STATE_JUMP 5 STATE_SHOOT 6 print State prints 0 5 6 print State values Copy to clipboard Functions Functions always belong to a class The scope priority for variable look up is local class member global The self variable is always available and is provided as an option for accessing class members but is not always required and should not be sent as the function s first argument unlike Python func my_function a b print a print b return a b Return is optional without it null is returned Copy to clipboard A function can return at any point The default return value is null If a function contains only one line of code it can be written on one line func square a return a a func hello_world print Hello World func empty_function pass Copy to clipboard Functions can also have type specification for the arguments and for the return value Types for arguments can be added in a similar way to variables func my_function a int b String pass Copy to clipboard If a function argument has a default value it s possible to infer the type func my_function int_arg 42 String_arg string pass Copy to clipboard The return type of the function can be specified after the arguments list using the arrow token func my_int_function int return 0 Copy to clipboard Functions that have a return type must return a proper value Setting the type as void means the function doesn t return anything Void functions can return early with the return keyword but they can t return any value func void_function void return Can t return a value Copy to clipboard Note Non void functions must always return a value so if your code has branching statements such as an if else construct all the possible paths must have a return E g if you have a return inside an if block but not after it the editor will raise an error because if the block is not executed the function won t have a valid value to return Referencing functions Functions are first class values in terms of the Callable object Referencing a function by name without calling it will automatically generate the proper callable This can be used to pass functions as arguments func map arr Array function Callable Array var result for item in arr result push_back function call item return result func add1 value int int return value 1 func _ready void var my_array 1 2 3 var plus_one map my_array add1 print plus_one Prints 2 3 4 Copy to clipboard Note Callables must be called with the call method You cannot use the operator directly This behavior is implemented to avoid performance issues on direct function calls Lambda functions Lambda functions allow you to declare functions that do not belong to a class Instead a Callable object is created and assigned to a variable directly This can be useful to create callables to pass around without polluting the class scope var lambda func x print x Copy to clipboard To call the created lambda you can use the call method lambda call 42 Prints 42 Copy to clipboard Lambda functions can be named for debugging purposes the name is displayed in the Debugger var lambda func my_lambda x print x Copy to clipboard You can specify type hints for lambda functions in the same way as for regular ones var lambda func x int void print x Copy to clipboard Note that if you want to return a value from a lambda function an explicit return is required you can t omit return var lambda func x return x 2 print lambda call 2 Prints 4 Copy to clipboard Lambda functions capture the local environment var x 42 var lambda func print x Prints 42 lambda call Copy to clipboard Warning Local variables are captured by value once when the lambda is created So they won t be updated in the lambda if reassigned in the outer function var x 42 var lambda func print x lambda call Prints 42 x Hello lambda call Prints 42 Copy to clipboard Also a lambda cannot reassign an outer local variable After exiting the lambda the variable will be unchanged because the lambda capture implicitly shadows it var x 42 var lambda func print x Prints 42 x Hello Produces the CONFUSABLE_CAPTURE_REASSIGNMENT warning print x Prints Hello lambda call print x Prints 42 Copy to clipboard However if you use pass by reference data types arrays dictionaries and objects then the content changes are shared until you reassign the variable var a var lambda func a append 1 print a Prints 1 a 2 Produces the CONFUSABLE_CAPTURE_REASSIGNMENT warning print a Prints 2 lambda call print a Prints 1 Copy to clipboard Static functions A function can be declared static When a function is static it has no access to the instance member variables or self A static function has access to static variables Also static functions are useful to make libraries of helper functions static func sum2 a b return a b Copy to clipboard Lambda functions cannot be declared static See also Static variables and Static constructor Statements and control flow Statements are standard and can be assignments function calls control flow structures etc see below as a statement separator is entirely optional Expressions Expressions are sequences of operators and their operands in orderly fashion An expression by itself can be a statement too though only calls are reasonable to use as statements since other expressions don t have side effects Expressions return values that can be assigned to valid targets Operands to some operator can be another expression An assignment is not an expression and thus does not return any value Here are some examples of expressions 2 2 Binary operation 5 Unary operation okay if x 4 else not okay Ternary operation x Identifier representing variable or constant x a Attribute access x 4 Subscript access x 2 or x 5 Comparisons and logic operators x y 2 Equality test do_something Function call 1 2 3 Array definition A 1 B 2 Dictionary definition preload res icon png Preload builtin function self Reference to current instance Copy to clipboard Identifiers attributes and subscripts are valid assignment targets Other expressions cannot be on the left side of an assignment if else elif Simple conditions are created by using the if else elif syntax Parenthesis around conditions are allowed but not required Given the nature of the tab based indentation elif can be used instead of else if to maintain a level of indentation if expression statement s elif expression statement s else statement s Copy to clipboard Short statements can be written on the same line as the condition if 1 1 2 return 2 2 else var x 3 3 return x Copy to clipboard Sometimes you might want to assign a different initial value based on a boolean expression In this case ternary if expressions come in handy var x value if expression else value y 3 if y 10 else 1 Copy to clipboard Ternary if expressions can be nested to handle more than 2 cases When nesting ternary if expressions it is recommended to wrap the complete expression over multiple lines to preserve readability var count 0 var fruit apple if count 2 else pear if count 1 else banana if count 0 else orange print fruit banana Alternative syntax with backslashes instead of parentheses for multi line expressions Less lines required but harder to refactor var fruit_alt apple if count 2 else pear if count 1 else banana if count 0 else orange print fruit_alt banana Copy to clipboard You may also wish to check if a value is contained within something You can use an if statement combined with the in operator to accomplish this Check if a letter is in a string var text abc if b in text print The string contains b Check if a variable is contained within a node if varName in get_parent print varName is defined in parent Copy to clipboard while Simple loops are created by using while syntax Loops can be broken using break or continued using continue which skips to the next iteration of the loop without executing any further code in the current iteration while expression statement s Copy to clipboard for To iterate through a range such as an array or table a for loop is used When iterating over an array the current array element is stored in the loop variable When iterating over a dictionary the key is stored in the loop variable for x in 5 7 11 statement Loop iterates 3 times with x as 5 then 7 and finally 11 var names John Marta Samantha Jimmy for name String in names Typed loop variable print name Prints name s content var dict a 0 b 1 c 2 for i in dict print dict i Prints 0 then 1 then 2 for i in range 3 statement Similar to 0 1 2 but does not allocate an array for i in range 1 3 statement Similar to 1 2 but does not allocate an array for i in range 2 8 2 statement Similar to 2 4 6 but does not allocate an array for i in range 8 2 2 statement Similar to 8 6 4 but does not allocate an array for c in Hello print c Iterate through all characters in a String print every letter on new line for i in 3 statement Similar to range 3 for i in 2 2 statement Similar to range ceil 2 2 Copy to clipboard If you want to assign values on an array as it is being iterated through it is best to use for i in array size for i in array size array i Hello World Copy to clipboard The loop variable is local to the for loop and assigning to it will not change the value on the array Objects passed by reference such as nodes can still be manipulated by calling methods on the loop variable for string in string_array string Hello World This has no effect for node in node_array node add_to_group Cool_Group This has an effect Copy to clipboard match A match statement is used to branch execution of a program It s the equivalent of the switch statement found in many other languages but offers some additional features Warning match is more type strict than the operator For example 1 will not match 1 0 The only exception is String vs StringName matching for example the String hello is considered equal to the StringName hello Basic syntax match test value pattern s block pattern s when pattern guard block Copy to clipboard Crash course for people who are familiar with switch statements Replace switch with match Remove case Remove any break s Change default to a single underscore Control flow The patterns are matched from top to bottom If a pattern matches the first corresponding block will be executed After that the execution continues below the match statement Note The special continue behavior in match supported in 3 x was removed in Godot 4 0 The following pattern types are available Literal pattern Matches a literal match x 1 print We are number one 2 print Two are better than one test print Oh snap It s a string Copy to clipboard Expression pattern Matches a constant expression an identifier or an attribute access A B match typeof x TYPE_FLOAT print float TYPE_STRING print text TYPE_ARRAY print array Copy to clipboard Wildcard pattern This pattern matches everything It s written as a single underscore It can be used as the equivalent of the default in a switch statement in other languages match x 1 print It s one 2 print It s one times two _ print It s not 1 or 2 I don t care to be honest Copy to clipboard Binding pattern A binding pattern introduces a new variable Like the wildcard pattern it matches everything and also gives that value a name It s especially useful in array and dictionary patterns match x 1 print It s one 2 print It s one times two var new_var print It s not 1 or 2 it s new_var Copy to clipboard Array pattern Matches an array Every single element of the array pattern is a pattern itself so you can nest them The length of the array is tested first it has to be the same size as the pattern otherwise the pattern doesn t match Open ended array An array can be bigger than the pattern by making the last subpattern Every subpattern has to be comma separated match x print Empty array 1 3 test null print Very specific array var start _ test print First element is start and the last is test 42 print Open ended array Copy to clipboard Dictionary pattern Works in the same way as the array pattern Every key has to be a constant pattern The size of the dictionary is tested first it has to be the same size as the pattern otherwise the pattern doesn t match Open ended dictionary A dictionary can be bigger than the pattern by making the last subpattern Every subpattern has to be comma separated If you don t specify a value then only the existence of the key is checked A value pattern is separated from the key pattern with a match x print Empty dict name Dennis print The name is Dennis name Dennis age var age print Dennis is age years old name age print Has a name and an age but it s not Dennis key godotisawesome print I only checked for one entry and ignored the rest Copy to clipboard Multiple patterns You can also specify multiple patterns separated by a comma These patterns aren t allowed to have any bindings in them match x 1 2 3 print It s 1 3 Sword Splash potion Fist print Yep you ve taken damage Copy to clipboard Pattern guards A pattern guard is an optional condition that follows the pattern list and allows you to make additional checks before choosing a match branch Unlike a pattern a pattern guard can be an arbitrary expression Only one branch can be executed per match Once a branch is chosen the rest are not checked If you want to use the same pattern for multiple branches or to prevent choosing a branch with too general pattern you can specify a pattern guard after the list of patterns with the when keyword match point 0 0 print Origin _ 0 print Point on X axis 0 _ print Point on Y axis var x var y when y x print Point on line y x var x var y when y x print Point on line y x var x var y print Point s s x y Copy to clipboard If there is no matching pattern for the current branch the pattern guard is not evaluated and the patterns of the next branch are checked If a matching pattern is found the pattern guard is evaluated If it s true then the body of the branch is executed and match ends If it s false then the patterns of the next branch are checked Classes By default all script files are unnamed classes In this case you can only reference them using the file s path using either a relative or an absolute path For example if you name a script file character gd Inherit from character gd extends res path to character gd Load character gd and create a new node instance from it var Character load res path to character gd var character_node Character new Copy to clipboard Registering named classes You can give your class a name to register it as a new type in Godot s editor For that you use the class_name keyword You can optionally use the icon annotation with a path to an image to use it as an icon Your class will then appear with its new icon in the editor item gd icon res interface icons item png class_name Item extends Node Copy to clipboard Tip SVG images that are used as custom node icons should have the Editor Scale With Editor Scale and Editor Convert Icons With Editor Theme import options enabled This allows icons to follow the editor s scale and theming settings if the icons are designed with the same color palette as Godot s own icons Here s a class file example Saved as a file named character gd class_name Character var health 5 func print_health print health func print_this_script_three_times print get_script print ResourceLoader load res character gd print Character Copy to clipboard If you want to use extends too you can keep both on the same line class_name MyNode extends Node Copy to clipboard Note Godot initializes non static variables every time you create an instance and this includes arrays and dictionaries This is in the spirit of thread safety since scripts can be initialized in separate threads without the user knowing Warning The Godot editor will hide these custom classes with names that beging with the prefix Editor in the Create New Node or Create New Scene dialog windows The classes are available for instantiation at runtime via their class names but are automatically hidden by the editor windows along with the built in editor nodes used by the Godot editor Inheritance A class stored as a file can inherit from A global class Another class file An inner class inside another class file Multiple inheritance is not allowed Inheritance uses the extends keyword Inherit extend a globally available class extends SomeClass Inherit extend a named class file extends somefile gd Inherit extend an inner class in another file extends somefile gd SomeInnerClass Copy to clipboard Note If inheritance is not explicitly defined the class will default to inheriting RefCounted To check if a given instance inherits from a given class the is keyword can be used Cache the enemy class const Enemy preload enemy gd Use is to check inheritance if entity is Enemy entity apply_damage Copy to clipboard To call a function in a super class i e one extend ed in your current class use the super keyword super args Copy to clipboard This is especially useful because functions in extending classes replace functions with the same name in their super classes If you still want to call them you can use super func some_func x super x Calls the same function on the super class Copy to clipboard If you need to call a different function from the super class you can specify the function name with the attribute operator func overriding return 0 This overrides the method in the base class func dont_override return super overriding This calls the method as defined in the base class Copy to clipboard Warning One of the common misconceptions is trying to override non virtual engine methods such as get_class queue_free etc This is not supported for technical reasons In Godot 3 you can shadow engine methods in GDScript and it will work if you call this method in GDScript However the engine will not execute your code if the method is called inside the engine on some event In Godot 4 even shadowing may not always work as GDScript optimizes native method calls Therefore we added the NATIVE_METHOD_OVERRIDE warning which is treated as an error by default We strongly advise against disabling or ignoring the warning Note that this does not apply to virtual methods such as _ready _process and others marked with the virtual qualifier in the documentation and the names start with an underscore These methods are specifically for customizing engine behavior and can be overridden in GDScript Signals and notifications can also be useful for these purposes Class constructor The class constructor called on class instantiation is named _init If you want to call the base class constructor you can also use the super syntax Note that every class has an implicit constructor that is always called defining the default values of class variables super is used to call the explicit constructor func _init arg super some_default arg Call the custom base constructor Copy to clipboard This is better explained through examples Consider this scenario state gd inherited class var entity null var message null func _init e null entity e func enter m message m idle gd inheriting class extends state gd func _init e null m null super e Do something with e message m Copy to clipboard There are a few things to keep in mind here If the inherited class state gd defines a _init constructor that takes arguments e in this case then the inheriting class idle gd must define _init as well and pass appropriate parameters to _init from state gd idle gd can have a different number of arguments than the base class state gd In the example above e passed to the state gd constructor is the same e passed in to idle gd If idle gd s _init constructor takes 0 arguments it still needs to pass some value to the state gd base class even if it does nothing This brings us to the fact that you can pass expressions to the base constructor as well not just variables e g idle gd func _init super 5 Copy to clipboard Static constructor A static constructor is a static function _static_init that is called automatically when the class is loaded after the static variables have been initialized static var my_static_var 1 static func _static_init my_static_var 2 Copy to clipboard A static constructor cannot take arguments and must not return any value Inner classes A class file can contain inner classes Inner classes are defined using the class keyword They are instanced using the ClassName new function Inside a class file An inner class in this class file class SomeInnerClass var a 5 func print_value_of_a print a This is the constructor of the class file s main class func _init var c SomeInnerClass new c print_value_of_a Copy to clipboard Classes as resources Classes stored as files are treated as GDScripts They must be loaded from disk to access them in other classes This is done using either the load or preload functions see below Instancing of a loaded class resource is done by calling the new function on the class object Load the class resource when calling load var MyClass load myclass gd Preload the class only once at compile time const MyClass preload myclass gd func _init var a MyClass new a some_function Copy to clipboard Exports Note Documentation about exports has been moved to GDScript exported properties Properties setters and getters Sometimes you want a class member variable to do more than just hold data and actually perform some validation or computation whenever its value changes It may also be desired to encapsulate its access in some way For this GDScript provides a special syntax to define properties using the set and get keywords after a variable declaration Then you can define a code block that will be executed when the variable is accessed or assigned Example var milliseconds int 0 var seconds int get return milliseconds 1000 set value milliseconds value 1000 Copy to clipboard Note Unlike setget in previous Godot versions set and get methods are always called except as noted below even when accessed inside the same class with or without prefixing with self This makes the behavior consistent If you need direct access to the value use another variable for direct access and make the property code use that name Alternative syntax Also there is another notation to use existing class functions if you want to split the code from the variable declaration or you need to reuse the code across multiple properties but you can t distinguish which property the setter getter is being called for var my_prop get get_my_prop set set_my_prop Copy to clipboard This can also be done in the same line var my_prop get get_my_prop set set_my_prop Copy to clipboard The setter and getter must use the same notation mixing styles for the same variable is not allowed Note You cannot specify type hints for inline setters and getters This is done on purpose to reduce the boilerplate If the variable is typed then the setter s argument is automatically of the same type and the getter s return value must match it Separated setter getter functions can have type hints and the type must match the variable s type or be a wider type When setter getter is not called When a variable is initialized the value of the initializer will be written directly to the variable Including if the onready annotation is applied to the variable Using the variable s name to set it inside its own setter or to get it inside its own getter will directly access the underlying member so it won t generate infinite recursion and saves you from explicitly declaring another variable signal changed new_value var warns_when_changed some value get return warns_when_changed set value changed emit value warns_when_changed value Copy to clipboard This also applies to the alternative syntax var my_prop set set_my_prop func set_my_prop value my_prop value No infinite recursion Copy to clipboard Warning The exception does not propagate to other functions called in the setter getter For example the following code will cause an infinite recursion var my_prop set value set_my_prop value func set_my_prop value my_prop value Infinite recursion since set_my_prop is not the setter Copy to clipboard Tool mode By default scripts don t run inside the editor and only the exported properties can be changed In some cases it is desired that they do run inside the editor as long as they don t execute game code or manually avoid doing so For this the tool annotation exists and must be placed at the top of the file tool extends Button func _ready print Hello Copy to clipboard See Running code in the editor for more information Warning Be cautious when freeing nodes with queue_free or free in a tool script especially the script s owner itself As tool scripts run their code in the editor misusing them may lead to crashing the editor Memory management Godot implements reference counting to free certain instances that are no longer used instead of a garbage collector or requiring purely manual management Any instance of the RefCounted class or any class that inherits it such as Resource will be freed automatically when no longer in use For an instance of any class that is not a RefCounted such as Node or the base Object type it will remain in memory until it is deleted with free or queue_free for Nodes Note If a Node is deleted via free or queue_free all of its children will also recursively be deleted To avoid reference cycles that can t be freed a WeakRef function is provided for creating weak references which allow access to the object without preventing a RefCounted from freeing Here is an example extends Node var my_file_ref func _ready var f FileAccess open user example_file json FileAccess READ my_file_ref weakref f the FileAccess class inherits RefCounted so it will be freed when not in use the WeakRef will not prevent f from being freed when other_node is finished other_node use_file f func _this_is_called_later var my_file my_file_ref get_ref if my_file my_file close Copy to clipboard Alternatively when not using references the is_instance_valid instance can be used to check if an object has been freed Signals Signals are a tool to emit messages from an object that other objects can react to To create custom signals for a class use the signal keyword extends Node A signal named health_depleted signal health_depleted Copy to clipboard Note Signals are a Callback mechanism They also fill the role of Observers a common programming pattern For more information read the Observer tutorial in the Game Programming Patterns ebook You can connect these signals to methods the same way you connect built in signals of nodes like Button or RigidBody3D In the example below we connect the health_depleted signal from a Character node to a Game node When the Character node emits the signal the game node s _on_character_health_depleted is called game gd func _ready var character_node get_node Character character_node health_depleted connect _on_character_health_depleted func _on_character_health_depleted get_tree reload_current_scene Copy to clipboard You can emit as many arguments as you want along with a signal Here is an example where this is useful Let s say we want a life bar on screen to react to health changes with an animation but we want to keep the user interface separate from the player in our scene tree In our character gd script we define a health_changed signal and emit it with Signal emit and from a Game node higher up our scene tree we connect it to the Lifebar using the Signal connect method character gd signal health_changed func take_damage amount var old_health health health amount We emit the health_changed signal every time the character takes damage health_changed emit old_health health Copy to clipboard lifebar gd Here we define a function to use as a callback when the character s health_changed signal is emitted func _on_Character_health_changed old_value new_value if old_value new_value progress_bar modulate Color RED else progress_bar modulate Color GREEN Imagine that animate is a user defined function that animates the bar filling up or emptying itself progress_bar animate old_value new_value Copy to clipboard In the Game node we get both the Character and Lifebar nodes then connect the character that emits the signal to the receiver the Lifebar node in this case game gd func _ready var character_node get_node Character var lifebar_node get_node UserInterface Lifebar character_node health_changed connect lifebar_node _on_Character_health_changed Copy to clipboard This allows the Lifebar to react to health changes without coupling it to the Character node You can write optional argument names in parentheses after the signal s definition Defining a signal that forwards two arguments signal health_changed old_value new_value Copy to clipboard These arguments show up in the editor s node dock and Godot can use them to generate callback functions for you However you can still emit any number of arguments when you emit signals it s up to you to emit the correct values GDScript can bind an array of values to connections between a signal and a method When the signal is emitted the callback method receives the bound values These bound arguments are unique to each connection and the values will stay the same You can use this array of values to add extra constant information to the connection if the emitted signal itself doesn t give you access to all the data that you need Building on the example above let s say we want to display a log of the damage taken by each character on the screen like Player1 took 22 damage The health_changed signal doesn t give us the name of the character that took damage So when we connect the signal to the in game console we can add the character s name in the binds array argument game gd func _ready var character_node get_node Character var battle_log_node get_node UserInterface BattleLog character_node health_changed connect battle_log_node _on_Character_health_changed bind character_node name Copy to clipboard Our BattleLog node receives each element in the binds array as an extra argument battle_log gd func _on_Character_health_changed old_value new_value character_name if not new_value old_value return var damage old_value new_value label text character_name took str damage damage Copy to clipboard Awaiting signals or coroutines The await keyword can be used to create coroutines which wait until a signal is emitted before continuing execution Using the await keyword with a signal or a call to a function that is also a coroutine will immediately return the control to the caller When the signal is emitted or the called coroutine finishes it will resume execution from the point on where it stopped For example to stop execution until the user presses a button you can do something like this func wait_confirmation print Prompting user await Button button_up Waits for the button_up signal from Button node print User confirmed return true Copy to clipboard In this case the wait_confirmation becomes a coroutine which means that the caller also needs to await it func request_confirmation print Will ask the user var confirmed await wait_confirmation if confirmed print User confirmed else print User cancelled Copy to clipboard Note that requesting a coroutine s return value without await will trigger an error func wrong var confirmed wait_confirmation Will give an error Copy to clipboard However if you don t depend on the result you can just call it asynchronously which won t stop execution and won t make the current function a coroutine func okay wait_confirmation print This will be printed immediately before the user press the button Copy to clipboard If you use await with an expression that isn t a signal nor a coroutine the value will be returned immediately and the function won t give the control back to the caller func no_wait var x await get_five print This doesn t make this function a coroutine func get_five return 5 Copy to clipboard This also means that returning a signal from a function that isn t a coroutine will make the caller await that signal func get_signal return Button button_up func wait_button await get_signal print Button was pressed Copy to clipboard Note Unlike yield in previous Godot versions you cannot obtain the function state object This is done to ensure type safety With this type safety in place a function cannot say that it returns an int while it actually returns a function state object during runtime Assert keyword The assert keyword can be used to check conditions in debug builds These assertions are ignored in non debug builds This means that the expression passed as argument won t be evaluated in a project exported in release mode Due to this assertions must not contain expressions that have side effects Otherwise the behavior of the script would vary depending on whether the project is run in a debug build Check that i is 0 If i is not 0 an assertion error will occur assert i 0 Copy to clipboard When running a project from the editor the project will be paused if an assertion error occurs You can optionally pass a custom error message to be shown if the assertion fails assert enemy_power 256 Enemy is too powerful Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue GDScript An introduction to dynamic languages About This tutorial aims to be a quick reference for how to use GDScript more efficiently It focuses on common cases specific to the language but also covers a lot of information on dynamically typed languages It s meant to be especially useful for programmers with little or no previous experience with dynamically typed languages Dynamic nature Pros cons of dynamic typing GDScript is a Dynamically Typed language As such its main advantages are that The language is easy to get started with Most code can be written and changed quickly and without hassle Less code written means less errors mistakes to fix The code is easy to read little clutter No compilation is required to test Runtime is tiny It has duck typing and polymorphism by nature While the main disadvantages are Less performance than statically typed languages More difficult to refactor symbols can t be traced Some errors that would typically be detected at compile time in statically typed languages only appear while running the code because expression parsing is more strict Less flexibility for code completion some variable types are only known at run time This translated to reality means that Godot used with GDScript is a combination designed to create games quickly and efficiently For games that are very computationally intensive and can t benefit from the engine built in tools such as the Vector types Physics Engine Math library etc the possibility of using C is present too This allows you to still create most of the game in GDScript and add small bits of C in the areas that need a performance boost Variables assignment All variables in a dynamically typed language are variant like This means that their type is not fixed and is only modified through assignment Example Static int a Value uninitialized a 5 This is valid a Hi This is invalid Copy to clipboard Dynamic var a null by default a 5 Valid a becomes an integer a Hi Valid a changed to a string Copy to clipboard As function arguments Functions are of dynamic nature too which means they can be called with different arguments for example Static void print_value int value printf value is i n value print_value 55 Valid print_value Hello Invalid Copy to clipboard Dynamic func print_value value print value print_value 55 Valid print_value Hello Valid Copy to clipboard Pointers referencing In static languages such as C or C and to some extent Java and C there is a distinction between a variable and a pointer reference to a variable The latter allows the object to be modified by other functions by passing a reference to the original one In C or Java everything not a built in type int float sometimes String is always a pointer or a reference References are also garbage collected automatically which means they are erased when no longer used Dynamically typed languages tend to use this memory model too Some Examples C void use_class SomeClass instance instance use void do_something SomeClass instance new SomeClass Created as pointer use_class instance Passed as pointer delete instance Otherwise it will leak memory Copy to clipboard Java Override public final void use_class SomeClass instance instance use public final void do_something SomeClass instance new SomeClass Created as reference use_class instance Passed as reference Garbage collector will get rid of it when not in use and freeze your game randomly for a second Copy to clipboard GDScript func use_class instance Does not care about class type instance use Will work with any class that has a use method func do_something var instance SomeClass new Created as reference use_class instance Passed as reference Will be unreferenced and deleted Copy to clipboard In GDScript only base types int float string and the vector types are passed by value to functions value is copied Everything else instances arrays dictionaries etc is passed as reference Classes that inherit RefCounted the default if nothing is specified will be freed when not used but manual memory management is allowed too if inheriting manually from Object Arrays Arrays in dynamically typed languages can contain many different mixed datatypes inside and are always dynamic can be resized at any time Compare for example arrays in statically typed languages int array new int 4 Create array array 0 10 Initialize manually array 1 20 Can t mix types array 2 40 array 3 60 Can t resize use_array array Passed as pointer delete array Must be freed or std vector int array array resize 4 array 0 10 Initialize manually array 1 20 Can t mix types array 2 40 array 3 60 array resize 3 Can be resized use_array array Passed reference or value Freed when stack ends Copy to clipboard And in GDScript var array 10 hello 40 60 You can mix types array resize 3 Can be resized use_array array Passed as reference Freed when no longer in use Copy to clipboard In dynamically typed languages arrays can also double as other datatypes such as lists var array array append 4 array append 5 array pop_front Copy to clipboard Or unordered sets var a 20 if a in 10 20 30 print We have a winner Copy to clipboard Dictionaries Dictionaries are a powerful tool in dynamically typed languages Most programmers that come from statically typed languages such as C or C ignore their existence and make their life unnecessarily more difficult This datatype is generally not present in such languages or only in limited form Dictionaries can map any value to any other value with complete disregard for the datatype used as either key or value Contrary to popular belief they are efficient because they can be implemented with hash tables They are in fact so efficient that some languages will go as far as implementing arrays as dictionaries Example of Dictionary var d name John age 22 print Name d name Age d age Copy to clipboard Dictionaries are also dynamic keys can be added or removed at any point at little cost d mother Rebecca Addition d age 11 Modification d erase name Removal Copy to clipboard In most cases two dimensional arrays can often be implemented more easily with dictionaries Here s a battleship game example Battleship Game const SHIP 0 const SHIP_HIT 1 const WATER_HIT 2 var board func initialize board Vector2 1 1 SHIP board Vector2 1 2 SHIP board Vector2 1 3 SHIP func missile pos if pos in board Something at that position if board pos SHIP There was a ship hit it board pos SHIP_HIT else print Already hit here Hey dude you already hit here else Nothing mark as water board pos WATER_HIT func game initialize missile Vector2 1 1 missile Vector2 5 8 missile Vector2 2 3 Copy to clipboard Dictionaries can also be used as data markup or quick structures While GDScript s dictionaries resemble python dictionaries it also supports Lua style syntax and indexing which makes it useful for writing initial states and quick structs Same example lua style support This syntax is a lot more readable and usable Like any GDScript identifier keys written in this form cannot start with a digit var d name John age 22 print Name d name Age d age Used based indexing Indexing d mother Rebecca d mother Caroline This would work too to create a new key Copy to clipboard For while Iterating using the C style for loop in C derived languages can be quite complex const char strings new const char 50 for int i 0 i 50 i printf Value c Index d n strings i i Even in STL std list std string strings for std string const_iterator it strings begin it strings end it std cout it std endl Copy to clipboard Because of this GDScript makes the opinionated decision to have a for in loop over iterables instead for s in strings print s Copy to clipboard Container datatypes arrays and dictionaries are iterable Dictionaries allow iterating the keys for key in dict print key dict key Copy to clipboard Iterating with indices is also possible for i in range strings size print strings i Copy to clipboard The range function can take 3 arguments range n Will count from 0 to n in steps of 1 The parameter n is exclusive range b n Will count from b to n in steps of 1 The parameters b is inclusive The parameter n is exclusive range b n s Will count from b to n in steps of s The parameters b is inclusive The parameter n is exclusive Copy to clipboard Some examples involving C style for loops for int i 0 i 10 i for int i 5 i 10 i for int i 5 i 10 i 2 Copy to clipboard Translate to for i in range 10 pass for i in range 5 10 pass for i in range 5 10 2 pass Copy to clipboard And backwards looping done through a negative counter for int i 10 i 0 i Copy to clipboard Becomes for i in range 10 0 1 pass Copy to clipboard While while loops are the same everywhere var i 0 while i strings size print strings i i 1 Copy to clipboard Custom iterators You can create custom iterators in case the default ones don t quite meet your needs by overriding the Variant class s _iter_init _iter_next and _iter_get functions in your script An example implementation of a forward iterator follows class ForwardIterator var start var current var end var increment func _init start stop increment self start start self current start self end stop self increment increment func should_continue return current end func _iter_init arg current start return should_continue func _iter_next arg current increment return should_continue func _iter_get arg return current Copy to clipboard And it can be used like any other iterator var itr ForwardIterator new 0 6 2 for i in itr print i Will print 0 2 and 4 Copy to clipboard Make sure to reset the state of the iterator in _iter_init otherwise nested for loops that use custom iterators will not work as expected Duck typing One of the most difficult concepts to grasp when moving from a statically typed language to a dynamic one is duck typing Duck typing makes overall code design much simpler and straightforward to write but it s not obvious how it works As an example imagine a situation where a big rock is falling down a tunnel smashing everything on its way The code for the rock in a statically typed language would be something like void BigRollingRock on_object_hit Smashable entity entity smash Copy to clipboard This way everything that can be smashed by a rock would have to inherit Smashable If a character enemy piece of furniture small rock were all smashable they would need to inherit from the class Smashable possibly requiring multiple inheritance If multiple inheritance was undesired then they would have to inherit a common class like Entity Yet it would not be very elegant to add a virtual method smash to Entity only if a few of them can be smashed With dynamically typed languages this is not a problem Duck typing makes sure you only have to define a smash function where required and that s it No need to consider inheritance base classes etc func _on_object_hit object object smash Copy to clipboard And that s it If the object that hit the big rock has a smash method it will be called No need for inheritance or polymorphism Dynamically typed languages only care about the instance having the desired method or member not what it inherits or the class type The definition of Duck Typing should make this clearer When I see a bird that walks like a duck and swims like a duck and quacks like a duck I call that bird a duck In this case it translates to If the object can be smashed don t care what it is just smash it Yes we should call it Hulk typing instead It s possible that the object being hit doesn t have a smash function Some dynamically typed languages simply ignore a method call when it doesn t exist but GDScript is stricter so checking if the function exists is desirable func _on_object_hit object if object has_method smash object smash Copy to clipboard Then simply define that method and anything the rock touches can be smashed User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue GDScript exported properties In Godot class members can be exported This means their value gets saved along with the resource such as the scene they re attached to They will also be available for editing in the property editor Exporting is done by using the export annotation export var number int 5 Copy to clipboard In that example the value 5 will be saved and visible in the property editor An exported variable must be initialized to a constant expression or have a type specifier in the variable Some of the export annotations have a specific type and don t need the variable to be typed see the Examples section below One of the fundamental benefits of exporting member variables is to have them visible and editable in the editor This way artists and game designers can modify values that later influence how the program runs For this a special export syntax is provided Note Exporting properties can also be done in other languages such as C The syntax varies depending on the language See C exported properties for information on C exports Basic use If the exported value assigns a constant or constant expression the type will be inferred and used in the editor export var number 5 Copy to clipboard If there s no default value you can add a type to the variable export var number int Copy to clipboard Resources and nodes can be exported export var resource Resource export var node Node Copy to clipboard Grouping Exports It is possible to group your exported properties inside the Inspector with the export_group annotation Every exported property after this annotation will be added to the group Start a new group or use export_group to break out export_group My Properties export var number 3 Copy to clipboard The second argument of the annotation can be used to only group properties with the specified prefix Groups cannot be nested use export_subgroup to create subgroups within a group export_subgroup Extra Properties export var string export var flag false Copy to clipboard You can also change the name of your main category or create additional categories in the property list with the export_category annotation export_category Main Category export var number 3 export var string export_category Extra Category export var flag false Copy to clipboard Note The list of properties is organized based on the class inheritance and new categories break that expectation Use them carefully especially when creating projects for public use Strings as paths String as a path to a file export_file var f Copy to clipboard String as a path to a directory export_dir var f Copy to clipboard String as a path to a file custom filter provided as hint export_file txt var f Copy to clipboard Using paths in the global filesystem is also possible but only in scripts in tool mode String as a path to a PNG file in the global filesystem export_global_file png var tool_image Copy to clipboard String as a path to a directory in the global filesystem export_global_dir var tool_dir Copy to clipboard The multiline annotation tells the editor to show a large input field for editing over multiple lines export_multiline var text Copy to clipboard Limiting editor input ranges Allow integer values from 0 to 20 export_range 0 20 var i Copy to clipboard Allow integer values from 10 to 20 export_range 10 20 var j Copy to clipboard Allow floats from 10 to 20 and snap the value to multiples of 0 2 export_range 10 20 0 2 var k float Copy to clipboard The limits can be only for the slider if you add the hints or_greater and or or_less export_range 0 100 1 or_greater or_less Copy to clipboard Floats with easing hint Display a visual representation of the ease function when editing export_exp_easing var transition_speed Copy to clipboard Colors Regular color given as red green blue alpha value export var col Color Copy to clipboard Color given as red green blue value alpha will always be 1 export_color_no_alpha var col Color Copy to clipboard Nodes Since Godot 4 0 nodes can be directly exported as properties in a script without having to use NodePaths Allows any node export var node Node Allows any node that inherits from BaseButton Custom classes declared with class_name can also be used export var some_button BaseButton Copy to clipboard Exporting NodePaths like in Godot 3 x is still possible in case you need it export var node_path NodePath var node get_node node_path Copy to clipboard If you want to limit the types of nodes for NodePaths you can use the export_node_path annotation export_node_path Button TouchScreenButton var some_button Copy to clipboard Resources export var resource Resource Copy to clipboard In the Inspector you can then drag and drop a resource file from the FileSystem dock into the variable slot Opening the inspector dropdown may result in an extremely long list of possible classes to create however Therefore if you specify an extension of Resource such as export var resource AnimationNode Copy to clipboard The drop down menu will be limited to AnimationNode and all its inherited classes It must be noted that even if the script is not being run while in the editor the exported properties are still editable This can be used in conjunction with a script in tool mode Exporting bit flags Integers used as bit flags can store multiple true false boolean values in one property By using the export_flags annotation they can be set from the editor Set any of the given flags from the editor export_flags Fire Water Earth Wind var spell_elements 0 Copy to clipboard You must provide a string description for each flag In this example Fire has value 1 Water has value 2 Earth has value 4 and Wind corresponds to value 8 Usually constants should be defined accordingly e g const ELEMENT_WIND 8 and so on You can add explicit values using a colon export_flags Self 4 Allies 8 Foes 16 var spell_targets 0 Copy to clipboard Only power of 2 values are valid as bit flags options The lowest allowed value is 1 as 0 means that nothing is selected You can also add options that are a combination of other flags export_flags Self 4 Allies 8 Self and Allies 12 Foes 16 var spell_targets 0 Copy to clipboard Export annotations are also provided for the physics render and navigation layers defined in the project settings export_flags_2d_physics var layers_2d_physics export_flags_2d_render var layers_2d_render export_flags_2d_navigation var layers_2d_navigation export_flags_3d_physics var layers_3d_physics export_flags_3d_render var layers_3d_render export_flags_3d_navigation var layers_3d_navigation Copy to clipboard Using bit flags requires some understanding of bitwise operations If in doubt use boolean variables instead Exporting enums Properties can be exported with a type hint referencing an enum to limit their values to the values of the enumeration The editor will create a widget in the Inspector enumerating the following as Thing 1 Thing 2 Another Thing The value will be stored as an integer enum NamedEnum THING_1 THING_2 ANOTHER_THING 1 export var x NamedEnum Copy to clipboard Integer and string properties can also be limited to a specific list of values using the export_enum annotation The editor will create a widget in the Inspector enumerating the following as Warrior Magician Thief The value will be stored as an integer corresponding to the index of the selected option i e 0 1 or 2 export_enum Warrior Magician Thief var character_class int Copy to clipboard You can add explicit values using a colon export_enum Slow 30 Average 60 Very Fast 200 var character_speed int Copy to clipboard If the type is String the value will be stored as a string export_enum Rebecca Mary Leah var character_name String Copy to clipboard If you want to set an initial value you must specify it explicitly export_enum Rebecca Mary Leah var character_name String Rebecca Copy to clipboard Exporting arrays Exported arrays can have initializers but they must be constant expressions If the exported array specifies a type which inherits from Resource the array values can be set in the inspector by dragging and dropping multiple files from the FileSystem dock at once The default value must be a constant expression export var a 1 2 3 Copy to clipboard Exported arrays can specify type using the same hints as before export var ints Array int 1 2 3 Nested typed arrays such as Array Array float are not supported yet export var two_dimensional Array Array 1 0 2 0 3 0 4 0 Copy to clipboard You can omit the default value but it would then be null if not assigned export var b Array export var scenes Array PackedScene Copy to clipboard Arrays with specified types which inherit from resource can be set by drag and dropping multiple files from the FileSystem dock export var textures Array Texture export var scenes Array PackedScene Copy to clipboard Packed type arrays also work but only initialized empty export var vector3s PackedVector3Array export var strings PackedStringArray Copy to clipboard Other export variants can also be used when exporting arrays export_range 360 360 0 001 radians var laser_angles Array float export_file json var skill_trees Array String export_color_no_alpha var hair_colors PackedColorArray export_enum Espresso Mocha Latte Capuccino var barista_suggestions Array String Copy to clipboard export_storage By default exporting a property has two effects makes the property stored in the scene resource file PROPERTY_USAGE_STORAGE adds a field to the Inspector PROPERTY_USAGE_EDITOR However sometimes you may want to make a property serializable but not display it in the editor to prevent unintentional changes and cluttering the interface To do this you can use export_storage This can be useful for tool scripts Also the property value is copied when Resource duplicate or Node duplicate is called unlike non exported variables var a Not stored in the file not displayed in the editor export_storage var b Stored in the file not displayed in the editor export var c int Stored in the file displayed in the editor Copy to clipboard Setting exported variables from a tool script When changing an exported variable s value from a script in Tool mode the value in the inspector won t be updated automatically To update it call notify_property_list_changed after setting the exported variable s value Advanced exports Not every type of export can be provided on the level of the language itself to avoid unnecessary design complexity The following describes some more or less common exporting features which can be implemented with a low level API Before reading further you should get familiar with the way properties are handled and how they can be customized with _set _get and _get_property_list methods as described in Accessing data or logic from an object See also For binding properties using the above methods in C see Binding properties using _set _get _get_property_list Warning The script must operate in the tool mode so the above methods can work from within the editor User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue GDScript documentation comments In GDScript comments can be used to document your code and add descriptions to the members of a script There are two differences between a normal comment and a documentation comment Firstly a documentation comment should start with double hash symbols Secondly it must immediately precede a script member or for script descriptions be placed at the top of the script If an exported variable is documented its description is used as a tooltip in the editor This documentation can be generated as XML files by the editor Documenting a script Comments documenting a script must come before any member documentation A suggested format for script documentation can be divided into three parts A brief description of the script Detailed description Tutorials and deprecated experimental marks To separate these from each other the documentation comments use special tags The tag must be at the beginning of a line ignoring preceding white space and must have the format followed by the keyword Tags Brief description No tag Lives at the very beginning of the documentation section Description No tag Use one blank line to separate the description from the brief Tutorial tutorial https example com tutorial The Title Here https example com Deprecated deprecated deprecated Use AnotherClass instead Experimental experimental experimental This class is unstable For example extends Node2D A brief description of the class s role and functionality The description of the script what it can do and any further detail tutorial https example com tutorial_1 tutorial Tutorial 2 https example com tutorial_2 experimental Copy to clipboard Warning If there is any space in between the tag name and colon for example tutorial it won t be treated as a valid tag and will be ignored Note When the description spans multiple lines the preceding and trailing white spaces will be stripped and joined with a single space To preserve the line break use br See also BBCode and class reference below Documenting script members Members that are applicable for documentation Inner class Constant Function Signal Variable Enum Enum value Documentation of a script member must immediately precede the member or its annotations if it has any The description can have more than one line but every line must start with the double hash symbol to be considered as part of the documentation Tags Description No tag Deprecated deprecated deprecated Use member another instead Experimental experimental experimental This method is incomplete For example The description of the variable deprecated Use member other_var instead var my_var Copy to clipboard Alternatively you can use inline documentation comments enum MyEnum My enum VALUE_A 0 Value A VALUE_B 1 Value B const MY_CONST 1 My constant var my_var My variable signal my_signal My signal func my_func My func pass class MyClass My class pass Copy to clipboard The script documentation will update in the editor help window every time the script is updated If any member variable or function name starts with an underscore it will be treated as private It will not appear in the documentation and will be ignored in the help window Complete script example extends Node2D A brief description of the class s role and functionality The description of the script what it can do and any further detail tutorial https example com tutorial_1 tutorial Tutorial 2 https example com tutorial_2 experimental The description of a constant const GRAVITY 9 8 The description of a signal signal my_signal This is a description of the below enum enum Direction Direction up UP 0 Direction down DOWN 1 Direction left LEFT 2 Direction right RIGHT 3 The description of the variable v1 var v1 This is a multiline description of the variable v2 br The type information below will be extracted for the documentation var v2 int If the member has any annotation the annotation should immediately precede it export var v3 some_func As the following function is documented even though its name starts with an underscore it will appear in the help window func _fn p1 int p2 String int return 0 The below function isn t documented and its name starts with an underscore so it will treated as private and will not be shown in the help window func _internal void pass Documenting an inner class The same rules apply here The documentation must immediately precede the class definition tutorial https example com tutorial experimental class Inner Inner class variable v4 var v4 Inner class function fn func fn pass Copy to clipboard deprecated and experimental tags You can mark a class or any of its members as deprecated or experimental This will add the corresponding indicator in the built in documentation viewer Optionally you can provide a short message explaining why the API is not recommended This can be especially useful for plugin and library creators Deprecated marks a non recommended API that is subject to removal or incompatible change in a future major release Usually the API is kept for backwards compatibility Experimental marks a new unstable API that may be changed or removed in the current major branch Using this API is not recommended in production code Note While technically you can use both deprecated and experimental tags on the same class member this is not recommended as it is against common conventions BBCode and class reference Godot s class reference supports BBCode like tags They add nice formatting to the text which could also be used in the documentation See also class reference bbcode Note that this is slightly different from the RichTextLabel BBCode Whenever you link to a member of another class you need to specify the class name For links to the same class the class name is optional and can be omitted Here s the list of available tags Tag and Description Example Result Class Link to class Move the Sprite2D Move the Sprite2D annotation Class name Link to annotation See annotation GDScript rpc See GDScript rpc constant Class name Link to constant See constant Color RED See Color RED enum Class name Link to enum See enum Mesh ArrayType See Mesh ArrayType member Class name Link to member property Get member Node2D scale Get Node2D scale method Class name Link to method Call method Node3D hide Call Node3D hide constructor Class name Link to built in constructor Use constructor Color Color Use Color Color operator Class name Link to built in operator Use operator Color operator Use Color operator signal Class name Link to signal Emit signal Node renamed Emit Node renamed theme_item Class name Link to theme item See theme_item Label font See Label font param name Parameter name as code Takes param size for the size Takes size for the size br Line break Line 1 br Line 2 Line 1 Line 2 lb rb and respectively lb b rb text lb b rb b text b b b Bold Do b not b call this method Do not call this method i i Italic Returns the i global i position Returns the global position u u Underline u Always u use this method Always use this method s s Strikethrough s Outdated information s Outdated information color color Color color red Error color Error font font Font font res mono ttf LICENSE font LICENSE img img Image img width 32 res icon svg img url url Hyperlink url https example com url url https example com Website url https example com Website center center Horizontal centering center 2 2 4 center 2 2 4 kbd kbd Keyboard mouse shortcut Press kbd Ctrl C kbd Press Ctrl C code code Inline code fragment Returns code true code Returns true codeblock codeblock Multiline code block See below See below Note Currently only GDScript has annotations kbd disables BBCode until the parser encounters kbd code disables BBCode until the parser encounters code codeblock disables BBCode until the parser encounters codeblock Warning Use codeblock for pre formatted code blocks Inside codeblock always use four spaces for indentation the parser will delete tabs Do something for this plugin Before using the method you first have to method initialize MyPlugin br color yellow Warning color Always method clean after use br Usage codeblock func _ready the_plugin initialize the_plugin do_something the_plugin clean codeblock func do_something pass Copy to clipboard By default codeblock highlights GDScript syntax You can change it using the lang attribute Currently supported options are codeblock lang text disables syntax highlighting codeblock lang gdscript highlights GDScript syntax codeblock lang csharp highlights C syntax only in NET version User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue GDScript style guide This style guide lists conventions to write elegant GDScript The goal is to encourage writing clean readable code and promote consistency across projects discussions and tutorials Hopefully this will also support the development of auto formatting tools Since GDScript is close to Python this guide is inspired by Python s PEP 8 programming style guide Style guides aren t meant as hard rulebooks At times you may not be able to apply some of the guidelines below When that happens use your best judgment and ask fellow developers for insights In general keeping your code consistent in your projects and within your team is more important than following this guide to a tee Note Godot s built in script editor uses a lot of these conventions by default Let it help you Here is a complete class example based on these guidelines class_name StateMachine extends Node Hierarchical State machine for the player Initializes states and delegates engine callbacks method Node _physics_process method Node _unhandled_input to the state signal state_changed previous new export var initial_state Node var is_active true set set_is_active onready var _state initial_state set set_state onready var _state_name _state name func _init add_to_group state_machine func _enter_tree print this happens before the ready method func _ready state_changed connect _on_state_changed _state enter func _unhandled_input event _state unhandled_input event func _physics_process delta _state physics_process delta func transition_to target_state_path msg if not has_node target_state_path return var target_state get_node target_state_path assert target_state is_composite false _state exit self _state target_state _state enter msg Events player_state_changed emit _state name func set_is_active value is_active value set_physics_process value set_process_unhandled_input value set_block_signals not value func set_state value _state value _state_name _state name func _on_state_changed previous new print state changed state_changed emit class State var foo 0 func _init print Hello Copy to clipboard Formatting Encoding and special characters Use line feed LF characters to break lines not CRLF or CR editor default Use one line feed character at the end of each file editor default Use UTF 8 encoding without a byte order mark editor default Use Tabs instead of spaces for indentation editor default Indentation Each indent level should be one greater than the block containing it Good for i in range 10 print hello Copy to clipboard Bad for i in range 10 print hello for i in range 10 print hello Copy to clipboard Use 2 indent levels to distinguish continuation lines from regular code blocks Good effect interpolate_property sprite transform scale sprite get_scale Vector2 2 0 2 0 0 3 Tween TRANS_QUAD Tween EASE_OUT Copy to clipboard Bad effect interpolate_property sprite transform scale sprite get_scale Vector2 2 0 2 0 0 3 Tween TRANS_QUAD Tween EASE_OUT Copy to clipboard Exceptions to this rule are arrays dictionaries and enums Use a single indentation level to distinguish continuation lines Good var party Godot Godette Steve var character_dict Name Bob Age 27 Job Mechanic enum Tiles TILE_BRICK TILE_FLOOR TILE_SPIKE TILE_TELEPORT Copy to clipboard Bad var party Godot Godette Steve var character_dict Name Bob Age 27 Job Mechanic enum Tiles TILE_BRICK TILE_FLOOR TILE_SPIKE TILE_TELEPORT Copy to clipboard Trailing comma Use a trailing comma on the last line in arrays dictionaries and enums This results in easier refactoring and better diffs in version control as the last line doesn t need to be modified when adding new elements Good var array 1 2 3 Copy to clipboard Bad var array 1 2 3 Copy to clipboard Trailing commas are unnecessary in single line lists so don t add them in this case Good var array 1 2 3 Copy to clipboard Bad var array 1 2 3 Copy to clipboard Blank lines Surround functions and class definitions with two blank lines func heal amount health amount health min health max_health health_changed emit health func take_damage amount effect null health amount health max 0 health health_changed emit health Copy to clipboard Use one blank line inside functions to separate logical sections Note We use a single line between classes and function definitions in the class reference and in short code snippets in this documentation Line length Keep individual lines of code under 100 characters If you can try to keep lines under 80 characters This helps to read the code on small displays and with two scripts opened side by side in an external text editor For example when looking at a differential revision One statement per line Avoid combining multiple statements on a single line including conditional statements to adhere to the GDScript style guidelines for readability Good if position x width position x 0 if flag print flagged Copy to clipboard Bad if position x width position x 0 if flag print flagged Copy to clipboard The only exception to that rule is the ternary operator next_state idle if is_on_floor else fall Copy to clipboard Format multiline statements for readability When you have particularly long if statements or nested ternary expressions wrapping them over multiple lines improves readability Since continuation lines are still part of the same expression 2 indent levels should be used instead of one GDScript allows wrapping statements using multiple lines using parentheses or backslashes Parentheses are favored in this style guide since they make for easier refactoring With backslashes you have to ensure that the last line never contains a backslash at the end With parentheses you don t have to worry about the last line having a backslash at the end When wrapping a conditional expression over multiple lines the and or keywords should be placed at the beginning of the line continuation not at the end of the previous line Good var angle_degrees 135 var quadrant northeast if angle_degrees 90 else southeast if angle_degrees 180 else southwest if angle_degrees 270 else northwest var position Vector2 250 350 if position x 200 and position x 400 and position y 300 and position y 400 pass Copy to clipboard Bad var angle_degrees 135 var quadrant northeast if angle_degrees 90 else southeast if angle_degrees 180 else southwest if angle_degrees 270 else northwest var position Vector2 250 350 if position x 200 and position x 400 and position y 300 and position y 400 pass Copy to clipboard Avoid unnecessary parentheses Avoid parentheses in expressions and conditional statements Unless necessary for order of operations or wrapping over multiple lines they only reduce readability Good if is_colliding queue_free Copy to clipboard Bad if is_colliding queue_free Copy to clipboard Boolean operators Prefer the plain English versions of boolean operators as they are the most accessible Use and instead of Use or instead of Use not instead of You may also use parentheses around boolean operators to clear any ambiguity This can make long expressions easier to read Good if foo and bar or not baz print condition is true Copy to clipboard Bad if foo bar baz print condition is true Copy to clipboard Comment spacing Regular comments and documentation comments should start with a space but not code that you comment out Additionally code region comments region endregion must follow that precise syntax so they should not start with a space Using a space for regular and documentation comments helps differentiate text comments from disabled code Good This is a comment print This is disabled code Copy to clipboard Bad This is a comment print This is disabled code Copy to clipboard Note In the script editor to toggle commenting of the selected code press Ctrl K This feature adds removes a single sign before any code on the selected lines Whitespace Always use one space around operators and after commas Also avoid extra spaces in dictionary references and function calls One exception to this is for single line dictionary declarations where a space should be added after the opening brace and before the closing brace This makes the dictionary easier to visually distinguish from an array as the characters look close to with most fonts Good position x 5 position y target_position y 10 dict key 5 my_array 4 5 6 my_dictionary key value print foo Copy to clipboard Bad position x 5 position y mpos y 10 dict key 5 myarray 4 5 6 my_dictionary key value print foo Copy to clipboard Don t use spaces to align expressions vertically x 100 y 100 velocity 500 Copy to clipboard Quotes Use double quotes unless single quotes make it possible to escape fewer characters in a given string See the examples below Normal string print hello world Use double quotes as usual to avoid escapes print hello world Use single quotes as an exception to the rule to avoid escapes print hello world Both quote styles would require 2 escapes prefer double quotes if it s a tie print hello world Copy to clipboard Numbers Don t omit the leading or trailing zero in floating point numbers Otherwise this makes them less readable and harder to distinguish from integers at a glance Good var float_number 0 234 var other_float_number 13 0 Copy to clipboard Bad var float_number 234 var other_float_number 13 Copy to clipboard Use lowercase for letters in hexadecimal numbers as their lower height makes the number easier to read Good var hex_number 0xfb8c0b Copy to clipboard Bad var hex_number 0xFB8C0B Copy to clipboard Take advantage of GDScript s underscores in literals to make large numbers more readable Good var large_number 1_234_567_890 var large_hex_number 0xffff_f8f8_0000 var large_bin_number 0b1101_0010_1010 Numbers lower than 1000000 generally don t need separators var small_number 12345 Copy to clipboard Bad var large_number 1234567890 var large_hex_number 0xfffff8f80000 var large_bin_number 0b110100101010 Numbers lower than 1000000 generally don t need separators var small_number 12_345 Copy to clipboard Naming conventions These naming conventions follow the Godot Engine style Breaking these will make your code clash with the built in naming conventions leading to inconsistent code File names Use snake_case for file names For named classes convert the PascalCase class name to snake_case This file should be saved as weapon gd class_name Weapon extends Node Copy to clipboard This file should be saved as yaml_parser gd class_name YAMLParser extends Object Copy to clipboard This is consistent with how C files are named in Godot s source code This also avoids case sensitivity issues that can crop up when exporting a project from Windows to other platforms Classes and nodes Use PascalCase for class and node names extends CharacterBody3D Copy to clipboard Also use PascalCase when loading a class into a constant or a variable const Weapon preload res weapon gd Copy to clipboard Functions and variables Use snake_case to name functions and variables var particle_effect func load_level Copy to clipboard Prepend a single underscore _ to virtual methods functions the user must override private functions and private variables var _counter 0 func _recalculate_path Copy to clipboard Signals Use the past tense to name signals signal door_opened signal score_changed Copy to clipboard Constants and enums Write constants with CONSTANT_CASE that is to say in all caps with an underscore _ to separate words const MAX_SPEED 200 Copy to clipboard Use PascalCase for enum names and CONSTANT_CASE for their members as they are constants enum Element EARTH WATER AIR FIRE Copy to clipboard Write enums with each item on its own line This allows adding documentation comments above each item more easily and also makes for cleaner diffs in version control when items are added or removed Good enum Element EARTH WATER AIR FIRE Copy to clipboard Bad enum Element EARTH WATER AIR FIRE Copy to clipboard Code order This section focuses on code order For formatting see Formatting For naming conventions see Naming conventions We suggest to organize GDScript code this way 01 tool 02 class_name 03 extends 04 docstring 05 signals 06 enums 07 constants 08 export variables 09 public variables 10 private variables 11 onready variables 12 optional built in virtual _init method 13 optional built in virtual _enter_tree method 14 built in virtual _ready method 15 remaining built in virtual methods 16 public methods 17 private methods 18 subclasses Copy to clipboard We optimized the order to make it easy to read the code from top to bottom to help developers reading the code for the first time understand how it works and to avoid errors linked to the order of variable declarations This code order follows four rules of thumb Properties and signals come first followed by methods Public comes before private Virtual callbacks come before the class s interface The object s construction and initialization functions _init and _ready come before functions that modify the object at runtime Class declaration If the code is meant to run in the editor place the tool annotation on the first line of the script Follow with the class_name if necessary You can turn a GDScript file into a global type in your project using this feature For more information see GDScript reference Then add the extends keyword if the class extends a built in type Following that you should have the class s optional documentation comments You can use that to explain the role of your class to your teammates how it works and how other developers should use it for example class_name MyNode extends Node A brief description of the class s role and functionality The description of the script what it can do and any further detail Copy to clipboard Signals and properties Write signal declarations followed by properties that is to say member variables after the docstring Enums should come after signals as you can use them as export hints for other properties Then write constants exported variables public private and onready variables in that order signal player_spawned position enum Jobs KNIGHT WIZARD ROGUE HEALER SHAMAN const MAX_LIVES 3 export var job Jobs Jobs KNIGHT export var max_health 50 export var attack 5 var health max_health set new_health health new_health var _speed 300 0 onready var sword get_node Sword onready var gun get_node Gun Copy to clipboard Note GDScript evaluates onready variables right before the _ready callback You can use that to cache node dependencies that is to say to get child nodes in the scene that your class relies on This is what the example above shows Member variables Don t declare member variables if they are only used locally in a method as it makes the code more difficult to follow Instead declare them as local variables in the method s body Local variables Declare local variables as close as possible to their first use This makes it easier to follow the code without having to scroll too much to find where the variable was declared Methods and static functions After the class s properties come the methods Start with the _init callback method that the engine will call upon creating the object in memory Follow with the _ready callback that Godot calls when it adds a node to the scene tree These functions should come first because they show how the object is initialized Other built in virtual callbacks like _unhandled_input and _physics_process should come next These control the object s main loop and interactions with the game engine The rest of the class s interface public and private methods come after that in that order func _init add_to_group state_machine func _ready state_changed connect _on_state_changed _state enter func _unhandled_input event _state unhandled_input event func transition_to target_state_path msg if not has_node target_state_path return var target_state get_node target_state_path assert target_state is_composite false _state exit self _state target_state _state enter msg Events player_state_changed emit _state name func _on_state_changed previous new print state changed state_changed emit Copy to clipboard Static typing Since Godot 3 1 GDScript supports optional static typing Declared types To declare a variable s type use variable type var health int 0 Copy to clipboard To declare the return type of a function use type func heal amount int void Copy to clipboard Inferred types In most cases you can let the compiler infer the type using Prefer when the type is written on the same line as the assignment otherwise prefer writing the type explicitly Good var health int 0 The type can be int or float and thus should be stated explicitly var direction Vector3 1 2 3 The type is clearly inferred as Vector3 Copy to clipboard Include the type hint when the type is ambiguous and omit the type hint when it s redundant Bad var health 0 Typed as int but it could be that float was intended var direction Vector3 Vector3 1 2 3 The type hint has redundant information What type is this It s not immediately clear to the reader so it s bad var value complex_function Copy to clipboard In some cases the type must be stated explicitly otherwise the behavior will not be as expected because the compiler will only be able to use the function s return type For example get_node cannot infer a type unless the scene or file of the node is loaded in memory In this case you should set the type explicitly Good onready var health_bar ProgressBar get_node UI LifeBar Copy to clipboard Alternatively you can use the as keyword to cast the return type and that type will be used to infer the type of the var onready var health_bar get_node UI LifeBar as ProgressBar health_bar will be typed as ProgressBar Copy to clipboard This option is also considered more type safe than the first Bad The compiler can t infer the exact type and will use Node instead of ProgressBar onready var health_bar get_node UI LifeBar Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Static typing in GDScript In this guide you will learn how to use static typing in GDScript that static types can help you avoid bugs that static typing improves your experience with the editor Where and how you use this language feature is entirely up to you you can use it only in some sensitive GDScript files use it everywhere or don t use it at all Static types can be used on variables constants functions parameters and return types A brief look at static typing With static typing GDScript can detect more errors without even running the code Also type hints give you and your teammates more information as you re working as the arguments types show up when you call a method Static typing improves editor autocompletion and documentation of your scripts Imagine you re programming an inventory system You code an Item class then an Inventory To add items to the inventory the people who work with your code should always pass an Item to the Inventory add method With types you can enforce this class_name Inventory func add reference Item amount int 1 var item find_item reference if not item item _instance_item_from_db reference item amount amount Copy to clipboard Static types also give you better code completion options Below you can see the difference between a dynamic and a static typed completion options You ve probably encountered a lack of autocomplete suggestions after a dot This is due to dynamic code Godot cannot know what value type you re passing to the function If you write the type explicitly however you will get all methods properties constants etc from the value Tip If you prefer static typing we recommend enabling the Text Editor Completion Add Type Hints editor setting Also consider enabling some warnings that are disabled by default Also typed GDScript improves performance by using optimized opcodes when operand argument types are known at compile time More GDScript optimizations are planned in the future such as JIT AOT compilation Overall typed programming gives you a more structured experience It helps prevent errors and improves the self documenting aspect of your scripts This is especially helpful when you re working in a team or on a long term project studies have shown that developers spend most of their time reading other people s code or scripts they wrote in the past and forgot about The clearer and the more structured the code the faster it is to understand the faster you can move forward How to use static typing To define the type of a variable parameter or constant write a colon after the name followed by its type E g var health int This forces the variable s type to always stay the same var damage float 10 5 const MOVE_SPEED float 50 0 func sum a float 0 0 b float 0 0 float return a b Copy to clipboard Godot will try to infer types if you write a colon but you omit the type var damage 10 5 const MOVE_SPEED 50 0 func sum a 0 0 b 0 0 float return a b Copy to clipboard Note There is no difference between and for constants You don t need to write type hints for constants as Godot sets it automatically from the assigned value But you can still do so to make the intent of your code clearer Also this is useful for typed arrays like const A Array int 1 2 3 since untyped arrays are used by default What can be a type hint Here is a complete list of what can be used as a type hint Variant Any type In most cases this is not much different from an untyped declaration but increases readability As a return type forces the function to explicitly return some value Only return type void Indicates that the function does not return any value Built in types Native classes Object Node Area2D Camera2D etc Global classes Inner classes Global native and custom named enums Note that an enum type is just an int there is no guarantee that the value belongs to the set of enum values Constants including local ones if they contain a preloaded class or enum You can use any class including your custom classes as types There are two ways to use them in scripts The first method is to preload the script you want to use as a type in a constant const Rifle preload res player weapons rifle gd var my_rifle Rifle Copy to clipboard The second method is to use the class_name keyword when you create For the example above your rifle gd would look like this class_name Rifle extends Node2D Copy to clipboard If you use class_name Godot registers the Rifle type globally in the editor and you can use it anywhere without having to preload it into a constant var my_rifle Rifle Copy to clipboard Specify the return type of a function with the arrow To define the return type of a function write a dash and a right angle bracket after its declaration followed by the return type func _process delta float void pass Copy to clipboard The type void means the function does not return anything You can use any type as with variables func hit damage float bool health_points damage return health_points 0 Copy to clipboard You can also use your own classes as return types Adds an item to the inventory and returns it func add reference Item amount int Item var item Item find_item reference if not item item ItemDatabase get_instance reference item amount amount return item Copy to clipboard Covariance and contravariance When inheriting base class methods you should follow the Liskov substitution principle Covariance When you inherit a method you can specify a return type that is more specific subtype than the parent method Contravariance When you inherit a method you can specify a parameter type that is less specific supertype than the parent method Example class_name Parent func get_property param Label Node Copy to clipboard class_name Child extends Parent Control is a supertype of Label Node2D is a subtype of Node func get_property param Control Node2D Copy to clipboard Specify the element type of an Array To define the type of an Array enclose the type name in An array s type applies to for loop variables as well as some operators like and Array methods such as push_back and other operators such as are still untyped Built in types native and custom classes and enums may be used as element types Nested array types are not supported var scores Array int 10 20 30 var vehicles Array Node Car Plane var items Array Item Item new var arrays Array Array disallowed for score in scores score has type int The following would be errors scores vehicles var s String scores 0 scores 0 lots Copy to clipboard Since Godot 4 2 you can also specify a type for the loop variable in a for loop For instance you can write var names John Marta Samantha Jimmy for name String in names pass Copy to clipboard The array will remain untyped but the name variable within the for loop will always be of String type Type casting Type casting is an important concept in typed languages Casting is the conversion of a value from one type to another Imagine an Enemy in your game that extends Area2D You want it to collide with the Player a CharacterBody2D with a script called PlayerController attached to it You use the body_entered signal to detect the collision With typed code the body you detect is going to be a generic PhysicsBody2D and not your PlayerController on the _on_body_entered callback You can check if this PhysicsBody2D is your Player with the as keyword and using the colon again to force the variable to use this type This forces the variable to stick to the PlayerController type func _on_body_entered body PhysicsBody2D void var player body as PlayerController if not player return player damage Copy to clipboard As we re dealing with a custom type if the body doesn t extend PlayerController the player variable will be set to null We can use this to check if the body is the player or not We will also get full autocompletion on the player variable thanks to that cast Note The as keyword silently casts the variable to null in case of a type mismatch at runtime without an error warning While this may be convenient in some cases it can also lead to bugs Use the as keyword only if this behavior is intended A safer alternative is to use the is keyword if not body is PlayerController push_error Bug body is not PlayerController var player PlayerController body if not player return player damage Copy to clipboard or assert statement assert body is PlayerController Bug body is not PlayerController var player PlayerController body if not player return player damage Copy to clipboard Note If you try to cast with a built in type and it fails Godot will throw an error Safe lines You can also use casting to ensure safe lines Safe lines are a tool to tell you when ambiguous lines of code are type safe As you can mix and match typed and dynamic code at times Godot doesn t have enough information to know if an instruction will trigger an error or not at runtime This happens when you get a child node Let s take a timer for example with dynamic code you can get the node with Timer GDScript supports duck typing so even if your timer is of type Timer it is also a Node and an Object two classes it extends With dynamic GDScript you also don t care about the node s type as long as it has the methods you need to call You can use casting to tell Godot the type you expect when you get a node Timer as Timer Player as CharacterBody2D etc Godot will ensure the type works and if so the line number will turn green at the left of the script editor Unsafe line line 7 vs Safe Lines line 6 and 8 Note Safe lines do not always mean better or more reliable code See the note above about the as keyword For example onready var node_1 Node1 as Type1 Safe line onready var node_2 Type2 Node2 Unsafe line Copy to clipboard Even though node_2 declaration is marked as an unsafe line it is more reliable than node_1 declaration Because if you change the node type in the scene and accidentally forget to change it in the script the error will be detected immediately when the scene is loaded Unlike node_1 which will be silently cast to null and the error will be detected later Note You can turn off safe lines or change their color in the editor settings Typed or dynamic stick to one style Typed GDScript and dynamic GDScript can coexist in the same project But it s recommended to stick to either style for consistency in your codebase and for your peers It s easier for everyone to work together if you follow the same guidelines and faster to read and understand other people s code Typed code takes a little more writing but you get the benefits we discussed above Here s an example of the same empty script in a dynamic style extends Node func _ready pass func _process delta pass Copy to clipboard And with static typing extends Node func _ready void pass func _process delta float void pass Copy to clipboard As you can see you can also use types with the engine s virtual methods Signal callbacks like any methods can also use types Here s a body_entered signal in a dynamic style func _on_area_2d_body_entered body pass Copy to clipboard And the same callback with type hints func _on_area_entered area CollisionObject2D void pass Copy to clipboard Warning system Note Detailed documentation about the GDScript warning system has been moved to GDScript warning system From version 3 1 Godot gives you warnings about your code as you write it the engine identifies sections of your code that may lead to issues at runtime but lets you decide whether or not you want to leave the code as it is We have a number of warnings aimed specifically at users of typed GDScript By default these warnings are disabled you can enable them in Project Settings Debug GDScript make sure Advanced Settings is enabled You can enable the UNTYPED_DECLARATION warning if you want to always use static types Additionally you can enable the INFERRED_DECLARATION warning if you prefer a more readable and reliable but more verbose syntax UNSAFE_ warnings make unsafe operations more noticeable than unsafe lines Currently UNSAFE_ warnings do not cover all cases that unsafe lines cover Common unsafe operations and their safe counterparts UNSAFE_PROPERTY_ACCESS and UNSAFE_METHOD_ACCESS warnings In this example we aim to set a property and call a method on an object that has a script attached with class_name MyScript and that extends Node2D If we have a reference to the object as a Node2D for instance as it was passed to us by the physics system we can first check if the property and method exist and then set and call them if they do if some_property in node_2d node_2d some_property 20 Produces UNSAFE_PROPERTY_ACCESS warning if node_2d has_method some_function node_2d some_function Produces UNSAFE_METHOD_ACCESS warning Copy to clipboard However this code will produce UNSAFE_PROPERTY_ACCESS and UNSAFE_METHOD_ACCESS warnings as the property and method are not present in the referenced type in this case a Node2D To make these operations safe you can first check if the object is of type MyScript using the is keyword and then declare a variable with the type MyScript on which you can set its properties and call its methods if node_2d is MyScript var my_script MyScript node_2d my_script some_property 20 my_script some_function Copy to clipboard Alternatively you can declare a variable and use the as operator to try to cast the object You ll then want to check whether the cast was successful by confirming that the variable was assigned var my_script node_2d as MyScript if my_script null my_script some_property 20 my_script some_function Copy to clipboard UNSAFE_CAST warning In this example we would like the label connected to an object entering our collision area to show the area s name Once the object enters the collision area the physics system sends a signal with a Node2D object and the most straightforward but not statically typed solution to do what we want could be achieved like this func _on_body_entered body Node2D void body label text name Produces UNSAFE_PROPERTY_ACCESS warning Copy to clipboard This piece of code produces an UNSAFE_PROPERTY_ACCESS warning because label is not defined in Node2D To solve this we could first check if the label property exist and cast it to type Label before settings its text property like so func _on_body_entered body Node2D void if label in body body label as Label text name Produces UNSAFE_CAST warning Copy to clipboard However this produces an UNSAFE_CAST warning because body label is of a Variant type To safely get the property in the type you want you can use the Object get method which returns the object as a Variant value or returns null if the property doesn t exist You can then determine whether the property contains an object of the right type using the is keyword and finally declare a statically typed variable with the object func _on_body_entered body Node2D void var label_variant Variant body get label if label_variant is Label var label Label label_variant label text name Copy to clipboard Cases where you can t specify types To wrap up this introduction let s mention cases where you can t use type hints This will trigger a syntax error You can t specify the type of individual elements in an array or a dictionary var enemies Array Goblin Enemy Zombie Enemy var character Dictionary name String Richard money int 1000 inventory Inventory Inventory Copy to clipboard Nested types are not currently supported var teams Array Array Character Copy to clipboard Typed dictionaries are not currently supported var map Dictionary Vector2i Item Copy to clipboard Summary Typed GDScript is a powerful tool It helps you write more structured code avoid common errors and create scalable and reliable systems Static types improve GDScript performance and more optimizations are planned for the future User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue GDScript warning system The GDScript warning system complements static typing but it can work without static typing too It s here to help you avoid mistakes that are hard to spot during development and that may lead to runtime errors You can configure warnings in the Project Settings under the section called GDScript Note You must enable Advanced Settings in order to see the GDScript section in the sidebar You can also search for GDScript when Advanced Settings is off You can find a list of warnings for the active GDScript file in the script editor s status bar The example below has 2 warnings To ignore specific warnings in one file insert an annotation of the form warning_ignore warning id or click on the ignore link to the left of the warning s description Godot will add an annotation above the corresponding line and the code won t trigger the corresponding warning anymore Warnings won t prevent the game from running but you can turn them into errors if you d like This way your game won t compile unless you fix all warnings Head to the GDScript section of the Project Settings to turn on this option to the warning that you want Here s the same file as the previous example with the warning unused_variable as an error turned on User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue GDScript format strings GDScript offers a feature called format strings which allows reusing text templates to succinctly create different but similar strings Format strings are just like normal strings except they contain certain placeholder character sequences These placeholders can then easily be replaced by parameters handed to the format string As an example with s as a placeholder the format string Hello s how are you can easily be changed to Hello World how are you Notice the placeholder is in the middle of the string modifying it without format strings could be cumbersome Usage in GDScript Examine this concrete GDScript example Define a format string with placeholder s var format_string We re waiting for s Using the operator the placeholder is replaced with the desired value var actual_string format_string Godot print actual_string Output We re waiting for Godot Copy to clipboard Placeholders always start with a but the next character or characters the format specifier determines how the given value is converted to a string The s seen in the example above is the simplest placeholder and works for most use cases it converts the value by the same method by which an implicit String conversion or str would convert it Strings remain unchanged Booleans turn into either True or False an integral or real number becomes a decimal other types usually return their data in a human readable string There is also another way to format text in GDScript namely the String format method It replaces all occurrences of a key in the string with the corresponding value The method can handle arrays or dictionaries for the key value pairs Arrays can be used as key index or mixed style see below examples Order only matters when the index or mixed style of Array is used A quick example in GDScript Define a format string var format_string We re waiting for str Using the format method replace the str placeholder var actual_string format_string format str Godot print actual_string Output We re waiting for Godot Copy to clipboard There are other format specifiers but they are only applicable when using the operator Multiple placeholders Format strings may contain multiple placeholders In such a case the values are handed in the form of an array one value per placeholder unless using a format specifier with see dynamic padding var format_string s was reluctant to learn s but now he enjoys it var actual_string format_string Estragon GDScript print actual_string Output Estragon was reluctant to learn GDScript but now he enjoys it Copy to clipboard Note the values are inserted in order Remember all placeholders must be replaced at once so there must be an appropriate number of values Format specifiers There are format specifiers other than s that can be used in placeholders They consist of one or more characters Some of them work by themselves like s some appear before other characters some only work with certain values or characters Placeholder types One and only one of these must always appear as the last character in a format specifier Apart from s these require certain types of parameters s Simple conversion to String by the same method as implicit String conversion c A single Unicode character Expects an unsigned 8 bit integer 0 255 for a code point or a single character string d A decimal integral number Expects an integral or real number will be floored o An octal integral number Expects an integral or real number will be floored x A hexadecimal integral number with lower case letters Expects an integral or real number will be floored X A hexadecimal integral number with upper case letters Expects an integral or real number will be floored f A decimal real number Expects an integral or real number v A vector Expects any float or int based vector object Vector2 Vector3 Vector4 Vector2i Vector3i or Vector4i Will display the vector coordinates in parentheses formatting each coordinate as if it was an f and using the same modifiers Placeholder modifiers These characters appear before the above Some of them work only under certain conditions In number specifiers show sign if positive Integer Set padding Padded with spaces or with zeroes if integer starts with 0 in an integer or real number placeholder The leading 0 is ignored if is present When used after see Before f or v set precision to 0 decimal places Can be followed up with numbers to change Padded with zeroes Pad to the right rather than the left Dynamic padding expect additional integral parameter to set padding or precision after see dynamic padding Padding The dot asterisk minus sign and digit 0 9 characters are used for padding This allows printing several values aligned vertically as if in a column provided a fixed width font is used To pad a string to a minimum length add an integer to the specifier print 10d 12345 output 12345 5 leading spaces for a total length of 10 Copy to clipboard If the integer starts with 0 integral values are padded with zeroes instead of white space print 010d 12345 output 0000012345 Copy to clipboard Precision can be specified for real numbers by adding a dot with an integer following it With no integer after a precision of 0 is used rounding to integral value The integer to use for padding must appear before the dot Pad to minimum length of 10 round to 3 decimal places print 10 3f 10000 5555 Output 10000 556 1 leading space Copy to clipboard The character will cause padding to the right rather than the left useful for right text alignment print 10d 12345678 Output 12345678 2 trailing spaces Copy to clipboard Dynamic padding By using the asterisk character the padding or precision can be set without modifying the format string It is used in place of an integer in the format specifier The values for padding and precision are then passed when formatting var format_string f Pad to length of 7 round to 3 decimal places print format_string 7 3 8 8888 Output 8 889 2 leading spaces Copy to clipboard It is still possible to pad with zeroes in integer placeholders by adding 0 before print 0 d 2 3 Output 03 Copy to clipboard Escape sequence To insert a literal character into a format string it must be escaped to avoid reading it as a placeholder This is done by doubling the character var health 56 print Remaining health d health Output Remaining health 56 Copy to clipboard Format method examples The following are some examples of how to use the various invocations of the String format method Type Style Example Result Dictionary key Hi name v version format name Godette version 3 0 Hi Godette v3 0 Dictionary index Hi 0 v 1 format 0 Godette 1 3 0 Hi Godette v3 0 Dictionary mix Hi 0 v version format 0 Godette version 3 0 Hi Godette v3 0 Array key Hi name v version format version 3 0 name Godette Hi Godette v3 0 Array index Hi 0 v 1 format Godette 3 0 Hi Godette v3 0 Array mix Hi name v 0 format 3 0 name Godette Hi Godette v3 0 Array no index Hi v format Godette 3 0 Hi Godette v3 0 Placeholders can also be customized when using String format here s some examples of that functionality Type Example Result Infix default Hi 0 v 1 format Godette 3 0 _ Hi Godette v3 0 Postfix Hi 0 v1 format Godette 3 0 _ Hi Godette v3 0 Prefix Hi 0 v 1 format Godette 3 0 _ Hi Godette v3 0 Combining both the String format method and the operator could be useful as String format does not have a way to manipulate the representation of numbers Example Result Hi 0 v version format 0 Godette version 0 2f 3 114 Hi Godette v3 11 User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue C NET C is a high level programming language developed by Microsoft Godot supports C as an option for a scripting language alongside Godot s own GDScript The standard Godot executable does not contain C support out of the box Instead to enable C support for your project you need to download a NET version of the editor from the Godot website C basics C language features C style guide C diagnostics Godot API for C As a general purpose game engine Godot offers some high level features as a part of its API Articles below explain how these features integrate into C and how C API may be different from GDScript C API differences to GDScript C collections C Variant C signals C exported properties C global classes C platform support As of Godot 4 2 projects written in C support all desktop platforms Windows Linux and macOS as well as Android and iOS Android support is currently experimental and has a few limitations Projects targeting Android need to target NET 7 0 or higher This requires modifying the csproj file generated by Godot for existing projects The following property is added to new projects created with 4 2 and can be added to existing projects TargetFramework Condition GodotTargetPlatform android net7 0 TargetFramework Copy to clipboard Only some Android architectures are supported arm64 and x64 iOS support is currently experimental and has a few limitations Projects targeting iOS need to target NET 8 0 or higher This requires modifying the csproj file generated by Godot for existing projects The following property is added to new projects created with 4 2 and can be added to existing projects TargetFramework Condition GodotTargetPlatform ios net8 0 TargetFramework Copy to clipboard The official export templates for the iOS simulator only supports the x64 architecture Exporting to iOS can only be done from a MacOS device Currently projects written in C cannot be exported to the web platform To use C on that platform consider Godot 3 instead Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue C basics Introduction This page provides a brief introduction to C both what it is and how to use it in Godot Afterwards you may want to look at how to use specific features read about the differences between the C and the GDScript API and re visit the Scripting section of the step by step tutorial C is a high level programming language developed by Microsoft In Godot it is implemented with NET 6 0 Attention Projects written in C using Godot 4 currently cannot be exported to the web platform To use C on the web platform consider Godot 3 instead Android and iOS platform support is available as of Godot 4 2 but is experimental and some limitations apply Note This is not a full scale tutorial on the C language as a whole If you aren t already familiar with its syntax or features see the Microsoft C guide or look for a suitable introduction elsewhere Prerequisites Godot bundles the parts of NET needed to run already compiled games However Godot does not bundle the tools required to build and compile games such as MSBuild and the C compiler These are included in the NET SDK and need to be installed separately In summary you must have installed the NET SDK and the NET enabled version of Godot Download and install the latest stable version of the SDK from the NET download page Important Be sure to install the 64 bit version of the SDK s if you are using the 64 bit version of Godot If you are building Godot from source make sure to follow the steps to enable NET support in your build as outlined in the Compiling with NET page Configuring an external editor C support in Godot s built in script editor is minimal Consider using an external IDE or editor such as Visual Studio Code or MonoDevelop These provide autocompletion debugging and other useful features for C To select an external editor in Godot click on Editor Editor Settings and scroll down to Dotnet Under Dotnet click on Editor and select your external editor of choice Godot currently supports the following external editors Visual Studio 2022 Visual Studio Code MonoDevelop Visual Studio for Mac JetBrains Rider See the following sections for how to configure an external editor JetBrains Rider After reading the Prerequisites section you can download and install JetBrains Rider In Godot s Editor Editor Settings menu Set Dotnet Editor External Editor to JetBrains Rider In Rider Set MSBuild version to NET Core Install the Godot support plugin Visual Studio Code After reading the Prerequisites section you can download and install Visual Studio Code aka VS Code In Godot s Editor Editor Settings menu Set Dotnet Editor External Editor to Visual Studio Code In Visual Studio Code Install the C extension To configure a project for debugging you need a tasks json and launch json file in the vscode folder with the necessary configuration Here is an example launch json version 0 2 0 configurations name Play type coreclr request launch preLaunchTask build program env GODOT4 args cwd workspaceFolder stopAtEntry false Copy to clipboard For this launch configuration to work you need to either setup a GODOT4 environment variable that points to the Godot executable or replace program parameter with the path to the Godot executable Here is an example tasks json version 2 0 0 tasks label build command dotnet type process args build problemMatcher msCompile Copy to clipboard Now when you start the debugger in Visual Studio Code your Godot project will run Visual Studio Windows only Download and install the latest version of Visual Studio Visual Studio will include the required SDKs if you have the correct workloads selected so you don t need to manually install the things listed in the Prerequisites section While installing Visual Studio select this workload NET desktop development In Godot s Editor Editor Settings menu Set Dotnet Editor External Editor to Visual Studio Note If you see an error like Unable to find package Godot NET Sdk your NuGet configuration may be incorrect and need to be fixed A simple way to fix the NuGet configuration file is to regenerate it In a file explorer window go to AppData NuGet Rename or delete the NuGet Config file When you build your Godot project again the file will be automatically created with default values To debug your C scripts using Visual Studio open the sln file that is generated after opening the first C script in the editor In the Debug menu go to the Debug Properties menu item for your project Click the Create a new profile button and choose Executable In the Executable field browse to the path of the C version of the Godot editor or type GODOT4 if you have created an environment variable for the Godot executable path It must be the path to the main Godot executable not the console version For the Working Directory type a single period meaning the current directory Also check the Enable native code debugging checkbox You may now close this window click downward arrow on the debug profile dropdown and select your new launch profile Hit the green start button and your game will begin playing in debug mode Creating a C script After you successfully set up C for Godot you should see the following option when selecting Attach Script in the context menu of a node in your scene Note that while some specifics change most concepts work the same when using C for scripting If you re new to Godot you may want to follow the tutorials on Scripting languages at this point While some documentation pages still lack C examples most notions can be transferred from GDScript Project setup and workflow When you create the first C script Godot initializes the C project files for your Godot project This includes generating a C solution sln and a project file csproj as well as some utility files and folders godot mono All of these but godot mono are important and should be committed to your version control system Everything under godot can be safely added to the ignore list of your VCS When troubleshooting it can sometimes help to delete the godot mono folder and let it regenerate Example Here s a blank C script with some comments to demonstrate how it works using Godot public partial class YourCustomClass Node Member variables here example private int _a 2 private string _b textvar public override void _Ready Called every time the node is added to the scene Initialization here GD Print Hello from C to Godot public override void _Process double delta Called every frame Delta is time since the last frame Update game logic here Copy to clipboard As you can see functions normally in global scope in GDScript like Godot s print function are available in the GD static class which is part of the Godot namespace For a full list of methods in the GD class see the class reference pages for GDScript and GlobalScope Note Keep in mind that the class you wish to attach to your node should have the same name as the cs file Otherwise you will get the following error Cannot find class XXX for script res XXX cs General differences between C and GDScript The C API uses PascalCase instead of snake_case in GDScript C Where possible fields and getters setters have been converted to properties In general the C Godot API strives to be as idiomatic as is reasonably possible For more information see the C API differences to GDScript page Warning You need to re build the project assemblies whenever you want to see new exported variables or signals in the editor This build can be manually triggered by clicking the Build button in the top right corner of the editor You will also need to rebuild the project assemblies to apply changes in tool scripts Current gotchas and known issues As C support is quite new in Godot there are some growing pains and things that need to be ironed out Below is a list of the most important issues you should be aware of when diving into C in Godot but if in doubt also take a look over the official issue tracker for NET issues Writing editor plugins is possible but it is currently quite convoluted State is currently not saved and restored when hot reloading with the exception of exported variables Attached C scripts should refer to a class that has a class name that matches the file name There are some methods such as Get Set Call CallDeferred and signal connection method Connect that rely on Godot s snake_case API naming conventions So when using e g CallDeferred AddChild AddChild will not work because the API is expecting the original snake_case version add_child However you can use any custom properties or methods without this limitation Prefer using the exposed StringName in the PropertyName MethodName and SignalName to avoid extra StringName allocations and worrying about snake_case naming As of Godot 4 0 exporting NET projects is supported for desktop platforms Linux Windows and macOS Other platforms will gain support in future 4 x releases Common pitfalls You might encounter the following error when trying to modify some values in Godot objects e g when trying to change the X coordinate of a Node2D public partial class MyNode2D Node2D public override void _Ready Position X 100 0f CS1612 Cannot modify the return value of Node2D Position because it is not a variable Copy to clipboard This is perfectly normal Structs in this example a Vector2 in C are copied on assignment meaning that when you retrieve such an object from a property or an indexer you get a copy of it not the object itself Modifying said copy without reassigning it afterwards won t achieve anything The workaround is simple retrieve the entire struct modify the value you want to modify and reassign the property var newPosition Position newPosition X 100 0f Position newPosition Copy to clipboard Since C 10 it is also possible to use with expressions on structs allowing you to do the same thing in a single line Position Position with X 100 0f Copy to clipboard You can read more about this error on the C language reference Performance of C in Godot According to some preliminary benchmarks the performance of C in Godot while generally in the same order of magnitude is roughly 4 that of GDScript in some naive cases C is still a little faster the specifics are going to vary according to your use case GDScript is likely fast enough for most general scripting workloads Most properties of Godot C objects that are based on GodotObject e g any Node like Control or Node3D like Camera3D require native interop calls as they talk to Godot s C core Consider assigning values of such properties into a local variable if you need to modify or read them multiple times at a single code location using Godot public partial class YourCustomClass Node3D private void ExpensiveReposition for var i 0 i 10 i Position is read and set 10 times which incurs native interop Furthermore the object is repositioned 10 times in 3D space which takes additional time Position new Vector3 i i private void Reposition A variable is used to avoid native interop for Position on every loop var newPosition Position for var i 0 i 10 i newPosition new Vector3 i i Setting Position only once avoids native interop and repositioning in 3D space Position newPosition Copy to clipboard Passing raw arrays such as byte or string to Godot s C API requires marshalling which is comparatively pricey The implicit conversion from string to NodePath or StringName incur both the native interop and marshalling costs as the string has to be marshalled and passed to the respective native constructor Using NuGet packages in Godot NuGet packages can be installed and used with Godot as with any C project Many IDEs are able to add packages directly They can also be added manually by adding the package reference in the csproj file located in the project root ItemGroup PackageReference Include Newtonsoft Json Version 11 0 2 ItemGroup Project Copy to clipboard As of Godot 3 2 3 Godot automatically downloads and sets up newly added NuGet packages the next time it builds the project Profiling your C code The following tools may be used for performance and memory profiling of your managed code JetBrains Rider with dotTrace dotMemory plugin Standalone JetBrains dotTrace dotMemory Visual Studio Profiling managed and unmanaged code at once is possible with both JetBrains tools and Visual Studio but limited to Windows User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue C language features This page provides an overview of the commonly used features of both C and Godot and how they are used together Type conversion and casting C is a statically typed language Therefore you can t do the following var mySprite GetNode MySprite mySprite SetFrame 0 Copy to clipboard The method GetNode returns a Node instance You must explicitly convert it to the desired derived type Sprite2D in this case For this you have various options in C Casting and Type Checking Throws InvalidCastException if the returned node cannot be cast to Sprite2D You would use it instead of the as operator if you are pretty sure it won t fail Sprite2D mySprite Sprite2D GetNode MySprite mySprite SetFrame 0 Copy to clipboard Using the AS operator The as operator returns null if the node cannot be cast to Sprite2D and for that reason it cannot be used with value types Sprite2D mySprite GetNode MySprite as Sprite2D Only call SetFrame if mySprite is not null mySprite SetFrame 0 Copy to clipboard Using the generic methods Generic methods are also provided to make this type conversion transparent GetNode T casts the node before returning it It will throw an InvalidCastException if the node cannot be cast to the desired type Sprite2D mySprite GetNode Sprite2D MySprite mySprite SetFrame 0 Copy to clipboard GetNodeOrNull T uses the as operator and will return null if the node cannot be cast to the desired type Sprite2D mySprite GetNodeOrNull Sprite2D MySprite Only call SetFrame if mySprite is not null mySprite SetFrame 0 Copy to clipboard Type checking using the IS operator To check if the node can be cast to Sprite2D you can use the is operator The is operator returns false if the node cannot be cast to Sprite2D otherwise it returns true Note that when the is operator is used against null the result is always going to be false if GetNode MySprite is Sprite2D Yup it s a Sprite2D if null is Sprite2D This block can never happen Copy to clipboard You can also declare a new variable to conditionally store the result of the cast if the is operator returns true if GetNode MySprite is Sprite2D mySprite The mySprite variable only exists inside this block and it s never null mySprite SetFrame 0 Copy to clipboard For more advanced type checking you can look into Pattern Matching Preprocessor defines Godot has a set of defines that allow you to change your C code depending on the environment you are compiling to Examples For example you can change code based on the platform public override void _Ready if GODOT_32 GODOT_MOBILE GODOT_WEB Use simple objects when running on less powerful systems SpawnSimpleObjects else SpawnComplexObjects endif Copy to clipboard Or you can detect which engine your code is in useful for making cross engine libraries public void MyPlatformPrinter if GODOT GD Print This is Godot elif UNITY_5_3_OR_NEWER print This is Unity else throw new NotSupportedException Only Godot and Unity are supported endif Copy to clipboard Or you can write scripts that target multiple Godot versions and take advantage of features that are only available on some of those versions public void UseCoolFeature if GODOT4_3_OR_GREATER GODOT4_2_2_OR_GREATER Use CoolFeature that was added to Godot in 4 3 and cherry picked into 4 2 2 here else Use a workaround for the absence of CoolFeature here endif Copy to clipboard Full list of defines GODOT is always defined for Godot projects TOOLS is defined when building with the Debug configuration editor and editor player GODOT_REAL_T_IS_DOUBLE is defined when the GodotFloat64 property is set to true One of GODOT_64 or GODOT_32 is defined depending on if the architecture is 64 bit or 32 bit One of GODOT_LINUXBSD GODOT_WINDOWS GODOT_OSX GODOT_ANDROID GODOT_IOS GODOT_WEB depending on the OS These names may change in the future These are created from the get_name method of the OS singleton but not every possible OS the method returns is an OS that Godot with NET runs on GODOTX GODOTX_Y GODOTX_Y_Z GODOTx_OR_GREATER GODOTX_y_OR_GREATER and GODOTX_Y_z_OR_GREATER where X Y and Z are replaced by the current major minor and patch version of Godot x y and z are replaced by all values from 0 to the current version number for that component Note These defines were first added in Godot 4 0 4 and 4 1 Version defines for prior versions do not exist regardless of the current Godot version For example Godot 4 0 5 defines GODOT4 GODOT4_OR_GREATER GODOT4_0 GODOT4_0_OR_GREATER GODOT4_0_5 GODOT4_0_4_OR_GREATER and GODOT4_0_5_OR_GREATER Godot 4 3 2 defines GODOT4 GODOT4_OR_GREATER GODOT4_3 GODOT4_0_OR_GREATER GODOT4_1_OR_GREATER GODOT4_2_OR_GREATER GODOT4_3_OR_GREATER GODOT4_3_2 GODOT4_3_0_OR_GREATER GODOT4_3_1_OR_GREATER and GODOT4_3_2_OR_GREATER When exporting the following may also be defined depending on the export features One of GODOT_PC GODOT_MOBILE or GODOT_WEB depending on the platform type One of GODOT_WINDOWS GODOT_LINUXBSD GODOT_MACOS GODOT_ANDROID GODOT_IOS or GODOT_WEB depending on the platform To see an example project see the OS testing demo https github com godotengine godot demo projects tree master misc os_test User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue C style guide Having well defined and consistent coding conventions is important for every project and Godot is no exception to this rule This page contains a coding style guide which is followed by developers of and contributors to Godot itself As such it is mainly intended for those who want to contribute to the project but since the conventions and guidelines mentioned in this article are those most widely adopted by the users of the language we encourage you to do the same especially if you do not have such a guide yet Note This article is by no means an exhaustive guide on how to follow the standard coding conventions or best practices If you feel unsure of an aspect which is not covered here please refer to more comprehensive documentation such as C Coding Conventions or Framework Design Guidelines Language specification Godot currently uses C version 10 0 in its engine and example source code as this is the version supported by NET 6 0 the current baseline requirement So before we move to a newer version care must be taken to avoid mixing language features only available in C 11 0 or later For detailed information on C features in different versions please see What s New in C Formatting General guidelines Use line feed LF characters to break lines not CRLF or CR Use one line feed character at the end of each file except for csproj files Use UTF 8 encoding without a byte order mark Use 4 spaces instead of tabs for indentation which is referred to as soft tabs Consider breaking a line into several if it s longer than 100 characters Line breaks and blank lines For a general indentation rule follow the Allman Style which recommends placing the brace associated with a control statement on the next line indented to the same level Use this style if x 0 DoSomething NOT this if x 0 DoSomething Copy to clipboard However you may choose to omit line breaks inside brackets For simple property accessors For simple object array or collection initializers For abstract auto property indexer or event declarations You may put the brackets in a single line in following cases public interface MyInterface int MyProperty get set public class MyClass ParentClass public int Value get return 0 set ArrayValue new value Copy to clipboard Insert a blank line After a list of using statements Between method properties and inner type declarations At the end of each file Field and constant declarations can be grouped together according to relevance In that case consider inserting a blank line between the groups for easier reading Avoid inserting a blank line After the opening brace Before the closing brace After a comment block or a single line comment Adjacent to another blank line using System using Godot Blank line after using list public class MyClass No blank line after public enum MyEnum Value AnotherValue No blank line before Blank line around inner types public const int SomeConstant 1 public const int AnotherConstant 2 private Vector3 _x Related constants or fields can be private Vector3 _y grouped together private float _width private float _height public int MyProperty get set Blank line around properties public void MyMethod Some comment AnotherMethod No blank line after a comment Blank line around methods public void AnotherMethod Copy to clipboard Using spaces Insert a space Around a binary and ternary operator Between an opening parenthesis and if for foreach catch while lock or using keywords Before and within a single line accessor block Between accessors in a single line accessor block After a comma which is not at the end of a line After a semicolon in a for statement After a colon in a single line case statement Around a colon in a type declaration Around a lambda arrow After a single line comment symbol and before it if used at the end of a line After the opening brace and before the closing brace in a single line initializer Do not use a space After type cast parentheses The following example shows a proper use of spaces according to some of the above mentioned conventions public class MyClass A B Parent A B public float MyProperty get set public float AnotherProperty get return MyProperty public void MyMethod int values 1 2 3 4 int sum 0 Single line comment for int i 0 i values Length i switch i case 3 return default sum i 2 0 1 break i int MyProperty No space after a type cast Copy to clipboard Naming conventions Use PascalCase for all namespaces type names and member level identifiers i e methods properties constants events except for private fields namespace ExampleProject public class PlayerCharacter public const float DefaultSpeed 10f public float CurrentSpeed get set protected int HitPoints private void CalculateWeaponDamage Copy to clipboard Use camelCase for all other identifiers i e local variables method arguments and use an underscore _ as a prefix for private fields but not for methods or properties as explained above private Vector3 _aimingAt Use a _ prefix for private fields private void Attack float attackStrength Enemy targetFound FindTarget _aimingAt targetFound Hit attackStrength Copy to clipboard There s an exception with acronyms which consist of two letters like UI which should be written in uppercase letters where PascalCase would be expected and in lowercase letters otherwise Note that id is not an acronym so it should be treated as a normal identifier public string Id get public UIManager UI get return uiManager Copy to clipboard It is generally discouraged to use a type name as a prefix of an identifier like string strText or float fPower for example An exception is made however for interfaces which should in fact have an uppercase letter I prefixed to their names like IInventoryHolder or IDamageable Lastly consider choosing descriptive names and do not try to shorten them too much if it affects readability For instance if you want to write code to find a nearby enemy and hit it with a weapon prefer FindNearbyEnemy Damage weaponDamage Copy to clipboard Rather than FindNode Change wpnDmg Copy to clipboard Member variables Don t declare member variables if they are only used locally in a method as it makes the code more difficult to follow Instead declare them as local variables in the method s body Local variables Declare local variables as close as possible to their first use This makes it easier to follow the code without having to scroll too much to find where the variable was declared Implicitly typed local variables Consider using implicitly typing var for declaration of a local variable but do so only when the type is evident from the right side of the assignment You can use var for these cases var direction new Vector2 1 0 var value int speed var text Some value for var i 0 i 10 i But not for these var value GetValue var velocity direction 1 5 It s generally a better idea to use explicit typing for numeric values especially with the existence of the real_t alias in Godot which can either be double or float depending on the build configuration var value 1 5 Copy to clipboard Other considerations Use explicit access modifiers Use properties instead of non private fields Use modifiers in this order public protected private internal virtual override abstract new static readonly Avoid using fully qualified names or this prefix for members when it s not necessary Remove unused using statements and unnecessary parentheses Consider omitting the default initial value for a type Consider using null conditional operators or type initializers to make the code more compact Use safe cast when there is a possibility of the value being a different type and use direct cast otherwise User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue C diagnostics Godot includes analyzers that inspect your C source code to check for invalid or unsupported code and let you know that something is wrong during build time Rules GD0001 Missing partial modifier on declaration of type that derives from GodotObject GD0002 Missing partial modifier on declaration of type which contains nested classes that derive from GodotObject GD0003 Found multiple classes with the same name in the same script file GD0101 The exported member is static GD0102 The type of the exported member is not supported GD0103 The exported member is read only GD0104 The exported property is write only GD0105 The exported property is an indexer GD0106 The exported property is an explicit interface implementation GD0107 Types not derived from Node should not export Node members GD0201 The name of the delegate must end with EventHandler GD0202 The parameter of the delegate signature of the signal is not supported GD0203 The delegate signature of the signal must return void GD0301 The generic type argument must be a Variant compatible type GD0302 The generic type parameter must be annotated with the MustBeVariant attribute GD0303 The parent symbol of a type argument that must be Variant compatible was not handled GD0401 The class must derive from Godot GodotObject or a derived class GD0402 The class must not be generic Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue C API differences to GDScript This is a incomplete list of API differences between C and GDScript General differences As explained in General differences between C and GDScript PascalCase is used to access Godot APIs in C instead of the snake_case used by GDScript and C Where possible fields and getters setters have been converted to properties In general the C Godot API strives to be as idiomatic as is reasonably possible See the C style guide which we encourage you to also use for your own C code In GDScript the setters getters of a property can be called directly although this is not encouraged In C only the property is defined For example to translate the GDScript code x set_name Friend to C write x Name Friend A C IDE will provide intellisense which is extremely useful when figuring out renamed C APIs The built in Godot script editor has no support for C intellisense and it also doesn t provide many other C development tools that are considered essential See Configuring an external editor Global scope Global functions and some constants had to be moved to classes since C does not allow declaring them in namespaces Most global constants were moved to their own enums Constants In C only primitive types can be constant For example the TAU constant is replaced by the Mathf Tau constant but the Vector2 RIGHT constant is replaced by the Vector2 Right read only property This behaves similarly to a constant but can t be used in some contexts like switch statements Global enum constants were moved to their own enums For example ERR_ constants were moved to the Error enum Special cases GDScript C TYPE_ Variant Type enum OP_ Variant Operator enum Math functions Math global functions like abs acos asin atan and atan2 are located under Mathf as Abs Acos Asin Atan and Atan2 The PI constant can be found as Mathf Pi C also provides static System Math and System MathF classes that may contain other useful mathematical operations Random functions Random global functions like rand_range and rand_seed are located under GD Example GD RandRange and GD RandSeed Consider using System Random or if you need cryptographically strong randomness System Security Cryptography RandomNumberGenerator Other functions Many other global functions like print and var_to_str are located under GD Example GD Print and GD VarToStr Exceptions GDScript C weakref obj GodotObject WeakRef obj instance_from_id id GodotObject InstanceFromId id is_instance_id_valid id GodotObject IsInstanceIdValid id is_instance_valid obj GodotObject IsInstanceValid obj Tips Sometimes it can be useful to use the using static directive This directive allows to access the members and nested types of a class without specifying the class name Example using static Godot GD public class Test static Test Print Hello Instead of GD Print Hello Copy to clipboard Full list of equivalences List of Godot s global scope functions and their equivalent in C GDScript C abs Mathf Abs absf Mathf Abs absi Mathf Abs acos Mathf Acos acosh Mathf Acosh angle_difference Mathf AngleDifference asin Mathf Asin asinh Mathf Asinh atan Mathf Atan atan2 Mathf Atan2 atanh Mathf Atanh bezier_derivative Mathf BezierDerivative bezier_interpolate Mathf BezierInterpolate bytes_to_var GD BytesToVar bytes_to_var_with_objects GD BytesToVarWithObjects ceil Mathf Ceil ceilf Mathf Ceil ceili Mathf CeilToInt clamp Mathf Clamp clampf Mathf Clamp clampi Mathf Clamp cos Mathf Cos cosh Mathf Cosh cubic_interpolate Mathf CubicInterpolate cubic_interpolate_angle Mathf CubicInterpolateAngle cubic_interpolate_angle_in_time Mathf CubicInterpolateInTime cubic_interpolate_in_time Mathf CubicInterpolateAngleInTime db_to_linear Mathf DbToLinear deg_to_rad Mathf DegToRad ease Mathf Ease error_string Error ToString exp Mathf Exp floor Mathf Floor floorf Mathf Floor floori Mathf FloorToInt fmod operator fposmod Mathf PosMod hash GD Hash instance_from_id GodotObject InstanceFromId inverse_lerp Mathf InverseLerp is_equal_approx Mathf IsEqualApprox is_finite Mathf IsFinite or float IsFinite or double IsFinite is_inf Mathf IsInf or float IsInfinity or double IsInfinity is_instance_id_valid GodotObject IsInstanceIdValid is_instance_valid GodotObject IsInstanceValid is_nan Mathf IsNaN or float IsNaN or double IsNaN is_same operator or object ReferenceEquals is_zero_approx Mathf IsZeroApprox lerp Mathf Lerp lerp_angle Mathf LerpAngle lerpf Mathf Lerp linear_to_db Mathf LinearToDb log Mathf Log max Mathf Max maxf Mathf Max maxi Mathf Max min Mathf Min minf Mathf Min mini Mathf Min move_toward Mathf MoveToward nearest_po2 Mathf NearestPo2 pingpong Mathf PingPong posmod Mathf PosMod pow Mathf Pow print GD Print print_rich GD PrintRich print_verbose Use OS IsStdoutVerbose and GD Print printerr GD PrintErr printraw GD PrintRaw prints GD PrintS printt GD PrintT push_error GD PushError push_warning GD PushWarning rad_to_deg Mathf RadToDeg rand_from_seed GD RandFromSeed randf GD Randf randf_range GD RandRange randfn GD Randfn randi GD Randi randi_range GD RandRange randomize GD Randomize remap Mathf Remap rid_allocate_id N A rid_from_int64 N A rotate_toward Mathf RotateToward round Mathf Round roundf Mathf Round roundi Mathf RoundToInt seed GD Seed sign Mathf Sign signf Mathf Sign signi Mathf Sign sin Mathf Sin sinh Mathf Sinh smoothstep Mathf SmoothStep snapped Mathf Snapped snappedf Mathf Snapped snappedi Mathf Snapped sqrt Mathf Sqrt step_decimals Mathf StepDecimals str Use string interpolation str_to_var GD StrToVar tan Mathf Tan tanh Mathf Tanh type_convert Variant As T or GD Convert type_string Variant Type ToString typeof Variant VariantType var_to_bytes GD VarToBytes var_to_bytes_with_objects GD VarToBytesWithObjects var_to_str GD VarToStr weakref GodotObject WeakRef wrap Mathf Wrap wrapf Mathf Wrap wrapi Mathf Wrap List of GDScript utility functions and their equivalent in C GDScript C assert System Diagnostics Debug Assert char Use explicit conversion char 65 convert GD Convert dict_to_inst N A get_stack System Environment StackTrace inst_to_dict N A len N A load GD Load preload N A print_debug N A print_stack GD Print System Environment StackTrace range GD Range or System Linq Enumerable Range type_exists ClassDB ClassExists type preload as it works in GDScript is not available in C Use GD Load or ResourceLoader Load instead export annotation Use the Export attribute instead of the GDScript export annotation This attribute can also be provided with optional PropertyHint and hintString parameters Default values can be set by assigning a value Example using Godot public partial class MyNode Node Export private NodePath _nodePath Export private string _name default Export PropertyHint Range 0 100000 1000 or_greater private int _income Export PropertyHint File png jpg private string _icon Copy to clipboard See also C exported properties signal keyword Use the Signal attribute to declare a signal instead of the GDScript signal keyword This attribute should be used on a delegate whose name signature will be used to define the signal The delegate must have the EventHandler suffix an event will be generated in the class with the same name but without the suffix use that event s name with EmitSignal Signal delegate void MySignalEventHandler string willSendAString Copy to clipboard See also C signals onready annotation GDScript has the ability to defer the initialization of a member variable until the ready function is called with onready cf onready annotation For example onready var my_label get_node MyLabel Copy to clipboard However C does not have this ability To achieve the same effect you need to do this private Label _myLabel public override void _Ready _myLabel GetNode Label MyLabel Copy to clipboard Singletons Singletons are available as static classes rather than using the singleton pattern This is to make code less verbose than it would be with an Instance property Example Input IsActionPressed ui_down Copy to clipboard However in some very rare cases this is not enough For example you may want to access a member from the base class GodotObject like Connect For such use cases we provide a static property named Singleton that returns the singleton instance The type of this instance is GodotObject Example Input Singleton JoyConnectionChanged Input_JoyConnectionChanged Copy to clipboard String Use System String string Most of Godot s String methods have an equivalent in System String or are provided by the StringExtensions class as extension methods Example string text Get up string bigrams text Bigrams Ge et t u up p Copy to clipboard Strings are immutable in NET so all methods that manipulate a string don t modify the original string and return a newly created string with the modifications applied To avoid creating multiple string allocations consider using a StringBuilder List of Godot s String methods and their equivalent in C GDScript C begins_with string StartsWith bigrams StringExtensions Bigrams bin_to_int StringExtensions BinToInt c_escape StringExtensions CEscape c_unescape StringExtensions CUnescape capitalize StringExtensions Capitalize casecmp_to StringExtensions CasecmpTo or StringExtensions CompareTo Consider using string Equals or string Compare chr N A contains string Contains count StringExtensions Count Consider using RegEx countn StringExtensions CountN Consider using RegEx dedent StringExtensions Dedent ends_with string EndsWith erase string Remove Consider using StringBuilder to manipulate strings find StringExtensions Find Consider using string IndexOf or string IndexOfAny findn StringExtensions FindN Consider using string IndexOf or string IndexOfAny format Use string interpolation get_base_dir StringExtensions GetBaseDir get_basename StringExtensions GetBaseName get_extension StringExtensions GetExtension get_file StringExtensions GetFile get_slice N A get_slice_count N A get_slicec N A hash StringExtensions Hash Consider using object GetHashCode unless you need to guarantee the same behavior as in GDScript hex_decode StringExtensions HexDecode Consider using System Convert FromHexString hex_to_int StringExtensions HexToInt Consider using int Parse or long Parse with System Globalization NumberStyles HexNumber humanize_size N A indent StringExtensions Indent insert string Insert Consider using StringBuilder to manipulate strings is_absolute_path StringExtensions IsAbsolutePath is_empty string IsNullOrEmpty or string IsNullOrWhiteSpace is_relative_path StringExtensions IsRelativePath is_subsequence_of StringExtensions IsSubsequenceOf is_subsequence_ofn StringExtensions IsSubsequenceOfN is_valid_filename StringExtensions IsValidFileName is_valid_float StringExtensions IsValidFloat Consider using float TryParse or double TryParse is_valid_hex_number StringExtensions IsValidHexNumber is_valid_html_color StringExtensions IsValidHtmlColor is_valid_identifier StringExtensions IsValidIdentifier is_valid_int StringExtensions IsValidInt Consider using int TryParse or long TryParse is_valid_ip_address StringExtensions IsValidIPAddress join string Join json_escape StringExtensions JSONEscape left StringExtensions Left Consider using string Substring or string AsSpan length string Length lpad string PadLeft lstrip string TrimStart match StringExtensions Match Consider using RegEx matchn StringExtensions MatchN Consider using RegEx md5_buffer StringExtensions Md5Buffer Consider using System Security Cryptography MD5 HashData md5_text StringExtensions Md5Text Consider using System Security Cryptography MD5 HashData with StringExtensions HexEncode naturalnocasecmp_to N A Consider using string Equals or string Compare nocasecmp_to StringExtensions NocasecmpTo or StringExtensions CompareTo Consider using string Equals or string Compare num float ToString or double ToString num_int64 int ToString or long ToString num_scientific float ToString or double ToString num_uint64 uint ToString or ulong ToString pad_decimals StringExtensions PadDecimals pad_zeros StringExtensions PadZeros path_join StringExtensions PathJoin repeat Use string constructor or a StringBuilder replace string Replace or RegEx replacen StringExtensions ReplaceN Consider using string Replace or RegEx reverse N A rfind StringExtensions RFind Consider using string LastIndexOf or string LastIndexOfAny rfindn StringExtensions RFindN Consider using string LastIndexOf or string LastIndexOfAny right StringExtensions Right Consider using string Substring or string AsSpan rpad string PadRight rsplit N A rstrip string TrimEnd sha1_buffer StringExtensions Sha1Buffer Consider using System Security Cryptography SHA1 HashData sha1_text StringExtensions Sha1Text Consider using System Security Cryptography SHA1 HashData with StringExtensions HexEncode sha256_buffer StringExtensions Sha256Buffer Consider using System Security Cryptography SHA256 HashData sha256_text StringExtensions Sha256Text Consider using System Security Cryptography SHA256 HashData with StringExtensions HexEncode similarity StringExtensions Similarity simplify_path StringExtensions SimplifyPath split StringExtensions Split Consider using string Split split_floats StringExtensions SplitFloat strip_edges StringExtensions StripEdges Consider using string Trim string TrimStart or string TrimEnd strip_escapes StringExtensions StripEscapes substr StringExtensions Substr Consider using string Substring or string AsSpan to_ascii_buffer StringExtensions ToAsciiBuffer Consider using System Text Encoding ASCII GetBytes to_camel_case StringExtensions ToCamelCase to_float StringExtensions ToFloat Consider using float TryParse or double TryParse to_int StringExtensions ToInt Consider using int TryParse or long TryParse to_lower string ToLower to_pascal_case StringExtensions ToPascalCase to_snake_case StringExtensions ToSnakeCase to_upper string ToUpper to_utf16_buffer StringExtensions ToUtf16Buffer Consider using System Text Encoding UTF16 GetBytes to_utf32_buffer StringExtensions ToUtf32Buffer Consider using System Text Encoding UTF32 GetBytes to_utf8_buffer StringExtensions ToUtf8Buffer Consider using System Text Encoding UTF8 GetBytes to_wchar_buffer StringExtensions ToUtf16Buffer in Windows and StringExtensions ToUtf32Buffer in other platforms trim_prefix StringExtensions TrimPrefix trim_suffix StringExtensions TrimSuffix unicode_at string int indexer uri_decode StringExtensions URIDecode Consider using System Uri UnescapeDataString uri_encode StringExtensions URIEncode Consider using System Uri EscapeDataString validate_node_name StringExtensions ValidateNodeName xml_escape StringExtensions XMLEscape xml_unescape StringExtensions XMLUnescape List of Godot s PackedByteArray methods that create a String and their C equivalent GDScript C get_string_from_ascii StringExtensions GetStringFromAscii Consider using System Text Encoding ASCII GetString get_string_from_utf16 StringExtensions GetStringFromUtf16 Consider using System Text Encoding UTF16 GetString get_string_from_utf32 StringExtensions GetStringFromUtf32 Consider using System Text Encoding UTF32 GetString get_string_from_utf8 StringExtensions GetStringFromUtf8 Consider using System Text Encoding UTF8 GetString hex_encode StringExtensions HexEncode Consider using System Convert ToHexString Note NET provides path utility methods under the System IO Path class They can only be used with native OS paths not Godot paths paths that start with res or user See File paths in Godot projects NodePath The following method was converted to a property with a different name GDScript C is_empty IsEmpty Signal The following methods were converted to properties with their respective names changed GDScript C get_name Name get_object Owner The Signal type implements the awaitable pattern which means it can be used with the await keyword See await keyword Instead of using the Signal type the recommended way to use Godot signals in C is to use the generated C events See C signals Callable The following methods were converted to properties with their respective names changed GDScript C get_object Target get_method Method Currently C supports Callable if one of the following holds Callable was created using the C Callable type Callable is a basic version of the engine s Callable Custom Callable s are unsupported A Callable is custom when any of the following holds Callable has bound information Callable s created with bind unbind are unsupported Callable was created from other languages through the GDExtension API Some methods such as bind and unbind are not implemented use lambdas instead string name John Doe Callable callable Callable From SayHello name void SayHello string name GD Print Hello name Copy to clipboard The lambda captures the name variable so it can be bound to the SayHello method RID This type is named Rid in C to follow the NET naming convention The following methods were converted to properties with their respective names changed GDScript C get_id Id is_valid IsValid Basis Structs cannot have parameterless constructors in C Therefore new Basis initializes all primitive members to their default value Use Basis Identity for the equivalent of Basis in GDScript and C The following method was converted to a property with a different name GDScript C get_scale Scale Transform2D Structs cannot have parameterless constructors in C Therefore new Transform2D initializes all primitive members to their default value Please use Transform2D Identity for the equivalent of Transform2D in GDScript and C The following methods were converted to properties with their respective names changed GDScript C get_rotation Rotation get_scale Scale get_skew Skew Transform3D Structs cannot have parameterless constructors in C Therefore new Transform3D initializes all primitive members to their default value Please use Transform3D Identity for the equivalent of Transform3D in GDScript and C The following methods were converted to properties with their respective names changed GDScript C get_rotation Rotation get_scale Scale Rect2 The following field was converted to a property with a slightly different name GDScript C end End The following method was converted to a property with a different name GDScript C get_area Area Rect2i This type is named Rect2I in C to follow the NET naming convention The following field was converted to a property with a slightly different name GDScript C end End The following method was converted to a property with a different name GDScript C get_area Area AABB This type is named Aabb in C to follow the NET naming convention The following method was converted to a property with a different name GDScript C get_volume Volume Quaternion Structs cannot have parameterless constructors in C Therefore new Quaternion initializes all primitive members to their default value Please use Quaternion Identity for the equivalent of Quaternion in GDScript and C Projection Structs cannot have parameterless constructors in C Therefore new Projection initializes all primitive members to their default value Please use Projection Identity for the equivalent of Projection in GDScript and C Color Structs cannot have parameterless constructors in C Therefore new Color initializes all primitive members to their default value which represents the transparent black color Please use Colors Black for the equivalent of Color in GDScript and C The global Color8 method to construct a Color from bytes is available as a static method in the Color type The Color constants are available in the Colors static class as readonly properties The following method was converted to a property with a different name GDScript C get_luminance Luminance The following method was converted to a method with a different name GDScript C html String FromHtml ReadOnlySpan char The following methods are available as constructors GDScript C hex int Color uint hex64 int Color ulong Array The equivalent of packed arrays are System Array See also PackedArray in C Use Godot Collections Array for an untyped Variant array Godot Collections Array T is a type safe wrapper around Godot Collections Array See also Array in C Dictionary Use Godot Collections Dictionary for an untyped Variant dictionary Godot Collections Dictionary TKey TValue is a type safe wrapper around Godot Collections Dictionary See also Dictionary in C Variant Godot Variant is used to represent Godot s native Variant type Any Variant compatible type can be converted from to it See also C Variant Communicating with other scripting languages This is explained extensively in Cross language scripting await keyword Something similar to GDScript s await keyword can be achieved with C s await keyword The await keyword in C can be used with any awaitable expression It s commonly used with operands of the types Task Task TResult ValueTask or ValueTask TResult An expression t is awaitable if one of the following holds t is of compile time type dynamic t has an accessible instance or extension method called GetAwaiter with no parameters and no type parameters and a return type A for which all of the following hold A implements the interface System Runtime CompilerServices INotifyCompletion A has an accessible readable instance property IsCompleted of type bool A has an accessible instance method GetResult with no parameters and no type parameters An equivalent of awaiting a signal in GDScript can be achieved with the await keyword and GodotObject ToSignal Example public async Task SomeFunction await ToSignal timer Timer SignalName Timeout GD Print After timeout Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue C collections The NET base class library contains multiple collection types that can be used to store and manipulate data Godot also provide some collection types that are tightly integrated with the rest of the engine Choose a collection The main difference between the NET collections and the Godot collections is that the NET collections are implemented in C while the Godot collections are implemented in C and the Godot C API is a wrapper over it this is an important distinction since it means every operation on a Godot collection requires marshaling which can be expensive especially inside a loop Due to the performance implications using Godot collections is only recommended when absolutely necessary such as interacting with the Godot API Godot only understands its own collection types so it s required to use them when talking to the engine If you have a collection of elements that don t need to be passed to a Godot API using a NET collection would be more performant Tip It s also possible to convert between NET collections and Godot collections The Godot collections contain constructors from generic NET collection interfaces that copy their elements and the Godot collections can be used with the LINQ ToList ToArray and ToDictionary methods But keep in mind this conversion requires marshaling every element in the collection and copies it to a new collection so it can be expensive Despite this the Godot collections are optimized to try and avoid unnecessary marshaling so methods like Sort or Reverse are implemented with a single interop call and don t need to marshal every element Keep an eye out for generic APIs that take collection interfaces like LINQ because every method requires iterating the collection and therefore marshaling every element Prefer using the instance methods of the Godot collections when possible To choose which collection type to use for each situation consider the following questions Does your collection need to interact with the Godot engine e g the type of an exported property calling a Godot method If yes since Godot only supports Variant compatible types use a Godot collection If not consider choosing an appropriate NET collection Do you need a Godot collection that represents a list or sequential set of data Godot arrays are similar to the C collection List T Godot packed arrays are more memory efficient arrays in C use one of the supported System Array types Do you need a Godot collection that maps a set of keys to a set of values Godot dictionaries store pairs of keys and values and allow easy access to the values by their associated key Godot collections PackedArray Godot packed arrays are implemented as an array of a specific type allowing it to be more tightly packed as each element has the size of the specific type not Variant In C packed arrays are replaced by System Array GDScript C PackedByteArray byte PackedInt32Array int PackedInt64Array long PackedFloat32Array float PackedFloat64Array double PackedStringArray string PackedVector2Array Vector2 PackedVector3Array Vector3 PackedVector4Array Vector4 PackedColorArray Color Other C arrays are not supported by the Godot C API since a packed array equivalent does not exist See the list of Variant compatible types Array Godot arrays are implemented as an array of Variant and can contain several elements of any type In C the equivalent type is Godot Collections Array The generic Godot Collections Array T type allows restricting the element type to a Variant compatible type An untyped Godot Collections Array can be converted to a typed array using the Godot Collections Array T Godot Collections Array constructor Note Despite the name Godot arrays are more similar to the C collection List T than System Array Their size is not fixed and can grow or shrink as elements are added removed from the collection List of Godot s Array methods and their equivalent in C GDScript C all System Linq Enumerable All any System Linq Enumerable Any append Add append_array AddRange assign Clear and AddRange back Array 1 or System Linq Enumerable Last or System Linq Enumerable LastOrDefault bsearch BinarySearch bsearch_custom N A clear Clear count System Linq Enumerable Count duplicate Duplicate erase Remove fill Fill filter Use System Linq Enumerable Where find IndexOf front Array 0 or System Linq Enumerable First or System Linq Enumerable FirstOrDefault get_typed_builtin N A get_typed_class_name N A get_typed_script N A has Contains hash GD Hash insert Insert is_empty Use Count 0 is_read_only IsReadOnly is_same_typed N A is_typed N A make_read_only MakeReadOnly map System Linq Enumerable Select max Max min Min pick_random PickRandom Consider using System Random pop_at Array i with RemoveAt i pop_back Array 1 with RemoveAt Count 1 pop_front Array 0 with RemoveAt 0 push_back Insert Count item push_front Insert 0 item reduce System Linq Enumerable Aggregate remove_at RemoveAt resize Resize reverse Reverse rfind LastIndexOf shuffle Shuffle size Count slice Slice sort Sort sort_custom System Linq Enumerable OrderBy operator RecursiveEqual operator operator operator N A operator N A operator RecursiveEqual operator N A operator N A operator Array int indexer Dictionary Godot dictionaries are implemented as a dictionary with Variant keys and values In C the equivalent type is Godot Collections Dictionary The generic Godot Collections Dictionary TKey TValue type allows restricting the key and value types to a Variant compatible type An untyped Godot Collections Dictionary can be converted to a typed dictionary using the Godot Collections Dictionary TKey TValue Godot Collections Dictionary constructor Tip If you need a dictionary where the key is typed but not the value use Variant as the TValue generic parameter of the typed dictionary The keys must be string but the values can be any Variant compatible type var dictionary new Godot Collections Dictionary string Variant Copy to clipboard List of Godot s Dictionary methods and their equivalent in C GDScript C clear Clear duplicate Duplicate erase Remove find_key N A get Dictionary Variant indexer or TryGetValue has ContainsKey has_all N A hash GD Hash is_empty Use Count 0 is_read_only IsReadOnly keys Keys make_read_only MakeReadOnly merge Merge size Count values Values operator RecursiveEqual operator RecursiveEqual operator Dictionary Variant indexer Add or TryGetValue User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue C Variant For a detailed explanation of Variant in general see the Variant documentation page Godot Variant is used to represent Godot s native Variant type Any Variant compatible type can be converted from to it We recommend avoiding Godot Variant unless it is necessary to interact with untyped engine APIs Take advantage of C s type safety when possible Converting from a Variant compatible C type to Godot Variant can be done using implicit conversions There are also CreateFrom method overloads and the generic Variant From T methods Only the syntax is different the behavior is the same int x 42 Variant numberVariant x Variant helloVariant Hello World Variant numberVariant2 Variant CreateFrom x Variant numberVariant3 Variant From x Copy to clipboard Implicit conversions to Godot Variant make passing variants as method arguments very convenient For example the third argument of tween_property specifying the final color of the tween is a Godot Variant Tween tween CreateTween tween TweenProperty GetNode Sprite modulate Colors Red 1 0f Copy to clipboard Converting from Godot Variant to a C type can be done using explicit conversions There are also Variant As TYPE methods and the generic Variant As T method All of these behave the same int number int numberVariant string hello string helloVariant int number2 numberVariant As int int number3 numberVariant AsInt32 Copy to clipboard Note The Variant As TYPE methods are typically named after C types Int32 not C keywords int If the Variant type doesn t match the conversion target type the consequences vary depending on the source and target values The conversion may examine the value and return a similar but potentially unexpected value of the target type For example the string 42a may be converted to the integer 42 The default value of the target type may be returned An empty array may be returned An exception may be thrown Converting to the correct type avoids complicated behavior and should be preferred The Variant Obj property returns a C object with the correct value for any variant This may be useful when the type of Variant is completely unknown However when possible prefer more specific conversions Variant Obj evaluates a switch on Variant VariantType and it may not be necessary Also if the result is a value type it is boxed For example if the potential for Variant As MyNode to throw an invalid cast exception isn t acceptable consider using a Variant As GodotObject is MyNode n type pattern instead Note Since the Variant type in C is a struct it can t be null To create a null Variant use the default keyword or the Godot Variant parameterless constructor Variant compatible types A Variant compatible type can be converted to and from a Godot Variant These C types are Variant compatible All the built in value types except decimal nint and nuint string Classes derived from GodotObject Collections types defined in the Godot Collections namespace Full list of Variant types and their equivalent C type Variant Type C Type Nil null Not a type Bool bool Int long Godot stores 64 bit integers in Variant Float double Godot stores 64 bit floats in Variant String string Vector2 Godot Vector2 Vector2I Godot Vector2I Rect2 Godot Rect2 Rect2I Godot Rect2I Vector3 Godot Vector3 Vector3I Godot Vector3I Transform2D Godot Transform2D Vector4 Godot Vector4 Vector4I Godot Vector4I Plane Godot Plane Quaternion Godot Quaternion Aabb Godot Aabb Basis Godot Basis Transform3D Godot Transform3D Projection Godot Projection Color Godot Color StringName Godot StringName NodePath Godot NodePath Rid Godot Rid Object Godot GodotObject or any derived type Callable Godot Callable Signal Godot Signal Dictionary Godot Collections Dictionary Array Godot Collections Array PackedByteArray byte PackedInt32Array int PackedInt64Array long PackedFloat32Array float PackedFloat64Array double PackedStringArray string PackedVector2Array Godot Vector2 PackedVector3Array Godot Vector3 PackedVector4Array Godot Vector4 PackedColorArray Godot Color Warning Godot uses 64 bit integers and floats in Variant Smaller integer and float types such as int short and float are supported since they can fit in the bigger type Be aware that when a conversion is performed using the wrong type will result in potential precision loss Warning Enums are supported by Godot Variant since their underlying type is an integer type which are all compatible However implicit conversions don t exist enums must be manually converted to their underlying integer type before they can converted to from Godot Variant or use the generic Variant As T and Variant From T methods to convert them enum MyEnum A B C Variant variant1 int MyEnum A MyEnum enum1 MyEnum int variant1 Variant variant2 Variant From MyEnum A MyEnum enum2 variant2 As MyEnum Copy to clipboard Using Variant in a generic context When using generics you may be interested in restricting the generic T type to be only one of the Variant compatible types This can be achieved using the MustBeVariant attribute public void MethodThatOnlySupportsVariants MustBeVariant T T onlyVariant Do something with the Variant compatible value Copy to clipboard Combined with the generic Variant From T allows you to obtain an instance of Godot Variant from an instance of a generic T type Then it can be used in any API that only supports the Godot Variant struct public void Method1 MustBeVariant T T variantCompatible Variant variant Variant From variantCompatible Method2 variant public void Method2 Variant variant Do something with variant Copy to clipboard In order to invoke a method with a generic parameter annotated with the MustBeVariant attribute the value must be a Variant compatible type or a generic T type annotated with the MustBeVariant attribute as well public class ObjectDerivedClass GodotObject public class NonObjectDerivedClass public void Main MustBeVariant T1 T2 T1 someGeneric1 T2 someGeneric2 MyMethod 42 Works because int is a Variant compatible type MyMethod new ObjectDerivedClass Works because any type that derives from GodotObject is a Variant compatible type MyMethod new NonObjectDerivedClass Does NOT work because the type is not Variant compatible MyMethod someGeneric1 Works because T1 is annotated with the MustBeVariant attribute MyMethod someGeneric2 Does NOT work because T2 is NOT annotated with the MustBeVariant attribute public void MyMethod MustBeVariant T T variant Do something with variant Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue C signals For a detailed explanation of signals in general see the Using signals section in the step by step tutorial Signals are implemented using C events the idiomatic way to represent the observer pattern in C This is the recommended way to use signals in C and the focus of this page In some cases it s necessary to use the older Connect and Disconnect APIs See Using Connect and Disconnect for more details If you encounter a System ObjectDisposedException while handling a signal you might be missing a signal disconnection See Disconnecting automatically when the receiver is freed for more details Signals as C events To provide more type safety Godot signals are also all available through events You can handle these events as any other event with the and operators Timer myTimer GetNode Timer Timer myTimer Timeout GD Print Timeout Copy to clipboard In addition you can always access signal names associated with a node type through its nested SignalName class This is useful when for example you want to await on a signal see await keyword await ToSignal GetTree SceneTree SignalName ProcessFrame Copy to clipboard Custom signals as C events To declare a custom event in your C script use the Signal attribute on a public delegate type Note that the name of this delegate needs to end with EventHandler Signal public delegate void MySignalEventHandler Signal public delegate void MySignalWithArgumentEventHandler string myString Copy to clipboard Once this is done Godot will create the appropriate events automatically behind the scenes You can then use said events as you d do for any other Godot signal Note that events are named using your delegate s name minus the final EventHandler part public override void _Ready MySignal GD Print Hello MySignalWithArgument SayHelloTo private void SayHelloTo string name GD Print Hello name Copy to clipboard Warning If you want to connect to these signals in the editor you will need to re build the project to see them appear You can click the Build button in the upper right corner of the editor to do so Signal emission To emit signals use the EmitSignal method Note that as for signals defined by the engine your custom signal names are listed under the nested SignalName class public void MyMethodEmittingSignals EmitSignal SignalName MySignal EmitSignal SignalName MySignalWithArgument World Copy to clipboard In contrast with other C events you cannot use Invoke to raise events tied to Godot signals Signals support arguments of any Variant compatible type Consequently any Node or RefCounted will be compatible automatically but custom data objects will need to inherit from GodotObject or one of its subclasses using Godot public partial class DataObject GodotObject public string MyFirstString get set public string MySecondString get set Copy to clipboard Bound values Sometimes you ll want to bind values to a signal when the connection is established rather than or in addition to when the signal is emitted To do so you can use an anonymous function like in the following example Here the Button Pressed signal does not take any argument But we want to use the same ModifyValue for both the plus and minus buttons So we bind the modifier value at the time we re connecting the signals public int Value get private set 1 public override void _Ready Button plusButton GetNode Button PlusButton plusButton Pressed ModifyValue 1 Button minusButton GetNode Button MinusButton minusButton Pressed ModifyValue 1 private void ModifyValue int modifier Value modifier Copy to clipboard Signal creation at runtime Finally you can create custom signals directly while your game is running Use the AddUserSignal method for that Be aware that it should be executed before any use of said signals either connecting to them or emitting them Also note that signals created this way won t be visible through the SignalName nested class public override void _Ready AddUserSignal MyCustomSignal EmitSignal MyCustomSignal Copy to clipboard Using Connect and Disconnect In general it isn t recommended to use Connect and Disconnect These APIs don t provide as much type safety as the events However they re necessary for connecting to signals defined by GDScript and passing ConnectFlags In the following example pressing the button for the first time prints Greetings OneShot disconnects the signal so pressing the button again does nothing public override void _Ready Button button GetNode Button GreetButton button Connect Button SignalName Pressed Callable From OnButtonPressed uint GodotObject ConnectFlags OneShot public void OnButtonPressed GD Print Greetings Copy to clipboard Disconnecting automatically when the receiver is freed Normally when any GodotObject is freed such as any Node Godot automatically disconnects all connections associated with that object This happens for both signal emitters and signal receivers For example a node with this code will print Hello when the button is pressed then free itself Freeing the node disconnects the signal so pressing the button again doesn t do anything public override void _Ready Button myButton GetNode Button MyButton myButton Pressed SayHello private void SayHello GD Print Hello Free Copy to clipboard When a signal receiver is freed while the signal emitter is still alive in some cases automatic disconnection won t happen The signal is connected to a lambda expression that captures a variable The signal is a custom signal The following sections explain these cases in more detail and include suggestions for how to disconnect manually Note Automatic disconnection is totally reliable if a signal emitter is freed before any of its receivers are freed With a project style that prefers this pattern the above limits may not be a concern No automatic disconnection a lambda expression that captures a variable If you connect to a lambda expression that captures variables Godot can t tell that the lambda is associated with the instance that created it This causes this example to have potentially unexpected behavior Timer myTimer GetNode Timer Timer int x 0 myTimer Timeout x This lambda expression captures x GD Print Tick x my name is Name if x 3 GD Print Time s up Free Copy to clipboard Tick 1 my name is ExampleNode Tick 2 my name is ExampleNode Tick 3 my name is ExampleNode Time s up System ObjectDisposedException Cannot access a disposed object Copy to clipboard On tick 4 the lambda expression tries to access the Name property of the node but the node has already been freed This causes the exception To disconnect keep a reference to the delegate created by the lambda expression and pass that to For example this node connects and disconnects using the _EnterTree and _ExitTree lifecycle methods Export public Timer MyTimer get set private Action _tick public override void _EnterTree int x 0 _tick x GD Print Tick x my name is Name if x 3 GD Print Time s up Free MyTimer Timeout _tick public override void _ExitTree MyTimer Timeout _tick Copy to clipboard In this example Free causes the node to leave the tree which calls _ExitTree _ExitTree disconnects the signal so _tick is never called again The lifecycle methods to use depend on what the node does Another option is to connect to signals in _Ready and disconnect in Dispose Note Godot uses Delegate Target to determine what instance a delegate is associated with When a lambda expression doesn t capture a variable the generated delegate s Target is the instance that created the delegate When a variable is captured the Target instead points at a generated type that stores the captured variable This is what breaks the association If you want to see if a delegate will be automatically cleaned up try checking its Target Callable From doesn t affect the Delegate Target so connecting a lambda that captures variables using Connect doesn t work any better than No automatic disconnection a custom signal Connecting to a custom signal using doesn t disconnect automatically when the receiving node is freed To disconnect use at an appropriate time For example Export public MyClass Target get set public override void _EnterTree Target MySignal OnMySignal public override void _ExitTree Target MySignal OnMySignal Copy to clipboard Another solution is to use Connect which does disconnect automatically with custom signals Export public MyClass Target get set public override void _EnterTree Target Connect MyClass SignalName MySignal Callable From OnMySignal Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue C exported properties In Godot class members can be exported This means their value gets saved along with the resource such as the scene they re attached to They will also be available for editing in the property editor Exporting is done by using the Export attribute using Godot public partial class ExportExample Node3D Export public int Number get set 5 Copy to clipboard In that example the value 5 will be saved and after building the current project it will be visible in the property editor One of the fundamental benefits of exporting member variables is to have them visible and editable in the editor This way artists and game designers can modify values that later influence how the program runs For this a special export syntax is provided Exporting can only be done with Variant compatible types Note Exporting properties can also be done in GDScript for information on that see GDScript exported properties Basic use Exporting works with fields and properties They can have any access modifier Export private int _number Export public int Number get set Copy to clipboard Exported members can specify a default value otherwise the default value of the type is used instead An int like Number defaults to 0 Text defaults to null because string is a reference type Export public int Number get set Export public string Text get set Copy to clipboard Default values can be specified for fields and properties Export private string _greeting Hello World Export public string Greeting get set Hello World Copy to clipboard Properties with a backing field use the default value of the backing field private int _number 2 Export public int NumberWithBackingField get _number set _number value Copy to clipboard Note A property s get is not actually executed to determine the default value Instead Godot analyzes the C source code This works fine for most cases such as the examples on this page However some properties are too complex for the analyzer to understand For example the following property attempts to use math to display the default value as 5 in the property editor but it doesn t work Export public int NumberWithBackingField get _number 3 set _number value 3 private int _number 2 Copy to clipboard The analyzer doesn t understand this code and falls back to the default value for int 0 However when running the scene or inspecting a node with an attached tool script _number will be 2 and NumberWithBackingField will return 5 This difference may cause confusing behavior To avoid this don t use complex properties Alternatively if the default value can be explicitly specified it can be overridden with the _PropertyCanRevert and _PropertyGetRevert methods Any type of Resource or Node can be exported The property editor shows a user friendly assignment dialog for these types This can be used instead of GD Load and GetNode See Nodes and Resources Export public PackedScene PackedScene get set Export public RigidBody2D RigidBody2D get set Copy to clipboard Grouping exports It is possible to group your exported properties inside the Inspector with the ExportGroup attribute Every exported property after this attribute will be added to the group Start a new group or use ExportGroup to break out ExportGroup My Properties Export public int Number get set 3 Copy to clipboard The second argument of the attribute can be used to only group properties with the specified prefix Groups cannot be nested use ExportSubgroup to create subgroups within a group ExportSubgroup Extra Properties Export public string Text get set Export public bool Flag get set false Copy to clipboard You can also change the name of your main category or create additional categories in the property list with the ExportCategory attribute ExportCategory Main Category Export public int Number get set 3 Export public string Text get set ExportCategory Extra Category Export public bool Flag get set false Copy to clipboard Note The list of properties is organized based on the class inheritance and new categories break that expectation Use them carefully especially when creating projects for public use Strings as paths Property hints can be used to export strings as paths String as a path to a file Export PropertyHint File public string GameFile get set Copy to clipboard String as a path to a directory Export PropertyHint Dir public string GameDirectory get set Copy to clipboard String as a path to a file custom filter provided as hint Export PropertyHint File txt public string GameFile get set Copy to clipboard Using paths in the global filesystem is also possible but only in scripts in tool mode String as a path to a PNG file in the global filesystem Export PropertyHint GlobalFile png public string ToolImage get set Copy to clipboard String as a path to a directory in the global filesystem Export PropertyHint GlobalDir public string ToolDir get set Copy to clipboard The multiline annotation tells the editor to show a large input field for editing over multiple lines Export PropertyHint MultilineText public string Text get set Copy to clipboard Limiting editor input ranges Using the range property hint allows you to limit what can be input as a value using the editor Allow integer values from 0 to 20 Export PropertyHint Range 0 20 public int Number get set Copy to clipboard Allow integer values from 10 to 20 Export PropertyHint Range 10 20 public int Number get set Copy to clipboard Allow floats from 10 to 20 and snap the value to multiples of 0 2 Export PropertyHint Range 10 20 0 2 public float Number get set Copy to clipboard If you add the hints or_greater and or or_less you can go above or below the limits when adjusting the value by typing it instead of using the slider Export PropertyHint Range 0 100 1 or_greater or_less public int Number get set Copy to clipboard Floats with easing hint Display a visual representation of the ease function when editing Export PropertyHint ExpEasing public float TransitionSpeed get set Copy to clipboard Colors Regular color given as red green blue alpha value Export public Color Color get set Copy to clipboard Color given as red green blue value alpha will always be 1 Export PropertyHint ColorNoAlpha public Color Color get set Copy to clipboard Nodes Since Godot 4 0 nodes can be directly exported without having to use NodePaths Export public Node Node get set Copy to clipboard A specific type of node can also be directly exported The list of nodes shown after pressing Assign in the inspector is filtered to the specified type and only a correct node can be assigned Export public Sprite2D Sprite2D get set Copy to clipboard Custom node classes can also be exported directly The filtering behavior depends on whether the custom class is a global class Exporting NodePaths like in Godot 3 x is still possible in case you need it Export public NodePath NodePath get set public override void _Ready var node GetNode NodePath Copy to clipboard Resources Export public Resource Resource get set Copy to clipboard In the Inspector you can then drag and drop a resource file from the FileSystem dock into the variable slot Opening the inspector dropdown may result in an extremely long list of possible classes to create however Therefore if you specify a type derived from Resource such as Export public AnimationNode AnimationNode get set Copy to clipboard The drop down menu will be limited to AnimationNode and all its inherited classes Custom resource classes can also be used see C global classes It must be noted that even if the script is not being run while in the editor the exported properties are still editable This can be used in conjunction with a script in tool mode Exporting bit flags Members whose type is an enum with the Flags attribute can be exported and their values are limited to the members of the enum type The editor will create a widget in the Inspector allowing to select none one or multiple of the enum members The value will be stored as an integer A flags enum uses powers of 2 for the values of the enum members Members that combine multiple flags using logical OR are also possible Flags public enum MyEnum Fire 1 1 Water 1 2 Earth 1 3 Wind 1 4 FireAndWater Fire Water Export public SpellElements MySpellElements get set Copy to clipboard Integers used as bit flags can store multiple true false boolean values in one property By using the Flags property hint any of the given flags can be set from the editor Export PropertyHint Flags Fire Water Earth Wind public int SpellElements get set 0 Copy to clipboard You must provide a string description for each flag In this example Fire has value 1 Water has value 2 Earth has value 4 and Wind corresponds to value 8 Usually constants should be defined accordingly e g private const int ElementWind 8 and so on You can add explicit values using a colon Export PropertyHint Flags Self 4 Allies 8 Foes 16 public int SpellTargets get set 0 Copy to clipboard Only power of 2 values are valid as bit flags options The lowest allowed value is 1 as 0 means that nothing is selected You can also add options that are a combination of other flags Export PropertyHint Flags Self 4 Allies 8 Self and Allies 12 Foes 16 public int SpellTargets get set 0 Copy to clipboard Export annotations are also provided for the physics and render layers defined in the project settings Export PropertyHint Layers2DPhysics public uint Layers2DPhysics get set Export PropertyHint Layers2DRender public uint Layers2DRender get set Export PropertyHint Layers3DPhysics public uint Layers3DPhysics get set Export PropertyHint Layers3DRender public uint Layers3DRender get set Copy to clipboard Using bit flags requires some understanding of bitwise operations If in doubt use boolean variables instead Exporting enums Members whose type is an enum can be exported and their values are limited to the members of the enum type The editor will create a widget in the Inspector enumerating the following as Thing 1 Thing 2 Another Thing The value will be stored as an integer public enum MyEnum Thing1 Thing2 AnotherThing 1 Export public MyEnum MyEnum get set Copy to clipboard Integer and string members can also be limited to a specific list of values using the Export annotation with the PropertyHint Enum hint The editor will create a widget in the Inspector enumerating the following as Warrior Magician Thief The value will be stored as an integer corresponding to the index of the selected option i e 0 1 or 2 Export PropertyHint Enum Warrior Magician Thief public int CharacterClass get set Copy to clipboard You can add explicit values using a colon Export PropertyHint Enum Slow 30 Average 60 Very Fast 200 public int CharacterSpeed get set Copy to clipboard If the type is string the value will be stored as a string Export PropertyHint Enum Rebecca Mary Leah public string CharacterName get set Copy to clipboard If you want to set an initial value you must specify it explicitly Export PropertyHint Enum Rebecca Mary Leah public string CharacterName get set Rebecca Copy to clipboard Exporting collections As explained in the C Variant documentation only certain C arrays and the collection types defined in the Godot Collections namespace are Variant compatible therefore only those types can be exported Exporting Godot arrays Export public Godot Collections Array Array get set Copy to clipboard Using the generic Godot Collections Array T allows specifying the type of the array elements which will be used as a hint for the editor The Inspector will restrict the elements to the specified type Export public Godot Collections Array string Array get set Copy to clipboard The default value of Godot arrays is null A different default can be specified Export public Godot Collections Array string CharacterNames get set new Godot Collections Array string Rebecca Mary Leah Copy to clipboard Arrays with specified types which inherit from resource can be set by drag and dropping multiple files from the FileSystem dock Export public Godot Collections Array Texture Textures get set Export public Godot Collections Array PackedScene Scenes get set Copy to clipboard Exporting Godot dictionaries Export public Godot Collections Dictionary Dictionary get set Copy to clipboard Using the generic Godot Collections Dictionary TKey TValue allows specifying the types of the key and value elements of the dictionary Note Typed dictionaries are currently unsupported in the Godot editor so the Inspector will not restrict the types that can be assigned potentially resulting in runtime exceptions Export public Godot Collections Dictionary string int Dictionary get set Copy to clipboard The default value of Godot dictionaries is null A different default can be specified Export public Godot Collections Dictionary string int CharacterLives get set new Godot Collections Dictionary string int Rebecca 10 Mary 42 Leah 0 Copy to clipboard Exporting C arrays C arrays can exported as long as the element type is a Variant compatible type Export public Vector3 Vectors get set Export public NodePath NodePaths get set Copy to clipboard The default value of C arrays is null A different default can be specified Export public Vector3 Vectors get set new Vector3 new Vector3 1 2 3 new Vector3 3 2 1 Copy to clipboard Setting exported variables from a tool script When changing an exported variable s value from a script in Tool mode the value in the inspector won t be updated automatically To update it call NotifyPropertyListChanged after setting the exported variable s value Advanced exports Not every type of export can be provided on the level of the language itself to avoid unnecessary design complexity The following describes some more or less common exporting features which can be implemented with a low level API Before reading further you should get familiar with the way properties are handled and how they can be customized with _Set _Get and _GetPropertyList methods as described in Accessing data or logic from an object See also For binding properties using the above methods in C see Binding properties using _set _get _get_property_list Warning The script must operate in the tool mode so the above methods can work from within the editor User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue C global classes Global classes also known as named scripts are types registered in Godot s editor so they can be used more conveniently Global classes show up in the Add Node and Create Resource dialogs If an exported property is a global class the inspector restricts assignment allowing only instances of that global class or any derived classes Global classes are registered with the GlobalClass attribute using Godot GlobalClass public partial class MyNode Node Copy to clipboard The MyNode type will be registered as a global class with the same name as the type s name The Select a Node window for the MyNode exported property filters the list of nodes in the scene to match the assignment restriction public partial class Main Node Export public MyNode MyNode get set Copy to clipboard If a custom type isn t registered as a global class the assignment is restricted to the Godot type the custom type is based on For example inspector assignments to an export of the type MySimpleSprite2D are restricted to Sprite2D and derived types public partial class MySimpleSprite2D Sprite2D Copy to clipboard When combined with the GlobalClass attribute the Icon attribute allows providing a path to an icon to show when the class is displayed in the editor using Godot GlobalClass Icon res Stats StatsIcon svg public partial class Stats Resource Export public int Strength get set Export public int Defense get set Export public int Speed get set Copy to clipboard The Stats class is a custom resource registered as a global class Exporting properties of the type Stats will only allow instances of this resource type to be assigned and the inspector will let you create and load instances of this type easily Warning The Godot editor will hide these custom classes with names that begin with the prefix Editor in the Create New Node or Create New Scene dialog windows The classes are available for instantiation at runtime via their class names but are automatically hidden by the editor windows along with the built in editor nodes used by the Godot editor User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue GDExtension What is GDExtension GDExtension C example The gdextension file GDExtension documentation system Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue What is GDExtension Introduction GDExtension is a Godot specific technology that lets the engine interact with native shared libraries at run time You can use it to run native code without compiling it with the engine Note GDExtension is not a scripting language and has no relation to GDScript Differences between GDExtension and C modules You can use both GDExtension and C modules to run C or C code in a Godot project They also both allow you to integrate third party libraries into Godot The one you should choose depends on your needs Warning Our long term goal is that GDExtensions targeting an earlier version of Godot will work in later minor versions but not vice versa For example a GDExtension targeting Godot 4 2 should work just fine in Godot 4 3 but one targeting Godot 4 3 won t work in Godot 4 2 However GDExtension is currently experimental which means that we may break compatibility in order to fix major bugs or include critical features For example GDExtensions created for Godot 4 0 aren t compatible with Godot 4 1 see Updating your GDExtension for 4 1 Advantages of GDExtension Unlike modules GDExtension doesn t require compiling the engine s source code making it easier to distribute your work It gives you access to most of the API available to GDScript and C allowing you to code game logic with full control regarding performance It s ideal if you need high performance code you d like to distribute as an add on in the asset library Also GDExtension is not limited to C and C Thanks to third party bindings you can use it with many other languages You can use the same compiled GDExtension library in the editor and exported project With C modules you have to recompile all the export templates you plan to use if you require its functionality at run time GDExtension only requires you to compile your library not the whole engine That s unlike C modules which are statically compiled into the engine Every time you change a module you need to recompile the engine Even with incremental builds this process is slower than using GDExtension Advantages of C modules We recommend C modules in cases where GDExtension isn t enough C modules provide deeper integration into the engine GDExtension s access is not as deep as static modules You can use C modules to provide additional features in a project without carrying native library files around This extends to exported projects Note If you notice that specific systems are not accessible via GDExtension but are via custom modules feel free to open an issue on the godot cpp repository to discuss implementation options for exposing the missing functionality Supported languages The Godot developers officially support the following language bindings for GDExtension C tutorial Note There are no plans to support additional languages with GDExtension officially That said the community offers several bindings for other languages see below The bindings below are developed and maintained by the community D Go Haxe Rust Swift Note Not all bindings mentioned here may be production ready Make sure to research options thoroughly before starting a project with one of those Also double check whether the binding is compatible with the Godot version you re using Version compatibility GDExtension add ons compiled for a given Godot version are only guaranteed to work with the same minor release series For example a GDExtension add on compiled for Godot 4 0 will only work with Godot 4 0 4 0 1 4 0 2 In addition GDExtension is not compatible with Godot 3 x GDExtension add ons are also only compatible with engine builds that use the level of floating point precision the extension was compiled for This means that if you use an engine build with double precision floats the extension must also be compiled for double precision floats See Large world coordinates for details User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue GDExtension C example Introduction The C bindings for GDExtension are built on top of the C GDExtension API and provide a nicer way to extend nodes and other built in classes in Godot using C This new system allows the extension of Godot to nearly the same level as statically linked C modules You can download the included example in the test folder of the godot cpp repository on GitHub Setting up the project There are a few prerequisites you ll need a Godot 4 executable a C compiler SCons as a build tool a copy of the godot cpp repository See also Compiling as the build tools are identical to the ones you need to compile Godot from source You can download the godot cpp repository from GitHub or let Git do the work for you Note that this repository has different branches for different versions of Godot GDExtensions will not work in older versions of Godot only Godot 4 and up and vice versa so make sure you download the correct branch Note To use GDExtension you need to use the godot cpp branch that matches the version of Godot that you are targeting For example if you re targeting Godot 4 1 use the 4 1 branch Throughout this tutorial we use 4 x which will need to be replaced with the version of Godot you are targeting The master branch is the development branch which is updated regularly to work with Godot s master branch Warning Our long term goal is that GDExtensions targeting an earlier version of Godot will work in later minor versions but not vice versa For example a GDExtension targeting Godot 4 1 should work just fine in Godot 4 2 but one targeting Godot 4 2 won t work in Godot 4 1 However GDExtension is currently experimental which means that we may break compatibility in order to fix major bugs or include critical features For example GDExtensions created for Godot 4 0 aren t compatible with Godot 4 1 see Updating your GDExtension for 4 1 If you are versioning your project using Git it is recommended to add it as a Git submodule mkdir gdextension_cpp_example cd gdextension_cpp_example git init git submodule add b 4 x https github com godotengine godot cpp cd godot cpp git submodule update init Copy to clipboard Alternatively you can also clone it to the project folder mkdir gdextension_cpp_example cd gdextension_cpp_example git clone b 4 x https github com godotengine godot cpp Copy to clipboard Note If you decide to download the repository or clone it into your folder make sure to keep the folder layout the same as we ve setup here Much of the code we ll be showcasing here assumes the project has this layout If you cloned the example from the link specified in the introduction the submodules are not automatically initialized You will need to execute the following commands cd gdextension_cpp_example git submodule update init Copy to clipboard This will initialize the repository in your project folder Building the C bindings Now that we ve downloaded our prerequisites it is time to build the C bindings The repository contains a copy of the metadata for the current Godot release but if you need to build these bindings for a newer version of Godot simply call the Godot executable godot dump extension api Copy to clipboard The resulting extension_api json file will be created in the executable s directory Copy it to the project folder and add custom_api_file PATH_TO_FILE to the scons command below To generate and compile the bindings use this command replacing platform with windows linux or macos depending on your OS The build process automatically detects the number of CPU threads to use for parallel builds To specify a number of CPU threads to use add jN at the end of the SCons command line where N is the number of CPU threads to use cd godot cpp scons platform platform custom_api_file PATH_TO_FILE cd Copy to clipboard This step will take a while When it is completed you should have static libraries that can be compiled into your project stored in godot cpp bin Note You may need to add bits 64 to the command on Windows or Linux Creating a simple plugin Now it s time to build an actual plugin We ll start by creating an empty Godot project in which we ll place a few files Open Godot and create a new project For this example we will place it in a folder called demo inside our GDExtension s folder structure In our demo project we ll create a scene containing a Node called Main and we ll save it as main tscn We ll come back to that later Back in the top level GDExtension module folder we re also going to create a subfolder called src in which we ll place our source files You should now have demo godot cpp and src directories in your GDExtension module Your folder structure should now look like this gdextension_cpp_example demo game example demo to test the extension godot cpp C bindings src source code of the extension we are building Copy to clipboard In the src folder we ll start with creating our header file for the GDExtension node we ll be creating We will name it gdexample h ifndef GDEXAMPLE_H define GDEXAMPLE_H include godot_cpp classes sprite2d hpp namespace godot class GDExample public Sprite2D GDCLASS GDExample Sprite2D private double time_passed protected static void _bind_methods public GDExample GDExample void _process double delta override endif Copy to clipboard There are a few things of note to the above We include sprite2d hpp which contains bindings to the Sprite2D class We ll be extending this class in our module We re using the namespace godot since everything in GDExtension is defined within this namespace Then we have our class definition which inherits from our Sprite2D through a container class We ll see a few side effects of this later on The GDCLASS macro sets up a few internal things for us After that we declare a single member variable called time_passed In the next block we re defining our methods we have our constructor and destructor defined but there are two other functions that will likely look familiar to some and one new method The first is _bind_methods which is a static function that Godot will call to find out which methods can be called and which properties it exposes The second is our _process function which will work exactly the same as the _process function you re used to in GDScript Let s implement our functions by creating our gdexample cpp file include gdexample h include godot_cpp core class_db hpp using namespace godot void GDExample _bind_methods GDExample GDExample Initialize any variables here time_passed 0 0 GDExample GDExample Add your cleanup here void GDExample _process double delta time_passed delta Vector2 new_position Vector2 10 0 10 0 sin time_passed 2 0 10 0 10 0 cos time_passed 1 5 set_position new_position Copy to clipboard This one should be straightforward We re implementing each method of our class that we defined in our header file Note our _process function which keeps track of how much time has passed and calculates a new position for our sprite using a sine and cosine function There is one more C file we need we ll name it register_types cpp Our GDExtension plugin can contain multiple classes each with their own header and source file like we ve implemented GDExample up above What we need now is a small bit of code that tells Godot about all the classes in our GDExtension plugin include register_types h include gdexample h include gdextension_interface h include godot_cpp core defs hpp include godot_cpp godot hpp using namespace godot void initialize_example_module ModuleInitializationLevel p_level if p_level MODULE_INITIALIZATION_LEVEL_SCENE return GDREGISTER_CLASS GDExample void uninitialize_example_module ModuleInitializationLevel p_level if p_level MODULE_INITIALIZATION_LEVEL_SCENE return extern C Initialization GDExtensionBool GDE_EXPORT example_library_init GDExtensionInterfaceGetProcAddress p_get_proc_address const GDExtensionClassLibraryPtr p_library GDExtensionInitialization r_initialization godot GDExtensionBinding InitObject init_obj p_get_proc_address p_library r_initialization init_obj register_initializer initialize_example_module init_obj register_terminator uninitialize_example_module init_obj set_minimum_library_initialization_level MODULE_INITIALIZATION_LEVEL_SCENE return init_obj init Copy to clipboard The initialize_example_module and uninitialize_example_module functions get called respectively when Godot loads our plugin and when it unloads it All we re doing here is parse through the functions in our bindings module to initialize them but you might have to set up more things depending on your needs We call the GDREGISTER_CLASS macro for each of our classes in our library The important function is the third function called example_library_init We first call a function in our bindings library that creates an initialization object This object registers the initialization and termination functions of the GDExtension Furthermore it sets the level of initialization core servers scene editor level At last we need the header file for the register_types cpp named register_types h ifndef GDEXAMPLE_REGISTER_TYPES_H define GDEXAMPLE_REGISTER_TYPES_H include godot_cpp core class_db hpp using namespace godot void initialize_example_module ModuleInitializationLevel p_level void uninitialize_example_module ModuleInitializationLevel p_level endif GDEXAMPLE_REGISTER_TYPES_H Copy to clipboard Compiling the plugin We cannot easily write by hand a SConstruct file that SCons would use for building For the purpose of this example just use this hardcoded SConstruct file we ve prepared We ll cover a more customizable detailed example on how to use these build files in a subsequent tutorial Note This SConstruct file was written to be used with the latest godot cpp master you may need to make small changes using it with older versions or refer to the SConstruct file in the Godot 4 x documentation Once you ve downloaded the SConstruct file place it in your GDExtension folder structure alongside godot cpp src and demo then run scons platform platform Copy to clipboard You should now be able to find the module in demo bin platform When building for iOS package the module as a static xcframework you can use following commands to do so compile simulator and device modules scons arch universal ios_simulator yes platform ios target target scons arch arm64 ios_simulator no platform ios target target assemble xcframeworks xcodebuild create xcframework library demo bin libgdexample ios target a library demo bin libgdexample ios target simulator a output demo bin libgdexample ios target xcframework xcodebuild create xcframework library godot cpp bin libgodot cpp ios target arm64 a library godot cpp bin libgodot cpp ios target universal simulator a output demo bin libgodot cpp ios target xcframework Copy to clipboard Note Here we ve compiled both godot cpp and our gdexample library as debug builds For optimized builds you should compile them using the target template_release switch Using the GDExtension module Before we jump back into Godot we need to create one more file in demo bin This file lets Godot know what dynamic libraries should be loaded for each platform and the entry function for the module It is called gdexample gdextension configuration entry_symbol example_library_init compatibility_minimum 4 1 reloadable true libraries macos debug res bin libgdexample macos template_debug framework macos release res bin libgdexample macos template_release framework ios debug res bin libgdexample ios template_debug xcframework ios release res bin libgdexample ios template_release xcframework windows debug x86_32 res bin libgdexample windows template_debug x86_32 dll windows release x86_32 res bin libgdexample windows template_release x86_32 dll windows debug x86_64 res bin libgdexample windows template_debug x86_64 dll windows release x86_64 res bin libgdexample windows template_release x86_64 dll linux debug x86_64 res bin libgdexample linux template_debug x86_64 so linux release x86_64 res bin libgdexample linux template_release x86_64 so linux debug arm64 res bin libgdexample linux template_debug arm64 so linux release arm64 res bin libgdexample linux template_release arm64 so linux debug rv64 res bin libgdexample linux template_debug rv64 so linux release rv64 res bin libgdexample linux template_release rv64 so android debug x86_64 res bin libgdexample android template_debug x86_64 so android release x86_64 res bin libgdexample android template_release x86_64 so android debug arm64 res bin libgdexample android template_debug arm64 so android release arm64 res bin libgdexample android template_release arm64 so dependencies ios debug res bin libgodot cpp ios template_debug xcframework ios release res bin libgodot cpp ios template_release xcframework Copy to clipboard This file contains a configuration section that controls the entry function of the module You should also set the minimum compatible Godot version with compatability_minimum which prevents older version of Godot from trying to load your extension The reloadable flag enables automatic reloading of your extension by the editor every time you recompile it without needing to restart the editor This only works if you compile your extension in debug mode default The libraries section is the important bit it tells Godot the location of the dynamic library in the project s filesystem for each supported platform It will also result in just that file being exported when you export the project which means the data pack won t contain libraries that are incompatible with the target platform Finally the dependencies section allows you to name additional dynamic libraries that should be included as well This is important when your GDExtension plugin implements someone else s library and requires you to supply a third party dynamic library with your project Here is another overview to check the correct file structure gdextension_cpp_example demo game example demo to test the extension main tscn bin gdexample gdextension godot cpp C bindings src source code of the extension we are building register_types cpp register_types h gdexample cpp gdexample h Copy to clipboard Time to jump back into Godot We load up the main scene we created way back in the beginning and now add a newly available GDExample node to the scene We re going to assign the Godot logo to this node as our texture disable the centered property We re finally ready to run the project Adding properties GDScript allows you to add properties to your script using the export keyword In GDExtension you have to register the properties with a getter and setter function or directly implement the _get_property_list _get and _set methods of an object but that goes far beyond the scope of this tutorial Lets add a property that allows us to control the amplitude of our wave In our gdexample h file we need to add a member variable and getter and setter functions private double time_passed double amplitude public void set_amplitude const double p_amplitude double get_amplitude const Copy to clipboard In our gdexample cpp file we need to make a number of changes we will only show the methods we end up changing don t remove the lines we re omitting void GDExample _bind_methods ClassDB bind_method D_METHOD get_amplitude GDExample get_amplitude ClassDB bind_method D_METHOD set_amplitude p_amplitude GDExample set_amplitude ADD_PROPERTY PropertyInfo Variant FLOAT amplitude set_amplitude get_amplitude GDExample GDExample Initialize any variables here time_passed 0 0 amplitude 10 0 void GDExample _process double delta time_passed delta Vector2 new_position Vector2 amplitude amplitude sin time_passed 2 0 amplitude amplitude cos time_passed 1 5 set_position new_position void GDExample set_amplitude const double p_amplitude amplitude p_amplitude double GDExample get_amplitude const return amplitude Copy to clipboard Once you compile the module with these changes in place you will see that a property has been added to our interface You can now change this property and when you run your project you will see that our Godot icon travels along a larger figure Let s do the same but for the speed of our animation and use a setter and getter function Our gdexample h header file again only needs a few more lines of code double amplitude double speed void _process double delta override void set_speed const double p_speed double get_speed const Copy to clipboard This requires a few more changes to our gdexample cpp file again we re only showing the methods that have changed so don t remove anything we re omitting void GDExample _bind_methods ClassDB bind_method D_METHOD get_speed GDExample get_speed ClassDB bind_method D_METHOD set_speed p_speed GDExample set_speed ADD_PROPERTY PropertyInfo Variant FLOAT speed PROPERTY_HINT_RANGE 0 20 0 01 set_speed get_speed GDExample GDExample time_passed 0 0 amplitude 10 0 speed 1 0 void GDExample _process double delta time_passed speed delta Vector2 new_position Vector2 amplitude amplitude sin time_passed 2 0 amplitude amplitude cos time_passed 1 5 set_position new_position void GDExample set_speed const double p_speed speed p_speed double GDExample get_speed const return speed Copy to clipboard Now when the project is compiled we ll see another property called speed Changing its value will make the animation go faster or slower Furthermore we added a property range which describes in which range the value can be The first two arguments are the minimum and maximum value and the third is the step size Note For simplicity we ve only used the hint_range of the property method There are a lot more options to choose from These can be used to further configure how properties are displayed and set on the Godot side Signals Last but not least signals fully work in GDExtension as well Having your extension react to a signal given out by another object requires you to call connect on that object We can t think of a good example for our wobbling Godot icon we would need to showcase a far more complete example This is the required syntax some_other_node connect the_signal Callable this my_method Copy to clipboard To connect our signal the_signal from some other node with our method my_method we need to provide the connect method with the name of the signal and a Callable The Callable holds information about an object on which a method can be called In our case it associates our current object instance this with the method my_method of the object Then the connect method will add this to the observers of the_signal Whenever the_signal is now emitted Godot knows which method of which object it needs to call Note that you can only call my_method if you ve previously registered it in your _bind_methods method Otherwise Godot will not know about the existence of my_method To learn more about Callable check out the class reference here Callable Having your object sending out signals is more common For our wobbling Godot icon we ll do something silly just to show how it works We re going to emit a signal every time a second has passed and pass the new location along In our gdexample h header file we need to define a new member time_emit double time_passed double time_emit double amplitude Copy to clipboard This time the changes in gdexample cpp are more elaborate First you ll need to set time_emit 0 0 in either our _init method or in our constructor We ll look at the other 2 needed changes one by one In our _bind_methods method we need to declare our signal This is done as follows void GDExample _bind_methods ADD_PROPERTY PropertyInfo Variant FLOAT speed PROPERTY_HINT_RANGE 0 20 0 01 set_speed get_speed ADD_SIGNAL MethodInfo position_changed PropertyInfo Variant OBJECT node PropertyInfo Variant VECTOR2 new_pos Copy to clipboard Here our ADD_SIGNAL macro can be a single call with a MethodInfo argument MethodInfo s first parameter will be the signal s name and its remaining parameters are PropertyInfo types which describe the essentials of each of the method s parameters PropertyInfo parameters are defined with the data type of the parameter and then the name that the parameter will have by default So here we add a signal with a MethodInfo which names the signal position_changed The PropertyInfo parameters describe two essential arguments one of type Object the other of type Vector2 respectively named node and new_pos Next we ll need to change our _process method void GDExample _process double delta time_passed speed delta Vector2 new_position Vector2 amplitude amplitude sin time_passed 2 0 amplitude amplitude cos time_passed 1 5 set_position new_position time_emit delta if time_emit 1 0 emit_signal position_changed this new_position time_emit 0 0 Copy to clipboard After a second has passed we emit our signal and reset our counter We can add our parameter values directly to emit_signal Once the GDExtension library is compiled we can go into Godot and select our sprite node In the Node dock we can find our new signal and link it up by pressing the Connect button or double clicking the signal We ve added a script on our main node and implemented our signal like this extends Node func _on_Sprite2D_position_changed node new_pos print The position of node get_class is now str new_pos Copy to clipboard Every second we output our position to the console Next steps We hope the above example showed you the basics You can build upon this example to create full fledged scripts to control nodes in Godot using C User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue The gdextension file Introduction The gdextension file in your project contains the instructions for how to load the GDExtension The instructions are separated into specific sections This page should give you a quick overview of the different options available to you For an introduction how to get started with GDExtensions take a look at the GDExtension C Example Configuration section Property Type Description entry_symbol String Name of the entry function for initializing the GDExtension This function should be defined in the register_types cpp file when using godot cpp Adding this is necessary for the extension to work compatibility_minimum String Minimum compatible version This prevents older versions of Godot from loading extensions that depend on features from newer versions of Godot Only supported in Godot 4 1 or later compatibility_maximum String Maximum compatible version This prevents newer versions of Godot from loading the extension Only supported in Godot 4 3 or later reloadable Boolean Reloads the extension upon recompilation Reloading is supported for the godot cpp binding in Godot 4 2 or later Other language bindings may or may not support it as well This flag should be mainly used for developing or debugging an extension android_aar_plugin Boolean The GDExtension is part of a v2 Android plugin During export this flag will indicate to the editor that the GDExtension native shared libraries are exported by the Android plugin AAR binaries Libraries section In this section you can set the paths to the compiled binaries of your GDExtension libraries By specifying feature flags you can filter which version should be loaded and exported with your game depending on which feature flags are active Every feature flag must match to Godot s feature flags or your custom export flags to be loaded in an exported game For instance macos debug means that it will be loaded if Godot has both the macos and debug flag active Each line of the section is evaluated from top to bottom Here is an example of what that can look like libraries macos debug res bin libgdexample macos template_debug framework macos release res bin libgdexample macos template_release framework windows debug x86_32 res bin libgdexample windows template_debug x86_32 dll windows release x86_32 res bin libgdexample windows template_release x86_32 dll windows debug x86_64 res bin libgdexample windows template_debug x86_64 dll windows release x86_64 res bin libgdexample windows template_release x86_64 dll linux debug x86_64 res bin libgdexample linux template_debug x86_64 so linux release x86_64 res bin libgdexample linux template_release x86_64 so linux debug arm64 res bin libgdexample linux template_debug arm64 so linux release arm64 res bin libgdexample linux template_release arm64 so linux debug rv64 res bin libgdexample linux template_debug rv64 so linux release rv64 res bin libgdexample linux template_release rv64 so Copy to clipboard Here are lists of some of the available built in options for more look at the feature tags Running system Flag Description windows Windows operating system macos Mac operating system linux Linux operating system bsd BSD operating system linuxbsd Linux or BSD operating system android Android operating system ios iOS operating system web Web browser Build Flag Description debug Build with debug symbols release Optimized build without debug symbols editor Editor build Architecture Flag Description double double precision build single single precision build x86_64 64 bit x86 build arm64 64 bit ARM build rv64 64 bit RISC V build riscv RISC V build any bitness wasm32 32 bit WebAssembly build Icons section By default Godot uses the Node icon in the scene dock for GDExtension nodes A custom icon can be set by reference to its name and resource path of an SVG file For example icons GDExample res icons gd_example svg Copy to clipboard The path should point to a 16 by 16 pixel SVG image Read the guide for creating icons for more information Dependencies section In this section you set the paths of the GDExtension dependencies This is used internally to export the dependencies when exporting your game executable You are able to set which dependency is loaded depending on the feature flags of the exported executable In addition you are able to set an optional subdirectory to move your dependencies into If no path is supplied Godot will move the libraries into the same directory as your game executable Warning In MacOS it is necessary to have shared libraries inside a folder called Frameworks with a directory structure like this Game app Contents Frameworks dependencies macos debug res bin libdependency macos template_debug framework Contents Frameworks macos release res bin libdependency macos template_release framework Contents Frameworks windows debug res bin libdependency windows template_debug x86_64 dll res bin libdependency windows template_debug x86_32 dll windows release res bin libdependency windows template_release x86_64 dll res bin libdependency windows template_release x86_32 dll linux debug res bin libdependency linux template_debug x86_64 so res bin libdependency linux template_debug arm64 so res bin libdependency linux template_debug rv64 so linux release res bin libdependency linux template_release x86_64 so res bin libdependency linux template_release arm64 so res bin libdependency linux template_release rv64 so Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue GDExtension documentation system Note Adding documentation for GDExtensions is only possible for Godot 4 3 and later The support can be integrated into your project regardless because the snippet will check if you use the appropriate godot cpp version If you set the compatability_minimum to 4 2 and you load a project with the extension through a 4 2 editor the documentation page for that class will be empty The extension itself will still work The GDExtension documentation system works in a similar manner to the built in engine documentation It uses a series of XML files one per class to document the exposed constructors properties methods constants signals and theme items of each class Note We are assuming you are using the project files explained in the GDExtension C Example with the following structure gdextension_cpp_example GDExtension directory demo game example demo to test the extension main tscn bin gdexample gdextension godot cpp C bindings src source code of the extension we are building register_types cpp register_types h gdexample cpp gdexample h Copy to clipboard Inside the Godot demo project directory of your GDExtension directory run the following terminal command Replace godot with the full path to a Godot editor binary if Godot is not installed in your PATH godot doctool gdextension docs Copy to clipboard This command calls upon the Godot editor binary to generate documentation via the doctool and gdextension docs commands The addition is to let Godot know where the GDExtension SConstruct file is located By calling this command Godot generates a doc_classes directory inside the project directory in which it generates XML files for the GDExtension classes Those files can then be edited to add information about member variables methods signals and more To add the now edited documentation to the GDExtension and let the editor load it you need to add the following lines to your SConstruct file if env target in editor template_debug try doc_data env GodotCPPDocData src gen doc_data gen cpp source Glob doc_classes xml sources append doc_data except AttributeError print Not including class reference as we re targeting a pre 4 3 baseline Copy to clipboard The if statement checks if we are compiling the GDExtension library with the editor and template_debug flags SCons then tries to load all the XML files inside the doc_classes directory and appends them to the sources variable which already includes all the source files of your extension If it fails it means we are currently trying to compile the library when the godot_cpp is set to a version before 4 3 After loading the extension in a 4 3 Godot editor or later and open the documentation of your extension class either by Ctrl Click in the script editor or the Editor help dialog you will see something like this Documentation styling To style specific parts of text you can use BBCode tags similarly to how they can be used in RichTextLabels You can set text as bold italic underlined colored codeblocks etc by embedding them in tags like this b this text will be shown as bold b Copy to clipboard Currently they supported tags for the GDExtension documentation system are Tag Example b Makes text use the bold or bold italics font of RichTextLabel b text b i Makes text use the italics or bold italics font of RichTextLabel i text i u Makes text underlined u text u s Makes text strikethrough s text s kbd Makes text use a grey beveled background indicating a keyboard shortcut kbd text kbd code Makes inline text use the mono font and styles the text color and background like code code text code codeblocks Makes multiline text use the mono font and styles the text color and background like code The addition of the gdscript tag highlights the GDScript specific syntax codeblocks gdscript text gdscript codeblocks center Makes text horizontally centered Same as p align center center text center url Creates a hyperlink underlined and clickable text Can contain optional text or display link as is url link url url link text url img Inserts an image from the path can be any valid Texture2D resource If width is provided the image will try to fit that width maintaining the aspect ratio If both width and height are provided the image will be scaled to that size Add to the end of width or height value to specify it as percentages of the control width instead of pixels If valign configuration is provided the image will try to align to the surrounding text see Image and table vertical alignment Supports configuration options see Image options img path img img width path img img width x height path img img valign path img img options path img color Changes the color of text Color must be provided by a common name see Named colors or using the HEX format e g ff00ff see Hexadecimal color codes color code name text color User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue How to read the Godot API On this page you ll learn how to read the class reference for the Godot API The API or Application Programming Interface is an index of what Godot offers users It provides a brief summary of which classes exist how they are related to each other what features they have and how to use them Inheritance At the top of each file you will see the name of the class The Inherits section lists each class the current one inherits Here CanvasItem inherits Node and Node inherits Object The Inherited By section lists each class which directly inherits the current class Here Control and Node2D both inherit CanvasItem Brief Description Next a brief description of the class This text appears in Godot Editor popups for creating Nodes Resources and other types Description Next a more detailed description the class its features and its use case s Things you may find here Specifics of how the class works Code samples of common use cases Usage details which are shared between each of the class s methods Warnings about required dependencies or configuration Links to other related parts of the Godot API Tutorials The page then provides links to parts of the manual which mention or make use of the current class Properties The Properties table lists the variables which belong to each instance of the class also known as the properties The left column contains the data type of the property The text is also a link to that data type s Godot API page The center column contains the name of the property The text is also a link to that property s full description on the page Use this name to get the property s data or set a new value to it The right column contains the default value of the property To initialize it with a different value you must set a different value via script or the Inspector Methods The Methods table lists the functions which belong to each instance of the class also known as the methods The left column contains the data type of the method s return value The right column contains the name parameters and qualifiers of the method The name is the text before the opening parenthesis It is also a link to the method s full description on the page Use this name to call the method For each parameter the page details its data type name and default value if any Possible qualifiers include const the method does not change any data in the class instance virtual the method does nothing but wait for a script to override it vararg the method can accept an arbitrary number of arguments Signals The Signals list details the names and parameters of events which signal a change in game state to other class instances Like the Methods table any parameters will include their data type and name Each signal also has a detailed explanation of when the signal is emitted Enumerations The Enumerations list details the enumerable data types associated with the current class For each enumeration the page states its name and then lists its possible values For each enumeration value the page states its name its integer value and an explanation of its use case s and or affects Constants The Constants list details named integer constants in the current class For each constant the page states its name its integer value and an explanation of its use case s and or affects NOTIFICATION_ constants descriptions will state which engine event triggers the notification Property Descriptions The Property Descriptions list details everything about each property It restates the data type and name of the property Every property in the Godot API is bound to a pair of setter and getter functions Using either is equivalent They are listed here Below that is a detailed summary of what the property s data represents its use case s and or the affects of changing it It may include code samples and or links to relevant parts of the Godot API Note Knowing the setter and getter names is useful when one must bind a method name or Callable to something Method Descriptions The Method Descriptions list details everything about each method It restates the method s return data type parameter names types defaults and qualifiers Below that is a detailed summary of what the method does and its use case s It may include code samples and or links to relevant parts of the Godot API User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Debug Overview of debugging tools Debugger panel The Profiler Custom performance monitors Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Overview of debugging tools This guide will give you an overview of the available debugging tools in the engine Godot comes with a powerful debugger and profilers to track down bugs inspect your game at runtime monitor essential metrics and measure performances It also offers options to visualize collision boxes and navigation polygons in the running game Finally you have options to debug the game running on a remote device and to reload changes to your scenes or your code while the game is running Debugger Panel Many of Godot s debugging tools are part of the Debugger panel which you can find information about in Debugger panel Debug menu options There are a few common debug options you can toggle on or off when running your game in the editor which can help you in debugging your game You can find these options in the Debug editor menu Here are the descriptions of the options Deploy with Remote Debug When this option is enabled using one click deploy will make the executable attempt to connect to this computer s IP so the running project can be debugged This option is intended to be used for remote debugging typically with a mobile device You don t need to enable it to use the GDScript debugger locally Small Deploy with Network Filesystem This option speeds up testing for games with a large footprint on remote devices When Small Deploy with Network Filesystem is on instead of exporting the full game deploying the game builds a minimal executable The editor then provides files from the project over the network Also on Android the game is deployed using the USB cable to speed up deployment Visible Collision Shapes When this option is enabled collision shapes and raycast nodes for 2D and 3D will be visible in the running project Visible Paths When this option is enabled curve resources used by path nodes will be visible in the running project Visible Navigation When this option is enabled navigation meshes and polygons will be visible in the running project Visible Avoidance When this option is enabled avoidance object shapes radiuses and velocities will be visible in the running project Debug CanvasItem Redraws When this option is enabled redraw requests of 2D objects will become visible as a short flash in the running project This is useful to troubleshoot low processor mode Synchronize Scene Changes When this option is enabled any changes made to the scene in the editor will be replicated in the running project When used remotely on a device this is more efficient when the network filesystem option is enabled Synchronize Script Changes When this option is enabled any changes made to the script in the editor will be reloaded in the running project When used remotely on a device this is more efficient with the network filesystem Keep Debug Server Open When this option is enabled the editor debug server will stay open and listen for new sessions started outside of the editor itself Customize Run Instances This opens a dialog allowing you to tell Godot to run multiple instances of the game at once and to specify the command line arguments for each instance This is especially useful when building and debugging multiplayer games Enable Multiple Instances When this option is enabled the editor will run multiple instances of the project at once when you Run Project Below this checkbox is a selector to pick how many instances to run Checking the box and setting this to only 1 is the same as not checking this box at all Main Run Args These are the arguments that will be passed to every instance of the project when you Run Project unless you select Enabled under Override Main Run Args for a specific instance Note that these arguments are space separated Tip These arguments can be accessed in your script by using get_cmdline_args Warning Even if you uncheck Enable Multiple Instances these arguments will be passed when you Run Project Main Feature Tags These are the feature tags that will be passed to every instance of the project when you Run Project unless you select Enabled under Override Main Tags for a specific instance Override Main Run Args When this is enabled the arguments in the Main Run Args field will not be passed to this specific instance of the project when you Run Project Launch Arguments These are the arguments that will be passed to this specific instance of the project when you Run Project They will be combined with the Main Run Args unless you select Enabled under Override Main Run Args Override Main Tags When this is enabled the tags in the Main Feature Tags field will not be passed to this specific instance of the project when you Run Project Feature Tags These are the feature tags that will be passed to this specific instance of the project when you Run Project They will be combined with the Main Feature Tags unless you select Enabled under Override Main Tags Warning If you want to pass User arguments that can be accessed with get_cmdline_user_args then you must prefix them with two dashes and a space like one two three Be aware that these dashes will apply to arguments added later in the Launch Arguments on a per instance basis which can cause some confusion when combining the Main Run Args and Launch Arguments If you place one two three in the Main Run Args and four five six in the Launch Arguments then the final command line arguments will be one two three four five six This is because the is repeated in the Launch Arguments Script editor debug tools and options The script editor has its own set of debug tools for use with breakpoints and two options The breakpoint tools can also be found in the Debugger tab of the debugger Tip You can create a breakpoint by clicking the gutter in the left of the script editor on the left of the line numbers When hovering this gutter you will see a transparent red dot appearing which turns into an opaque red dot after the breakpoint is placed by clicking Click the red dot again to remove the breakpoint Breakpoints created this way persist across editor restarts even if the script wasn t saved when exiting the editor You can also use the breakpoint keyword in GDScript to create a breakpoint that is stored in the script itself Unlike breakpoints created by clicking in the gutter this keyword based breakpoint is persistent across different machines when using version control The Break button causes a break in the script like a breakpoint would Continue makes the game continue after pausing at a breakpoint Step Over goes to the next line of code and Step Into goes into a function if possible Otherwise it does the same thing as Step Over The Debug with External Editor option lets you debug your game with an external editor This option is also accessible in Editor Settings Debugger When the debugger breaks on a breakpoint a green triangle arrow is visible in the script editor s gutter This arrow indicates the line of code the debugger broke on Debug project settings In the project settings there is a Debug category with three subcategories which control different things Settings These are some general settings such as printing the current FPS to the Output panel the maximum amount of functions when profiling and others GDScript These settings allow you to toggle specific GDScript warnings such as for unused variables You can also turn off warnings completely Shapes Shapes are where you can adjust the color of shapes that only appear for debugging purposes such as collision and navigation shapes Remote in scene dock When running a game in the editor two options appear at the top of the Scene dock Remote and Local While using Remote you can inspect or change the nodes parameters in the running project Note Some editor settings related to debugging can be found inside the Editor Settings under the Network Debug and Debugger sections User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Debugger panel Many of Godot s debugging tools including the debugger can be found in the debugger panel at the bottom of the screen Click on Debugger to open it The debugger panel is split into several tabs each focusing on a specific task Debugger The Debugger tab opens automatically when the GDScript compiler reaches a breakpoint in your code It gives you a stack trace information about the state of the object and buttons to control the program s execution When the debugger breaks on a breakpoint a green triangle arrow is visible in the script editor s gutter This arrow indicates the line of code the debugger broke on Tip You can create a breakpoint by clicking the gutter in the left of the script editor on the left of the line numbers When hovering this gutter you will see a transparent red dot appearing which turns into an opaque red dot after the breakpoint is placed by clicking Click the red dot again to remove the breakpoint Breakpoints created this way persist across editor restarts even if the script wasn t saved when exiting the editor You can also use the breakpoint keyword in GDScript to create a breakpoint that is stored in the script itself Unlike breakpoints created by clicking in the gutter this keyword based breakpoint is persistent across different machines when using version control You can use the buttons in the top right corner to Skip all breakpoints That way you can save breakpoints for future debugging sessions Copy the current error message Step Into the code This button takes you to the next line of code and if it s a function it steps line by line through the function Step Over the code This button goes to the next line of code but it doesn t step line by line through functions Break This button pauses the game s execution Continue This button resumes the game after a breakpoint or pause Errors This is where error and warning messages are printed while running the game You can disable specific warnings in Project Settings Debug GDScript Profiler The profiler is used to see what code is running while your project is in use and how that effects performance See also A detailed explanation of how to use the profiler can be found in the dedicated The Profiler page Visual Profiler The Visual Profiler can be used to monitor what is taking the most time when rendering a frame on the CPU and GPU respectively This allows tracking sources of potential CPU and GPU bottlenecks caused by rendering Warning The Visual Profiler only measures CPU time taken for rendering tasks such as performing draw calls The Visual Profiler does not include CPU time taken for other tasks such as scripting and physics Use the standard Profiler tab to track non rendering related CPU tasks To use the visual profiler run the project switch to the Visual Profiler tab within the Debugger bottom panel then click Start Visual Profiler tab after clicking Start waiting for a few seconds then clicking Stop You will see categories and results appearing as the profiler is running Graph lines also appear with the left side being a CPU framegraph and the right side being a GPU framegraph Click Stop to finish profiling which will keep the results visible but frozen in place Results remain visible after stopping the running project but not after exiting the editor Click on result categories on the left to highlight them in the CPU and GPU graphs on the right You can also click on the graph to move the cursor to a specific frame number and highlight the selected data type in the result categories on the left You can switch the result display between a time value in milliseconds per frame or a percentage of the target frametime which is currently hardcoded to 16 67 milliseconds or 60 FPS If framerate spikes occur during profiling this can cause the graph to be poorly scaled Disable Fit to Frame so that the graph will zoom onto the 60 FPS portion Note Remember that Visual Profiler results can vary heavily based on viewport resolution which is determined by the window size if using the disabled or canvas_items stretch modes When comparing results across different runs make sure to use the same viewport size for all runs Visual Profiler is supported when using any rendering method Forward Mobile or Compatibility but the reported categories will vary depending on the current rendering method as well as the enabled graphics features For example when using Forward a simple 2D scene with shadow casting lights will result in the following categories appearing Example results from a 2D scene in the Visual Profiler To give another example with Forward a 3D scene with shadow casting lights and various effects enabled will result in the following categories enabled Example results from a 3D scene in the Visual Profiler Notice how in the 3D example several of the categories have Parallel appended to their name This hints that multiple tasks are being performed in parallel on the GPU This generally means that disabling only one of the features involved won t improve performance as much as anticipated as the other task still needs to be performed sequentially Network Profiler The Network Profiler contains a list of all the nodes that communicate over the multiplayer API and for each one some counters on the amount of incoming and outgoing network interactions It also features a bandwidth meter that displays the total bandwidth usage at any given moment Note The bandwidth meter does not take the High level multiplayer API s own compression system into account This means that changing the compression algorithm used will not change the metrics reported by the bandwidth meter Monitors The monitors are graphs of several aspects of the game while its running such as FPS memory usage how many nodes are in a scene and more All monitors keep track of stats automatically so even if one monitor isn t open while the game is running you can open it later and see how the values changed See also In addition to the default performance monitors you can also create custom performance monitors to track arbitrary values in your project Video RAM The Video RAM tab shows the video RAM usage of the game while it is running It provides a list of every resource using video RAM by resource path the type of resource it is what format it is in and how much Video RAM that resource is using There is also a total video RAM usage number at the top right of the panel Misc The Misc tab contains tools to identify the control nodes you are clicking at runtime Clicked Control tells you where the clicked node is in the scene tree Clicked Control Type tells you the type of the node you clicked is User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue The Profiler You run your game from Godot and play around It s fun it s becoming feature complete and you feel it s getting close to release But then you open the skill tree and it grinds to a halt as something snags in your code Watching the skill tree scroll by like it s a slide show is unacceptable What went wrong Is it positioning the skill tree elements the UI or rendering You could try to optimize everything and run the game repeatedly but you can be smarter about this and narrow down the possibilities Enter Godot s profiler An overview of the profiler You can open the profiler by opening the Debugger panel and clicking on the Profiler tab Godot s profiler does not automatically run because profiling is performance intensive It has to continually measure everything happening in the game and report back to the debugger so it s off by default To begin profiling run your game then focus back on the editor Click on the Start button in the top left corner of the Profiler tab Note The profiler does not currently support C scripts C scripts can be profiled using JetBrains Rider and JetBrains dotTrace with the Godot support plugin You can clear the data by clicking the Clear button anytime Use the Measure drop down menu to change the type of data you measure The measurements panel and the graph will update accordingly The measured data The profiler s interface is split into two There is a list of functions on the left and the performance graph on the right The main measurements are frame time physics frame idle time and physics time The frame time is the time it takes Godot to execute all the logic for an entire image from physics to rendering Physics frame is the time Godot has allocated between physics updates In an ideal scenario the frame time is whatever you chose 16 66 milliseconds by default which corresponds to 60FPS It s a frame of reference you can use for everything else around it Idle time is the time Godot took to update logic other than physics such as code that lives in _process or timers and cameras set to update on Idle Physics time is the time Godot took to update physics tasks like _physics_process and built in nodes set to Physics update Note Frame Time includes rendering time Say you find a mysterious spike of lag in your game but your physics and scripts are all running fast The delay could be due to the appearance of particles or visual effects By default Godot ticks on Frame Time and Physics Time This gives you an overview of how long each frame takes relative to the allocated desired physics FPS You can toggle functions on and off by clicking the checkboxes on the left Other facilities make appearances as you go down the list like Physics 2D Physics and Audio before reaching Script functions where your code appears If you click on the graph you change which frame s information appears on the left In the top right there is also a frame counter where you can manually adjust the frame you are looking at more granularly Scope of measurement and measurement windows You can change what measurement you are looking at using the Measure drop down menu By default it starts with Frame Time and lists the time it takes to go through the frame in milliseconds The average time is the average time any given function took when called more than once For example a function that took 0 05 milliseconds to run five times should give you an average of 0 01 milliseconds If accurate milliseconds count is not important and you want to see proportions of time relative to the rest of the frame use percentage measurements Frame is relative to Frame Time and Physics is relative to Physics Time The last option is the scope of the time Inclusive measures the time a function took with any nested function calls For example get_neighbors find_nearest_neighbor and move_subject all took a lot of time You could be fooled into thinking that this is because all three of them are slow But when changed to Self Godot measures the time spent in the function body without considering function calls it made itself You can see that get_neighbors and move_subject have lost a lot of their importance In effect that means that get_neighbors and move_subject have spent more time waiting for some other function call to finish than not and find_nearest_neighbor is actually slow Debugging slow code with the profiler Finding slow code with the profiler boils down to running your game and watching the performance graph as it draws When an unacceptable spike occurs in the frame time you can click on the graph to pause your game and narrow the _Frame _ to the spike s start You may need to jump back and forth between frames and functions to find the root cause Under the Script functions turn on the checkboxes for some functions to find which take time These are the functions you need to review and optimize Measuring manually in microseconds If your function is complex it could be challenging to figure out which part needs optimization Is it your math or the way you access other pieces of data to do the math with Is it the for loop The if statements You can narrow down the measurement by manually counting ticks as the code runs with some temporary functions The two functions are part of the Time class object They are get_ticks_msec and get_ticks_usec The first measures in milliseconds 1 000 per second and the second measures in microseconds 1 000 000 per second Either one returns the amount of time since the game engine started in their respective time frame If you wrap a piece of code with a start and end count of microseconds the difference between the two is the amount of time it took to run that piece of code GDScript Measuring the time it takes for worker_function to run var start Time get_ticks_usec worker_function var end Time get_ticks_usec var worker_time end start 1000000 0 Measuring the time spent running a calculation over each element of an array start Time get_ticks_usec for calc in calculations result pow 2 calc power calc product end Time get_ticks_usec var loop_time end start 1000000 0 print Worker time s n Loop time s worker_time loop_time Copy to clipboard As you become a more experienced programmer this technique becomes less necessary You begin to learn what parts of a running program are slow Knowing that loops and branches can be slow comes from experience and you gain experience by measuring and doing research But between the profiler and the ticks functions you should have enough to get started finding which parts of your code need optimization User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Custom performance monitors Introduction As explained in the Debugger panel documentation Godot features a Debugger Monitors bottom panel that allows tracking various values with graphs showing their evolution over time The data for those graphs is sourced from the engine s Performance singleton Since Godot 4 0 you can declare custom values to be displayed in the Monitors tab Example use cases for custom performance monitors include Displaying performance metrics that are specific to your project For instance in a voxel game you could create a performance monitor to track the number of chunks that are loaded every second Displaying in game metrics that are not strictly related to performance but are still useful to graph for debugging purposes For instance you could track the number of enemies present in the game to make sure your spawning mechanic works as intended Creating a custom performance monitor In this example we ll create a custom performance monitor to track how many enemies are present in the currently running project The main scene features a Timer node with the following script attached extends Timer func _ready The slash delimiter is used to determine the category of the monitor If there is no slash in the monitor name a generic Custom category will be used instead Performance add_custom_monitor game enemies get_enemy_count timeout connect _on_timeout Spawn 20 enemies per second wait_time 0 05 start func _on_timeout var enemy preload res enemy tscn instantiate get_parent add_child enemy This function is called every time the performance monitor is queried this occurs once per second in the editor more if called manually The function must return a number greater than or equal to 0 int or float func get_enemy_count return get_tree get_nodes_in_group enemies size Copy to clipboard The second parameter of Performance add_custom_monitor is a Callable enemy tscn is a scene with a Node2D root node and Timer child node The Node2D has the following script attached extends Node2D func _ready add_to_group enemies Timer timeout connect _on_timer_timeout Despawn enemies 2 5 seconds after they spawn Timer wait_time 2 5 Timer start func _on_timer_timeout queue_free Copy to clipboard In this example since we spawn 20 enemies per second and each enemy despawns 2 5 seconds after they spawn we expect the number of enemies present in the scene to stabilize to 50 We can make sure about this by looking at the graph To visualize the graph created from this custom performance monitor run the project switch to the editor while the project is running and open Debugger Monitors at the bottom of the editor window Scroll down to the newly available Game section and check Enemies You should see a graph appearing as follows Example editor graph from a custom performance monitor Note The performance monitor handling code doesn t have to live in the same script as the nodes themselves You may choose to move the performance monitor registration and getter function to an autoload instead Querying a performance monitor in a project If you wish to display the value of the performance monitor in the running project s window rather than the editor use Performance get_custom_monitor category name to fetch the value of the custom monitor You can display the value using a Label RichTextLabel Custom drawing in 2D 3D text etc This method can be used in exported projects as well debug and release mode which allows you to create visualizations outside the editor User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Idle and Physics Processing Games run in a loop Each frame you need to update the state of your game world before drawing it on screen Godot provides two virtual methods in the Node class to do so Node _process and Node _physics_process If you define either or both in a script the engine will call them automatically There are two types of processing available to you Idle processing allows you to run code that updates a node every frame as often as possible Physics processing happens at a fixed rate 60 times per second by default This is independent of your game s actual framerate and keeps physics running smoothly You should use it for anything that involves the physics engine like moving a body that collides with the environment You can activate idle processing by defining the _process method in a script You can turn it off and back on by calling Node set_process The engine calls this method every time it draws a frame GDScript C func _process delta Do something pass Copy to clipboard public override void _Process double delta Do something Copy to clipboard Keep in mind that the frequency at which the engine calls _process depends on your application s framerate which varies over time and across devices The function s delta parameter is the time elapsed in seconds since the previous call to _process Use this parameter to make calculations independent of the framerate For example you should always multiply a speed value by delta to animate a moving object Physics processing works with a similar virtual function _physics_process Use it for calculations that must happen before each physics step like moving a character that collides with the game world As mentioned above _physics_process runs at fixed time intervals as much as possible to keep the physics interactions stable You can change the interval between physics steps in the Project Settings under Physics Common Physics Fps By default it s set to run 60 times per second The engine calls this method before every physics step GDScript C func _physics_process delta Do something pass Copy to clipboard public override void _PhysicsProcess double delta Do something Copy to clipboard The function _process is not synchronized with physics Its rate depends on hardware and game optimization It also runs after the physics step in single threaded games You can see the _process function at work by creating a scene with a single Label node with the following script attached to it GDScript C extends Label var time 0 func _process delta time delta text str time text is a built in Label property Copy to clipboard using Godot public partial class CustomLabel Label private double _time public override void _Process double delta _time delta Text _time ToString Text is a built in Label property Copy to clipboard When you run the scene you should see a counter increasing each frame User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Groups Groups in Godot work like tags in other software You can add a node to as many groups as you want Then in code you can use the SceneTree to Get a list of nodes in a group Call a method on all nodes in a group Send a notification to all nodes in a group This is a useful feature to organize large scenes and decouple code Managing groups Groups are created by adding a node to a new group name and likewise they are removed by removing all nodes from a given group There are two ways to add remove nodes to groups During design by using the Node dock in the editor or the Global Groups in project settings During execution by calling Node add_to_group or Node remove_from_group Using the Node dock You can create new groups using the Groups tab in the Node dock Select one or more nodes in the Scene dock then click the add button with the symbol You should now see the Create New Group modal appear Write the group name in the field You can optionally mark the option Global which will make the group visible project wide and able to be reused in any project scene This will also allow you to give it a description When done press Ok to create it You should see the new groups appear in the Groups tab under Scene Groups if the Global option was unmarked or under Global Groups if that option was marked Selected Node s from the Scene dock can be added into groups by marking the checkbox on the left side of the groups in the Groups dock The node s you had selected when creating a new group will be automatically checked All groups present in the project that were marked as Global created from any scene will be visible under Global Groups Any other group derived from nodes in the current scene will appear under Scene Groups Warning The same underlying logic is used for both Global and Scene groups Groups with the same name are considered one and the same This feature is purely organizational You can manage Global Groups in the Global Groups dock inside Project Settings There you will be able to add new global groups or change existing groups names and descriptions Using code You can also manage groups from scripts The following code adds the node to which you attach the script to the guards group as soon as it enters the scene tree GDScript C func _ready add_to_group guards Copy to clipboard public override void _Ready base _Ready AddToGroup guards Copy to clipboard Imagine you re creating an infiltration game When an enemy spots the player you want all guards and robots to be on alert In the fictional example below we use SceneTree call_group to alert all enemies that the player was spotted GDScript C func _on_player_spotted get_tree call_group guards enter_alert_mode Copy to clipboard public void _OnPlayerDiscovered GetTree CallGroup guards enter_alert_mode Copy to clipboard The above code calls the function enter_alert_mode on every member of the group guards To get the full list of nodes in the guards group as an array you can call SceneTree get_nodes_in_group GDScript C var guards get_tree get_nodes_in_group guards Copy to clipboard var guards GetTree GetNodesInGroup guards Copy to clipboard The SceneTree class provides many more useful methods to interact with scenes their node hierarchy and groups It allows you to switch scenes easily or reload them quit the game or pause and unpause it It also provides useful signals User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Nodes and scene instances This guide explains how to get nodes create nodes add them as a child and instantiate scenes from code Getting nodes You can get a reference to a node by calling the Node get_node method For this to work the child node must be present in the scene tree Getting it in the parent node s _ready function guarantees that If for example you have a scene tree like this and you want to get a reference to the Sprite2D and Camera2D nodes to access them in your script To do so you can use the following code GDScript C var sprite2d var camera2d func _ready sprite2d get_node Sprite2D camera2d get_node Camera2D Copy to clipboard private Sprite2D _sprite2D private Camera2D _camera2D public override void _Ready base _Ready _sprite2D GetNode Sprite2D Sprite2D _camera2D GetNode Camera2D Camera2D Copy to clipboard Note that you get nodes using their name not their type Above Sprite2D and Camera2D are the nodes names in the scene If you rename the Sprite2D node as Skin in the Scene dock you have to change the line that gets the node to get_node Skin in the script Node paths When getting a reference to a node you re not limited to getting a direct child The get_node function supports paths a bit like when working with a file browser Add a slash to separate nodes Take the following example scene with the script attached to the UserInterface node To get the AnimationPlayer node you would use the following code GDScript C var animation_player func _ready animation_player get_node ShieldBar AnimationPlayer Copy to clipboard private AnimationPlayer _animationPlayer public override void _Ready base _Ready _animationPlayer GetNode AnimationPlayer ShieldBar AnimationPlayer Copy to clipboard Note As with file paths you can use to get a parent node The best practice is to avoid doing that though not to break encapsulation You can also start the path with a forward slash to make it absolute in which case your topmost node would be root the application s predefined root viewport Syntactic sugar You can use two shorthands to shorten your code in GDScript Firstly putting the onready annotation before a member variable makes it initialize right before the _ready callback onready var sprite2d get_node Sprite2D Copy to clipboard There is also a short notation for get_node the dollar sign You place it before the name or path of the node you want to get onready var sprite2d Sprite2D onready var animation_player ShieldBar AnimationPlayer Copy to clipboard Creating nodes To create a node from code call its new method like for any other class based datatype You can store the newly created node s reference in a variable and call add_child to add it as a child of the node to which you attached the script GDScript C var sprite2d func _ready var sprite2d Sprite2D new Create a new Sprite2D add_child sprite2d Add it as a child of this node Copy to clipboard private Sprite2D _sprite2D public override void _Ready base _Ready _sprite2D new Sprite2D Create a new Sprite2D AddChild _sprite2D Add it as a child of this node Copy to clipboard To delete a node and free it from memory you can call its queue_free method Doing so queues the node for deletion at the end of the current frame after it has finished processing At that point the engine removes the node from the scene and frees the object in memory GDScript C sprite2d queue_free Copy to clipboard _sprite2D QueueFree Copy to clipboard Before calling sprite2d queue_free the remote scene tree looks like this After the engine freed the node the remote scene tree doesn t display the sprite anymore You can alternatively call free to immediately destroy the node You should do this with care as any reference to it will instantly become null We recommend using queue_free unless you know what you re doing When you free a node it also frees all its children Thanks to this to delete an entire branch of the scene tree you only have to free the topmost parent node Instancing scenes Scenes are templates from which you can create as many reproductions as you d like This operation is called instancing and doing it from code happens in two steps Loading the scene from the local drive Creating an instance of the loaded PackedScene resource GDScript C var scene load res my_scene tscn Copy to clipboard var scene GD Load PackedScene res MyScene tscn Copy to clipboard Preloading the scene can improve the user s experience as the load operation happens when the compiler reads the script and not at runtime This feature is only available with GDScript GDScript var scene preload res my_scene tscn Copy to clipboard At that point scene is a packed scene resource not a node To create the actual node you need to call PackedScene instantiate It returns a tree of nodes that you can use as a child of your current node GDScript C var instance scene instantiate add_child instance Copy to clipboard var instance scene Instantiate AddChild instance Copy to clipboard The advantage of this two step process is you can keep a packed scene loaded and create new instances on the fly For example to quickly instance several enemies or bullets User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Overridable functions Godot s Node class provides virtual functions you can override to update nodes every frame or on specific events like when they enter the scene tree This document presents the ones you ll use most often See also Under the hood these functions rely on Godot s low level notifications system To learn more about it see Godot notifications Two functions allow you to initialize and get nodes besides the class s constructor _enter_tree and _ready When the node enters the Scene Tree it becomes active and the engine calls its _enter_tree method That node s children may not be part of the active scene yet As you can remove and re add nodes to the scene tree this function may be called multiple times throughout a node s lifetime Most of the time you ll use _ready instead This function is called only once in a node s lifetime after _enter_tree _ready ensures that all children have entered the scene tree first so you can safely call get_node on them See also To learn more about getting node references read Nodes and scene instances Another related callback is _exit_tree which the engine calls every time a node is about to exit the scene tree This can be when you call Node remove_child or when you free a node GDScript C Called every time the node enters the scene tree func _enter_tree pass Called when both the node and its children have entered the scene tree func _ready pass Called when the node is about to leave the scene tree after all its children received the _exit_tree callback func _exit_tree pass Copy to clipboard Called every time the node enters the scene tree public override void _EnterTree base _EnterTree Called when both the node and its children have entered the scene tree public override void _Ready base _Ready Called when the node is about to leave the scene tree after all its children public override void _ExitTree base _ExitTree Copy to clipboard The two virtual methods _process and _physics_process allow you to update the node every frame and every physics frame respectively For more information read the dedicated documentation Idle and Physics Processing GDScript C Called every frame func _process delta pass Called every physics frame func _physics_process delta pass Copy to clipboard public override void _Process double delta Called every frame base _Process delta public override void _PhysicsProcess double delta Called every physics frame base _PhysicsProcess delta Copy to clipboard Two more essential built in node callback functions are Node _unhandled_input and Node _input which you use to both receive and process individual input events The _unhandled_input method receives every key press mouse click etc that have not been handled already in an _input callback or in a user interface component You want to use it for gameplay input in general The _input callback allows you to intercept and process input events before _unhandled_input gets them To learn more about inputs in Godot see the Input section GDScript C Called once for every event func _unhandled_input event pass Called once for every event before _unhandled_input allowing you to consume some events func _input event pass Copy to clipboard Called once for every event public override void _UnhandledInput InputEvent event base _UnhandledInput event Called once for every event before _UnhandledInput allowing you to consume some events public override void _Input InputEvent event base _Input event Copy to clipboard There are some more overridable functions like Node _get_configuration_warnings Specialized node types provide more callbacks like CanvasItem _draw to draw programmatically or Control _gui_input to handle clicks and input on UI elements User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Cross language scripting Godot allows you to mix and match scripting languages to suit your needs This means a single project can define nodes in both C and GDScript This page will go through the possible interactions between two nodes written in different languages The following two scripts will be used as references throughout this page GDScript C extends Node var my_field String foo signal my_signal func print_node_name node Node void print node get_name func print_array arr Array void for element in arr print element func print_n_times msg String n int void for i in range n print msg func my_signal_handler print The signal handler was called Copy to clipboard using Godot public partial class MyCSharpNode Node public string myField bar Signal public delegate void MySignalEventHandler public void PrintNodeName Node node GD Print node Name public void PrintArray string arr foreach string element in arr GD Print element public void PrintNTimes string msg int n for int i 0 i n i GD Print msg public void MySignalHandler GD Print The signal handler was called Copy to clipboard Instantiating nodes If you re not using nodes from the scene tree you ll probably want to instantiate nodes directly from the code Instantiating C nodes from GDScript Using C from GDScript doesn t need much work Once loaded see Classes as resources the script can be instantiated with new var my_csharp_script load res Path To MyCSharpNode cs var my_csharp_node my_csharp_script new Copy to clipboard Warning When creating cs scripts you should always keep in mind that the class Godot will use is the one named like the cs file itself If that class does not exist in the file you ll see the following error Invalid call Nonexistent function new in base For example MyCoolNode cs should contain a class named MyCoolNode The C class needs to derive a Godot class for example GodotObject Otherwise the same error will occur You also need to check your cs file is referenced in the project s csproj file Otherwise the same error will occur Instantiating GDScript nodes from C From the C side everything work the same way Once loaded the GDScript can be instantiated with GDScript New GDScript MyGDScript GD Load GDScript res path to my_gd_script gd GodotObject myGDScriptNode GodotObject MyGDScript New This is a GodotObject Copy to clipboard Here we are using an Object but you can use type conversion like explained in Type conversion and casting Accessing fields Accessing C fields from GDScript Accessing C fields from GDScript is straightforward you shouldn t have anything to worry about print my_csharp_node myField bar my_csharp_node myField BAR print my_csharp_node myField BAR Copy to clipboard Accessing GDScript fields from C As C is statically typed accessing GDScript from C is a bit more convoluted you will have to use GodotObject Get and GodotObject Set The first argument is the name of the field you want to access GD Print myGDScriptNode Get my_field foo myGDScriptNode Set my_field FOO GD Print myGDScriptNode Get my_field FOO Copy to clipboard Keep in mind that when setting a field value you should only use types the GDScript side knows about Essentially you want to work with built in types as described in GDScript reference or classes extending Object Calling methods Calling C methods from GDScript Again calling C methods from GDScript should be straightforward The marshalling process will do its best to cast the arguments to match function signatures If that s impossible you ll see the following error Invalid call Nonexistent function FunctionName my_csharp_node PrintNodeName self myGDScriptNode my_csharp_node PrintNodeName This line will fail my_csharp_node PrintNTimes Hello there 2 Hello there Hello there my_csharp_node PrintArray a b c a b c my_csharp_node PrintArray 1 2 3 1 2 3 Copy to clipboard Calling GDScript methods from C To call GDScript methods from C you ll need to use GodotObject Call The first argument is the name of the method you want to call The following arguments will be passed to said method myGDScriptNode Call print_node_name this my_csharp_node myGDScriptNode Call print_node_name This line will fail silently and won t error out myGDScriptNode Call print_n_times Hello there 2 Hello there Hello there string arr new string a b c myGDScriptNode Call print_array arr a b c myGDScriptNode Call print_array new int 1 2 3 1 2 3 Note how the type of each array entry does not matter as long as it can be handled by the marshaller Copy to clipboard Warning As you can see if the first argument of the called method is an array you ll need to cast it as object Otherwise each element of your array will be treated as a single argument and the function signature won t match Connecting to signals Connecting to C signals from GDScript Connecting to a C signal from GDScript is the same as connecting to a signal defined in GDScript my_csharp_node MySignal connect my_signal_handler Copy to clipboard Connecting to GDScript signals from C Connecting to a GDScript signal from C only works with the Connect method because no C static types exist for signals defined by GDScript myGDScriptNode Connect my_signal Callable From MySignalHandler Copy to clipboard Inheritance A GDScript file may not inherit from a C script Likewise a C script may not inherit from a GDScript file Due to how complex this would be to implement this limitation is unlikely to be lifted in the future See this GitHub issue for more information User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Creating script templates Godot provides a way to use script templates as seen in the Script Create Dialog while creating a new script A set of built in script templates are provided with the editor but it is also possible to create new ones and set them by default both per project and at editor scope Templates are linked to a specific node type so when you create a script you will only see the templates corresponding to that particular node or one of its parent types For example if you are creating a script for a CharacterBody3D you will only see templates defined for CharacterBody3Ds Node3Ds or Nodes Locating the templates There are two places where templates can be managed Editor defined templates These are available globally throughout any project The location of these templates are determined per each OS Windows APPDATA Godot script_templates Linux HOME config godot script_templates macOS HOME Library Application Support Godot script_templates If you re getting Godot from somewhere other than the official website such as Steam the folder might be in a different location You can find it using the Godot editor Go to Editor Open Editor Data Settings Folder and it will open a folder in your file browser inside that folder is the script_templates folder Project defined templates The default path to search for templates is the res script_templates directory The path can be changed by configuring the editor script_templates_search_path setting in the ProjectSettings both via code and the editor If no script_templates directory is found within a project it is simply ignored Template organization and naming Both editor and project defined templates are organized in the following way template_path node_type file extension Copy to clipboard where template_path is one of the 2 locations discussed in the previous two sections node_type is the node it will apply to for example Node or CharacterBody3D This is case sensitive If a script isn t in the proper node_type folder it won t be detected file is the custom name you can chose for the template for example platformer_movement or smooth_camera extension indicates which language the template will apply to it should be gd for GDScript or cs for C For example template_scripts Node smooth_camera gd template_scripts CharacterBody3D platformer_movement gd Default behaviour and overriding it By default the template s name is the same as the file name minus the extension prettyfied the description is empty the space indent is set to 4 the template will not be set as the default for the given node It is possible to customize this behaviour by adding meta headers at the start of your file like this GDScript C meta name Platformer movement meta description Predefined movement for classical platformers meta default true meta space indent 4 Copy to clipboard meta name Platformer movement meta description Predefined movement for classical platformers meta default true meta space indent 4 Copy to clipboard In this case the name will be set to Platformer movement with the given custom description and it will be set as the default template for the node in which directory it has been saved This is an example of utilizing custom templates at editor and project level Note The script templates have the same extension as the regular script files This may lead to an issue of a script parser treating those templates as actual scripts within a project To avoid this make sure to ignore the directory containing them by creating an empty gdignore file The directory won t be visible throughout the project s filesystem anymore yet the templates can be modified by an external text editor anytime Tip By default every C file inside the project directory is included in the compilation Script templates must be manually excluded from the C project to avoid build errors See Exclude files from the build in the Microsoft documentation It is possible to create editor level templates that have the same level as a project specific templates and also that have the same name as a built in one all will be shown on the new script dialog Default template To override the default template create a custom template at editor or project level inside a Node directory or a more specific type if only a subtype wants to be overridden and start the file with the meta default true header Only one template can be set as default at the same time for the same node type The Default templates for basic Nodes for both GDScript and C are shown here so you can use these as the base for creating other templates GDScript C meta description Base template for Node with default Godot cycle methods extends _BASE_ Called when the node enters the scene tree for the first time func _ready void pass Replace with function body Called every frame delta is the elapsed time since the previous frame func _process delta float void pass Copy to clipboard meta description Base template for Node with default Godot cycle methods using _BINDINGS_NAMESPACE_ using System public partial class _CLASS_ _BASE_ Called when the node enters the scene tree for the first time public override void _Ready Called every frame delta is the elapsed time since the previous frame public override void _Process double delta Copy to clipboard The Godot editor provides a set of useful built in node specific templates such as basic_movement for both CharacterBody2D and CharacterBody3D and plugin for EditorPlugin List of template placeholders The following describes the complete list of built in template placeholders which are currently implemented Base placeholders Placeholder Description _BINDINGS_NAMESPACE_ The name of the Godot namespace used in C only _CLASS_ The name of the new class _BASE_ The base type a new script inherits from _TS_ Indentation placeholder The exact type and number of whitespace characters used for indentation is determined by the text_editor indent type and text_editor indent size settings in the EditorSettings respectively Can be overridden by the meta space indent header on the template Type placeholders There used to be in Godot 3 x placeholders for GDScript type hints that would get replaced whenever a template was used to create a new script such as INT_TYPE STRING_TYPE FLOAT_TYPE or VOID_RETURN The placeholders no longer work for Godot 4 x but if the setting text_editor completion add_type_hints from EditorSettings is disabled type hints for parameters and return types will be automatically removed for a few base types int String Array String float void will be transformed into User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Evaluating expressions Godot provides an Expression class you can use to evaluate expressions An expression can be A mathematical expression such as 2 4 16 4 0 A built in method call like deg_to_rad 90 A method call on a user provided script like update_health if base_instance is set to a value other than null when calling Expression execute Note The Expression class is independent from GDScript It s available even if you compile Godot with the GDScript module disabled Basic usage To evaluate a mathematical expression use var expression Expression new expression parse 20 10 2 5 2 0 var result expression execute print result 37 5 Copy to clipboard The following operators are available Operator Notes Addition Can also be used to concatenate strings and arrays hello world hello world 1 2 3 4 1 2 3 4 Subtraction Multiplication Division Performs and integer division if both operands are integers If at least one of them is a floating point number returns a floating point value Remainder Returns the remainder of an integer division modulo The result will always have the sign of the dividend Spaces around operators are optional Also keep in mind the usual order of operations applies Use parentheses to override the order of operations if needed All the Variant types supported in Godot can be used integers floating point numbers strings arrays dictionaries colors vectors Arrays and dictionaries can be indexed like in GDScript Returns 1 1 2 0 Returns 3 Negative indices can be used to count from the end of the array 1 3 1 Returns green favorite_color green favorite_color All 3 lines below return 7 0 Vector3 is floating point Vector3 5 6 7 2 Vector3 5 6 7 z Vector3 5 6 7 z Copy to clipboard Passing variables to an expression You can pass variables to an expression These variables will then become available in the expression s context and will be substituted when used in the expression var expression Expression new Define the variable names first in the second parameter of parse In this example we use x for the variable name expression parse 20 2 x x Then define the variable values in the first parameter of execute Here x is assigned the integer value 5 var result expression execute 5 print result 30 Copy to clipboard Both the variable names and variable values must be specified as an array even if you only define one variable Also variable names are case sensitive Setting a base instance for the expression By default an expression has a base instance of null This means the expression has no base instance associated to it When calling Expression execute you can set the value of the base_instance parameter to a specific object instance such as self another script instance or even a singleton func double number return number 2 func _ready var expression Expression new expression parse double 10 This won t work since we re not passing the current script as the base instance var result expression execute null print result null This will work since we re passing the current script i e self as the base instance result expression execute self print result 20 Copy to clipboard Associating a base instance allows doing the following Reference the instance s constants const in the expression Reference the instance s member variables var in the expression Call methods defined in the instance and use their return values in the expression Warning Setting a base instance to a value other than null allows referencing constants member variables and calling all methods defined in the script attached to the instance Allowing users to enter expressions may allow cheating in your game or may even introduce security vulnerabilities if you allow arbitrary clients to run expressions on other players devices Example script The script below demonstrates what the Expression class is capable of const DAYS_IN_YEAR 365 var script_member_variable 1000 func _ready Constant mathexpression evaluate 2 2 Math expression with variables evaluate x y x y 60 100 Call built in method built in math function call evaluate deg_to_rad 90 Call user method defined in the script We can do this because the expression execution is bound to self in the evaluate method Since this user method returns a value we can use it in math expressions evaluate call_me DAYS_IN_YEAR script_member_variable evaluate call_me 42 evaluate call_me some string func evaluate command variable_names variable_values void var expression Expression new var error expression parse command variable_names if error OK push_error expression get_error_text return var result expression execute variable_values self if not expression has_execute_failed print str result func call_me argument null print n You called call_me in the expression text if argument print Argument passed s argument The method s return value is also the expression s return value return 0 Copy to clipboard The output from the script will be 4 160 1 5707963267949 You called call_me in the expression text 1365 You called call_me in the expression text Argument passed 42 0 You called call_me in the expression text Argument passed some string 0 Copy to clipboard Built in functions All methods in the Global Scope are available in the Expression class even if no base instance is bound to the expression The same parameters and return types are available However unlike GDScript parameters are always required even if they re specified as being optional in the class reference In contrast this restriction on arguments doesn t apply to user made functions when you bind a base instance to the expression User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Change scenes manually Sometimes it helps to have more control over how you swap scenes around A Viewport s child nodes will render to the image it generates This holds true even for nodes outside of the current scene Autoloads fall into this category and also scenes which you instantiate and add to the tree at runtime GDScript C var simultaneous_scene preload res levels level2 tscn instantiate func _add_a_scene_manually This is like autoloading the scene only it happens after already loading the main scene get_tree root add_child simultaneous_scene Copy to clipboard public Node simultaneousScene public MyClass simultaneousScene ResourceLoader Load PackedScene res levels level2 tscn Instantiate public void _AddASceneManually This is like autoloading the scene only it happens after already loading the main scene GetTree Root AddChild simultaneousScene Copy to clipboard To complete the cycle and swap out the new scene with the old one you have a choice to make Many strategies exist for removing a scene from view of the Viewport The tradeoffs involve balancing operation speed and memory consumption as well as balancing data access and integrity Delete the existing scene SceneTree change_scene_to_file and SceneTree change_scene_to_packed will delete the current scene immediately You can also delete the main scene Assuming the root node s name is Main you could do get_node root Main free to delete the whole scene Unloads memory Pro RAM is no longer dragging the dead weight Con Returning to that scene is now more expensive since it must be loaded back into memory again takes time AND memory Not a problem if returning soon is unnecessary Con No longer have access to that scene s data Not a problem if using that data soon is unnecessary Note It can be useful to preserve the data in a soon to be deleted scene by re attaching one or more of its nodes to a different scene or even directly to the SceneTree Processing stops Pro No nodes means no processing physics processing or input handling The CPU is available to work on the new scene s contents Con Those nodes processing and input handling no longer operate Not a problem if using the updated data is unnecessary Hide the existing scene By changing the visibility or collision detection of the nodes you can hide the entire node sub tree from the player s perspective Memory still exists Pro You can still access the data if needed Pro There s no need to move any more nodes around to save data Con More data is being kept in memory which will be become a problem on memory sensitive platforms like web or mobile Processing continues Pro Data continues to receive processing updates so the scene will keep any data within it that relies on delta time or frame data updated Pro Nodes are still members of groups since groups belong to the SceneTree Con The CPU s attention is now divided between both scenes Too much load could result in low frame rates You should be sure to test performance as you go to ensure the target platform can support the load from this approach Remove the existing scene from the tree Assign a variable to the existing scene s root node Then use Node remove_child Node to detach the entire scene from the tree Memory still exists similar pros cons as hiding it from view Processing stops similar pros cons as deleting it completely Pro This variation of hiding it is much easier to show hide Rather than potentially keeping track of multiple changes to the scene you only need to call the add remove_child methods This is similar to disabling game objects in other engines Con Unlike with hiding it from view only the data contained within the scene will become stale if it relies on delta time input groups or other data that is derived from SceneTree access There are also cases where you may wish to have many scenes present at the same time such as adding your own singleton at runtime or preserving a scene s data between scene changes adding the scene to the root node GDScript C get_tree root add_child scene Copy to clipboard GetTree Root AddChild scene Copy to clipboard Another case may be displaying multiple scenes at the same time using SubViewportContainers This is optimal for rendering different content in different parts of the screen e g minimaps split screen multiplayer Each option will have cases where it is best appropriate so you must examine the effects of each approach and determine what path best fits your unique situation User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Instancing with signals Signals provide a way to decouple game objects allowing you to avoid forcing a fixed arrangement of nodes One sign that a signal might be called for is when you find yourself using get_parent Referring directly to a node s parent means that you can t easily move that node to another location in the scene tree This can be especially problematic when you are instancing objects at runtime and may want to place them in an arbitrary location in the running scene tree Below we ll consider an example of such a situation firing bullets Shooting example Consider a player character that can rotate and shoot towards the mouse Every time the mouse button is clicked we create an instance of the bullet at the player s location See Creating instances for details We ll use an Area2D for the bullet which moves in a straight line at a given velocity GDScript C extends Area2D var velocity Vector2 RIGHT func _physics_process delta position velocity delta Copy to clipboard using Godot public partial class Bullet Area2D public Vector2 Velocity get set Vector2 Right public override void _PhysicsProcess double delta Position Velocity float delta Copy to clipboard However if the bullets are added as children of the player then they will remain attached to the player as it rotates Instead we need the bullets to be independent of the player s movement once fired they should continue traveling in a straight line and the player can no longer affect them Instead of being added to the scene tree as a child of the player it makes more sense to add the bullet as a child of the main game scene which may be the player s parent or even further up the tree You could do this by adding the bullet to the main scene directly GDScript C var bullet_instance Bullet instantiate get_parent add_child bullet_instance Copy to clipboard Node bulletInstance Bullet Instantiate GetParent AddChild bulletInstance Copy to clipboard However this will lead to a different problem Now if you try to test your Player scene independently it will crash on shooting because there is no parent node to access This makes it a lot harder to test your player code independently and also means that if you decide to change your main scene s node structure the player s parent may no longer be the appropriate node to receive the bullets The solution to this is to use a signal to emit the bullets from the player The player then has no need to know what happens to the bullets after that whatever node is connected to the signal can receive the bullets and take the appropriate action to spawn them Here is the code for the player using signals to emit the bullet GDScript C extends Sprite2D signal shoot bullet direction location var Bullet preload res bullet tscn func _input event if event is InputEventMouseButton if event button_index MOUSE_BUTTON_LEFT and event pressed shoot emit Bullet rotation position func _process delta look_at get_global_mouse_position Copy to clipboard using Godot public partial class Player Sprite2D Signal public delegate void ShootEventHandler PackedScene bullet float direction Vector2 location private PackedScene _bullet GD Load PackedScene res Bullet tscn public override void _Input InputEvent event if event is InputEventMouseButton mouseButton if mouseButton ButtonIndex MouseButton Left mouseButton Pressed EmitSignal SignalName Shoot _bullet Rotation Position public override void _Process double delta LookAt GetGlobalMousePosition Copy to clipboard In the main scene we then connect the player s signal it will appear in the Node tab of the Inspector GDScript C func _on_player_shoot Bullet direction location var spawned_bullet Bullet instantiate add_child spawned_bullet spawned_bullet rotation direction spawned_bullet position location spawned_bullet velocity spawned_bullet velocity rotated direction Copy to clipboard private void OnPlayerShoot PackedScene bullet float direction Vector2 location var spawnedBullet bullet Instantiate Bullet AddChild spawnedBullet spawnedBullet Rotation direction spawnedBullet Position location spawnedBullet Velocity spawnedBullet Velocity Rotated direction Copy to clipboard Now the bullets will maintain their own movement independent of the player s rotation User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Pausing games and process mode Introduction In most games it is desirable to at some point interrupt the game to do something else such as taking a break or changing options Implementing a fine grained control for what can be paused and what cannot is a lot of work so a simple framework for pausing is provided in Godot How pausing works To pause the game the pause state must be set This is done by assigning true to the SceneTree paused property GDScript C get_tree paused true Copy to clipboard GetTree Paused true Copy to clipboard Doing this will cause two things First 2D and 3D physics will be stopped for all nodes Second the behavior of certain nodes will stop or start depending on their process mode Note The physics servers can be made active while the game is paused by using their set_active methods Process Modes Each node in Godot has a Process Mode that defines when it processes It can be found and changed under a node s Node properties in the inspector You can also alter the property with code GDScript C func _ready process_mode Node PROCESS_MODE_PAUSABLE Copy to clipboard public override void _Ready ProcessMode Node ProcessModeEnum Pausable Copy to clipboard This is what each mode tells a node to do Inherit Process depending on the state of the parent grandparent etc The first parent that has a non Inherit state Pausable Process the node and its children in Inherit mode only when the game is not paused WhenPaused Process the node and its children in Inherit mode only when the game is paused Always Process the node and its children in Inherit mode no matter what Paused or not this node will process Disabled The node and its children in Inherit mode will not process at all By default all nodes have this property in the Inherit state If the parent is set to Inherit then the grandparent will be checked and so on If a state can t be found in any of the grandparents the pause state in SceneTree is used This means that by default when the game is paused every node will be paused Several things happen when a node stops processing The _process _physics_process _input and _input_event functions will not be called However signals still work and cause their connected function to run even if that function s script is attached to a node that is not currently being processed Animation nodes will pause their current animation audio nodes will pause their current audio stream and particles will pause These resume automatically when the game is no longer paused It is important to note that even if a node is processing while the game is paused physics will NOT work for it by default As stated earlier this is because the physics servers are turned off The physics servers can be made active while the game is paused by using their set_active methods Pause menu example Start by creating a button that will be used to pause the game Create a menu containing a close button set the Process Mode of the menu s root node to When Paused then hide the menu Since the process mode is set to When Paused on the root node all its children and grandchildren will inherit that process mode This way all the nodes in the menu will start processing when the game is paused Attach a script to the menu s root node connect the pause button created earlier to a new method in the script and inside that method pause the game and show the pause menu GDScript C func _on_pause_button_pressed get_tree paused true show Copy to clipboard private void OnPauseButtonPressed GetTree Paused true Show Copy to clipboard Finally connect the menu s close button to a new method in the script Inside that method unpause the game and hide the pause menu GDScript C func _on_close_button_pressed hide get_tree paused false Copy to clipboard private void OnCloseButtonPressed Hide GetTree Paused false Copy to clipboard You should now have a working pause menu User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue File system Introduction A file system manages how assets are stored and how they are accessed A well designed file system also allows multiple developers to edit the same source files and assets while collaborating Godot stores all assets as files in its file system Implementation The file system stores resources on disk Anything from a script to a scene or a PNG image is a resource to the engine If a resource contains properties that reference other resources on disk the paths to those resources are also included If a resource has sub resources that are built in the resource is saved in a single file together with all the bundled sub resources For example a font resource is often bundled together with the font textures The Godot file system avoids using metadata files Existing asset managers and VCSs are better than anything we can implement so Godot tries its best to play along with Subversion Git Mercurial etc Example of file system contents project godot enemy enemy tscn enemy enemy gd enemy enemysprite png player player gd Copy to clipboard project godot The project godot file is the project description file and it is always found at the root of the project In fact its location defines where the root is This is the first file that Godot looks for when opening a project This file contains the project configuration in plain text using the win ini format Even an empty project godot can function as a basic definition of a blank project Path delimiter Godot only supports as a path delimiter This is done for portability reasons All operating systems support this even Windows so a path such as C project project godot needs to be typed as C project project godot Resource path When accessing resources using the host OS file system layout can be cumbersome and non portable To solve this problem the special path res was created The path res will always point at the project root where project godot is located so res project godot is always valid This file system is read write only when running the project locally from the editor When exported or when running on different devices such as phones or consoles or running from DVD the file system will become read only and writing will no longer be permitted User path Writing to disk is still needed for tasks such as saving game state or downloading content packs To this end the engine ensures that there is a special path user that is always writable This path resolves differently depending on the OS the project is running on Local path resolution is further explained in File paths in Godot projects Host file system Alternatively host file system paths can also be used but this is not recommended for a released product as these paths are not guaranteed to work on all platforms However using host file system paths can be useful when writing development tools in Godot Drawbacks There are some drawbacks to this file system design The first issue is that moving assets around renaming them or moving them from one path to another inside the project will break existing references to these assets These references will have to be re defined to point at the new asset location To avoid this do all your move delete and rename operations from within Godot on the FileSystem dock Never move assets from outside Godot or dependencies will have to be fixed manually Godot detects this and helps you fix them anyway but why go the hard route The second is that under Windows and macOS file and path names are case insensitive If a developer working in a case insensitive host file system saves an asset as myfile PNG but then references it as myfile png it will work fine on their platform but not on other platforms such as Linux Android etc This may also apply to exported binaries which use a compressed package to store all files It is recommended that your team clearly define a naming convention for files when working with Godot One fool proof convention is to only allow lowercase file and path names User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Resources Nodes and resources Up to this tutorial we focused on the Node class in Godot as that s the one you use to code behavior and most of the engine s features rely on it There is another datatype that is just as important Resource Nodes give you functionality they draw sprites 3D models simulate physics arrange user interfaces etc Resources are data containers They don t do anything on their own instead nodes use the data contained in resources Anything Godot saves or loads from disk is a resource Be it a scene a tscn or an scn file an image a script Here are some Resource examples Texture Script Mesh Animation AudioStream Font Translation When the engine loads a resource from disk it only loads it once If a copy of that resource is already in memory trying to load the resource again will return the same copy every time As resources only contain data there is no need to duplicate them Every object be it a Node or a Resource can export properties There are many types of Properties like String integer Vector2 etc and any of these types can become a resource This means that both nodes and resources can contain resources as properties External vs built in There are two ways to save resources They can be External to a scene saved on the disk as individual files Built in saved inside the tscn or the scn file they re attached to To be more specific here s a Texture2D in a Sprite2D node Clicking the resource preview allows us to view the resource s properties The path property tells us where the resource comes from In this case it comes from a PNG image called robi png When the resource comes from a file like this it is an external resource If you erase the path or this path is empty it becomes a built in resource The switch between built in and external resources happens when you save the scene In the example above if you erase the path res robi png and save Godot will save the image inside the tscn scene file Note Even if you save a built in resource when you instance a scene multiple times the engine will only load one copy of it Loading resources from code There are two ways to load resources from code First you can use the load function anytime GDScript C func _ready Godot loads the Resource when it reads this very line var imported_resource load res robi png sprite texture imported_resource Copy to clipboard public override void _Ready Godot loads the Resource when it executes this line var texture GD Load Texture res Robi png var sprite GetNode Sprite2D sprite sprite Texture texture Copy to clipboard You can also preload resources Unlike load this function will read the file from disk and load it at compile time As a result you cannot call preload with a variable path you need to use a constant string GDScript C func _ready Godot loads the resource at compile time var imported_resource preload res robi png get_node sprite texture imported_resource Copy to clipboard preload is unavailable in C Sharp Copy to clipboard Loading scenes Scenes are also resources but there is a catch Scenes saved to disk are resources of type PackedScene The scene is packed inside a Resource To get an instance of the scene you have to use the PackedScene instantiate method GDScript C func _on_shoot var bullet preload res bullet tscn instantiate add_child bullet Copy to clipboard private PackedScene _bulletScene GD Load PackedScene res Bullet tscn private void OnShoot Node bullet _bulletScene Instantiate AddChild bullet Copy to clipboard This method creates the nodes in the scene s hierarchy configures them and returns the root node of the scene You can then add it as a child of any other node The approach has several advantages As the PackedScene instantiate function is fast you can create new enemies bullets effects etc without having to load them again from disk each time Remember that as always images meshes etc are all shared between the scene instances Freeing resources When a Resource is no longer in use it will automatically free itself Since in most cases Resources are contained in Nodes when you free a node the engine frees all the resources it owns as well if no other node uses them Creating your own resources Like any Object in Godot users can also script Resources Resource scripts inherit the ability to freely translate between object properties and serialized text or binary data tres res They also inherit the reference counting memory management from the RefCounted type This comes with many distinct advantages over alternative data structures such as JSON CSV or custom TXT files Users can only import these assets as a Dictionary JSON or as a FileAccess to parse What sets Resources apart is their inheritance of Object RefCounted and Resource features They can define constants so constants from other data fields or objects are not needed They can define methods including setter getter methods for properties This allows for abstraction and encapsulation of the underlying data If the Resource script s structure needs to change the game using the Resource need not also change They can define signals so Resources can trigger responses to changes in the data they manage They have defined properties so users know 100 that their data will exist Resource auto serialization and deserialization is a built in Godot Engine feature Users do not need to implement custom logic to import export a resource file s data Resources can even serialize sub Resources recursively meaning users can design even more sophisticated data structures Users can save Resources as version control friendly text files tres Upon exporting a game Godot serializes resource files as binary files res for increased speed and compression Godot Engine s Inspector renders and edits Resource files out of the box As such users often do not need to implement custom logic to visualize or edit their data To do so double click the resource file in the FileSystem dock or click the folder icon in the Inspector and open the file in the dialog They can extend other resource types besides just the base Resource Godot makes it easy to create custom Resources in the Inspector Create a plain Resource object in the Inspector This can even be a type that derives Resource so long as your script is extending that type Set the script property in the Inspector to be your script The Inspector will now display your Resource script s custom properties If one edits those values and saves the resource the Inspector serializes the custom properties too To save a resource from the Inspector click the Inspector s tools menu top right and select Save or Save As If the script s language supports script classes then it streamlines the process Defining a name for your script alone will add it to the Inspector s creation dialog This will auto add your script to the Resource object you create Let s see some examples Create a Resource and name it bot_stats It should appear in your file tab with the full name bot_stats tres Without a script it s useless so let s add some data and logic Attach a script to it named bot_stats gd or just create a new script and then drag it to it Note If you re using C you need to annotate your Resource class with the GlobalClass attribute for it to show up in the create resource GUI GDScript C extends Resource export var health int export var sub_resource Resource export var strings PackedStringArray Make sure that every parameter has a default value Otherwise there will be problems with creating and editing your resource via the inspector func _init p_health 0 p_sub_resource null p_strings health p_health sub_resource p_sub_resource strings p_strings Copy to clipboard BotStats cs using Godot namespace ExampleProject GlobalClass public partial class BotStats Resource Export public int Health get set Export public Resource SubResource get set Export public string Strings get set Make sure you provide a parameterless constructor In C a parameterless constructor is different from a constructor with all default values Without a parameterless constructor Godot will have problems creating and editing your resource via the inspector public BotStats this 0 null null public BotStats int health Resource subResource string strings Health health SubResource subResource Strings strings System Array Empty string Copy to clipboard Now create a CharacterBody3D name it Bot and add the following script to it GDScript C extends CharacterBody3D export var stats Resource func _ready Uses an implicit duck typed interface for any health compatible resources if stats stats health 10 print stats health Prints 10 Copy to clipboard Bot cs using Godot namespace ExampleProject public partial class Bot CharacterBody3D Export public Resource Stats public override void _Ready if Stats is BotStats botStats GD Print botStats Health Prints 10 Copy to clipboard Now select the CharacterBody3D node which we named bot and drag drop the bot_stats tres resource onto the Inspector It should print 10 Obviously this setup can be used for more advanced features than this but as long you really understand how it all worked you should figure out everything else related to Resources Note Resource scripts are similar to Unity s ScriptableObjects The Inspector provides built in support for custom resources If desired though users can even design their own Control based tool scripts and combine them with an EditorPlugin to create custom visualizations and editors for their data Unreal Engine s DataTables and CurveTables are also easy to recreate with Resource scripts DataTables are a String mapped to a custom struct similar to a Dictionary mapping a String to a secondary custom Resource script GDScript C bot_stats_table gd extends Resource const BotStats preload bot_stats gd var data GodotBot BotStats new 10 Creates instance with 10 health DifferentBot BotStats new 20 A different one with 20 health func _init print data Copy to clipboard using Godot GlobalClass public partial class BotStatsTable Resource private Godot Collections Dictionary string BotStats _stats new Godot Collections Dictionary string BotStats public BotStatsTable _stats GodotBot new BotStats 10 Creates instance with 10 health _stats DifferentBot new BotStats 20 A different one with 20 health GD Print _stats Copy to clipboard Instead of inlining the Dictionary values one could also alternatively Import a table of values from a spreadsheet and generate these key value pairs Design a visualization within the editor and create a plugin that adds it to the Inspector when you open these types of Resources CurveTables are the same thing except mapped to an Array of float values or a Curve Curve2D resource object Warning Beware that resource files tres res will store the path of the script they use in the file When loaded they will fetch and load this script as an extension of their type This means that trying to assign a subclass i e an inner class of a script such as using the class keyword in GDScript won t work Godot will not serialize the custom properties on the script subclass properly In the example below Godot would load the Node script see that it doesn t extend Resource and then determine that the script failed to load for the Resource object since the types are incompatible GDScript C extends Node class MyResource extends Resource export var value 5 func _ready var my_res MyResource new This will NOT serialize the value property ResourceSaver save my_res res my_res tres Copy to clipboard using Godot public partial class MyNode Node GlobalClass public partial class MyResource Resource Export public int Value get set 5 public override void _Ready var res new MyResource This will NOT serialize the Value property ResourceSaver Save res res MyRes tres Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Singletons Autoload Introduction Godot s scene system while powerful and flexible has a drawback there is no method for storing information e g a player s score or inventory that is needed by more than one scene It s possible to address this with some workarounds but they come with their own limitations You can use a master scene that loads and unloads other scenes as its children However this means you can no longer run those scenes individually and expect them to work correctly Information can be stored to disk in user and then loaded by scenes that require it but frequently saving and loading data is cumbersome and may be slow The Singleton pattern is a useful tool for solving the common use case where you need to store persistent information between scenes In our case it s possible to reuse the same scene or class for multiple singletons as long as they have different names Using this concept you can create objects that Are always loaded no matter which scene is currently running Can store global variables such as player information Can handle switching scenes and between scene transitions Act like a singleton since GDScript does not support global variables by design Autoloading nodes and scripts can give us these characteristics Note Godot won t make an Autoload a true singleton as per the singleton design pattern It may still be instanced more than once by the user if desired Tip If you re creating an autoload as part of an editor plugin consider registering it automatically in the Project Settings when the plugin is enabled Autoload You can create an Autoload to load a scene or a script that inherits from Node Note When autoloading a script a Node will be created and the script will be attached to it This node will be added to the root viewport before any other scenes are loaded To autoload a scene or script start from the menu and navigate to Project Project Settings Globals Autoload Here you can add any number of scenes or scripts Each entry in the list requires a name which is assigned as the node s name property The order of the entries as they are added to the global scene tree can be manipulated using the up down arrow keys Like regular scenes the engine will read these nodes in top to bottom order If the Enable column is checked which is the default then the singleton can be accessed directly in GDScript GDScript PlayerVariables health 10 Copy to clipboard The Enable column has no effect in C code However if the singleton is a C script a similar effect can be achieved by including a static property called Instance and assigning it in _Ready C public partial class PlayerVariables Node public static PlayerVariables Instance get private set public int Health get set public override void _Ready Instance this Copy to clipboard This allows the singleton to be accessed from C code without GetNode and without a typecast C PlayerVariables Instance Health 10 Copy to clipboard Note that autoload objects scripts and or scenes are accessed just like any other node in the scene tree In fact if you look at the running scene tree you ll see the autoloaded nodes appear Warning Autoloads must not be removed using free or queue_free at runtime or the engine will crash Custom scene switcher This tutorial will demonstrate building a scene switcher using autoloads For basic scene switching you can use the SceneTree change_scene_to_file method see Using SceneTree for details However if you need more complex behavior when changing scenes this method provides more functionality To begin download the template from here singleton_autoload_starter zip and open it in Godot A window notifying you that the project was last opened in an older Godot version may appear that s not an issue Click Ok to open the project The project contains two scenes scene_1 tscn and scene_2 tscn Each scene contains a label displaying the scene name and a button with its pressed signal connected When you run the project it starts in scene_1 tscn However pressing the button does nothing Creating the script Open the Script window and create a new script called global gd Make sure it inherits from Node The next step is to add this script to the autoLoad list Starting from the menu open Project Project Settings Globals Autoload and select the script by clicking the browse button or typing its path res global gd Press Add to add it to the autoload list Now whenever we run any scene in the project this script will always be loaded Returning to the script it needs to fetch the current scene in the _ready function Both the current scene the one with the button and global gd are children of root but autoloaded nodes are always first This means that the last child of root is always the loaded scene GDScript C extends Node var current_scene null func _ready var root get_tree root current_scene root get_child root get_child_count 1 Copy to clipboard using Godot public partial class Global Node public Node CurrentScene get set public override void _Ready Viewport root GetTree Root CurrentScene root GetChild root GetChildCount 1 Copy to clipboard Now we need a function for changing the scene This function needs to free the current scene and replace it with the requested one GDScript C func goto_scene path This function will usually be called from a signal callback or some other function in the current scene Deleting the current scene at this point is a bad idea because it may still be executing code This will result in a crash or unexpected behavior The solution is to defer the load to a later time when we can be sure that no code from the current scene is running _deferred_goto_scene call_deferred path func _deferred_goto_scene path It is now safe to remove the current scene current_scene free Load the new scene var s ResourceLoader load path Instance the new scene current_scene s instantiate Add it to the active scene as child of root get_tree root add_child current_scene Optionally to make it compatible with the SceneTree change_scene_to_file API get_tree current_scene current_scene Copy to clipboard public void GotoScene string path This function will usually be called from a signal callback or some other function from the current scene Deleting the current scene at this point is a bad idea because it may still be executing code This will result in a crash or unexpected behavior The solution is to defer the load to a later time when we can be sure that no code from the current scene is running CallDeferred MethodName DeferredGotoScene path public void DeferredGotoScene string path It is now safe to remove the current scene CurrentScene Free Load a new scene var nextScene GD Load PackedScene path Instance the new scene CurrentScene nextScene Instantiate Add it to the active scene as child of root GetTree Root AddChild CurrentScene Optionally to make it compatible with the SceneTree change_scene_to_file API GetTree CurrentScene CurrentScene Copy to clipboard Using Object call_deferred the second function will only run once all code from the current scene has completed Thus the current scene will not be removed while it is still being used i e its code is still running Finally we need to fill the empty callback functions in the two scenes GDScript C Add to scene_1 gd func _on_button_pressed Global goto_scene res scene_2 tscn Copy to clipboard Add to Scene1 cs private void OnButtonPressed var global GetNode Global root Global global GotoScene res Scene2 tscn Copy to clipboard and GDScript C Add to scene_2 gd func _on_button_pressed Global goto_scene res scene_1 tscn Copy to clipboard Add to Scene2 cs private void OnButtonPressed var global GetNode Global root Global global GotoScene res Scene1 tscn Copy to clipboard Run the project and test that you can switch between scenes by pressing the button Note When scenes are small the transition is instantaneous However if your scenes are more complex they may take a noticeable amount of time to appear To learn how to handle this see the next tutorial Background loading Alternatively if the loading time is relatively short less than 3 seconds or so you can display a loading plaque by showing some kind of 2D element just before changing the scene You can then hide it just after the scene is changed This can be used to indicate to the player that a scene is being loaded User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using SceneTree Introduction In previous tutorials everything revolved around the concept of nodes Scenes are collections of nodes They become active once they enter the scene tree MainLoop The way Godot works internally is as follows There is the OS class which is the only instance that runs at the beginning Afterwards all drivers servers scripting languages scene system etc are loaded When initialization is complete OS needs to be supplied a MainLoop to run Up to this point all this is internals working you can check main main cpp file in the source code if you are ever interested to see how this works internally The user program or game starts in the MainLoop This class has a few methods for initialization idle frame synchronized callback fixed physics synchronized callback and input Again this is low level and when making games in Godot writing your own MainLoop seldom makes sense SceneTree One of the ways to explain how Godot works is that it s a high level game engine over a low level middleware The scene system is the game engine while the OS and servers are the low level API The scene system provides its own main loop to OS SceneTree This is automatically instanced and set when running a scene no need to do any extra work It s important to know that this class exists because it has a few important uses It contains the root Viewport to which a scene is added as a child when it s first opened to become part of the Scene Tree more on that next It contains information about the groups and has the means to call all nodes in a group or get a list of them It contains some global state functionality such as setting pause mode or quitting the process When a node is part of the Scene Tree the SceneTree singleton can be obtained by calling Node get_tree Root viewport The root Viewport is always at the top of the scene From a node it can be obtained in two different ways GDScript C get_tree root Access via scene main loop get_node root Access via absolute path Copy to clipboard GetTree Root Access via scene main loop GetNode root Access via absolute path Copy to clipboard This node contains the main viewport Anything that is a child of a Viewport is drawn inside of it by default so it makes sense that the top of all nodes is always a node of this type otherwise nothing would be seen While other viewports can be created in the scene for split screen effects and such this one is the only one that is never created by the user It s created automatically inside SceneTree Scene tree When a node is connected directly or indirectly to the root viewport it becomes part of the scene tree This means that as explained in previous tutorials it will get the _enter_tree and _ready callbacks as well as _exit_tree When nodes enter the Scene Tree they become active They get access to everything they need to process get input display 2D and 3D visuals receive and send notifications play sounds etc When they are removed from the scene tree they lose these abilities Tree order Most node operations in Godot such as drawing 2D processing or getting notifications are done in tree order or top to bottom as seen in the editor also known as pre order traversal For example the top node in a scene has its _process function called first then the node below it has its _process function called then the node below that and so on An important exception is the _ready function each parent node has its _ready function called only after all its child nodes have their _ready functions called so that the parent knows its children are completely ready to be accessed This is also known as post order traversal In the above image NameLabel would be notified first but only after its children if it had any followed by Name etc and Panel would be notified last The order of operations can also be overridden using the process_priority node property Nodes with a lower number are called first For example nodes with the priorities 0 1 2 3 would be called in that order from left to right Becoming active by entering the Scene Tree A scene is loaded from disk or created by scripting The root node of that scene only one root remember is added as either a child of the root Viewport from SceneTree or to any of its descendants Every node of the newly added scene will receive the enter_tree notification _enter_tree callback in GDScript in top to bottom order pre order traversal Every node will receive the ready notification _ready callback in GDScript for convenience once all its children have received the ready notification post order traversal When a scene or part of it is removed they receive the exit scene notification _exit_tree callback in GDScript in bottom to top order the exact reverse of top to bottom order Changing current scene After a scene is loaded you may want to change this scene for another one One way to do this is to use the SceneTree change_scene_to_file function GDScript C func _my_level_was_completed get_tree change_scene_to_file res levels level2 tscn Copy to clipboard public void _MyLevelWasCompleted GetTree ChangeSceneToFile res levels level2 tscn Copy to clipboard Rather than using file paths one can also use ready made PackedScene resources using the equivalent function SceneTree change_scene_to_packed PackedScene scene GDScript C var next_scene preload res levels level2 tscn func _my_level_was_completed get_tree change_scene_to_packed next_scene Copy to clipboard public void _MyLevelWasCompleted var nextScene PackedScene ResourceLoader Load res levels level2 tscn GetTree ChangeSceneToPacked nextScene Copy to clipboard These are quick and useful ways to switch scenes but have the drawback that the game will stall until the new scene is loaded and running At some point in the development of your game it may be preferable to create proper loading screens with progress bar animated indicators or threaded background loading This must be done manually using Singletons Autoload and Background loading User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Scene Unique Nodes Introduction Using get_node to reference nodes from a script can sometimes be fragile If you move a button in a UI scene from one panel to another the button s node path changes and if a script uses get_node with a hard coded node path the script will not be able to find the button anymore In situations like this the node can be turned into a scene unique node to avoid having to update the script every time the node s path is changed Creation and usage In the Scene tree dock right click on a node and select Access as Unique Name in the context menu After selecting the option the node will now have a percent symbol next to its name in the scene tree You can now use the node in your script For example you can reference it with a get_node method call by typing the symbol followed by the node s name GDScript C get_node RedButton text Hello RedButton text Hello Shorter syntax Copy to clipboard GetNode Button RedButton Text Hello Copy to clipboard Same scene limitation A scene unique node can only be retrieved by a node inside the same scene To demonstrate this limitation consider this example Player scene that instances a Sword scene Here are the results of get_node calls inside the Player script get_node Eyes returns the Eyes node get_node Hilt returns null These are the results of get_node calls inside the Sword script get_node Eyes returns null get_node Hilt returns the Hilt node If a script has access to a node in another scene it can call get_node on that node to get scene unique nodes from that node s scene This also works in a node path which avoids multiple get_node calls Here are two ways to get the Hilt node from the Player script using scene unique nodes get_node Hand Sword get_node Hilt returns the Hilt node get_node Hand Sword Hilt also returns the Hilt node Scene unique names don t only work at the end of a node path They can be used in the middle to navigate from one node to another For example the Sword node is marked as a scene unique node in the Player scene so this is possible get_node Sword Hilt returns the Hilt node Alternatives Scene unique nodes are a useful tool to navigate a scene However there are some situations where other techniques may be better A Group allows locating a node or a group of many nodes from any other node no matter what scene the two nodes are located in A Singleton Autoload is an always loaded node that can be accessed directly by any node regardless of the scene These are useful when some data or functionality is shared globally Node find_child finds a node by name without knowing its full path This seems similar to a scene unique node but this method is able to find nodes in nested scenes and doesn t require marking the node in the scene editor in any way However this method is slow Scene unique nodes are cached by Godot and are fast to retrieve but each time the method is called find_child needs to check every descendant every child grandchild and so on User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Shaders Introduction to shaders Shading reference Your first shader Shader materials Using VisualShaders Using compute shaders Screen reading shaders Converting GLSL to Godot shaders Shaders style guide Using a SubViewport as a texture Custom post processing Advanced post processing Making trees Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Introduction to shaders This page explains what shaders are and will give you an overview of how they work in Godot For a detailed reference of the engine s shading language see Shading language Shaders are a special kind of program that runs on Graphics Processing Units GPUs They were initially used to shade 3D scenes but can nowadays do much more You can use them to control how the engine draws geometry and pixels on the screen allowing you to achieve all sorts of effects Modern rendering engines like Godot draw everything with shaders graphics cards can run thousands of instructions in parallel leading to incredible rendering speed Because of their parallel nature though shaders don t process information the way a typical program does Shader code runs on each vertex or pixel in isolation You cannot store data between frames either As a result when working with shaders you need to code and think differently from other programming languages Suppose you want to update all the pixels in a texture to a given color In GDScript your code would use for loops for x in range width for y in range height set_color x y some_color Copy to clipboard Your code is already part of a loop in a shader so the corresponding code would look like this void fragment COLOR some_color Copy to clipboard Note The graphics card calls the fragment function once or more for each pixel it has to draw More on that below Shaders in Godot Godot provides a shading language based on the popular OpenGL Shading Language GLSL but simplified The engine handles some of the lower level initialization work for you making it easier to write complex shaders In Godot shaders are made up of main functions called processor functions Processor functions are the entry point for your shader into the program There are seven different processor functions The vertex function runs over all the vertices in the mesh and sets their positions and some other per vertex variables Used in canvas_item shaders and spatial shaders The fragment function runs for every pixel covered by the mesh It uses values output by the vertex function interpolated between the vertices Used in canvas_item shaders and spatial shaders The light function runs for every pixel and for every light It takes variables from the fragment function and from its previous runs Used in canvas_item shaders and spatial shaders The start function runs for every particle in a particle system once when the particle is first spawned Used in particles shaders The process function runs for every particle in a particle system for each frame Used in particles shaders The sky function runs for every pixel in the radiance cubemap when the radiance cubemap needs to be updated and for every pixel on the current screen Used in sky shaders The fog function runs for every froxel in the volumetric fog froxel buffer that intersects with the FogVolume Used by fog shaders Warning The light function won t run if the vertex_lighting render mode is enabled or if Rendering Quality Shading Force Vertex Shading is enabled in the Project Settings It s enabled by default on mobile platforms Note Godot also exposes an API for users to write totally custom GLSL shaders For more information see Using compute shaders Shader types Instead of supplying a general purpose configuration for all uses 2D 3D particles sky fog you must specify the type of shader you re writing Different types support different render modes built in variables and processing functions In Godot all shaders need to specify their type in the first line like so shader_type spatial Copy to clipboard Here are the available types spatial for 3D rendering canvas_item for 2D rendering particles for particle systems sky to render Skies fog to render FogVolumes Render modes Shaders have optional render modes you can specify on the second line after the shader type like so shader_type spatial render_mode unshaded cull_disabled Copy to clipboard Render modes alter the way Godot applies the shader For example the unshaded mode makes the engine skip the built in light processor function Each shader type has different render modes See the reference for each shader type for a complete list of render modes Vertex processor The vertex processing function is called once for every vertex in spatial and canvas_item shaders Each vertex in your world s geometry has properties like a position and color The function modifies those values and passes them to the fragment function You can also use it to send extra data to the fragment function using varyings By default Godot transforms your vertex information for you which is necessary to project geometry onto the screen You can use render modes to transform the data yourself see the Spatial shader doc for an example Fragment processor The fragment processing function is used to set up the Godot material parameters per pixel This code runs on every visible pixel the object or primitive draws It is only available in spatial canvas_item and sky shaders The standard use of the fragment function is to set up material properties used to calculate lighting For example you would set values for ROUGHNESS RIM or TRANSMISSION which would tell the light function how the lights respond to that fragment This makes it possible to control a complex shading pipeline without the user having to write much code If you don t need this built in functionality you can ignore it and write your own light processing function and Godot will optimize it away For example if you do not write a value to RIM Godot will not calculate rim lighting During compilation Godot checks to see if RIM is used if not it cuts all the corresponding code out Therefore you will not waste calculations on the effects that you do not use Light processor The light processor runs per pixel too and it runs once for every light that affects the object It does not run if no lights affect the object It exists as a function called inside the fragment processor and typically operates on the material properties setup inside the fragment function The light processor works differently in 2D than it does in 3D for a description of how it works in each see their documentation CanvasItem shaders and Spatial shaders respectively User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Shading reference Shading language Shader preprocessor Spatial shaders CanvasItem shaders Particle shaders Sky shaders Fog shaders Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Shading language Introduction Godot uses a shading language similar to GLSL ES 3 0 Most datatypes and functions are supported and the few remaining ones will likely be added over time If you are already familiar with GLSL the Godot Shader Migration Guide is a resource that will help you transition from regular GLSL to Godot s shading language Data types Most GLSL ES 3 0 datatypes are supported Type Description void Void datatype useful only for functions that return nothing bool Boolean datatype can only contain true or false bvec2 Two component vector of booleans bvec3 Three component vector of booleans bvec4 Four component vector of booleans int 32 bit signed scalar integer ivec2 Two component vector of signed integers ivec3 Three component vector of signed integers ivec4 Four component vector of signed integers uint Unsigned scalar integer can t contain negative numbers uvec2 Two component vector of unsigned integers uvec3 Three component vector of unsigned integers uvec4 Four component vector of unsigned integers float 32 bit floating point scalar vec2 Two component vector of floating point values vec3 Three component vector of floating point values vec4 Four component vector of floating point values mat2 2x2 matrix in column major order mat3 3x3 matrix in column major order mat4 4x4 matrix in column major order sampler2D Sampler type for binding 2D textures which are read as float isampler2D Sampler type for binding 2D textures which are read as signed integer usampler2D Sampler type for binding 2D textures which are read as unsigned integer sampler2DArray Sampler type for binding 2D texture arrays which are read as float isampler2DArray Sampler type for binding 2D texture arrays which are read as signed integer usampler2DArray Sampler type for binding 2D texture arrays which are read as unsigned integer sampler3D Sampler type for binding 3D textures which are read as float isampler3D Sampler type for binding 3D textures which are read as signed integer usampler3D Sampler type for binding 3D textures which are read as unsigned integer samplerCube Sampler type for binding Cubemaps which are read as float samplerCubeArray Sampler type for binding Cubemap arrays which are read as float Only supported in Forward and Mobile not Compatibility Comments The shading language supports the same comment syntax as used in C and C Single line comment int a 2 Another single line comment Multi line comment The comment ends when the ending delimiter is found here it s on the line below int b 3 Copy to clipboard Additionally you can use documentation comments that are displayed in the inspector when hovering a shader parameter Documentation comments are currently only supported when placed immediately above a uniform declaration These documentation comments only support the multiline comment syntax and must use two leading asterisks instead of just one This is a documentation comment These lines will appear in the inspector when hovering the shader parameter named Something You can use b BBCode b i formatting i in the comment uniform int something 1 Copy to clipboard The asterisks on the follow up lines are not required but are recommended as per the Shaders style guide These asterisks are automatically stripped by the inspector so they won t appear in the tooltip Casting Just like GLSL ES 3 0 implicit casting between scalars and vectors of the same size but different type is not allowed Casting of types of different size is also not allowed Conversion must be done explicitly via constructors Example float a 2 invalid float a 2 0 valid float a float 2 valid Copy to clipboard Default integer constants are signed so casting is always needed to convert to unsigned int a 2 valid uint a 2 invalid uint a uint 2 valid Copy to clipboard Members Individual scalar members of vector types are accessed via the x y z and w members Alternatively using r g b and a also works and is equivalent Use whatever fits best for your needs For matrices use the m column row indexing syntax to access each scalar or m idx to access a vector by row index For example for accessing the y position of an object in a mat4 you use m 3 1 Constructing Construction of vector types must always pass The required amount of scalars vec4 a vec4 0 0 1 0 2 0 3 0 Complementary vectors and or scalars vec4 a vec4 vec2 0 0 1 0 vec2 2 0 3 0 vec4 a vec4 vec3 0 0 1 0 2 0 3 0 A single scalar for the whole vector vec4 a vec4 0 0 Copy to clipboard Construction of matrix types requires vectors of the same dimension as the matrix You can also build a diagonal matrix using matx float syntax Accordingly mat4 1 0 is an identity matrix mat2 m2 mat2 vec2 1 0 0 0 vec2 0 0 1 0 mat3 m3 mat3 vec3 1 0 0 0 0 0 vec3 0 0 1 0 0 0 vec3 0 0 0 0 1 0 mat4 identity mat4 1 0 Copy to clipboard Matrices can also be built from a matrix of another dimension There are two rules 1 If a larger matrix is constructed from a smaller matrix the additional rows and columns are set to the values they would have in an identity matrix 2 If a smaller matrix is constructed from a larger matrix the top left submatrix of the larger matrix is used mat3 basis mat3 MODEL_MATRIX mat4 m4 mat4 basis mat2 m2 mat2 m4 Copy to clipboard Swizzling It is possible to obtain any combination of components in any order as long as the result is another vector type or scalar This is easier shown than explained vec4 a vec4 0 0 1 0 2 0 3 0 vec3 b a rgb Creates a vec3 with vec4 components vec3 b a ggg Also valid creates a vec3 and fills it with a single vec4 component vec3 b a bgr b will be vec3 2 0 1 0 0 0 vec3 b a xyz Also rgba xyzw are equivalent vec3 b a stp And stpq for texture coordinates float c b w Invalid because w is not present in vec3 b vec3 c b xrt Invalid mixing different styles is forbidden b rrr a rgb Invalid assignment with duplication b bgr a rgb Valid assignment b s blue component will be a s red and vice versa Copy to clipboard Precision It is possible to add precision modifiers to datatypes use them for uniforms variables arguments and varyings lowp vec4 a vec4 0 0 1 0 2 0 3 0 low precision usually 8 bits per component mapped to 0 1 mediump vec4 a vec4 0 0 1 0 2 0 3 0 medium precision usually 16 bits or half float highp vec4 a vec4 0 0 1 0 2 0 3 0 high precision uses full float or integer range 32 bit default Copy to clipboard Using lower precision for some operations can speed up the math involved at the cost of less precision This is rarely needed in the vertex processor function where full precision is needed most of the time but is often useful in the fragment processor Some architectures mainly mobile can benefit significantly from this but there are downsides such as the additional overhead of conversion between precisions Refer to the documentation of the target architecture for further information In many cases mobile drivers cause inconsistent or unexpected behavior and it is best to avoid specifying precision unless necessary Arrays Arrays are containers for multiple variables of a similar type Local arrays Local arrays are declared in functions They can use all of the allowed datatypes except samplers The array declaration follows a C style syntax const precision typename identifier array size void fragment float arr 3 Copy to clipboard They can be initialized at the beginning like float float_arr 3 float 3 1 0 0 5 0 0 first constructor int int_arr 3 int 2 1 0 second constructor vec2 vec2_arr 3 vec2 1 0 1 0 vec2 0 5 0 5 vec2 0 0 0 0 third constructor bool bool_arr true true false fourth constructor size is defined automatically from the element count Copy to clipboard You can declare multiple arrays even with different sizes in one expression float a 3 float 3 1 0 0 5 0 0 b 2 1 0 0 5 c 0 7 d 0 0 e 5 Copy to clipboard To access an array element use the indexing syntax float arr 3 arr 0 1 0 setter COLOR r arr 0 getter Copy to clipboard Arrays also have a built in function length not to be confused with the built in length function It doesn t accept any parameters and will return the array s size float arr 0 0 1 0 0 5 1 0 for int i 0 i arr length i Copy to clipboard Note If you use an index either below 0 or greater than array size the shader will crash and break rendering To prevent this use length if or clamp functions to ensure the index is between 0 and the array s length Always carefully test and check your code If you pass a constant expression or a number the editor will check its bounds to prevent this crash Global arrays You can declare arrays at global space like shader_type spatial const lowp vec3 v 1 lowp vec3 1 vec3 0 0 1 void fragment ALBEDO v 0 Copy to clipboard Note Global arrays have to be declared as global constants otherwise they can be declared the same as local arrays Constants Use the const keyword before the variable declaration to make that variable immutable which means that it cannot be modified All basic types except samplers can be declared as constants Accessing and using a constant value is slightly faster than using a uniform Constants must be initialized at their declaration const vec2 a vec2 0 0 1 0 vec2 b a b invalid b a valid Copy to clipboard Constants cannot be modified and additionally cannot have hints but multiple of them if they have the same type can be declared in a single expression e g const vec2 V1 vec2 1 1 V2 vec2 2 2 Copy to clipboard Similar to variables arrays can also be declared with const const float arr 1 0 0 5 0 0 arr 0 1 0 invalid COLOR r arr 0 valid Copy to clipboard Constants can be declared both globally outside of any function or locally inside a function Global constants are useful when you want to have access to a value throughout your shader that does not need to be modified Like uniforms global constants are shared between all shader stages but they are not accessible outside of the shader shader_type spatial const float PI 3 14159265358979323846 Copy to clipboard Constants of the float type must be initialized using notation after the decimal part or by using the scientific notation The optional f post suffix is also supported float a 1 0 float b 1 0 f same using suffix for clarity float c 1 e 1 gives 0 1 by using the scientific notation Copy to clipboard Constants of the uint unsigned int type must have a u suffix to differentiate them from signed integers Alternatively this can be done by using the uint x built in conversion function uint a 1 u uint b uint 1 Copy to clipboard Structs Structs are compound types which can be used for better abstraction of shader code You can declare them at the global scope like struct PointLight vec3 position vec3 color float intensity Copy to clipboard After declaration you can instantiate and initialize them like void fragment PointLight light light position vec3 0 0 light color vec3 1 0 0 0 0 0 light intensity 0 5 Copy to clipboard Or use struct constructor for same purpose PointLight light PointLight vec3 0 0 vec3 1 0 0 0 0 0 0 5 Copy to clipboard Structs may contain other struct or array you can also instance them as global constant shader_type spatial struct Scene PointLight lights 2 const Scene scene Scene PointLight 2 PointLight vec3 0 0 0 0 0 0 vec3 1 0 0 0 0 0 1 0 PointLight vec3 0 0 0 0 0 0 vec3 1 0 0 0 0 0 1 0 void fragment ALBEDO scene lights 0 color Copy to clipboard You can also pass them to functions shader_type canvas_item Scene construct_scene PointLight light1 PointLight light2 return Scene light1 light2 void fragment COLOR rgb construct_scene PointLight vec3 0 0 0 0 0 0 vec3 1 0 0 0 0 0 1 0 PointLight vec3 0 0 0 0 0 0 vec3 1 0 0 0 1 0 1 0 lights 0 color Copy to clipboard Operators Godot shading language supports the same set of operators as GLSL ES 3 0 Below is the list of them in precedence order Precedence Class Operator 1 highest parenthetical grouping 2 unary 3 multiplicative 4 additive 5 bit wise shift 6 relational 7 equality 8 bit wise AND 9 bit wise exclusive OR 10 bit wise inclusive OR 11 logical AND 12 lowest logical inclusive OR Flow control Godot Shading language supports the most common types of flow control if and else if cond else Ternary operator This is an expression that behaves like if else and returns the value If cond evaluates to true result will be 9 Otherwise result will be 5 int result cond 9 5 switch switch i i should be a signed integer expression case 1 break case 0 return break or return to avoid running the next case case 1 Fallthrough no break or return will run the next case case 2 break default Only run if no case above matches Optional break for loop Best used when the number of elements to iterate on is known in advance for int i 0 i 10 i while loop Best used when the number of elements to iterate on is not known in advance while cond do while Like while but always runs at least once even if cond never evaluates to true do while cond Copy to clipboard Keep in mind that in modern GPUs an infinite loop can exist and can freeze your application including editor Godot can t protect you from this so be careful not to make this mistake Also when comparing floating point values against a number make sure to compare them against a range instead of an exact number A comparison like if value 0 3 may not evaluate to true Floating point math is often approximate and can defy expectations It can also behave differently depending on the hardware Don t do this float value 0 1 0 2 May not evaluate to true if value 0 3 Copy to clipboard Instead always perform a range comparison with an epsilon value The larger the floating point number and the less precise the floating point number the larger the epsilon value should be const float EPSILON 0 0001 if value 0 3 EPSILON value 0 3 EPSILON Copy to clipboard See floating point gui de for more information Discarding Fragment and light functions can use the discard keyword If used the fragment is discarded and nothing is written Beware that discard has a performance cost when used as it will prevent the depth prepass from being effective on any surfaces using the shader Also a discarded pixel still needs to be rendered in the vertex shader which means a shader that uses discard on all of its pixels is still more expensive to render compared to not rendering any object in the first place Functions It is possible to define functions in a Godot shader They use the following syntax ret_type func_name args return ret_type if returning a value a more specific example int sum2 int a int b return a b Copy to clipboard You can only use functions that have been defined above higher in the editor the function from which you are calling them Redefining a function that has already been defined above or is a built in function name will cause an error Function arguments can have special qualifiers in Means the argument is only for reading default out Means the argument is only for writing inout Means the argument is fully passed via reference const Means the argument is a constant and cannot be changed may be combined with in qualifier Example below void sum2 int a int b inout int result result a b Copy to clipboard Note Unlike GLSL Godot s shader language does not support function overloading This means that a function cannot be defined several times with different argument types or numbers of arguments As a workaround use different names for functions that accept a different number of arguments or arguments of different types Varyings To send data from the vertex to the fragment or light processor function varyings are used They are set for every primitive vertex in the vertex processor and the value is interpolated for every pixel in the fragment processor shader_type spatial varying vec3 some_color void vertex some_color NORMAL Make the normal the color void fragment ALBEDO some_color void light DIFFUSE_LIGHT some_color 100 optionally Copy to clipboard Varying can also be an array shader_type spatial varying float var_arr 3 void vertex var_arr 0 1 0 var_arr 1 0 0 void fragment ALBEDO vec3 var_arr 0 var_arr 1 var_arr 2 red color Copy to clipboard It s also possible to send data from fragment to light processors using varying keyword To do so you can assign it in the fragment and later use it in the light function shader_type spatial varying vec3 some_light void fragment some_light ALBEDO 100 0 Make a shining light void light DIFFUSE_LIGHT some_light Copy to clipboard Note that varying may not be assigned in custom functions or a light processor function like shader_type spatial varying float test void foo test 0 0 Error void vertex test 0 0 void light test 0 0 Error too Copy to clipboard This limitation was introduced to prevent incorrect usage before initialization Interpolation qualifiers Certain values are interpolated during the shading pipeline You can modify how these interpolations are done by using interpolation qualifiers shader_type spatial varying flat vec3 our_color void vertex our_color COLOR rgb void fragment ALBEDO our_color Copy to clipboard There are two possible interpolation qualifiers Qualifier Description flat The value is not interpolated smooth The value is interpolated in a perspective correct fashion This is the default Uniforms Passing values to shaders is possible These are global to the whole shader and are called uniforms When a shader is later assigned to a material the uniforms will appear as editable parameters in it Uniforms can t be written from within the shader shader_type spatial uniform float some_value uniform vec3 colors 3 Copy to clipboard You can set uniforms in the editor in the material Or you can set them through GDScript material set_shader_parameter some_value some_value material set_shader_parameter colors Vector3 1 0 0 Vector3 0 1 0 Vector3 0 0 1 Copy to clipboard Note The first argument to set_shader_parameter is the name of the uniform in the shader It must match exactly to the name of the uniform in the shader or else it will not be recognized Any GLSL type except for void can be a uniform Additionally Godot provides optional shader hints to make the compiler understand for what the uniform is used and how the editor should allow users to modify it shader_type spatial uniform vec4 color source_color uniform float amount hint_range 0 1 uniform vec4 other_color source_color vec4 1 0 Default values go after the hint uniform sampler2D image source_color Copy to clipboard It s important to understand that textures that are supplied as color require hints for proper sRGB linear conversion i e source_color as Godot s 3D engine renders in linear color space If this is not done the texture will appear washed out Note The 2D renderer also renders in linear color space if the Rendering Viewport HDR 2D project setting is enabled so source_color must also be used in canvas_item shaders If 2D HDR is disabled source_color will keep working correctly in canvas_item shaders so it s recommend to use it either way Full list of hints below Type Hint Description vec3 vec4 source_color Used as color int float hint_range min max step Restricted to values in a range with min max step sampler2D source_color Used as albedo color sampler2D hint_normal Used as normalmap sampler2D hint_default_white As value or albedo color default to opaque white sampler2D hint_default_black As value or albedo color default to opaque black sampler2D hint_default_transparent As value or albedo color default to transparent black sampler2D hint_anisotropy As flowmap default to right sampler2D hint_roughness _r _g _b _a _normal _gray Used for roughness limiter on import attempts reducing specular aliasing _normal is a normal map that guides the roughness limiter with roughness increasing in areas that have high frequency detail sampler2D filter _nearest _linear _mipmap _anisotropic Enabled specified texture filtering sampler2D repeat _enable _disable Enabled texture repeating sampler2D hint_screen_texture Texture is the screen texture sampler2D hint_depth_texture Texture is the depth texture sampler2D hint_normal_roughness_texture Texture is the normal roughness texture only supported in Forward GDScript uses different variable types than GLSL does so when passing variables from GDScript to shaders Godot converts the type automatically Below is a table of the corresponding types GLSL type GDScript type Notes bool bool bvec2 int Bitwise packed int where bit 0 LSB corresponds to x For example a bvec2 of bx by could be created in the following way bvec2_input int int bx int by 1 Copy to clipboard bvec3 int Bitwise packed int where bit 0 LSB corresponds to x bvec4 int Bitwise packed int where bit 0 LSB corresponds to x int int ivec2 Vector2i ivec3 Vector3i ivec4 Vector4i uint int uvec2 Vector2i uvec3 Vector3i uvec4 Vector4i float float vec2 Vector2 vec3 Vector3 Color When Color is used it will be interpreted as r g b vec4 Vector4 Color Rect2 Plane Quaternion When Color is used it will be interpreted as r g b a When Rect2 is used it will be interpreted as position x position y size x size y When Plane is used it will be interpreted as normal x normal y normal z d mat2 Transform2D mat3 Basis mat4 Projection Transform3D When a Transform3D is used the w Vector is set to the identity sampler2D Texture2D isampler2D Texture2D usampler2D Texture2D sampler2DArray Texture2DArray isampler2DArray Texture2DArray usampler2DArray Texture2DArray sampler3D Texture3D isampler3D Texture3D usampler3D Texture3D samplerCube Cubemap See Changing import type for instructions on importing cubemaps for use in Godot samplerCubeArray CubemapArray Only supported in Forward and Mobile not Compatibility Note Be careful when setting shader uniforms from GDScript no error will be thrown if the type does not match Your shader will just exhibit undefined behavior Warning As with the last note no error will be thrown if the typing does not match while setting a shader uniform this unintuitively includes setting a GDscript 64 bit int float into a Godot shader language int float 32 bit This may lead to unintentional consequences in cases where high precision is required Uniforms can also be assigned default values shader_type spatial uniform vec4 some_vector vec4 0 0 uniform vec4 some_color source_color vec4 1 0 Copy to clipboard Note that when adding a default value and a hint the default value goes after the hint If you need to make multiple uniforms to be grouped in the specific category of an inspector you can use a group_uniform keyword like group_uniforms MyGroup uniform sampler2D test Copy to clipboard You can close the group by using group_uniforms Copy to clipboard The syntax also supports subgroups it s not mandatory to declare the base group before this group_uniforms MyGroup MySubgroup Copy to clipboard Global uniforms Sometimes you want to modify a parameter in many different shaders at once With a regular uniform this takes a lot of work as all these shaders need to be tracked and the uniform needs to be set for each of them Global uniforms allow you to create and update uniforms that will be available in all shaders in every shader type canvas_item spatial particles sky and fog Global uniforms are especially useful for environmental effects that affect many objects in a scene like having foliage bend when the player is nearby or having objects move with the wind To create a global uniform open the Project Settings then go to the Shader Globals tab Specify a name for the uniform case sensitive and a type then click Add in the top right corner of the dialog You can then edit the value assigned to the uniform by clicking the value in the list of uniforms Adding a global uniform in the Shader Globals tab of the Project Settings After creating a global uniform you can use it in a shader as follows shader_type canvas_item global uniform vec4 my_color void fragment COLOR my_color rgb Copy to clipboard Note that the global uniform must exist in the Project Settings at the time the shader is saved or compilation will fail While you can assign a default value using global uniform vec4 my_color in the shader code it will be ignored as the global uniform must always be defined in the Project Settings anyway To change the value of a global uniform at run time use the RenderingServer global_shader_parameter_set method in a script RenderingServer global_shader_parameter_set my_color Color 0 3 0 6 1 0 Copy to clipboard Assigning global uniform values can be done as many times as desired without impacting performance as setting data doesn t require synchronization between the CPU and GPU You can also add or remove global uniforms at run time RenderingServer global_shader_parameter_add my_color RenderingServer GLOBAL_VAR_TYPE_COLOR Color 0 3 0 6 1 0 RenderingServer global_shader_parameter_remove my_color Copy to clipboard Adding or removing global uniforms at run time has a performance cost although it s not as pronounced compared to getting global uniform values from a script see the warning below Warning While you can query the value of a global uniform at run time in a script using RenderingServer global_shader_parameter_get uniform_name this has a large performance penalty as the rendering thread needs to synchronize with the calling thread Therefore it s not recommended to read global shader uniform values continuously in a script If you need to read values in a script after setting them consider creating an autoload where you store the values you need to query at the same time you re setting them as global uniforms Per instance uniforms Note Per instance uniforms are only available in spatial 3D shaders Note Per instance uniforms are not supported when using the Compatibility renderer Sometimes you want to modify a parameter on each node using the material As an example in a forest full of trees when you want each tree to have a slightly different color that is editable by hand Without per instance uniforms this requires creating a unique material for each tree each with a slightly different hue This makes material management more complex and also has a performance overhead due to the scene requiring more unique material instances Vertex colors could also be used here but they d require creating unique copies of the mesh for each different color which also has a performance overhead Per instance uniforms are set on each GeometryInstance3D rather than on each Material instance Take this into account when working with meshes that have multiple materials assigned to them or MultiMesh setups shader_type spatial Provide a hint to edit as a color Optionally a default value can be provided If no default value is provided the type s default is used e g opaque black for colors instance uniform vec4 my_color source_color vec4 1 0 0 5 0 0 1 0 void fragment ALBEDO my_color rgb Copy to clipboard After saving the shader you can change the per instance uniform s value using the inspector Setting a per instance uniform s value in the GeometryInstance3D section of the inspector Per instance uniform values can also be set at run time using set_instance_shader_parameter method on a node that inherits from GeometryInstance3D MeshInstance3D set_instance_shader_parameter my_color Color 0 3 0 6 1 0 Copy to clipboard When using per instance uniforms there are some restrictions you should be aware of Per instance uniforms do not support textures only regular scalar and vector types As a workaround you can pass a texture array as a regular uniform then pass the index of the texture to be drawn using a per instance uniform There is a practical maximum limit of 16 instance uniforms per shader If your mesh uses multiple materials the parameters for the first mesh material found will win over the subsequent ones unless they have the same name index and type In this case all parameters are affected correctly If you run into the above situation you can avoid clashes by manually specifying the index 0 15 of the instance uniform by using the instance_index hint instance uniform vec4 my_color source_color instance_index 5 Copy to clipboard Built in variables A large number of built in variables are available like UV COLOR and VERTEX What variables are available depends on the type of shader spatial canvas_item or particle and the function used vertex fragment or light For a list of the built in variables that are available please see the corresponding pages Spatial shaders Canvas item shaders Particle shaders Sky shaders Fog shaders Built in functions A large number of built in functions are supported conforming to GLSL ES 3 0 When vec_type float vec_int_type vec_uint_type vec_bool_type nomenclature is used it can be scalar or vector Function Description Return value vec_type radians vec_type degrees Convert degrees to radians vec_type degrees vec_type radians Convert radians to degrees vec_type sin vec_type x Sine vec_type cos vec_type x Cosine vec_type tan vec_type x Tangent vec_type asin vec_type x Arcsine vec_type acos vec_type x Arccosine vec_type atan vec_type y_over_x Arctangent vec_type atan vec_type y vec_type x Arctangent vec_type sinh vec_type x Hyperbolic sine vec_type cosh vec_type x Hyperbolic cosine vec_type tanh vec_type x Hyperbolic tangent vec_type asinh vec_type x Inverse hyperbolic sine vec_type acosh vec_type x Inverse hyperbolic cosine vec_type atanh vec_type x Inverse hyperbolic tangent vec_type pow vec_type x vec_type y Power undefined if x 0 or if x 0 and y 0 vec_type exp vec_type x Base e exponential vec_type exp2 vec_type x Base 2 exponential vec_type log vec_type x Natural logarithm vec_type log2 vec_type x Base 2 logarithm vec_type sqrt vec_type x Square root vec_type inversesqrt vec_type x Inverse square root vec_type abs vec_type x ivec_type abs ivec_type x Absolute value returns positive value if negative vec_type sign vec_type x ivec_type sign ivec_type x Sign returns 1 0 if positive 1 0 if negative 0 0 if zero vec_type floor vec_type x Round to the integer below vec_type round vec_type x Round to the nearest integer vec_type roundEven vec_type x Round to the nearest even integer vec_type trunc vec_type x Truncation vec_type ceil vec_type x Round to the integer above vec_type fract vec_type x Fractional returns x floor x vec_type mod vec_type x vec_type y vec_type mod vec_type x float y Modulo division remainder vec_type modf vec_type x out vec_type i Fractional of x with i as integer part vec_type min vec_type a vec_type b Lowest value between a and b vec_type max vec_type a vec_type b Highest value between a and b vec_type clamp vec_type x vec_type min vec_type max Clamp x between min and max inclusive float mix float a float b float c vec_type mix vec_type a vec_type b float c vec_type mix vec_type a vec_type b bvec_type c Linear interpolate between a and b by c vec_type fma vec_type a vec_type b vec_type c Performs a fused multiply add operation a b c faster than doing it manually vec_type step vec_type a vec_type b b i a i 0 0 1 0 vec_type step float a vec_type b b i a 0 0 1 0 vec_type smoothstep vec_type a vec_type b vec_type c vec_type smoothstep float a float b vec_type c Hermite interpolate between a and b by c bvec_type isnan vec_type x Returns true if scalar or vector component is NaN bvec_type isinf vec_type x Returns true if scalar or vector component is INF ivec_type floatBitsToInt vec_type x Float Int bit copying no conversion uvec_type floatBitsToUint vec_type x Float UInt bit copying no conversion vec_type intBitsToFloat ivec_type x Int Float bit copying no conversion vec_type uintBitsToFloat uvec_type x UInt Float bit copying no conversion float length vec_type x Vector length float distance vec_type a vec_type b Distance between vectors i e length a b float dot vec_type a vec_type b Dot product vec3 cross vec3 a vec3 b Cross product vec_type normalize vec_type x Normalize to unit length vec3 reflect vec3 I vec3 N Reflect vec3 refract vec3 I vec3 N float eta Refract vec_type faceforward vec_type N vec_type I vec_type Nref If dot Nref I 0 return N otherwise N mat_type matrixCompMult mat_type x mat_type y Matrix component multiplication mat_type outerProduct vec_type column vec_type row Matrix outer product mat_type transpose mat_type m Transpose matrix float determinant mat_type m Matrix determinant mat_type inverse mat_type m Inverse matrix bvec_type lessThan vec_type x vec_type y Bool vector comparison on int uint float vectors bvec_type greaterThan vec_type x vec_type y Bool vector comparison on int uint float vectors bvec_type lessThanEqual vec_type x vec_type y Bool vector comparison on int uint float vectors bvec_type greaterThanEqual vec_type x vec_type y Bool vector comparison on int uint float vectors bvec_type equal vec_type x vec_type y Bool vector comparison on int uint float vectors bvec_type notEqual vec_type x vec_type y Bool vector comparison on int uint float vectors bool any bvec_type x true if any component is true false otherwise bool all bvec_type x true if all components are true false otherwise bvec_type not bvec_type x Invert boolean vector ivec2 textureSize gsampler2D s int lod ivec3 textureSize gsampler2DArray s int lod ivec3 textureSize gsampler3D s int lod ivec2 textureSize samplerCube s int lod ivec2 textureSize samplerCubeArray s int lod Get the size of a texture The LOD defines which mipmap level is used An LOD value of 0 will use the full resolution texture vec2 textureQueryLod gsampler2D s vec2 p vec3 textureQueryLod gsampler2DArray s vec2 p vec2 textureQueryLod gsampler3D s vec3 p vec2 textureQueryLod samplerCube s vec3 p Compute the level of detail that would be used to sample from a texture The x component of the resulted value is the mipmap array that would be accessed The y component is computed level of detail relative to the base level regardless of the mipmap levels of the texture int textureQueryLevels gsampler2D s int textureQueryLevels gsampler2DArray s int textureQueryLevels gsampler3D s int textureQueryLevels samplerCube s Get the number of accessible mipmap levels of a texture If the texture is unassigned to a sampler 1 is returned Godot always internally assigns a texture even to an empty sampler gvec4_type texture gsampler2D s vec2 p float bias gvec4_type texture gsampler2DArray s vec3 p float bias gvec4_type texture gsampler3D s vec3 p float bias vec4 texture samplerCube s vec3 p float bias vec4 texture samplerCubeArray s vec4 p float bias Perform a texture read gvec4_type textureProj gsampler2D s vec3 p float bias gvec4_type textureProj gsampler2D s vec4 p float bias gvec4_type textureProj gsampler3D s vec4 p float bias Perform a texture read with projection gvec4_type textureLod gsampler2D s vec2 p float lod gvec4_type textureLod gsampler2DArray s vec3 p float lod gvec4_type textureLod gsampler3D s vec3 p float lod vec4 textureLod samplerCube s vec3 p float lod vec4 textureLod samplerCubeArray s vec4 p float lod Perform a texture read at custom mipmap The LOD defines which mipmap level is used An LOD value of 0 0 will use the full resolution texture If the texture lacks mipmaps all LOD values will act like 0 0 gvec4_type textureProjLod gsampler2D s vec3 p float lod gvec4_type textureProjLod gsampler2D s vec4 p float lod gvec4_type textureProjLod gsampler3D s vec4 p float lod Performs a texture read with projection LOD The LOD defines which mipmap level is used An LOD value of 0 0 will use the full resolution texture If the texture lacks mipmaps all LOD values will act like 0 0 gvec4_type textureGrad gsampler2D s vec2 p vec2 dPdx vec2 dPdy gvec4_type textureGrad gsampler2DArray s vec3 p vec2 dPdx vec2 dPdy gvec4_type textureGrad gsampler3D s vec3 p vec2 dPdx vec2 dPdy vec4 textureGrad samplerCube s vec3 p vec3 dPdx vec3 dPdy vec4 textureGrad samplerCubeArray s vec3 p vec3 dPdx vec3 dPdy Performs a texture read with explicit gradients gvec4_type textureProjGrad gsampler2D s vec3 p vec2 dPdx vec2 dPdy gvec4_type textureProjGrad gsampler2D s vec4 p vec2 dPdx vec2 dPdy gvec4_type textureProjGrad gsampler3D s vec4 p vec3 dPdx vec3 dPdy Performs a texture read with projection LOD and with explicit gradients gvec4_type texelFetch gsampler2D s ivec2 p int lod gvec4_type texelFetch gsampler2DArray s ivec3 p int lod gvec4_type texelFetch gsampler3D s ivec3 p int lod Fetches a single texel using integer coordinates The LOD defines which mipmap level is used An LOD value of 0 will use the full resolution texture gvec4_type textureGather gsampler2D s vec2 p int comps gvec4_type textureGather gsampler2DArray s vec3 p int comps vec4 textureGather samplerCube s vec3 p int comps Gathers four texels from a texture Use comps within range of 0 3 to define which component x y z w is returned If comps is not provided 0 or x component is used vec_type dFdx vec_type p Derivative in x using local differencing Internally can use either dFdxCoarse or dFdxFine but the decision for which to use is made by the GPU driver vec_type dFdxCoarse vec_type p Calculates derivative with respect to x window coordinate using local differencing based on the value of p for the current fragment neighbour s and will possibly but not necessarily include the value for the current fragment This function is not available on gl_compatibility profile vec_type dFdxFine vec_type p Calculates derivative with respect to x window coordinate using local differencing based on the value of p for the current fragment and its immediate neighbour s This function is not available on gl_compatibility profile vec_type dFdy vec_type p Derivative in y using local differencing Internally can use either dFdyCoarse or dFdyFine but the decision for which to use is made by the GPU driver vec_type dFdyCoarse vec_type p Calculates derivative with respect to y window coordinate using local differencing based on the value of p for the current fragment neighbour s and will possibly but not necessarily include the value for the current fragment This function is not available on gl_compatibility profile vec_type dFdyFine vec_type p Calculates derivative with respect to y window coordinate using local differencing based on the value of p for the current fragment and its immediate neighbour s This function is not available on gl_compatibility profile vec_type fwidth vec_type p Sum of absolute derivative in x and y This is the equivalent of using abs dFdx p abs dFdy p vec_type fwidthCoarse vec_type p Sum of absolute derivative in x and y This is the equivalent of using abs dFdxCoarse p abs dFdyCoarse p This function is not available on gl_compatibility profile vec_type fwidthFine vec_type p Sum of absolute derivative in x and y This is the equivalent of using abs dFdxFine p abs dFdyFine p This function is not available on gl_compatibility profile uint packHalf2x16 vec2 v vec2 unpackHalf2x16 uint v Convert two 32 bit floating point numbers into 16 bit and pack them into a 32 bit unsigned integer and vice versa uint packUnorm2x16 vec2 v vec2 unpackUnorm2x16 uint v Convert two 32 bit floating point numbers clamped within 0 1 range into 16 bit and pack them into a 32 bit unsigned integer and vice versa uint packSnorm2x16 vec2 v vec2 unpackSnorm2x16 uint v Convert two 32 bit floating point numbers clamped within 1 1 range into 16 bit and pack them into a 32 bit unsigned integer and vice versa uint packUnorm4x8 vec4 v vec4 unpackUnorm4x8 uint v Convert four 32 bit floating point numbers clamped within 0 1 range into 8 bit and pack them into a 32 bit unsigned integer and vice versa uint packSnorm4x8 vec4 v vec4 unpackSnorm4x8 uint v Convert four 32 bit floating point numbers clamped within 1 1 range into 8 bit and pack them into a 32 bit unsigned integer and vice versa ivec_type bitfieldExtract ivec_type value int offset int bits uvec_type bitfieldExtract uvec_type value int offset int bits Extracts a range of bits from an integer ivec_type bitfieldInsert ivec_type base ivec_type insert int offset int bits uvec_type bitfieldInsert uvec_type base uvec_type insert int offset int bits Insert a range of bits into an integer ivec_type bitfieldReverse ivec_type value uvec_type bitfieldReverse uvec_type value Reverse the order of bits in an integer ivec_type bitCount ivec_type value uvec_type bitCount uvec_type value Counts the number of 1 bits in an integer ivec_type findLSB ivec_type value uvec_type findLSB uvec_type value Find the index of the least significant bit set to 1 in an integer ivec_type findMSB ivec_type value uvec_type findMSB uvec_type value Find the index of the most significant bit set to 1 in an integer void imulExtended ivec_type x ivec_type y out ivec_type msb out ivec_type lsb void umulExtended uvec_type x uvec_type y out uvec_type msb out uvec_type lsb Multiplies two 32 bit numbers and produce a 64 bit result x the first number y the second number msb will contain the most significant bits lsb will contain the least significant bits uvec_type uaddCarry uvec_type x uvec_type y out uvec_type carry Adds two unsigned integers and generates carry uvec_type usubBorrow uvec_type x uvec_type y out uvec_type borrow Subtracts two unsigned integers and generates borrow vec_type ldexp vec_type x out ivec_type exp Assemble a floating point number from a value and exponent If this product is too large to be represented in the floating point type the result is undefined vec_type frexp vec_type x out ivec_type exp Splits a floating point number x into significand in the range of 0 5 1 0 and an integral exponent For x equals zero the significand and exponent are both zero For x of infinity or NaN the results are undefined User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Shader preprocessor Why use a shader preprocessor In programming languages a preprocessor allows changing the code before the compiler reads it Unlike the compiler the preprocessor does not care about whether the syntax of the preprocessed code is valid The preprocessor always performs what the directives tell it to do A directive is a statement starting with a hash symbol It is not a keyword of the shader language such as if or for but a special kind of token within the language From Godot 4 0 onwards you can use a shader preprocessor within text based shaders The syntax is similar to what most GLSL shader compilers support which in turn is similar to the C C preprocessor Note The shader preprocessor is not available in visual shaders If you need to introduce preprocessor statements to a visual shader you can convert it to a text based shader using the Convert to Shader option in the VisualShader inspector resource dropdown This conversion is a one way operation text shaders cannot be converted back to visual shaders Directives General syntax Preprocessor directives do not use brackets but can use parentheses Preprocessor directives never end with semicolons with the exception of define where this is allowed but potentially dangerous Preprocessor directives can span several lines by ending each line with a backslash The first line break not featuring a backslash will end the preprocessor statement define Syntax define identifier replacement_code Defines the identifier after that directive as a macro and replaces all successive occurrences of it with the replacement code given in the shader Replacement is performed on a whole words basis which means no replacement is performed if the string is part of another string without any spaces or operators separating it Defines with replacements may also have one or more arguments which can then be passed when referencing the define similar to a function call If the replacement code is not defined the identifier may only be used with ifdef or ifndef directives If the concatenation symbol is present in the replacement code then it will be removed upon macro insertion together with any space surrounding it and join the surrounding words and arguments into a new token uniform sampler2D material0 define SAMPLE N vec4 tex N texture material N UV void fragment SAMPLE 0 ALBEDO tex0 rgb Copy to clipboard Compared to constants const CONSTANT value define can be used anywhere within the shader including in uniform hints define can also be used to insert arbitrary shader code at any location while constants can t do that shader_type spatial Notice the lack of semicolon at the end of the line as the replacement text shouldn t insert a semicolon on its own If the directive ends with a semicolon the semicolon is inserted in every usage of the directive even when this causes a syntax error define USE_MY_COLOR define MY_COLOR vec3 1 0 0 Replacement with arguments All arguments are required no default values can be provided define BRIGHTEN_COLOR r g b vec3 r 0 5 g 0 5 b 0 5 Multiline replacement using backslashes for continuation define SAMPLE param1 param2 param3 param4 long_function_call param1 param2 param3 param4 void fragment ifdef USE_MY_COLOR ALBEDO MY_COLOR endif Copy to clipboard Defining a define for an identifier that is already defined results in an error To prevent this use undef identifier undef Syntax undef identifier The undef directive may be used to cancel a previously defined define directive define MY_COLOR vec3 1 0 0 vec3 get_red_color return MY_COLOR undef MY_COLOR define MY_COLOR vec3 0 1 0 vec3 get_green_color return MY_COLOR Like in most preprocessors undefining a define that was not previously defined is allowed and won t print any warning or error undef THIS_DOES_NOT_EXIST Copy to clipboard Without undef in the above example there would be a macro redefinition error if Syntax if condition The if directive checks whether the condition passed If it evaluates to a non zero value the code block is included otherwise it is skipped To evaluate correctly the condition must be an expression giving a simple floating point integer or boolean result There may be multiple condition blocks connected by AND or OR operators It may be continued by a else block but must be ended with the endif directive define VAR 3 define USE_LIGHT 0 Evaluates to false define USE_COLOR 1 Evaluates to true if VAR 3 USE_LIGHT USE_COLOR Condition is true Include this portion in the final shader endif Copy to clipboard Using the defined preprocessor function you can check whether the passed identifier is defined a by define placed above that directive This is useful for creating multiple shader versions in the same file It may be continued by a else block but must be ended with the endif directive The defined function s result can be negated by using the boolean NOT symbol in front of it This can be used to check whether a define is not set define USE_LIGHT define USE_COLOR Correct syntax if defined USE_LIGHT defined USE_COLOR defined USE_REFRACTION Condition is true Include this portion in the final shader endif Copy to clipboard Be careful as defined must only wrap a single identifier within parentheses never more Incorrect syntax parentheses are not placed where they should be if defined USE_LIGHT USE_COLOR USE_REFRACTION This will cause an error or not behave as expected endif Copy to clipboard Tip In the shader editor preprocessor branches that evaluate to false and are therefore excluded from the final compiled shader will appear grayed out This does not apply to run time if statements if preprocessor versus if statement Performance caveats The shading language supports run time if statements uniform bool USE_LIGHT true if USE_LIGHT This part is included in the compiled shader and always run else This part is included in the compiled shader but never run Copy to clipboard If the uniform is never changed this behaves identical to the following usage of the if preprocessor statement define USE_LIGHT if defined USE_LIGHT This part is included in the compiled shader and always run else This part is not included in the compiled shader and therefore never run endif Copy to clipboard However the if variant can be faster in certain scenarios This is because all run time branches in a shader are still compiled and variables within those branches may still take up register space even if they are never run in practice Modern GPUs are quite effective at performing static branching Static branching refers to if statements where all pixels vertices evaluate to the same result in a given shader invocation However high amounts of VGPRs which can be caused by having too many branches can still slow down shader execution significantly elif The elif directive stands for else if and checks the condition passed if the above if evaluated to false elif can only be used within an if block It is possible to use several elif statements after an if statement define VAR 2 if VAR 0 Not included elif VAR 1 Not included elif VAR 2 Condition is true Include this portion in the final shader else Not included endif Copy to clipboard Like with if the defined preprocessor function can be used define SHADOW_QUALITY_MEDIUM if defined SHADOW_QUALITY_HIGH High shadow quality elif defined SHADOW_QUALITY_MEDIUM Medium shadow quality else Low shadow quality endif Copy to clipboard ifdef Syntax ifdef identifier This is a shorthand for if defined Checks whether the passed identifier is defined by define placed above that directive This is useful for creating multiple shader versions in the same file It may be continued by a else block but must be ended with the endif directive define USE_LIGHT ifdef USE_LIGHT USE_LIGHT is defined Include this portion in the final shader endif Copy to clipboard The processor does not support elifdef as a shortcut for elif defined Instead use the following series of ifdef and else when you need more than two branches define SHADOW_QUALITY_MEDIUM ifdef SHADOW_QUALITY_HIGH High shadow quality else ifdef SHADOW_QUALITY_MEDIUM Medium shadow quality else Low shadow quality endif This ends SHADOW_QUALITY_MEDIUM s branch endif This ends SHADOW_QUALITY_HIGH s branch Copy to clipboard ifndef Syntax ifndef identifier This is a shorthand for if defined Similar to ifdef but checks whether the passed identifier is not defined by define before that directive This is the exact opposite of ifdef it will always match in situations where ifdef would never match and vice versa define USE_LIGHT ifndef USE_LIGHT Evaluates to false This portion won t be included in the final shader endif ifndef USE_COLOR Evaluates to true This portion will be included in the final shader endif Copy to clipboard else Syntax else Defines the optional block which is included when the previously defined if elif ifdef or ifndef directive evaluates to false shader_type spatial define MY_COLOR vec3 1 0 0 0 void fragment ifdef MY_COLOR ALBEDO MY_COLOR else ALBEDO vec3 0 0 1 0 endif Copy to clipboard endif Syntax endif Used as terminator for the if ifdef ifndef or subsequent else directives include Syntax include path The include directive includes the entire content of a shader include file in a shader path can be an absolute res path or relative to the current shader file Relative paths are only allowed in shaders that are saved to gdshader or gdshaderinc files while absolute paths can be used in shaders that are built into a scene resource file You can create new shader includes by using the File Create Shader Include menu option of the shader editor or by creating a new ShaderInclude resource in the FileSystem dock Shader includes can be included from within any shader or other shader include at any point in the file When including shader includes in the global scope of a shader it is recommended to do this after the initial shader_type statement You can also include shader includes from within the body a function Please note that the shader editor is likely going to report errors for your shader include s code as it may not be valid outside of the context that it was written for You can either choose to ignore these errors the shader will still compile fine or you can wrap the include in an ifdef block that checks for a define from your shader include is useful for creating libraries of helper functions or macros and reducing code duplication When using include be careful about naming collisions as redefining functions or macros is not allowed include is subject to several restrictions Only shader include resources ending with gdshaderinc can be included gdshader files cannot be included by another shader but a gdshaderinc file can include other gdshaderinc files Cyclic dependencies are not allowed and will result in an error To avoid infinite recursion include depth is limited to 25 steps Example shader include file fancy_color gdshaderinc While technically allowed there is usually no shader_type declaration in include files vec3 get_fancy_color return vec3 0 3 0 6 0 9 Copy to clipboard Example base shader using the include file we created above material gdshader shader_type spatial include res fancy_color gdshaderinc void fragment No error as we ve included a definition for get_fancy_color via the shader include COLOR get_fancy_color Copy to clipboard pragma Syntax pragma value The pragma directive provides additional information to the preprocessor or compiler Currently it may have only one value disable_preprocessor If you don t need the preprocessor use that directive to speed up shader compilation by excluding the preprocessor step pragma disable_preprocessor if USE_LIGHT This causes a shader compilation error as the if USE_LIGHT and endif are included as is in the final shader code endif Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Spatial shaders Spatial shaders are used for shading 3D objects They are the most complex type of shader Godot offers Spatial shaders are highly configurable with different render modes and different rendering options e g Subsurface Scattering Transmission Ambient Occlusion Rim lighting etc Users can optionally write vertex fragment and light processor functions to affect how objects are drawn Render modes Render mode Description blend_mix Mix blend mode alpha is transparency default blend_add Additive blend mode blend_sub Subtractive blend mode blend_mul Multiplicative blend mode depth_draw_opaque Only draw depth for opaque geometry not transparent depth_draw_always Always draw depth opaque and transparent depth_draw_never Never draw depth depth_prepass_alpha Do opaque depth pre pass for transparent geometry depth_test_disabled Disable depth testing sss_mode_skin Subsurface Scattering mode for skin cull_back Cull back faces default cull_front Cull front faces cull_disabled Culling disabled double sided unshaded Result is just albedo No lighting shading happens in material wireframe Geometry draws using lines diffuse_burley Burley Disney PBS for diffuse default diffuse_lambert Lambert shading for diffuse diffuse_lambert_wrap Lambert wrapping roughness dependent for diffuse diffuse_toon Toon shading for diffuse specular_schlick_ggx Schlick GGX for specular default specular_toon Toon for specular specular_disabled Disable specular skip_vertex_transform VERTEX NORMAL etc need to be transformed manually in vertex function world_vertex_coords VERTEX NORMAL etc are modified in world coordinates instead of local ensure_correct_normals Use when non uniform scale is applied to mesh shadows_disabled Disable computing shadows in shader ambient_light_disabled Disable contribution from ambient light and radiance map shadow_to_opacity Lighting modifies the alpha so shadowed areas are opaque and non shadowed areas are transparent Useful for overlaying shadows onto a camera feed in AR vertex_lighting Use vertex based lighting particle_trails Enables the trails when used on particles geometry alpha_to_coverage Alpha antialiasing mode see here for more alpha_to_coverage_and_one Alpha antialiasing mode see here for more fog_disabled Disable receiving depth based or volumetric fog Useful for blend_add materials like particles Built ins Values marked as in are read only Values marked as out are for optional writing and will not necessarily contain sensible values Values marked as inout provide a sensible default value and can optionally be written to Samplers are not subjects of writing and they are not marked Global built ins Global built ins are available everywhere including custom functions Built in Description in float TIME Global time since the engine has started in seconds It repeats after every 3 600 seconds which can be changed with the rollover setting It s not affected by time_scale or pausing If you need a TIME variable that can be scaled or paused add your own global shader uniform and update it each frame in float PI A PI constant 3 141592 A ration of circle s circumference to its diameter and amount of radians in half turn in float TAU A TAU constant 6 283185 An equivalent of PI 2 and amount of radians in full turn in float E An E constant 2 718281 Euler s number and a base of the natural logarithm Vertex built ins Vertex data VERTEX NORMAL TANGENT BITANGENT are presented in local model space If not written to these values will not be modified and be passed through as they came They can optionally be presented in world space by using the world_vertex_coords render mode Users can disable the built in modelview transform projection will still happen later and do it manually with the following code shader_type spatial render_mode skip_vertex_transform void vertex VERTEX MODELVIEW_MATRIX vec4 VERTEX 1 0 xyz NORMAL normalize MODELVIEW_MATRIX vec4 NORMAL 0 0 xyz BINORMAL normalize MODELVIEW_MATRIX vec4 BINORMAL 0 0 xyz TANGENT normalize MODELVIEW_MATRIX vec4 TANGENT 0 0 xyz Copy to clipboard Other built ins such as UV UV2 and COLOR are also passed through to the fragment function if not modified Users can override the modelview and projection transforms using the POSITION built in If POSITION is written to anywhere in the shader it will always be used so the user becomes responsible for ensuring that it always has an acceptable value When POSITION is used the value from VERTEX is ignored and projection does not happen However the value passed to the fragment shader still comes from VERTEX For instancing the INSTANCE_CUSTOM variable contains the instance custom data When using particles this information is usually x Rotation angle in radians y Phase during lifetime 0 to 1 z Animation frame This allows you to easily adjust the shader to a particle system using default particles material When writing a custom particle shader this value can be used as desired Built in Description in vec2 VIEWPORT_SIZE Size of viewport in pixels in mat4 VIEW_MATRIX World space to view space transform in mat4 INV_VIEW_MATRIX View space to world space transform in mat4 MAIN_CAM_INV_VIEW_MATRIX View space to world space transform of camera used to draw the current viewport in mat4 INV_PROJECTION_MATRIX Clip space to view space transform in vec3 NODE_POSITION_WORLD Node world space position in vec3 NODE_POSITION_VIEW Node view space position in vec3 CAMERA_POSITION_WORLD Camera world space position in vec3 CAMERA_DIRECTION_WORLD Camera world space direction in uint CAMERA_VISIBLE_LAYERS Cull layers of the camera rendering the current pass in bool OUTPUT_IS_SRGB true when output is in sRGB color space this is true in the Compatibility renderer false in Forward and Forward Mobile in int INSTANCE_ID Instance ID for instancing in vec4 INSTANCE_CUSTOM Instance custom data for particles mostly in int VIEW_INDEX The view that we are rendering VIEW_MONO_LEFT 0 for Mono not multiview or left eye VIEW_RIGHT 1 for right eye in int VIEW_MONO_LEFT Constant for Mono or left eye always 0 in int VIEW_RIGHT Constant for right eye always 1 in vec3 EYE_OFFSET Position offset for the eye being rendered Only applicable for multiview rendering inout vec3 VERTEX Vertex in local coordinates in int VERTEX_ID The index of the current vertex in the vertex buffer inout vec3 NORMAL Normal in local coordinates inout vec3 TANGENT Tangent in local coordinates inout vec3 BINORMAL Binormal in local coordinates out vec4 POSITION If written to overrides final vertex position inout vec2 UV UV main channel inout vec2 UV2 UV secondary channel inout vec4 COLOR Color from vertices out float ROUGHNESS Roughness for vertex lighting inout float POINT_SIZE Point size for point rendering inout mat4 MODELVIEW_MATRIX Model space to view space transform use if possible inout mat3 MODELVIEW_NORMAL_MATRIX in mat4 MODEL_MATRIX Model space to world space transform in mat3 MODEL_NORMAL_MATRIX inout mat4 PROJECTION_MATRIX View space to clip space transform in uvec4 BONE_INDICES in vec4 BONE_WEIGHTS in vec4 CUSTOM0 Custom value from vertex primitive When using extra UVs xy is UV3 and zw is UV4 in vec4 CUSTOM1 Custom value from vertex primitive When using extra UVs xy is UV5 and zw is UV6 in vec4 CUSTOM2 Custom value from vertex primitive When using extra UVs xy is UV7 and zw is UV8 in vec4 CUSTOM3 Custom value from vertex primitive Note MODELVIEW_MATRIX combines both the MODEL_MATRIX and VIEW_MATRIX and is better suited when floating point issues may arise For example if the object is very far away from the world origin you may run into floating point issues when using the separated MODEL_MATRIX and VIEW_MATRIX Note INV_VIEW_MATRIX is the matrix used for rendering the object in that pass not like MAIN_CAM_INV_VIEW_MATRIX which is the matrix of the camera in the scene In the shadow pass INV_VIEW_MATRIX s view is based on the camera that is located at the position of the light Fragment built ins The default use of a Godot fragment processor function is to set up the material properties of your object and to let the built in renderer handle the final shading However you are not required to use all these properties and if you don t write to them Godot will optimize away the corresponding functionality Built in Description in vec2 VIEWPORT_SIZE Size of viewport in pixels in vec4 FRAGCOORD Coordinate of pixel center in screen space xy specifies position in window z specifies fragment depth if DEPTH is not used Origin is lower left in bool FRONT_FACING true if current face is front facing in vec3 VIEW Normalized vector from fragment position to camera in view space This is the same for both perspective and orthogonal cameras in vec2 UV UV that comes from vertex function in vec2 UV2 UV2 that comes from vertex function in vec4 COLOR COLOR that comes from vertex function in vec2 POINT_COORD Point Coordinate for drawing points with POINT_SIZE in bool OUTPUT_IS_SRGB true when output is in sRGB color space this is true in the Compatibility renderer false in Forward and Forward Mobile in mat4 MODEL_MATRIX Model space to world space transform in mat3 MODEL_NORMAL_MATRIX in mat4 VIEW_MATRIX World space to view space transform in mat4 INV_VIEW_MATRIX View space to world space transform in mat4 PROJECTION_MATRIX View space to clip space transform in mat4 INV_PROJECTION_MATRIX Clip space to view space transform in vec3 NODE_POSITION_WORLD Node position in world space in vec3 NODE_POSITION_VIEW Node position in view space in vec3 CAMERA_POSITION_WORLD Camera position in world space in vec3 CAMERA_DIRECTION_WORLD Camera direction in world space in uint CAMERA_VISIBLE_LAYERS Cull layers of the camera rendering the current pass in vec3 VERTEX Vertex that comes from vertex function default in view space inout vec3 LIGHT_VERTEX A writable version of VERTEX that can be used to alter light and shadows Writing to this will not change the position of the fragment in int VIEW_INDEX The view that we are rendering VIEW_MONO_LEFT 0 for Mono not multiview or left eye VIEW_RIGHT 1 for right eye in int VIEW_MONO_LEFT Constant for Mono or left eye always 0 in int VIEW_RIGHT Constant for right eye always 1 in vec3 EYE_OFFSET Position offset for the eye being rendered Only applicable for multiview rendering sampler2D SCREEN_TEXTURE Removed in Godot 4 Use a sampler2D with hint_screen_texture instead in vec2 SCREEN_UV Screen UV coordinate for current pixel sampler2D DEPTH_TEXTURE Removed in Godot 4 Use a sampler2D with hint_depth_texture instead out float DEPTH Custom depth value 0 1 If DEPTH is being written to in any shader branch then you are responsible for setting the DEPTH for all other branches Otherwise the graphics API will leave them uninitialized inout vec3 NORMAL Normal that comes from vertex function default in view space inout vec3 TANGENT Tangent that comes from vertex function inout vec3 BINORMAL Binormal that comes from vertex function out vec3 NORMAL_MAP Set normal here if reading normal from a texture instead of NORMAL out float NORMAL_MAP_DEPTH Depth from variable above Defaults to 1 0 out vec3 ALBEDO Albedo default white out float ALPHA Alpha 0 1 if read from or written to the material will go to the transparent pipeline out float ALPHA_SCISSOR_THRESHOLD If written to values below a certain amount of alpha are discarded out float ALPHA_HASH_SCALE out float ALPHA_ANTIALIASING_EDGE out vec2 ALPHA_TEXTURE_COORDINATE out float METALLIC Metallic 0 1 out float SPECULAR Specular Defaults to 0 5 best not to modify unless you want to change IOR out float ROUGHNESS Roughness 0 1 out float RIM Rim 0 1 If used Godot calculates rim lighting out float RIM_TINT Rim Tint goes from 0 white to 1 albedo If used Godot calculates rim lighting out float CLEARCOAT Small added specular blob If used Godot calculates Clearcoat out float CLEARCOAT_GLOSS Gloss of Clearcoat If used Godot calculates Clearcoat out float ANISOTROPY For distorting the specular blob according to tangent space out vec2 ANISOTROPY_FLOW Distortion direction use with flowmaps out float SSS_STRENGTH Strength of Subsurface Scattering If used Subsurface Scattering will be applied to object out vec4 SSS_TRANSMITTANCE_COLOR out float SSS_TRANSMITTANCE_DEPTH out float SSS_TRANSMITTANCE_BOOST inout vec3 BACKLIGHT out float AO Strength of Ambient Occlusion For use with pre baked AO out float AO_LIGHT_AFFECT How much AO affects lights 0 1 default 0 out vec3 EMISSION Emission color can go over 1 1 1 for HDR out vec4 FOG If written to blends final pixel color with FOG rgb based on FOG a out vec4 RADIANCE If written to blends environment map radiance with RADIANCE rgb based on RADIANCE a out vec4 IRRADIANCE If written to blends environment map IRRADIANCE with IRRADIANCE rgb based on IRRADIANCE a Note Shaders going through the transparent pipeline when ALPHA is written to may exhibit transparency sorting issues Read the transparency sorting section in the 3D rendering limitations page for more information and ways to avoid issues Light built ins Writing light processor functions is completely optional You can skip the light function by setting render_mode to unshaded If no light function is written Godot will use the material properties written to in the fragment function to calculate the lighting for you subject to the render_mode The light function is called for every light in every pixel It is called within a loop for each light type Below is an example of a custom light function using a Lambertian lighting model void light DIFFUSE_LIGHT clamp dot NORMAL LIGHT 0 0 1 0 ATTENUATION LIGHT_COLOR Copy to clipboard If you want the lights to add together add the light contribution to DIFFUSE_LIGHT using rather than overwriting it Warning The light function won t be run if the vertex_lighting render mode is enabled or if Rendering Quality Shading Force Vertex Shading is enabled in the Project Settings It s enabled by default on mobile platforms Built in Description in vec2 VIEWPORT_SIZE Size of viewport in pixels in vec4 FRAGCOORD Coordinate of pixel center in screen space xy specifies position in window z specifies fragment depth if DEPTH is not used Origin is lower left in mat4 MODEL_MATRIX Model space to world space transform in mat4 INV_VIEW_MATRIX View space to world space transform in mat4 VIEW_MATRIX World space to view space transform in mat4 PROJECTION_MATRIX View space to clip space transform in mat4 INV_PROJECTION_MATRIX Clip space to view space transform in vec3 NORMAL Normal vector in view space in vec2 UV UV that comes from vertex function in vec2 UV2 UV2 that comes from vertex function in vec3 VIEW View vector in view space in vec3 LIGHT Light Vector in view space in vec3 LIGHT_COLOR Color of light multiplied by energy PI The PI multiplication is present because physically based lighting models include a division by PI in float SPECULAR_AMOUNT 2 0 light_specular property for OmniLight3D and SpotLight3D 1 0 for DirectionalLight3D in bool LIGHT_IS_DIRECTIONAL true if this pass is a DirectionalLight3D in float ATTENUATION Attenuation based on distance or shadow in vec3 ALBEDO Base albedo in vec3 BACKLIGHT in float METALLIC Metallic in float ROUGHNESS Roughness in bool OUTPUT_IS_SRGB true when output is in sRGB color space this is true in the Compatibility renderer false in Forward and Forward Mobile out vec3 DIFFUSE_LIGHT Diffuse light result out vec3 SPECULAR_LIGHT Specular light result out float ALPHA Alpha 0 1 if written to the material will go to the transparent pipeline Note Shaders going through the transparent pipeline when ALPHA is written to may exhibit transparency sorting issues Read the transparency sorting section in the 3D rendering limitations page for more information and ways to avoid issues Transparent materials also cannot cast shadows or appear in hint_screen_texture and hint_depth_texture uniforms This in turn prevents those materials from appearing in screen space reflections or refraction SDFGI sharp reflections are not visible on transparent materials only rough reflections are visible on transparent materials User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue CanvasItem shaders CanvasItem shaders are used to draw all 2D elements in Godot These include all nodes that inherit from CanvasItems and all GUI elements CanvasItem shaders contain less built in variables and functionality than Spatial shaders but they maintain the same basic structure with vertex fragment and light processor functions Render modes Render mode Description blend_mix Mix blend mode alpha is transparency default blend_add Additive blend mode blend_sub Subtractive blend mode blend_mul Multiplicative blend mode blend_premul_alpha Pre multiplied alpha blend mode blend_disabled Disable blending values including alpha are written as is unshaded Result is just albedo No lighting shading happens in material light_only Only draw on light pass skip_vertex_transform VERTEX needs to be transformed manually in vertex function world_vertex_coords VERTEX is modified in world coordinates instead of local Built ins Values marked as in are read only Values marked as out are for optional writing and will not necessarily contain sensible values Values marked as inout provide a sensible default value and can optionally be written to Samplers are not subjects of writing and they are not marked Global built ins Global built ins are available everywhere including custom functions Built in Description in float TIME Global time since the engine has started in seconds It repeats after every 3 600 seconds which can be changed with the rollover setting It s not affected by time_scale or pausing If you need a TIME variable that can be scaled or paused add your own global shader uniform and update it each frame in float PI A PI constant 3 141592 A ration of circle s circumference to its diameter and amount of radians in half turn in float TAU A TAU constant 6 283185 An equivalent of PI 2 and amount of radians in full turn in float E An E constant 2 718281 Euler s number and a base of the natural logarithm Vertex built ins Vertex data VERTEX is presented in local space pixel coordinates relative to the Node2D s origin If not written to these values will not be modified and be passed through as they came The user can disable the built in model to world transform world to screen and projection will still happen later and do it manually with the following code shader_type canvas_item render_mode skip_vertex_transform void vertex VERTEX MODEL_MATRIX vec4 VERTEX 0 0 1 0 xy Copy to clipboard Other built ins such as UV and COLOR are also passed through to the fragment function if not modified For instancing the INSTANCE_CUSTOM variable contains the instance custom data When using particles this information is usually x Rotation angle in radians y Phase during lifetime 0 to 1 z Animation frame Built in Description in mat4 MODEL_MATRIX Local space to world space transform World space is the coordinates you normally use in the editor in mat4 CANVAS_MATRIX World space to canvas space transform In canvas space the origin is the upper left corner of the screen and coordinates ranging from 0 0 to viewport size in mat4 SCREEN_MATRIX Canvas space to clip space In clip space coordinates ranging from 1 1 to 1 1 in int INSTANCE_ID Instance ID for instancing in vec4 INSTANCE_CUSTOM Instance custom data in bool AT_LIGHT_PASS Always false in vec2 TEXTURE_PIXEL_SIZE Normalized pixel size of default 2D texture For a Sprite2D with a texture of size 64x32px TEXTURE_PIXEL_SIZE vec2 1 64 1 32 inout vec2 VERTEX Vertex in local space in int VERTEX_ID The index of the current vertex in the vertex buffer inout vec2 UV Normalized texture coordinates Range from 0 to 1 inout vec4 COLOR Color from vertex primitive inout float POINT_SIZE Point size for point drawing in vec4 CUSTOM0 Custom value from vertex primitive in vec4 CUSTOM1 Custom value from vertex primitive Fragment built ins Certain Nodes for example Sprite2Ds display a texture by default However when a custom fragment function is attached to these nodes the texture lookup needs to be done manually Godot provides the texture color in the COLOR built in variable multiplied by the node s color To read the texture color by itself you can use COLOR texture TEXTURE UV Copy to clipboard Similarly if a normal map is used in the CanvasTexture Godot uses it by default and assigns its value to the built in NORMAL variable If you are using a normal map meant for use in 3D it will appear inverted In order to use it in your shader you must assign it to the NORMALMAP property Godot will handle converting it for use in 2D and overwriting NORMAL NORMALMAP texture NORMAL_TEXTURE UV rgb Copy to clipboard Built in Description in vec4 FRAGCOORD Coordinate of pixel center In screen space xy specifies position in window Origin is upper left in vec2 SCREEN_PIXEL_SIZE Size of individual pixels Equal to inverse of resolution in vec2 POINT_COORD Coordinate for drawing points sampler2D TEXTURE Default 2D texture in vec2 TEXTURE_PIXEL_SIZE Normalized pixel size of default 2D texture For a Sprite2D with a texture of size 64x32px TEXTURE_PIXEL_SIZE vec2 1 64 1 32 in bool AT_LIGHT_PASS Always false sampler2D SPECULAR_SHININESS_TEXTURE Specular shininess texture of this object in vec4 SPECULAR_SHININESS Specular shininess color as sampled from the texture in vec2 UV UV from vertex function in vec2 SCREEN_UV Screen UV coordinate for current pixel sampler2D SCREEN_TEXTURE Removed in Godot 4 Use a sampler2D with hint_screen_texture instead inout vec3 NORMAL Normal read from NORMAL_TEXTURE Writable sampler2D NORMAL_TEXTURE Default 2D normal texture out vec3 NORMAL_MAP Configures normal maps meant for 3D for use in 2D If used overrides NORMAL out float NORMAL_MAP_DEPTH Normalmap depth for scaling inout vec2 VERTEX Pixel position in screen space inout vec2 SHADOW_VERTEX Same as VERTEX but can be written to alter shadows inout vec3 LIGHT_VERTEX Same as VERTEX but can be written to alter lighting Z component represents height inout vec4 COLOR Color from vertex function multiplied by the TEXTURE color Also output color value Light built ins Light processor functions work differently in Godot 4 x than they did in Godot 3 x In Godot 4 x all lighting is done during the regular draw pass In other words Godot no longer draws the object again for each light Use render_mode unshaded if you do not want the light processor function to run Use render_mode light_only if you only want to see the impact of lighting on an object this can be useful when you only want the object visible where it is covered by light If you define a light function it will replace the built in light function even if your light function is empty Below is an example of a light shader that takes a CanvasItem s normal map into account void light float cNdotL max 0 0 dot NORMAL LIGHT_DIRECTION LIGHT vec4 LIGHT_COLOR rgb COLOR rgb LIGHT_ENERGY cNdotL LIGHT_COLOR a Copy to clipboard Built in Description in vec4 FRAGCOORD Coordinate of pixel center In screen space xy specifies position in window Origin is lower left in vec3 NORMAL Input Normal in vec4 COLOR Input Color This is the output of the fragment function in vec2 UV UV from vertex function equivalent to the UV in the fragment function sampler2D TEXTURE Current texture in use for CanvasItem in vec2 TEXTURE_PIXEL_SIZE Normalized pixel size of TEXTURE For a Sprite2D with a TEXTURE of size 64x32px TEXTURE_PIXEL_SIZE vec2 1 64 1 32 in vec2 SCREEN_UV Screen UV coordinate for current pixel in vec2 POINT_COORD UV for Point Sprite in vec4 LIGHT_COLOR Color of Light multiplied by Light s texture in float LIGHT_ENERGY Energy multiplier of Light in vec3 LIGHT_POSITION Position of Light in screen space If using a DirectionalLight2D this is always vec3 0 0 0 in vec3 LIGHT_DIRECTION Direction of Light in screen space in bool LIGHT_IS_DIRECTIONAL true if this pass is a DirectionalLight2D in vec3 LIGHT_VERTEX Pixel position in screen space as modified in the fragment function inout vec4 LIGHT Output color for this Light in vec4 SPECULAR_SHININESS Specular shininess as set in the object s texture out vec4 SHADOW_MODULATE Multiply shadows cast at this point by this color SDF functions There are a few additional functions implemented to sample an automatically generated Signed Distance Field texture These functions available for Fragment and Light functions of CanvasItem shaders The signed distance field is generated from LightOccluder2D nodes present in the scene with the SDF Collision property enabled which is the default See the 2D lights and shadows documentation for more information Function Description float texture_sdf vec2 sdf_pos Performs an SDF texture lookup vec2 texture_sdf_normal vec2 sdf_pos Calculates a normal from the SDF texture vec2 sdf_to_screen_uv vec2 sdf_pos Converts an SDF to screen UV vec2 screen_uv_to_sdf vec2 uv Converts screen UV to an SDF User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Particle shaders Particle shaders are a special type of shader that runs before the object is drawn They are used for calculating material properties such as color position and rotation They are drawn with any regular material for CanvasItem or Spatial depending on whether they are 2D or 3D Particle shaders are unique because they are not used to draw the object itself they are used to calculate particle properties which are then used by a CanvasItem or Spatial shader They contain two processor functions start and process Unlike other shader types particle shaders keep the data that was output the previous frame Therefore particle shaders can be used for complex effects that take place over multiple frames Note Particle shaders are only available with GPU based particle nodes GPUParticles2D and GPUParticles3D CPU based particle nodes CPUParticles2D and CPUParticles3D are rendered on the GPU which means they can use custom CanvasItem or Spatial shaders but their motion is simulated on the CPU Render modes Render mode Description keep_data Do not clear previous data on restart disable_force Disable attractor force disable_velocity Ignore VELOCITY value collision_use_scale Scale the particle s size for collisions Built ins Values marked as in are read only Values marked as out are for optional writing and will not necessarily contain sensible values Values marked as inout provide a sensible default value and can optionally be written to Samplers are not subjects of writing and they are not marked Global built ins Global built ins are available everywhere including custom functions Built in Description in float TIME Global time since the engine has started in seconds It repeats after every 3 600 seconds which can be changed with the rollover setting It s not affected by time_scale or pausing If you need a TIME variable that can be scaled or paused add your own global shader uniform and update it each frame in float PI A PI constant 3 141592 A ration of circle s circumference to its diameter and amount of radians in half turn in float TAU A TAU constant 6 283185 An equivalent of PI 2 and amount of radians in full turn in float E An E constant 2 718281 Euler s number and a base of the natural logarithm Start and Process built ins These properties can be accessed from both the start and process functions Function Description in float LIFETIME Particle lifetime in float DELTA Delta process time in uint NUMBER Unique number since emission start in uint INDEX Particle index from total particles in mat4 EMISSION_TRANSFORM Emitter transform used for non local systems in uint RANDOM_SEED Random seed used as base for random inout bool ACTIVE true when the particle is active can be set false inout vec4 COLOR Particle color can be written to and accessed in mesh s vertex function inout vec3 VELOCITY Particle velocity can be modified inout mat4 TRANSFORM Particle transform inout vec4 CUSTOM Custom particle data Accessible from shader of mesh as INSTANCE_CUSTOM inout float MASS Particle mass intended to be used with attractors Equals 1 0 by default in vec4 USERDATAX Vector that enables the integration of supplementary user defined data into the particle process shader USERDATAX are six built ins identified by number X can be numbers between 1 and 6 in uint FLAG_EMIT_POSITION A flag for using on the last argument of emit_subparticle function to assign a position to a new particle s transform in uint FLAG_EMIT_ROT_SCALE A flag for using on the last argument of emit_subparticle function to assign the rotation and scale to a new particle s transform in uint FLAG_EMIT_VELOCITY A flag for using on the last argument of emit_subparticle function to assign a velocity to a new particle in uint FLAG_EMIT_COLOR A flag for using on the last argument of emit_subparticle function to assign a color to a new particle in uint FLAG_EMIT_CUSTOM A flag for using on the last argument of emit_subparticle function to assign a custom data vector to a new particle in vec3 EMITTER_VELOCITY Velocity of the Particles node in float INTERPOLATE_TO_END Value of interp_to_end property of Particles node in uint AMOUNT_RATIO Value of amount_ratio property of Particles node Note In order to use the COLOR variable in a StandardMaterial3D set vertex_color_use_as_albedo to true In a ShaderMaterial access it with the COLOR variable Start built ins Built in Description in bool RESTART_POSITION true if particle is restarted or emitted without a custom position i e this particle was created by emit_subparticle without the FLAG_EMIT_POSITION flag in bool RESTART_ROT_SCALE true if particle is restarted or emitted without a custom rotation or scale i e this particle was created by emit_subparticle without the FLAG_EMIT_ROT_SCALE flag in bool RESTART_VELOCITY true if particle is restarted or emitted without a custom velocity i e this particle was created by emit_subparticle without the FLAG_EMIT_VELOCITY flag in bool RESTART_COLOR true if particle is restarted or emitted without a custom color i e this particle was created by emit_subparticle without the FLAG_EMIT_COLOR flag in bool RESTART_CUSTOM true if particle is restarted or emitted without a custom property i e this particle was created by emit_subparticle without the FLAG_EMIT_CUSTOM flag Process built ins Built in Description in bool RESTART true if the current process frame is first for the particle in bool COLLIDED true when the particle has collided with a particle collider in vec3 COLLISION_NORMAL A normal of the last collision If there is no collision detected it is equal to vec3 0 0 in float COLLISION_DEPTH A length of normal of the last collision If there is no collision detected it is equal to 0 0 in vec3 ATTRACTOR_FORCE A combined force of the attractors at the moment on that particle Process functions emit_subparticle is currently the only custom function supported by particles shaders It allows users to add a new particle with specified parameters from a sub emitter The newly created particle will only use the properties that match the flags parameter For example the following code will emit a particle with a specified position velocity and color but unspecified rotation scale and custom value mat4 custom_transform mat4 1 0 custom_transform 3 xyz vec3 10 5 0 0 4 0 emit_subparticle custom_transform vec3 1 0 0 5 1 0 vec4 1 0 0 0 0 0 1 0 vec4 1 0 FLAG_EMIT_POSITION FLAG_EMIT_VELOCITY FLAG_EMIT_COLOR Copy to clipboard Function Description bool emit_subparticle mat4 xform vec3 velocity vec4 color vec4 custom uint flags Emits a particle from a sub emitter User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Sky shaders Sky shaders are a special type of shader used for drawing sky backgrounds and for updating radiance cubemaps which are used for image based lighting IBL Sky shaders only have one processing function the sky function There are three places the sky shader is used First the sky shader is used to draw the sky when you have selected to use a Sky as the background in your scene Second the sky shader is used to update the radiance cubemap when using the Sky for ambient color or reflections Third the sky shader is used to draw the lower res subpasses which can be used in the high res background or cubemap pass In total this means the sky shader can run up to six times per frame however in practice it will be much less than that because the radiance cubemap does not need to be updated every frame and not all subpasses will be used You can change the behavior of the shader based on where it is called by checking the AT_ _PASS booleans For example shader_type sky void sky if AT_CUBEMAP_PASS Sets the radiance cubemap to a nice shade of blue instead of doing expensive sky calculations COLOR vec3 0 2 0 6 1 0 else Do expensive sky calculations for background sky only COLOR get_sky_color EYEDIR Copy to clipboard When using the sky shader to draw a background the shader will be called for all non occluded fragments on the screen However for the background s subpasses the shader will be called for every pixel of the subpass When using the sky shader to update the radiance cubemap the sky shader will be called for every pixel in the cubemap On the other hand the shader will only be called when the radiance cubemap needs to be updated The radiance cubemap needs to be updated when any of the shader parameters are updated For example if TIME is used in the shader then the radiance cubemap will update every frame The following list of changes force an update of the radiance cubemap TIME is used POSITION is used and the camera position changes If any LIGHTX_ properties are used and any DirectionalLight3D changes If any uniform is changed in the shader If the screen is resized and either of the subpasses are used Try to avoid updating the radiance cubemap needlessly If you do need to update the radiance cubemap each frame make sure your Sky process mode is set to REALTIME Note that the process mode only affects the rendering of the radiance cubemap The visible sky is always rendered by calling the fragment shader for every pixel With complex fragment shaders this can result in a high rendering overhead If the sky is static the conditions listed above are met or changes slowly running the full fragment shader every frame is not needed This can be avoided by rendering the full sky into the radiance cubemap and reading from this cubemap when rendering the visible sky With a completely static sky this means that it needs to be rendered only once The following code renders the full sky into the radiance cubemap and reads from that cubemap for displaying the visible sky shader_type sky void sky if AT_CUBEMAP_PASS vec3 dir EYEDIR vec4 col vec4 0 0 Complex color calculation COLOR col xyz ALPHA 1 0 else COLOR texture RADIANCE EYEDIR rgb Copy to clipboard This way the complex calculations happen only in the cubemap pass which can be optimized by setting the sky s process mode and the radiance size to get the desired balance between performance and visual fidelity Render modes Subpasses allow you to do more expensive calculations at a lower resolution to speed up your shaders For example the following code renders clouds at a lower resolution than the rest of the sky shader_type sky render_mode use_half_res_pass void sky if AT_HALF_RES_PASS Run cloud calculation for 1 4 of the pixels vec4 color generate_clouds EYEDIR COLOR color rgb ALPHA color a else At full resolution pass blend sky and clouds together vec3 color generate_sky EYEDIR COLOR color HALF_RES_COLOR rgb HALF_RES_COLOR a Copy to clipboard Render mode Description use_half_res_pass Allows the shader to write to and access the half resolution pass use_quarter_res_pass Allows the shader to write to and access the quarter resolution pass disable_fog If used fog will not affect the sky Built ins Values marked as in are read only Values marked as out are for optional writing and will not necessarily contain sensible values Samplers cannot be written to so they are not marked Global built ins Global built ins are available everywhere including in custom functions There are 4 LIGHTX lights accessed as LIGHT0 LIGHT1 LIGHT2 and LIGHT3 Built in Description in float TIME Global time since the engine has started in seconds It repeats after every 3 600 seconds which can be changed with the rollover setting It s not affected by time_scale or pausing If you need a TIME variable that can be scaled or paused add your own global shader uniform and update it each frame in vec3 POSITION Camera position in world space samplerCube RADIANCE Radiance cubemap Can only be read from during background pass Check AT_CUBEMAP_PASS before using in bool AT_HALF_RES_PASS Currently rendering to half resolution pass in bool AT_QUARTER_RES_PASS Currently rendering to quarter resolution pass in bool AT_CUBEMAP_PASS Currently rendering to radiance cubemap in bool LIGHTX_ENABLED LightX is visible and in the scene If false other light properties may be garbage in float LIGHTX_ENERGY Energy multiplier for LIGHTX in vec3 LIGHTX_DIRECTION Direction that LIGHTX is facing in vec3 LIGHTX_COLOR Color of LIGHTX in float LIGHTX_SIZE Angular diameter of LIGHTX in the sky Expressed in radians For reference the sun from earth is about 0087 radians 0 5 degrees in float PI A PI constant 3 141592 A ratio of a circle s circumference to its diameter and amount of radians in half turn in float TAU A TAU constant 6 283185 An equivalent of PI 2 and amount of radians in full turn in float E An E constant 2 718281 Euler s number and a base of the natural logarithm Sky built ins Built in Description in vec3 EYEDIR Normalized direction of current pixel Use this as your basic direction for procedural effects in vec2 SCREEN_UV Screen UV coordinate for current pixel Used to map a texture to the full screen in vec2 SKY_COORDS Sphere UV Used to map a panorama texture to the sky in vec4 HALF_RES_COLOR Color value of corresponding pixel from half resolution pass Uses linear filter in vec4 QUARTER_RES_COLOR Color value of corresponding pixel from quarter resolution pass Uses linear filter out vec3 COLOR Output color out float ALPHA Output alpha value can only be used in subpasses out vec4 FOG User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Fog shaders Fog shaders are used to define how fog is added or subtracted from a scene in a given area Fog shaders are always used together with FogVolumes and volumetric fog Fog shaders only have one processing function the fog function The resolution of the fog shaders depends on the resolution of the volumetric fog froxel grid Accordingly the level of detail that a fog shader can add depends on how close the FogVolume is to the camera Fog shaders are a special form of compute shader that is called once for every froxel that is touched by an axis aligned bounding box of the associated FogVolume This means that froxels that just barely touch a given FogVolume will still be used Built ins Values marked as in are read only Values marked as out are for optional writing and will not necessarily contain sensible values Samplers cannot be written to so they are not marked Global built ins Global built ins are available everywhere including in custom functions Built in Description in float TIME Global time since the engine has started in seconds It repeats after every 3 600 seconds which can be changed with the rollover setting It s not affected by time_scale or pausing If you need a TIME variable that can be scaled or paused add your own global shader uniform and update it each frame in float PI A PI constant 3 141592 A ratio of a circle s circumference to its diameter and amount of radians in half turn in float TAU A TAU constant 6 283185 An equivalent of PI 2 and amount of radians in full turn in float E An E constant 2 718281 Euler s number and a base of the natural logarithm Fog built ins All of the output values of fog volumes overlap one another This allows FogVolumes to be rendered efficiently as they can all be drawn at once Built in Description in vec3 WORLD_POSITION Position of current froxel cell in world space in vec3 OBJECT_POSITION Position of the center of the current FogVolume in world space in vec3 UVW 3 dimensional uv used to map a 3D texture to the current FogVolume in vec3 SIZE Size of the current FogVolume when its shape has a size in vec3 SDF Signed distance field to the surface of the FogVolume Negative if inside volume positive otherwise out vec3 ALBEDO Output base color value interacts with light to produce final color Only written to fog volume if used out float DENSITY Output density value Can be negative to allow subtracting one volume from another Density must be used for fog shader to write anything at all out vec3 EMISSION Output emission color value added to color during light pass to produce final color Only written to fog volume if used User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Your first shader This tutorial series will walk you through writing your first shader It is intended for people who have very little prior experience with shaders and want to get started with the basics This tutorial will not cover advanced topics and it is not comprehensive For a comprehensive and detailed overview of shaders in Godot see the Shading Reference Page The your first shader tutorials walk you through the process of writing a shader step by step For a more general introduction into shaders and the OpenGL Shading Language use The Book of Shaders Your first 2D shader Your first 3D shader Your second 3D shader Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Your first 2D shader Introduction Shaders are special programs that execute on the GPU and are used for rendering graphics All modern rendering is done with shaders For a more detailed description of what shaders are please see What are shaders This tutorial will focus on the practical aspects of writing shader programs by walking you through the process of writing a shader with both vertex and fragment functions This tutorial targets absolute beginners to shaders Note If you have experience writing shaders and are just looking for an overview of how shaders work in Godot see the Shading Reference Setup CanvasItem shaders are used to draw all 2D objects in Godot while Spatial shaders are used to draw all 3D objects In order to use a shader it must be attached inside a Material which must be attached to an object Materials are a type of Resource To draw multiple objects with the same material the material must be attached to each object All objects derived from a CanvasItem have a material property This includes all GUI elements Sprite2Ds TileMapLayers MeshInstance2Ds etc They also have an option to inherit their parent s material This can be useful if you have a large number of nodes that you want to use the same material To begin create a Sprite2D node You can use any CanvasItem so long as it is drawing to the canvas so for this tutorial we will use a Sprite2D as it is the easiest CanvasItem to start drawing with In the Inspector click beside Texture where it says empty and select Load then select icon svg For new projects this is the Godot icon You should now see the icon in the viewport Next look down in the Inspector under the CanvasItem section click beside Material and select New ShaderMaterial This creates a new Material resource Click on the sphere that appears Godot currently doesn t know whether you are writing a CanvasItem Shader or a Spatial Shader and it previews the output of spatial shaders So what you are seeing is the output of the default Spatial Shader Click beside Shader and select New Shader Finally click on the shader you just created and the shader editor will open You are now ready to begin writing your first shader Your first CanvasItem shader In Godot all shaders start with a line specifying what type of shader they are It uses the following format shader_type canvas_item Copy to clipboard Because we are writing a CanvasItem shader we specify canvas_item in the first line All our code will go beneath this declaration This line tells the engine which built in variables and functionality to supply you with In Godot you can override three functions to control how the shader operates vertex fragment and light This tutorial will walk you through writing a shader with both vertex and fragment functions Light functions are significantly more complex than vertex and fragment functions and so will not be covered here Your first fragment function The fragment function runs for every pixel in a Sprite2D and determines what color that pixel should be They are restricted to the pixels covered by the Sprite2D that means you cannot use one to for example create an outline around a Sprite2D The most basic fragment function does nothing except assign a single color to every pixel We do so by writing a vec4 to the built in variable COLOR vec4 is shorthand for constructing a vector with 4 numbers For more information about vectors see the Vector math tutorial COLOR is both an input variable to the fragment function and the final output from it void fragment COLOR vec4 0 4 0 6 0 9 1 0 Copy to clipboard Congratulations You re done You have successfully written your first shader in Godot Now let s make things more complex There are many inputs to the fragment function that you can use for calculating COLOR UV is one of them UV coordinates are specified in your Sprite2D without you knowing it and they tell the shader where to read from textures for each part of the mesh In the fragment function you can only read from UV but you can use it in other functions or to assign values to COLOR directly UV varies between 0 1 from left right and from top bottom void fragment COLOR vec4 UV 0 5 1 0 Copy to clipboard Using TEXTURE built in The default fragment function reads from the set Sprite2D texture and displays it When you want to adjust a color in a Sprite2D you can adjust the color from the texture manually like in the code below void fragment This shader will result in a blue tinted icon COLOR b 1 0 Copy to clipboard Certain nodes like Sprite2Ds have a dedicated texture variable that can be accessed in the shader using TEXTURE If you want to use the Sprite2D texture to combine with other colors you can use the UV with the texture function to access this variable Use them to redraw the Sprite2D with the texture void fragment COLOR texture TEXTURE UV Read from texture again COLOR b 1 0 set blue channel to 1 0 Copy to clipboard Uniform input Uniform input is used to pass data into a shader that will be the same across the entire shader You can use uniforms by defining them at the top of your shader like so uniform float size Copy to clipboard For more information about usage see the Shading Language doc Add a uniform to change the amount of blue in our Sprite2D uniform float blue 1 0 you can assign a default value to uniforms void fragment COLOR texture TEXTURE UV Read from texture COLOR b blue Copy to clipboard Now you can change the amount of blue in the Sprite2D from the editor Look back at the Inspector under where you created your shader You should see a section called Shader Param Unfold that section and you will see the uniform you just declared If you change the value in the editor it will overwrite the default value you provided in the shader Interacting with shaders from code You can change uniforms from code using the function set_shader_parameter which is called on the node s material resource With a Sprite2D node the following code can be used to set the blue uniform GDScript C var blue_value 1 0 material set_shader_parameter blue blue_value Copy to clipboard var blueValue 1 0 ShaderMaterial Material SetShaderParameter blue blueValue Copy to clipboard Note that the name of the uniform is a string The string must match exactly with how it is written in the shader including spelling and case Your first vertex function Now that we have a fragment function let s write a vertex function Use the vertex function to calculate where on the screen each vertex should end up The most important variable in the vertex function is VERTEX Initially it specifies the vertex coordinates in your model but you also write to it to determine where to actually draw those vertices VERTEX is a vec2 that is initially presented in local space i e not relative to the camera viewport or parent nodes You can offset the vertices by directly adding to VERTEX void vertex VERTEX vec2 10 0 0 0 Copy to clipboard Combined with the TIME built in variable this can be used for basic animation void vertex Animate Sprite2D moving in big circle around its location VERTEX vec2 cos TIME 100 0 sin TIME 100 0 Copy to clipboard Conclusion At their core shaders do what you have seen so far they compute VERTEX and COLOR It is up to you to dream up more complex mathematical strategies for assigning values to those variables For inspiration take a look at some of the more advanced shader tutorials and look at other sites like Shadertoy and The Book of Shaders User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Your first 3D shader You have decided to start writing your own custom Spatial shader Maybe you saw a cool trick online that was done with shaders or you have found that the StandardMaterial3D isn t quite meeting your needs Either way you have decided to write your own and now you need to figure out where to start This tutorial will explain how to write a Spatial shader and will cover more topics than the CanvasItem tutorial Spatial shaders have more built in functionality than CanvasItem shaders The expectation with spatial shaders is that Godot has already provided the functionality for common use cases and all the user needs to do in the shader is set the proper parameters This is especially true for a PBR physically based rendering workflow This is a two part tutorial In this first part we will create terrain using vertex displacement from a heightmap in the vertex function In the second part we will take the concepts from this tutorial and set up custom materials in a fragment shader by writing an ocean water shader Note This tutorial assumes some basic shader knowledge such as types vec2 float sampler2D and functions If you are uncomfortable with these concepts it is best to get a gentle introduction from The Book of Shaders before completing this tutorial Where to assign my material In 3D objects are drawn using Meshes Meshes are a resource type that store geometry the shape of your object and materials the color and how the object reacts to light in units called surfaces A Mesh can have multiple surfaces or just one Typically you would import a mesh from another program e g Blender But Godot also has a few PrimitiveMeshes that allow you to add basic geometry to a scene without importing Meshes There are multiple node types that you can use to draw a mesh The main one is MeshInstance3D but you can also use GPUParticles3D MultiMeshes with a MultiMeshInstance3D or others Typically a material is associated with a given surface in a mesh but some nodes like MeshInstance3D allow you to override the material for a specific surface or for all surfaces If you set a material on the surface or mesh itself then all MeshInstance3Ds that share that mesh will share that material However if you want to reuse the same mesh across multiple mesh instances but have different materials for each instance then you should set the material on the MeshInstance3D For this tutorial we will set our material on the mesh itself rather than taking advantage of the MeshInstance3D s ability to override materials Setting up Add a new MeshInstance3D node to your scene In the inspector tab beside Mesh click empty and select New PlaneMesh Then click on the image of a plane that appears This adds a PlaneMesh to our scene Then in the viewport click in the upper left corner on the button that says Perspective A menu will appear In the middle of the menu are options for how to display the scene Select Display Wireframe This will allow you to see the triangles making up the plane Now set Subdivide Width and Subdivide Depth of the PlaneMesh to 32 You can see that there are now many more triangles in the MeshInstance3D This will give us more vertices to work with and thus allow us to add more detail PrimitiveMeshes like PlaneMesh only have one surface so instead of an array of materials there is only one Click beside Material where it says empty and select New ShaderMaterial Then click the sphere that appears Now click beside Shader where it says empty and select New Shader The shader editor should now pop up and you are ready to begin writing your first Spatial shader Shader magic The new shader is already generated with a shader_type variable and the fragment function The first thing Godot shaders need is a declaration of what type of shader they are In this case the shader_type is set to spatial because this is a spatial shader shader_type spatial Copy to clipboard For now ignore the fragment function and define the vertex function The vertex function determines where the vertices of your MeshInstance3D appear in the final scene We will be using it to offset the height of each vertex and make our flat plane appear like a little terrain We define the vertex shader like so void vertex Copy to clipboard With nothing in the vertex function Godot will use its default vertex shader We can easily start to make changes by adding a single line void vertex VERTEX y cos VERTEX x sin VERTEX z Copy to clipboard Adding this line you should get an image like the one below Okay let s unpack this The y value of the VERTEX is being increased And we are passing the x and z components of the VERTEX as arguments to cos and sin that gives us a wave like appearance across the x and z axes What we want to achieve is the look of little hills after all cos and sin already look kind of like hills We do so by scaling the inputs to the cos and sin functions void vertex VERTEX y cos VERTEX x 4 0 sin VERTEX z 4 0 Copy to clipboard This looks better but it is still too spiky and repetitive let s make it a little more interesting Noise heightmap Noise is a very popular tool for faking the look of terrain Think of it as similar to the cosine function where you have repeating hills except with noise each hill has a different height Godot provides the NoiseTexture2D resource for generating a noise texture that can be accessed from a shader To access a texture in a shader add the following code near the top of your shader outside the vertex function uniform sampler2D noise Copy to clipboard This will allow you to send a noise texture to the shader Now look in the inspector under your material You should see a section called Shader Params If you open it up you ll see a section called noise Click beside it where it says empty and select New NoiseTexture2D Then in your NoiseTexture2D click beside where it says Noise and select New FastNoiseLite Note FastNoiseLite is used by the NoiseTexture2D to generate a heightmap Once you set it up and should look like this Now access the noise texture using the texture function texture takes a texture as the first argument and a vec2 for the position on the texture as the second argument We use the x and z channels of VERTEX to determine where on the texture to look up Note that the PlaneMesh coordinates are within the 1 1 range for a size of 2 while the texture coordinates are within 0 1 so to normalize we divide by the size of the PlaneMesh by 2 0 and add 0 5 texture returns a vec4 of the r g b a channels at the position Since the noise texture is grayscale all of the values are the same so we can use any one of the channels as the height In this case we ll use the r or x channel void vertex float height texture noise VERTEX xz 2 0 0 5 x VERTEX y height Copy to clipboard Note xyzw is the same as rgba in GLSL so instead of texture x above we could use texture r See the OpenGL documentation for more details Using this code you can see the texture creates random looking hills Right now it is too spiky we want to soften the hills a bit To do that we will use a uniform You already used a uniform above to pass in the noise texture now let s learn how they work Uniforms Uniform variables allow you to pass data from the game into the shader They are very useful for controlling shader effects Uniforms can be almost any datatype that can be used in the shader To use a uniform you declare it in your Shader using the keyword uniform Let s make a uniform that changes the height of the terrain uniform float height_scale 0 5 Copy to clipboard Godot lets you initialize a uniform with a value here height_scale is set to 0 5 You can set uniforms from GDScript by calling the function set_shader_parameter on the material corresponding to the shader The value passed from GDScript takes precedence over the value used to initialize it in the shader called from the MeshInstance3D mesh material set_shader_parameter height_scale 0 5 Copy to clipboard Note Changing uniforms in Spatial based nodes is different from CanvasItem based nodes Here we set the material inside the PlaneMesh resource In other mesh resources you may need to first access the material by calling surface_get_material While in the MeshInstance3D you would access the material using get_surface_material or material_override Remember that the string passed into set_shader_parameter must match the name of the uniform variable in the Shader You can use the uniform variable anywhere inside your Shader Here we will use it to set the height value instead of arbitrarily multiplying by 0 5 VERTEX y height height_scale Copy to clipboard Now it looks much better Using uniforms we can even change the value every frame to animate the height of the terrain Combined with Tweens this can be especially useful for animations Interacting with light First turn wireframe off To do so click in the upper left of the Viewport again where it says Perspective and select Display Normal Additionally in the 3D scene toolbar turn off preview sunlight Note how the mesh color goes flat This is because the lighting on it is flat Let s add a light First we will add an OmniLight3D to the scene You can see the light affecting the terrain but it looks odd The problem is the light is affecting the terrain as if it were a flat plane This is because the light shader uses the normals from the Mesh to calculate light The normals are stored in the Mesh but we are changing the shape of the Mesh in the shader so the normals are no longer correct To fix this we can recalculate the normals in the shader or use a normal texture that corresponds to our noise Godot makes both easy for us You can calculate the new normal manually in the vertex function and then just set NORMAL With NORMAL set Godot will do all the difficult lighting calculations for us We will cover this method in the next part of this tutorial for now we will read normals from a texture Instead we will rely on the NoiseTexture again to calculate normals for us We do that by passing in a second noise texture uniform sampler2D normalmap Copy to clipboard Set this second uniform texture to another NoiseTexture2D with another FastNoiseLite But this time check As Normalmap Now because this is a normalmap and not a per vertex normal we are going to assign it in the fragment function The fragment function will be explained in more detail in the next part of this tutorial void fragment Copy to clipboard When we have normals that correspond to a specific vertex we set NORMAL but if you have a normalmap that comes from a texture set the normal using NORMAL_MAP This way Godot will handle the wrapping of texture around the mesh automatically Lastly in order to ensure that we are reading from the same places on the noise texture and the normalmap texture we are going to pass the VERTEX xz position from the vertex function to the fragment function We do that with varyings Above the vertex define a vec2 called tex_position And inside the vertex function assign VERTEX xz to tex_position varying vec2 tex_position void vertex tex_position VERTEX xz 2 0 0 5 float height texture noise tex_position x Copy to clipboard And now we can access tex_position from the fragment function void fragment NORMAL_MAP texture normalmap tex_position xyz Copy to clipboard With the normals in place the light now reacts to the height of the mesh dynamically We can even drag the light around and the lighting will update automatically Here is the full code for this tutorial You can see it is not very long as Godot handles most of the difficult stuff for you shader_type spatial uniform float height_scale 0 5 uniform sampler2D noise uniform sampler2D normalmap varying vec2 tex_position void vertex tex_position VERTEX xz 2 0 0 5 float height texture noise tex_position x VERTEX y height height_scale void fragment NORMAL_MAP texture normalmap tex_position xyz Copy to clipboard That is everything for this part Hopefully you now understand the basics of vertex shaders in Godot In the next part of this tutorial we will write a fragment function to accompany this vertex function and we will cover a more advanced technique to turn this terrain into an ocean of moving waves User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Your second 3D shader From a high level what Godot does is give the user a bunch of parameters that can be optionally set AO SSS_Strength RIM etc These parameters correspond to different complex effects Ambient Occlusion SubSurface Scattering Rim Lighting etc When not written to the code is thrown out before it is compiled and so the shader does not incur the cost of the extra feature This makes it easy for users to have complex PBR correct shading without writing complex shaders Of course Godot also allows you to ignore all these parameters and write a fully customized shader For a full list of these parameters see the spatial shader reference doc A difference between the vertex function and a fragment function is that the vertex function runs per vertex and sets properties such as VERTEX position and NORMAL while the fragment shader runs per pixel and most importantly sets the ALBEDO color of the MeshInstance3D Your first spatial fragment function As mentioned in the previous part of this tutorial The standard use of the fragment function in Godot is to set up different material properties and let Godot handle the rest In order to provide even more flexibility Godot also provides things called render modes Render modes are set at the top of the shader directly below shader_type and they specify what sort of functionality you want the built in aspects of the shader to have For example if you do not want to have lights affect an object set the render mode to unshaded render_mode unshaded Copy to clipboard You can also stack multiple render modes together For example if you want to use toon shading instead of more realistic PBR shading set the diffuse mode and specular mode to toon render_mode diffuse_toon specular_toon Copy to clipboard This model of built in functionality allows you to write complex custom shaders by changing only a few parameters For a full list of render modes see the Spatial shader reference In this part of the tutorial we will walk through how to take the bumpy terrain from the previous part and turn it into an ocean First let s set the color of the water We do that by setting ALBEDO ALBEDO is a vec3 that contains the color of the object Let s set it to a nice shade of blue void fragment ALBEDO vec3 0 1 0 3 0 5 Copy to clipboard We set it to a very dark shade of blue because most of the blueness of the water will come from reflections from the sky The PBR model that Godot uses relies on two main parameters METALLIC and ROUGHNESS ROUGHNESS specifies how smooth rough the surface of a material is A low ROUGHNESS will make a material appear like a shiny plastic while a high roughness makes the material appear more solid in color METALLIC specifies how much like a metal the object is It is better set close to 0 or 1 Think of METALLIC as changing the balance between the reflection and the ALBEDO color A high METALLIC almost ignores ALBEDO altogether and looks like a mirror of the sky While a low METALLIC has a more equal representation of sky color and ALBEDO color ROUGHNESS increases from 0 to 1 from left to right while METALLIC increase from 0 to 1 from top to bottom Note METALLIC should be close to 0 or 1 for proper PBR shading Only set it between them for blending between materials Water is not a metal so we will set its METALLIC property to 0 0 Water is also highly reflective so we will set its ROUGHNESS property to be quite low as well void fragment METALLIC 0 0 ROUGHNESS 0 01 ALBEDO vec3 0 1 0 3 0 5 Copy to clipboard Now we have a smooth plastic looking surface It is time to think about some particular properties of water that we want to emulate There are two main ones that will take this from a weird plastic surface to nice stylized water The first is specular reflections Specular reflections are those bright spots you see from where the sun reflects directly into your eye The second is fresnel reflectance Fresnel reflectance is the property of objects to become more reflective at shallow angles It is the reason why you can see into water below you but farther away it reflects the sky In order to increase the specular reflections we will do two things First we will change the render mode for specular to toon because the toon render mode has larger specular highlights render_mode specular_toon Copy to clipboard Second we will add rim lighting Rim lighting increases the effect of light at glancing angles Usually it is used to emulate the way light passes through fabric on the edges of an object but we will use it here to help achieve a nice watery effect void fragment RIM 0 2 METALLIC 0 0 ROUGHNESS 0 01 ALBEDO vec3 0 1 0 3 0 5 Copy to clipboard In order to add fresnel reflectance we will compute a fresnel term in our fragment shader Here we aren t going to use a real fresnel term for performance reasons Instead we ll approximate it using the dot product of the NORMAL and VIEW vectors The NORMAL vector points away from the mesh s surface while the VIEW vector is the direction between your eye and that point on the surface The dot product between them is a handy way to tell when you are looking at the surface head on or at a glancing angle float fresnel sqrt 1 0 dot NORMAL VIEW Copy to clipboard And mix it into both ROUGHNESS and ALBEDO This is the benefit of ShaderMaterials over StandardMaterial3Ds With StandardMaterial3D we could set these properties with a texture or to a flat number But with shaders we can set them based on any mathematical function that we can dream up void fragment float fresnel sqrt 1 0 dot NORMAL VIEW RIM 0 2 METALLIC 0 0 ROUGHNESS 0 01 1 0 fresnel ALBEDO vec3 0 1 0 3 0 5 0 1 fresnel Copy to clipboard And now with only 5 lines of code you can have complex looking water Now that we have lighting this water is looking too bright Let s darken it This is done easily by decreasing the values of the vec3 we pass into ALBEDO Let s set them to vec3 0 01 0 03 0 05 Animating with TIME Going back to the vertex function we can animate the waves using the built in variable TIME TIME is a built in variable that is accessible from the vertex and fragment functions In the last tutorial we calculated height by reading from a heightmap For this tutorial we will do the same Put the heightmap code in a function called height float height vec2 position return texture noise position 10 0 x Scaling factor is based on mesh size this PlaneMesh is 10 10 Copy to clipboard In order to use TIME in the height function we need to pass it in float height vec2 position float time Copy to clipboard And make sure to correctly pass it in inside the vertex function void vertex vec2 pos VERTEX xz float k height pos TIME VERTEX y k Copy to clipboard Instead of using a normalmap to calculate normals We are going to compute them manually in the vertex function To do so use the following line of code NORMAL normalize vec3 k height pos vec2 0 1 0 0 TIME 0 1 k height pos vec2 0 0 0 1 TIME Copy to clipboard We need to compute NORMAL manually because in the next section we will be using math to create complex looking waves Now we are going to make the height function a little more complicated by offsetting position by the cosine of TIME float height vec2 position float time vec2 offset 0 01 cos position time return texture noise position 10 0 offset x Copy to clipboard This results in waves that move slowly but not in a very natural way The next section will dig deeper into using shaders to create more complex effects in this case realistic waves by adding a few more mathematical functions Advanced effects waves What makes shaders so powerful is that you can achieve complex effects by using math To illustrate this we are going to take our waves to the next level by modifying the height function and by introducing a new function called wave wave has one parameter position which is the same as it is in height We are going to call wave multiple times in height in order to fake the way waves look float wave vec2 position position texture noise position 10 0 x 2 0 1 0 vec2 wv 1 0 abs sin position return pow 1 0 pow wv x wv y 0 65 4 0 Copy to clipboard At first this looks complicated So let s go through it line by line position texture noise position 10 0 x 2 0 1 0 Copy to clipboard Offset the position by the noise texture This will make the waves curve so they won t be straight lines completely aligned with the grid vec2 wv 1 0 abs sin position Copy to clipboard Define a wave like function using sin and position Normally sin waves are very round We use abs to absolute to give them a sharp ridge and constrain them to the 0 1 range And then we subtract it from 1 0 to put the peak on top return pow 1 0 pow wv x wv y 0 65 4 0 Copy to clipboard Multiply the x directional wave by the y directional wave and raise it to a power to sharpen the peaks Then subtract that from 1 0 so that the ridges become peaks and raise that to a power to sharpen the ridges We can now replace the contents of our height function with wave float height vec2 position float time float h wave position return h Copy to clipboard Using this you get The shape of the sin wave is too obvious So let s spread the waves out a bit We do this by scaling position float height vec2 position float time float h wave position 0 4 return h Copy to clipboard Now it looks much better We can do even better if we layer multiple waves on top of each other at varying frequencies and amplitudes What this means is that we are going to scale position for each one to make the waves thinner or wider frequency And we are going to multiply the output of the wave to make them shorter or taller amplitude Here is an example for how you could layer the four waves to achieve nicer looking waves float height vec2 position float time float d wave position time 0 4 0 3 d wave position time 0 3 0 3 d wave position time 0 5 0 2 d wave position time 0 6 0 2 return d Copy to clipboard Note that we add time to two and subtract it from the other two This makes the waves move in different directions creating a complex effect Also note that the amplitudes the number the result is multiplied by all add up to 1 0 This keeps the wave in the 0 1 range With this code you should end up with more complex looking waves and all you had to do was add a bit of math For more information about Spatial shaders read the Shading Language doc and the Spatial Shaders doc Also look at more advanced tutorials in the Shading section and the 3D sections User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Shader materials Introduction For the most common cases Godot provides ready to use materials for most types of shaders such as StandardMaterial3D CanvasItemMaterial and ParticleProcessMaterial They are flexible implementations that cover most use cases Shader materials allow writing a custom shader directly for maximum flexibility Examples of this are Create procedural textures Create complex texture blending effects Create animated materials or materials that change over time Create refractive effects or other advanced effects Create special lighting shaders for more exotic materials Animate vertices like tree leaves or grass Create custom particle code And much more Godot provides built in functionality to make frequent operations easier Additionally Godot s shader editor will detect errors as you type so you can see your edited shaders in real time It is also possible to edit shaders using a visual node based graph editor Creating a ShaderMaterial Create a new ShaderMaterial in some object of your choice Go to the Material property and create a ShaderMaterial Next click on the shader material to see its properties From here you can create a shader or visual shader Regular shaders use code to set their properties while a visual shader uses a node based workflow If you need to you can convert a visual shader to a text shader However you can t convert a text shader to a visual shader Choose one of them and you can start editing your shader If you create a regular shader click on it and the shader editor will open If you create a visual shader the visual shader editor will open automatically In the visual shader editor you can click a button and see what your visual shader looks like as shader code This can be useful if you re trying to replicate a text shader as nodes or it can be used as a preview for converting your visual shader to a text shader Note To learn more about visual shaders read Using VisualShaders Converting to ShaderMaterial It is possible to convert from StandardMaterial3D CanvasItemMaterial and ParticleProcessMaterial to ShaderMaterial To do so go to the material properties and select the convert option Note Using the convert option will turn the StandardMaterial3D into a ShaderMaterial with a text shader not a visual shader User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using VisualShaders VisualShaders are the visual alternative for creating shaders As shaders are inherently linked to visuals the graph based approach with previews of textures materials etc offers a lot of additional convenience compared to purely script based shaders On the other hand VisualShaders do not expose all features of the shader script and using both in parallel might be necessary for specific effects Note If you are not familiar with shaders start by reading Introduction to shaders Creating a VisualShader VisualShaders can be created in any ShaderMaterial To begin using VisualShaders create a new ShaderMaterial in an object of your choice Then assign a Shader resource to the Shader property Click on the new Shader resource and the Create Shader dialog will open automatically Change the Type option to VisualShader in the dropdown then give it a name Click on the visual shader you just created to open the Shader Editor The layout of the Shader Editor comprises two parts the upper toolbar and the graph itself From left to right in the toolbar The Add Node button displays a popup menu to let you add nodes to the shader graph The drop down menu is the shader type Vertex Fragment and Light Like for script shaders it defines what built in nodes will be available The following buttons and number input control the zooming level grid snapping and distance between grid lines in pixels The toggle controls if the graph minimap in the bottom right of the editor is visible or not The automatically arrange selected nodes button will try to organize any nodes you have selected as efficiently and cleanly as possible The Manage Varyings button opens a dropdown that lets you add or remove a varying The last icon shows the generated shader code corresponding to your graph Note Although VisualShaders do not require coding they share the same logic with script shaders It is advised to learn the basics of both to have a good understanding of the shading pipeline The visual shader graph is converted to a script shader behind the scene and you can see this code by pressing the last button in the toolbar This can be convenient to understand what a given node does and how to reproduce it in scripts Using the Visual Shader Editor By default every new VisualShader will have an output node Every node connection ends at one of the output node s sockets A node is the basic unit to create your shader To add a new node click on the Add Node button on the upper left corner or right click on any empty location in the graph and a menu will pop up This popup has the following properties If you right click on the graph this menu will be called at the cursor position and the created node in that case will also be placed under that position otherwise it will be created at the graph s center It can be resized horizontally and vertically allowing more content to be shown Size transform and tree content position are saved between the calls so if you suddenly closed the popup you can easily restore its previous state The Expand All and Collapse All options in the drop down option menu can be used to easily list the available nodes You can also drag and drop nodes from the popup onto the graph While the popup has nodes sorted in categories it can seem overwhelming at first Try to add some of the nodes plug them in the output socket and observe what happens When connecting any scalar output to a vector input all components of the vector will take the value of the scalar When connecting any vector output to a scalar input the value of the scalar will be the average of the vector s components Visual Shader node interface Visual shader nodes have input and output ports The input ports are located on the left side of the node and output ports are located on the right side of the node These ports are colored to differentiate type of port Port types Type Color Description Example Scalar Gray Scalar is a single value Vector Purple Vector is a set of values Boolean Green On or off true or false Transform Pink A matrix usually used to transform vertices Sampler Orange A texture sampler It can be used to sample textures All of the types are used in the calculations of vertices fragments and lights in the shader For example matrix multiplication vector addition or scalar division There are other types but these are the main ones Visual Shader nodes Below are some special nodes that are worth knowing about The list is not exhaustive and might be expanded with more nodes and examples Expression node The Expression node allows you to write Godot Shading Language GLSL like expressions inside your visual shaders The node has buttons to add any amount of required input and output ports and can be resized You can also set up the name and type of each port The expression you have entered will apply immediately to the material once the focus leaves the expression text box Any parsing or compilation errors will be printed to the Output tab The outputs are initialized to their zero value by default The node is located under the Special tab and can be used in all shader modes The possibilities of this node are almost limitless you can write complex procedures and use all the power of text based shaders such as loops the discard keyword extended types etc For example Reroute node The Reroute node is used purely for organizational purposes In a complicated shader with many nodes you may find that the paths between nodes can make things hard to read Reroute as its name suggests allows you to adjust the path between nodes to make things easier to read You can even have multiple reroute nodes for a single path which can be used to make right angles To move a reroute node move your mouse cursor above it and grab the handle that appears Fresnel node The Fresnel node is designed to accept normal and view vectors and produces a scalar which is the saturated dot product between them Additionally you can setup the inversion and the power of equation The Fresnel node is great for adding a rim like lighting effect to objects Boolean node The Boolean node can be converted to Scalar or Vector to represent 0 or 1 and 0 0 0 or 1 1 1 respectively This property can be used to enable or disable some effect parts with one click If node The If node allows you to setup a vector which will be returned the result of the comparison between a and b There are three vectors which can be returned a b in that case the tolerance parameter is provided as a comparison threshold by default it is equal to the minimal value i e 0 00001 a b and a b Switch node The Switch node returns a vector if the boolean condition is true or false Boolean was introduced above If you convert a vector to a true boolean all components of the vector should be above zero User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using compute shaders This tutorial will walk you through the process of creating a minimal compute shader But first a bit of background on compute shaders and how they work with Godot Note This tutorial assumes you are familiar with shaders generally If you are new to shaders please read Introduction to shaders and your first shader before proceeding with this tutorial A compute shader is a special type of shader program that is orientated towards general purpose programming In other words they are more flexible than vertex shaders and fragment shaders as they don t have a fixed purpose i e transforming vertices or writing colors to an image Unlike fragment shaders and vertex shaders compute shaders have very little going on behind the scenes The code you write is what the GPU runs and very little else This can make them a very useful tool to offload heavy calculations to the GPU Now let s get started by creating a short compute shader First in the external text editor of your choice create a new file called compute_example glsl in your project folder When you write compute shaders in Godot you write them in GLSL directly The Godot shader language is based on GLSL If you are familiar with normal shaders in Godot the syntax below will look somewhat familiar Note Compute shaders can only be used from RenderingDevice based renderers the Forward or Mobile renderer To follow along with this tutorial ensure that you are using the Forward or Mobile renderer The setting for which is located in the top right hand corner of the editor Note that compute shader support is generally poor on mobile devices due to driver bugs even if they are technically supported Let s take a look at this compute shader code compute version 450 Invocations in the x y z dimension layout local_size_x 2 local_size_y 1 local_size_z 1 in A binding to the buffer we create in our script layout set 0 binding 0 std430 restrict buffer MyDataBuffer float data my_data_buffer The code we want to execute in each invocation void main gl_GlobalInvocationID x uniquely identifies this invocation across all work groups my_data_buffer data gl_GlobalInvocationID x 2 0 Copy to clipboard This code takes an array of floats multiplies each element by 2 and store the results back in the buffer array Now let s look at it line by line compute version 450 Copy to clipboard These two lines communicate two things The following code is a compute shader This is a Godot specific hint that is needed for the editor to properly import the shader file The code is using GLSL version 450 You should never have to change these two lines for your custom compute shaders Invocations in the x y z dimension layout local_size_x 2 local_size_y 1 local_size_z 1 in Copy to clipboard Next we communicate the number of invocations to be used in each workgroup Invocations are instances of the shader that are running within the same workgroup When we launch a compute shader from the CPU we tell it how many workgroups to run Workgroups run in parallel to each other While running one workgroup you cannot access information in another workgroup However invocations in the same workgroup can have some limited access to other invocations Think about workgroups and invocations as a giant nested for loop for int x 0 x workgroup_size_x x for int y 0 y workgroup_size_y y for int z 0 z workgroup_size_z z Each workgroup runs independently and in parallel for int local_x 0 local_x invocation_size_x local_x for int local_y 0 local_y invocation_size_y local_y for int local_z 0 local_z invocation_size_z local_z Compute shader runs here Copy to clipboard Workgroups and invocations are an advanced topic For now remember that we will be running two invocations per workgroup A binding to the buffer we create in our script layout set 0 binding 0 std430 restrict buffer MyDataBuffer float data my_data_buffer Copy to clipboard Here we provide information about the memory that the compute shader will have access to The layout property allows us to tell the shader where to look for the buffer we will need to match these set and binding positions from the CPU side later The restrict keyword tells the shader that this buffer is only going to be accessed from one place in this shader In other words we won t bind this buffer in another set or binding index This is important as it allows the shader compiler to optimize the shader code Always use restrict when you can This is an unsized buffer which means it can be any size So we need to be careful not to read from an index larger than the size of the buffer The code we want to execute in each invocation void main gl_GlobalInvocationID x uniquely identifies this invocation across all work groups my_data_buffer data gl_GlobalInvocationID x 2 0 Copy to clipboard Finally we write the main function which is where all the logic happens We access a position in the storage buffer using the gl_GlobalInvocationID built in variables gl_GlobalInvocationID gives you the global unique ID for the current invocation To continue write the code above into your newly created compute_example glsl file Create a local RenderingDevice To interact with and execute a compute shader we need a script Create a new script in the language of your choice and attach it to any Node in your scene Now to execute our shader we need a local RenderingDevice which can be created using the RenderingServer GDScript C Create a local rendering device var rd RenderingServer create_local_rendering_device Copy to clipboard Create a local rendering device var rd RenderingServer CreateLocalRenderingDevice Copy to clipboard After that we can load the newly created shader file compute_example glsl and create a precompiled version of it using this GDScript C Load GLSL shader var shader_file load res compute_example glsl var shader_spirv RDShaderSPIRV shader_file get_spirv var shader rd shader_create_from_spirv shader_spirv Copy to clipboard Load GLSL shader var shaderFile GD Load RDShaderFile res compute_example glsl var shaderBytecode shaderFile GetSpirV var shader rd ShaderCreateFromSpirV shaderBytecode Copy to clipboard Warning Local RenderingDevices cannot be debugged using tools such as RenderDoc Provide input data As you might remember we want to pass an input array to our shader multiply each element by 2 and get the results We need to create a buffer to pass values to a compute shader We are dealing with an array of floats so we will use a storage buffer for this example A storage buffer takes an array of bytes and allows the CPU to transfer data to and from the GPU So let s initialize an array of floats and create a storage buffer GDScript C Prepare our data We use floats in the shader so we need 32 bit var input PackedFloat32Array 1 2 3 4 5 6 7 8 9 10 var input_bytes input to_byte_array Create a storage buffer that can hold our float values Each float has 4 bytes 32 bit so 10 x 4 40 bytes var buffer rd storage_buffer_create input_bytes size input_bytes Copy to clipboard Prepare our data We use floats in the shader so we need 32 bit var input new float 1 2 3 4 5 6 7 8 9 10 var inputBytes new byte input Length sizeof float Buffer BlockCopy input 0 inputBytes 0 inputBytes Length Create a storage buffer that can hold our float values Each float has 4 bytes 32 bit so 10 x 4 40 bytes var buffer rd StorageBufferCreate uint inputBytes Length inputBytes Copy to clipboard With the buffer in place we need to tell the rendering device to use this buffer To do that we will need to create a uniform like in normal shaders and assign it to a uniform set which we can pass to our shader later GDScript C Create a uniform to assign the buffer to the rendering device var uniform RDUniform new uniform uniform_type RenderingDevice UNIFORM_TYPE_STORAGE_BUFFER uniform binding 0 this needs to match the binding in our shader file uniform add_id buffer var uniform_set rd uniform_set_create uniform shader 0 the last parameter the 0 needs to match the set in our shader file Copy to clipboard Create a uniform to assign the buffer to the rendering device var uniform new RDUniform UniformType RenderingDevice UniformType StorageBuffer Binding 0 uniform AddId buffer var uniformSet rd UniformSetCreate new Array RDUniform uniform shader 0 Copy to clipboard Defining a compute pipeline The next step is to create a set of instructions our GPU can execute We need a pipeline and a compute list for that The steps we need to do to compute our result are Create a new pipeline Begin a list of instructions for our GPU to execute Bind our compute list to our pipeline Bind our buffer uniform to our pipeline Specify how many workgroups to use End the list of instructions GDScript C Create a compute pipeline var pipeline rd compute_pipeline_create shader var compute_list rd compute_list_begin rd compute_list_bind_compute_pipeline compute_list pipeline rd compute_list_bind_uniform_set compute_list uniform_set 0 rd compute_list_dispatch compute_list 5 1 1 rd compute_list_end Copy to clipboard Create a compute pipeline var pipeline rd ComputePipelineCreate shader var computeList rd ComputeListBegin rd ComputeListBindComputePipeline computeList pipeline rd ComputeListBindUniformSet computeList uniformSet 0 rd ComputeListDispatch computeList xGroups 5 yGroups 1 zGroups 1 rd ComputeListEnd Copy to clipboard Note that we are dispatching the compute shader with 5 work groups in the X axis and one in the others Since we have 2 local invocations in the X axis specified in our shader 10 compute shader invocations will be launched in total If you read or write to indices outside of the range of your buffer you may access memory outside of your shaders control or parts of other variables which may cause issues on some hardware Execute a compute shader After all of this we are almost done but we still need to execute our pipeline So far we have only recorded what we would like the GPU to do we have not actually run the shader program To execute our compute shader we need to submit the pipeline to the GPU and wait for the execution to finish GDScript C Submit to GPU and wait for sync rd submit rd sync Copy to clipboard Submit to GPU and wait for sync rd Submit rd Sync Copy to clipboard Ideally you would not call sync to synchronize the RenderingDevice right away as it will cause the CPU to wait for the GPU to finish working In our example we synchronize right away because we want our data available for reading right away In general you will want to wait at least 2 or 3 frames before synchronizing so that the GPU is able to run in parallel with the CPU Warning Long computations can cause Windows graphics drivers to crash due to TDR being triggered by Windows This is a mechanism that reinitializes the graphics driver after a certain amount of time has passed without any activity from the graphics driver usually 5 to 10 seconds Depending on the duration your compute shader takes to execute you may need to split it into multiple dispatches to reduce the time each dispatch takes and reduce the chances of triggering a TDR Given TDR is time dependent slower GPUs may be more prone to TDRs when running a given compute shader compared to a faster GPU Retrieving results You may have noticed that in the example shader we modified the contents of the storage buffer In other words the shader read from our array and stored the data in the same array again so our results are already there Let s retrieve the data and print the results to our console GDScript C Read back the data from the buffer var output_bytes rd buffer_get_data buffer var output output_bytes to_float32_array print Input input print Output output Copy to clipboard Read back the data from the buffers var outputBytes rd BufferGetData buffer var output new float input Length Buffer BlockCopy outputBytes 0 output 0 outputBytes Length GD Print Input string Join input GD Print Output string Join output Copy to clipboard With that you have everything you need to get started working with compute shaders See also The demo projects repository contains a Compute Shader Heightmap demo This project performs heightmap image generation on the CPU and GPU separately which lets you compare how a similar algorithm can be implemented in two different ways with the GPU implementation being faster in most cases User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Screen reading shaders Introduction It is often desired to make a shader that reads from the same screen to which it s writing 3D APIs such as OpenGL or DirectX make this very difficult because of internal hardware limitations GPUs are extremely parallel so reading and writing causes all sorts of cache and coherency problems As a result not even the most modern hardware supports this properly The workaround is to make a copy of the screen or a part of the screen to a back buffer and then read from it while drawing Godot provides a few tools that make this process easy Screen texture Godot Shading language has a special texture to access the already rendered contents of the screen It is used by specifying a hint when declaring a sampler2D uniform hint_screen_texture A special built in varying SCREEN_UV can be used to obtain the UV relative to the screen for the current fragment As a result this canvas_item fragment shader results in an invisible object because it only shows what lies behind shader_type canvas_item uniform sampler2D screen_texture hint_screen_texture repeat_disable filter_nearest void fragment COLOR textureLod screen_texture SCREEN_UV 0 0 Copy to clipboard textureLod is used here as we only want to read from the bottom mipmap If you want to read from a blurred version of the texture instead you can increase the third argument to textureLod and change the hint filter_nearest to filter_nearest_mipmap or any other filter with mipmaps enabled If using a filter with mipmaps Godot will automatically calculate the blurred texture for you Warning If the filter mode is not changed to a filter mode that contains mipmap in its name textureLod with an LOD parameter greater than 0 0 will have the same appearance as with the 0 0 LOD parameter Screen texture example The screen texture can be used for many things There is a special demo for Screen Space Shaders that you can download to see and learn One example is a simple shader to adjust brightness contrast and saturation shader_type canvas_item uniform sampler2D screen_texture hint_screen_texture repeat_disable filter_nearest uniform float brightness 1 0 uniform float contrast 1 0 uniform float saturation 1 0 void fragment vec3 c textureLod screen_texture SCREEN_UV 0 0 rgb c rgb mix vec3 0 0 c rgb brightness c rgb mix vec3 0 5 c rgb contrast c rgb mix vec3 dot vec3 1 0 c rgb 0 33333 c rgb saturation COLOR rgb c Copy to clipboard Behind the scenes While this seems magical it s not In 2D when hint_screen_texture is first found in a node that is about to be drawn Godot does a full screen copy to a back buffer Subsequent nodes that use it in shaders will not have the screen copied for them because this ends up being inefficient In 3D the screen is copied after the opaque geometry pass but before the transparent geometry pass so transparent objects will not be captured in the screen texture As a result in 2D if shaders that use hint_screen_texture overlap the second one will not use the result of the first one resulting in unexpected visuals In the above image the second sphere top right is using the same source for the screen texture as the first one below so the first one disappears or is not visible In 2D this can be corrected via the BackBufferCopy node which can be instantiated between both spheres BackBufferCopy can work by either specifying a screen region or the whole screen With correct back buffer copying the two spheres blend correctly Warning In 3D materials that use hint_screen_texture are considered transparent themselves and will not appear in the resulting screen texture of other materials If you plan to instance a scene that uses a material with hint_screen_texture you will need to use a BackBufferCopy node In 3D there is less flexibility to solve this particular issue because the screen texture is only captured once Be careful when using the screen texture in 3D as it won t capture transparent objects and may capture some opaque objects that are in front of the object using the screen texture You can reproduce the back buffer logic in 3D by creating a Viewport with a camera in the same position as your object and then use the Viewport s texture instead of the screen texture Back buffer logic So to make it clearer here s how the backbuffer copying logic works in 2D in Godot If a node uses hint_screen_texture the entire screen is copied to the back buffer before drawing that node This only happens the first time subsequent nodes do not trigger this If a BackBufferCopy node was processed before the situation in the point above even if hint_screen_texture was not used the behavior described in the point above does not happen In other words automatic copying of the entire screen only happens if hint_screen_texture is used in a node for the first time and no BackBufferCopy node not disabled was found before in tree order BackBufferCopy can copy either the entire screen or a region If set to only a region not the whole screen and your shader uses pixels not in the region copied the result of that read is undefined most likely garbage from previous frames In other words it s possible to use BackBufferCopy to copy back a region of the screen and then read the screen texture from a different region Avoid this behavior Depth texture For 3D shaders it s also possible to access the screen depth buffer For this the hint_depth_texture hint is used This texture is not linear it must be converted using the inverse projection matrix The following code retrieves the 3D position below the pixel being drawn uniform sampler2D depth_texture hint_depth_texture repeat_disable filter_nearest void fragment float depth textureLod depth_texture SCREEN_UV 0 0 r vec4 upos INV_PROJECTION_MATRIX vec4 SCREEN_UV 2 0 1 0 depth 1 0 vec3 pixel_position upos xyz upos w Copy to clipboard Normal roughness texture Note Normal roughness texture is only supported in the Forward rendering method not Mobile or Compatibility Similarly the normal roughness texture can be used to read the normals and roughness of objects rendered in the depth prepass The normal is stored in the xyz channels mapped to the 0 1 range while the roughness is stored in the w channel uniform sampler2D normal_roughness_texture hint_normal_roughness_texture repeat_disable filter_nearest void fragment float screen_roughness texture normal_roughness_texture SCREEN_UV w vec3 screen_normal texture normal_roughness_texture SCREEN_UV xyz screen_normal screen_normal 2 0 1 0 Copy to clipboard Redefining screen textures The screen texture hints hint_screen_texture hint_depth_texture and hint_normal_roughness_texture can be used with multiple uniforms For example you may want to read from the texture multiple times with a different repeat flag or filter flag The following example shows a shader that reads the screen space normal with linear filtering but reads the screen space roughness using nearest neighbor filtering uniform sampler2D normal_roughness_texture hint_normal_roughness_texture repeat_disable filter_nearest uniform sampler2D normal_roughness_texture2 hint_normal_roughness_texture repeat_enable filter_linear void fragment float screen_roughness texture normal_roughness_texture SCREEN_UV w vec3 screen_normal texture normal_roughness_texture2 SCREEN_UV xyz screen_normal screen_normal 2 0 1 0 Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Converting GLSL to Godot shaders This document explains the differences between Godot s shading language and GLSL and gives practical advice on how to migrate shaders from other sources such as Shadertoy and The Book of Shaders into Godot shaders For detailed information on Godot s shading language please refer to the Shading Language reference GLSL Godot uses a shading language based on GLSL with the addition of a few quality of life features Accordingly most features available in GLSL are available in Godot s shading language Shader programs In GLSL each shader uses a separate program You have one program for the vertex shader and one for the fragment shader In Godot you have a single shader that contains a vertex and or a fragment function If you only choose to write one Godot will supply the other Godot allows uniform variables and functions to be shared by defining the fragment and vertex shaders in one file In GLSL the vertex and fragment programs cannot share variables except when varyings are used Vertex attributes In GLSL you can pass in per vertex information using attributes and have the flexibility to pass in as much or as little as you want In Godot you have a set number of input attributes including VERTEX position COLOR UV UV2 NORMAL Each shaders page in the shader reference section of the documentation comes with a complete list of its vertex attributes gl_Position gl_Position receives the final position of a vertex specified in the vertex shader It is specified by the user in clip space Typically in GLSL the model space vertex position is passed in using a vertex attribute called position and you handle the conversion from model space to clip space manually In Godot VERTEX specifies the vertex position in model space at the beginning of the vertex function Godot also handles the final conversion to clip space after the user defined vertex function is run If you want to skip the conversion from model to view space you can set the render_mode to skip_vertex_transform If you want to skip all transforms set render_mode to skip_vertex_transform and set the PROJECTION_MATRIX to mat4 1 0 in order to nullify the final transform from view space to clip space Varyings Varyings are a type of variable that can be passed from the vertex shader to the fragment shader In modern GLSL 3 0 and up varyings are defined with the in and out keywords A variable going out of the vertex shader is defined with out in the vertex shader and in inside the fragment shader Main In GLSL each shader program looks like a self contained C style program Accordingly the main entry point is main If you are copying a vertex shader rename main to vertex and if you are copying a fragment shader rename main to fragment Macros The Godot shader preprocessor supports the following macros define undef if elif else endif defined ifdef ifndef include only gdshaderinc files and with a maximum depth of 25 pragma disable_preprocessor which disables preprocessing for the rest of the file Variables GLSL has many built in variables that are hard coded These variables are not uniforms so they are not editable from the main program Variable Type Equivalent Description gl_FragColor out vec4 COLOR Output color for each pixel gl_FragCoord vec4 FRAGCOORD For full screen quads For smaller quads use UV gl_Position vec4 VERTEX Position of Vertex output from Vertex Shader gl_PointSize float POINT_SIZE Size of Point primitive gl_PointCoord vec2 POINT_COORD Position on point when drawing Point primitives gl_FrontFacing bool FRONT_FACING True if front face of primitive Coordinates gl_FragCoord in GLSL and FRAGCOORD in the Godot shading language use the same coordinate system If using UV in Godot the y coordinate will be flipped upside down Precision In GLSL you can define the precision of a given type float or int at the top of the shader with the precision keyword In Godot you can set the precision of individual variables as you need by placing precision qualifiers lowp mediump and highp before the type when defining the variable For more information see the Shading Language reference Shadertoy Shadertoy is a website that makes it easy to write fragment shaders and create pure magic Shadertoy does not give the user full control over the shader It handles all the input and uniforms and only lets the user write the fragment shader Types Shadertoy uses the webgl spec so it runs a slightly different version of GLSL However it still has the regular types including constants and macros mainImage The main point of entry to a Shadertoy shader is the mainImage function mainImage has two parameters fragColor and fragCoord which correspond to COLOR and FRAGCOORD in Godot respectively These parameters are handled automatically in Godot so you do not need to include them as parameters yourself Anything in the mainImage function should be copied into the fragment function when porting to Godot Variables In order to make writing fragment shaders straightforward and easy Shadertoy handles passing a lot of helpful information from the main program into the fragment shader for you A few of these have no equivalents in Godot because Godot has chosen not to make them available by default This is okay because Godot gives you the ability to make your own uniforms For variables whose equivalents are listed as Provide with Uniform users are responsible for creating that uniform themselves The description gives the reader a hint about what they can pass in as a substitute Variable Type Equivalent Description fragColor out vec4 COLOR Output color for each pixel fragCoord vec2 FRAGCOORD xy For full screen quads For smaller quads use UV iResolution vec3 1 0 SCREEN_PIXEL_SIZE Can also pass in manually iTime float TIME Time since shader started iTimeDelta float Provide with Uniform Time to render previous frame iFrame float Provide with Uniform Frame number iChannelTime 4 float Provide with Uniform Time since that particular texture started iMouse vec4 Provide with Uniform Mouse position in pixel coordinates iDate vec4 Provide with Uniform Current date expressed in seconds iChannelResolution 4 vec3 1 0 TEXTURE_PIXEL_SIZE Resolution of particular texture iChanneli Sampler2D TEXTURE Godot provides only one built in user can make more Coordinates fragCoord behaves the same as gl_FragCoord in GLSL and FRAGCOORD in Godot The Book of Shaders Similar to Shadertoy The Book of Shaders provides access to a fragment shader in the web browser with which the user may interact The user is restricted to writing fragment shader code with a set list of uniforms passed in and with no ability to add additional uniforms For further help on porting shaders to various frameworks generally The Book of Shaders provides a page on running shaders in various frameworks Types The Book of Shaders uses the webgl spec so it runs a slightly different version of GLSL However it still has the regular types including constants and macros Main The entry point for a Book of Shaders fragment shader is main just like in GLSL Everything written in a Book of Shaders main function should be copied into Godot s fragment function Variables The Book of Shaders sticks closer to plain GLSL than Shadertoy does It also implements fewer uniforms than Shadertoy Variable Type Equivalent Description gl_FragColor out vec4 COLOR Output color for each pixel gl_FragCoord vec4 FRAGCOORD For full screen quads For smaller quads use UV u_resolution vec2 1 0 SCREEN_PIXEL_SIZE Can also pass in manually u_time float TIME Time since shader started u_mouse vec2 Provide with Uniform Mouse position in pixel coordinates Coordinates The Book of Shaders uses the same coordinate system as GLSL User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Shaders style guide This style guide lists conventions to write elegant shaders The goal is to encourage writing clean readable code and promote consistency across projects discussions and tutorials Hopefully this will also support the development of auto formatting tools Since the Godot shader language is close to C style languages and GLSL this guide is inspired by Godot s own GLSL formatting You can view examples of GLSL files in Godot s source code here Style guides aren t meant as hard rulebooks At times you may not be able to apply some of the guidelines below When that happens use your best judgment and ask fellow developers for insights In general keeping your code consistent in your projects and within your team is more important than following this guide to a tee Note Godot s built in shader editor uses a lot of these conventions by default Let it help you Here is a complete shader example based on these guidelines shader_type canvas_item Screen space shader to adjust a 2D scene s brightness contrast and saturation Taken from https github com godotengine godot demo projects blob master 2d screen_space_shaders shaders BCS gdshader uniform sampler2D screen_texture hint_screen_texture filter_linear_mipmap uniform float brightness 0 8 uniform float contrast 1 5 uniform float saturation 1 8 void fragment vec3 c textureLod screen_texture SCREEN_UV 0 0 rgb c rgb mix vec3 0 0 c rgb brightness c rgb mix vec3 0 5 c rgb contrast c rgb mix vec3 dot vec3 1 0 c rgb 0 33333 c rgb saturation COLOR rgb c Copy to clipboard Formatting Encoding and special characters Use line feed LF characters to break lines not CRLF or CR editor default Use one line feed character at the end of each file editor default Use UTF 8 encoding without a byte order mark editor default Use Tabs instead of spaces for indentation editor default Indentation Each indent level should be one tab greater than the block containing it Good void fragment COLOR vec3 1 0 1 0 1 0 Copy to clipboard Bad void fragment COLOR vec3 1 0 1 0 1 0 Copy to clipboard Use 2 indent levels to distinguish continuation lines from regular code blocks Good vec2 st vec2 atan NORMAL x NORMAL z acos NORMAL y Copy to clipboard Bad vec2 st vec2 atan NORMAL x NORMAL z acos NORMAL y Copy to clipboard Line breaks and blank lines For a general indentation rule follow the 1TBS Style which recommends placing the brace associated with a control statement on the same line Always use braces for statements even if they only span one line This makes them easier to refactor and avoids mistakes when adding more lines to an if statement or similar Good void fragment if true Copy to clipboard Bad void fragment if true Copy to clipboard Blank lines Surround function definitions with one and only one blank line void do_something void fragment Copy to clipboard Use one and only one blank line inside functions to separate logical sections Line length Keep individual lines of code under 100 characters If you can try to keep lines under 80 characters This helps to read the code on small displays and with two shaders opened side by side in an external text editor For example when looking at a differential revision One statement per line Never combine multiple statements on a single line Good void fragment ALBEDO vec3 1 0 EMISSION vec3 1 0 Copy to clipboard Bad void fragment ALBEDO vec3 1 0 EMISSION vec3 1 0 Copy to clipboard The only exception to that rule is the ternary operator void fragment bool should_be_white true ALBEDO should_be_white vec3 1 0 vec3 0 0 Copy to clipboard Comment spacing Regular comments should start with a space but not code that you comment out This helps differentiate text comments from disabled code Good This is a comment return Copy to clipboard Bad This is a comment return Copy to clipboard Don t use multiline comment syntax if your comment can fit on a single line This is another comment Copy to clipboard Note In the shader editor to make the selected code a comment or uncomment it press Ctrl K This feature adds or removes at the start of the selected lines Documentation comments Use the following format for documentation comments above uniforms with two leading asterisks and follow up asterisks on every line This is a documentation comment These lines will appear in the inspector when hovering the shader parameter named Something You can use b BBCode b i formatting i in the comment uniform int something 1 Copy to clipboard These comments will appear when hovering a property in the inspector If you don t wish the comment to be visible in the inspector use the standard comment syntax instead or with only one leading asterisk Whitespace Always use one space around operators and after commas Also avoid extraneous spaces in function calls Good COLOR r 5 0 COLOR r COLOR g 0 1 COLOR b some_function 1 0 2 0 Copy to clipboard Bad COLOR r 5 0 COLOR r COLOR g 0 1 COLOR b some_function 1 0 2 0 Copy to clipboard Don t use spaces to align expressions vertically ALBEDO r 1 0 EMISSION r 1 0 Copy to clipboard Floating point numbers Always specify at least one digit for both the integer and fractional part This makes it easier to distinguish floating point numbers from integers as well as distinguishing numbers greater than 1 from those lower than 1 Good void fragment ALBEDO rgb vec3 5 0 0 1 0 2 Copy to clipboard Bad void fragment ALBEDO rgb vec3 5 1 2 Copy to clipboard Accessing vector members Use r g b and a when accessing a vector s members if it contains a color If the vector contains anything else than a color use x y z and w This allows those reading your code to better understand what the underlying data represents Good COLOR rgb vec3 5 0 0 1 0 2 Copy to clipboard Bad COLOR xyz vec3 5 0 0 1 0 2 Copy to clipboard Naming conventions These naming conventions follow the Godot Engine style Breaking these will make your code clash with the built in naming conventions leading to inconsistent code Functions and variables Use snake_case to name functions and variables void some_function float some_variable 0 5 Copy to clipboard Constants Write constants with CONSTANT_CASE that is to say in all caps with an underscore _ to separate words const float GOLDEN_RATIO 1 618 Copy to clipboard Preprocessor directives Shader preprocessor directives should be written in CONSTANT__CASE Directives should be written without any indentation before them even if nested within a function To preserve the natural flow of indentation when shader errors are printed to the console extra indentation should not be added within if ifdef or ifndef blocks Good define HEIGHTMAP_ENABLED void fragment vec2 position vec2 1 0 2 0 ifdef HEIGHTMAP_ENABLED sample_heightmap position endif Copy to clipboard Bad define heightmap_enabled void fragment vec2 position vec2 1 0 2 0 ifdef heightmap_enabled sample_heightmap position endif Copy to clipboard Code order We suggest to organize shader code this way 01 shader type declaration 02 render mode declaration 03 docstring 04 uniforms 05 constants 06 varyings 07 other functions 08 vertex function 09 fragment function 10 light function Copy to clipboard We optimized the order to make it easy to read the code from top to bottom to help developers reading the code for the first time understand how it works and to avoid errors linked to the order of variable declarations This code order follows two rules of thumb Metadata and properties first followed by methods Public comes before private In a shader language s context public refers to what s easily adjustable by the user uniforms Local variables Declare local variables as close as possible to their first use This makes it easier to follow the code without having to scroll too much to find where the variable was declared User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using a SubViewport as a texture Introduction This tutorial will introduce you to using the SubViewport as a texture that can be applied to 3D objects In order to do so it will walk you through the process of making a procedural planet like the one below Note This tutorial does not cover how to code a dynamic atmosphere like the one this planet has This tutorial assumes you are familiar with how to set up a basic scene including a Camera3D a light source a MeshInstance3D with a Primitive Mesh and applying a StandardMaterial3D to the mesh The focus will be on using the SubViewport to dynamically create textures that can be applied to the mesh In this tutorial we ll cover the following topics How to use a SubViewport as a render texture Mapping a texture to a sphere with equirectangular mapping Fragment shader techniques for procedural planets Setting a Roughness map from a Viewport Texture Setting up the scene Create a new scene and add the following nodes exactly as shown below Go into the the MeshInstance3D and make the mesh a SphereMesh Setting up the SubViewport Click on the SubViewport node and set its size to 1024 512 The SubViewport can actually be any size so long as the width is double the height The width needs to be double the height so that the image will accurately map onto the sphere as we will be using equirectangular projection but more on that later Next disable 3D We will be using a ColorRect to render the surface so we don t need 3D either Select the ColorRect and in the inspector set the anchors preset to Full Rect This will ensure that the ColorRect takes up the entire SubViewport Next we add a Shader Material to the ColorRect ColorRect CanvasItem Material Material New ShaderMaterial Note Basic familiarity with shading is recommended for this tutorial However even if you are new to shaders all the code will be provided so you should have no problem following along Click the dropdown menu button for the shader material and click Edit From here go to Shader New Shader give it a name and click Create click the shader in the inspector to open the shader editor Delete the default code and add the following shader_type canvas_item void fragment COLOR vec4 UV x UV y 0 5 1 0 Copy to clipboard save the shader code you ll see in the inspector that the above code renders a gradient like the one below Now we have the basics of a SubViewport that we render to and we have a unique image that we can apply to the sphere Applying the texture Now go into the MeshInstance3D and add a StandardMaterial3D to it No need for a special Shader Material although that would be a good idea for more advanced effects like the atmosphere in the example above MeshInstance3D GeometryInstance Geometry Material Override New StandardMaterial3D Then click the dropdown for the StandardMaterial3D and click Edit Go to the Resource section and check the Local to scene box Then go to the Albedo section and click beside the Texture property to add an Albedo Texture Here we will apply the texture we made Choose New ViewportTexture Click on the ViewportTexture you just created in the inspector then click Assign Then from the menu that pops up select the Viewport that we rendered to earlier Your sphere should now be colored in with the colors we rendered to the Viewport Notice the ugly seam that forms where the texture wraps around This is because we are picking a color based on UV coordinates and UV coordinates do not wrap around the texture This is a classic problem in 2D map projection Game developers often have a 2 dimensional map they want to project onto a sphere but when it wraps around it has large seams There is an elegant workaround for this problem that we will illustrate in the next section Making the planet texture So now when we render to our SubViewport it appears magically on the sphere But there is an ugly seam created by our texture coordinates So how do we get a range of coordinates that wrap around the sphere in a nice way One solution is to use a function that repeats on the domain of our texture sin and cos are two such functions Let s apply them to the texture and see what happens Replace the existing color code in the shader with the following COLOR xyz vec3 sin UV x 3 14159 4 0 cos UV y 3 14159 4 0 0 5 0 5 Copy to clipboard Not too bad If you look around you can see that the seam has now disappeared but in its place we have pinching at the poles This pinching is due to the way Godot maps textures to spheres in its StandardMaterial3D It uses a projection technique called equirectangular projection which translates a spherical map onto a 2D plane Note If you are interested in a little extra information on the technique we will be converting from spherical coordinates into Cartesian coordinates Spherical coordinates map the longitude and latitude of the sphere while Cartesian coordinates are for all intents and purposes a vector from the center of the sphere to the point For each pixel we will calculate its 3D position on the sphere From that we will use 3D noise to determine a color value By calculating the noise in 3D we solve the problem of the pinching at the poles To understand why picture the noise being calculated across the surface of the sphere instead of across the 2D plane When you calculate across the surface of the sphere you never hit an edge and hence you never create a seam or a pinch point on the pole The following code converts the UVs into Cartesian coordinates float theta UV y 3 14159 float phi UV x 3 14159 2 0 vec3 unit vec3 0 0 0 0 0 0 unit x sin phi sin theta unit y cos theta 1 0 unit z cos phi sin theta unit normalize unit Copy to clipboard And if we use unit as an output COLOR value we get Now that we can calculate the 3D position of the surface of the sphere we can use 3D noise to make the planet We will be using this noise function directly from a Shadertoy vec3 hash vec3 p p vec3 dot p vec3 127 1 311 7 74 7 dot p vec3 269 5 183 3 246 1 dot p vec3 113 5 271 9 124 6 return 1 0 2 0 fract sin p 43758 5453123 float noise vec3 p vec3 i floor p vec3 f fract p vec3 u f f 3 0 2 0 f return mix mix mix dot hash i vec3 0 0 0 0 0 0 f vec3 0 0 0 0 0 0 dot hash i vec3 1 0 0 0 0 0 f vec3 1 0 0 0 0 0 u x mix dot hash i vec3 0 0 1 0 0 0 f vec3 0 0 1 0 0 0 dot hash i vec3 1 0 1 0 0 0 f vec3 1 0 1 0 0 0 u x u y mix mix dot hash i vec3 0 0 0 0 1 0 f vec3 0 0 0 0 1 0 dot hash i vec3 1 0 0 0 1 0 f vec3 1 0 0 0 1 0 u x mix dot hash i vec3 0 0 1 0 1 0 f vec3 0 0 1 0 1 0 dot hash i vec3 1 0 1 0 1 0 f vec3 1 0 1 0 1 0 u x u y u z Copy to clipboard Note All credit goes to the author Inigo Quilez It is published under the MIT licence Now to use noise add the following to the fragment function float n noise unit 5 0 COLOR xyz vec3 n 0 5 0 5 Copy to clipboard Note In order to highlight the texture we set the material to unshaded You can see now that the noise indeed wraps seamlessly around the sphere Although this looks nothing like the planet you were promised So let s move onto something more colorful Coloring the planet Now to make the planet colors While there are many ways to do this for now we will stick with a gradient between water and land To make a gradient in GLSL we use the mix function mix takes two values to interpolate between and a third argument to choose how much to interpolate between them in essence it mixes the two values together In other APIs this function is often called lerp However lerp is typically reserved for mixing two floats together mix can take any values whether it be floats or vector types COLOR xyz mix vec3 0 05 0 3 0 5 vec3 0 9 0 4 0 1 n 0 5 0 5 Copy to clipboard The first color is blue for the ocean The second color is a kind of reddish color because all alien planets need red terrain And finally they are mixed together by n 0 5 0 5 n smoothly varies between 1 and 1 So we map it into the 0 1 range that mix expects Now you can see that the colors change between blue and red That is a little more blurry than we want Planets typically have a relatively clear separation between land and sea In order to do that we will change the last term to smoothstep 0 1 0 0 n And thus the whole line becomes COLOR xyz mix vec3 0 05 0 3 0 5 vec3 0 9 0 4 0 1 smoothstep 0 1 0 0 n Copy to clipboard What smoothstep does is return 0 if the third argument is below the first and 1 if the third argument is larger than the second and smoothly blends between 0 and 1 if the third number is between the first and the second So in this line smoothstep returns 0 whenever n is less than 0 1 and it returns 1 whenever n is above 0 One more thing to make this a little more planet y The land shouldn t be so blobby let s make the edges a little rougher A trick that is often used in shaders to make rough looking terrain with noise is to layer levels of noise over one another at various frequencies We use one layer to make the overall blobby structure of the continents Then another layer breaks up the edges a bit and then another and so on What we will do is calculate n with four lines of shader code instead of just one n becomes float n noise unit 5 0 0 5 n noise unit 10 0 0 25 n noise unit 20 0 0 125 n noise unit 40 0 0 0625 Copy to clipboard And now the planet looks like Making an ocean One final thing to make this look more like a planet The ocean and the land reflect light differently So we want the ocean to shine a little more than the land We can do this by passing a fourth value into the alpha channel of our output COLOR and using it as a Roughness map COLOR a 0 3 0 7 smoothstep 0 1 0 0 n Copy to clipboard This line returns 0 3 for water and 1 0 for land This means that the land is going to be quite rough while the water will be quite smooth And then in the material under the Metallic section make sure Metallic is set to 0 and Specular is set to 1 The reason for this is the water reflects light really well but isn t metallic These values are not physically accurate but they are good enough for this demo Next under the Roughness section set the roughness texture to a Viewport Texture pointing to our planet texture SubViewport Finally set the Texture Channel to Alpha This instructs the renderer to use the alpha channel of our output COLOR as the Roughness value You ll notice that very little changes except that the planet is no longer reflecting the sky This is happening because by default when something is rendered with an alpha value it gets drawn as a transparent object over the background And since the default background of the SubViewport is opaque the alpha channel of the Viewport Texture is 1 resulting in the planet texture being drawn with slightly fainter colors and a Roughness value of 1 everywhere To correct this we go into the SubViewport and enable the Transparent Bg property Since we are now rendering one transparent object on top of another we want to enable blend_premul_alpha render_mode blend_premul_alpha Copy to clipboard This pre multiplies the colors by the alpha value and then blends them correctly together Typically when blending one transparent color on top of another even if the background has an alpha of 0 as it does in this case you end up with weird color bleed issues Setting blend_premul_alpha fixes that Now the planet should look like it is reflecting light on the ocean but not the land move around the OmniLight3D in the scene so you can see the effect of the reflections on the ocean And there you have it A procedural planet generated using a SubViewport User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Custom post processing Introduction Godot provides many post processing effects out of the box including Bloom DOF and SSAO which are described in Environment and post processing However advanced use cases may require custom effects This article explains how to write your own custom effects The easiest way to implement a custom post processing shader is to use Godot s built in ability to read from the screen texture If you re not familiar with this you should read the Screen Reading Shaders Tutorial first Single pass post processing Post processing effects are shaders applied to a frame after Godot has rendered it To apply a shader to a frame create a CanvasLayer and give it a ColorRect Assign a new ShaderMaterial to the newly created ColorRect and set the ColorRect s layout to Full Rect Your scene tree will look something like this Note Another more efficient method is to use a BackBufferCopy to copy a region of the screen to a buffer and to access it in a shader script through a sampler2D using hint_screen_texture Note As of the time of writing Godot does not support rendering to multiple buffers at the same time Your post processing shader will not have access to other render passes and buffers not exposed by Godot such as depth or normal roughness You only have access to the rendered frame and buffers exposed by Godot as samplers For this demo we will use this Sprite of a sheep Assign a new Shader to the ColorRect s ShaderMaterial You can access the frame s texture and UV with a sampler2D using hint_screen_texture and the built in SCREEN_UV uniforms Copy the following code to your shader The code below is a hex pixelization shader by arlez80 shader_type canvas_item uniform vec2 size vec2 32 0 28 0 If you intend to read from mipmaps with textureLod LOD values greater than 0 0 use filter_nearest_mipmap instead This shader doesn t require it uniform sampler2D screen_texture hint_screen_texture repeat_disable filter_nearest void fragment vec2 norm_size size SCREEN_PIXEL_SIZE bool half mod SCREEN_UV y 2 0 norm_size y norm_size y 0 5 vec2 uv SCREEN_UV vec2 norm_size x 0 5 float half 0 0 vec2 center_uv floor uv norm_size norm_size vec2 norm_uv mod uv norm_size norm_size center_uv mix vec2 0 0 0 0 mix mix vec2 norm_size x norm_size y vec2 0 0 norm_size y float norm_uv x 0 5 mix vec2 0 0 norm_size y vec2 norm_size x norm_size y float norm_uv x 0 5 float half float norm_uv y 0 3333333 float norm_uv y 0 3333333 abs norm_uv x 0 5 2 0 COLOR textureLod screen_texture center_uv 0 0 Copy to clipboard The sheep will look something like this Multi pass post processing Some post processing effects like blurs are resource intensive You can make them run a lot faster if you break them down in multiple passes In a multipass material each pass takes the result from the previous pass as an input and processes it To produce a multi pass post processing shader you stack CanvasLayer and ColorRect nodes In the example above you use a CanvasLayer object to render a shader using the frame on the layer below Apart from the node structure the steps are the same as with the single pass post processing shader Your scene tree will look something like this As an example you could write a full screen Gaussian blur effect by attaching the following pieces of code to each of the ColorRect nodes The order in which you apply the shaders depends on the position of the CanvasLayer in the scene tree higher means sooner For this blur shader the order does not matter shader_type canvas_item uniform sampler2D screen_texture hint_screen_texture repeat_disable filter_nearest Blurs the screen in the X direction void fragment vec3 col texture screen_texture SCREEN_UV xyz 0 16 col texture screen_texture SCREEN_UV vec2 SCREEN_PIXEL_SIZE x 0 0 xyz 0 15 col texture screen_texture SCREEN_UV vec2 SCREEN_PIXEL_SIZE x 0 0 xyz 0 15 col texture screen_texture SCREEN_UV vec2 2 0 SCREEN_PIXEL_SIZE x 0 0 xyz 0 12 col texture screen_texture SCREEN_UV vec2 2 0 SCREEN_PIXEL_SIZE x 0 0 xyz 0 12 col texture screen_texture SCREEN_UV vec2 3 0 SCREEN_PIXEL_SIZE x 0 0 xyz 0 09 col texture screen_texture SCREEN_UV vec2 3 0 SCREEN_PIXEL_SIZE x 0 0 xyz 0 09 col texture screen_texture SCREEN_UV vec2 4 0 SCREEN_PIXEL_SIZE x 0 0 xyz 0 05 col texture screen_texture SCREEN_UV vec2 4 0 SCREEN_PIXEL_SIZE x 0 0 xyz 0 05 COLOR xyz col Copy to clipboard shader_type canvas_item uniform sampler2D screen_texture hint_screen_texture repeat_disable filter_nearest Blurs the screen in the Y direction void fragment vec3 col texture screen_texture SCREEN_UV xyz 0 16 col texture screen_texture SCREEN_UV vec2 0 0 SCREEN_PIXEL_SIZE y xyz 0 15 col texture screen_texture SCREEN_UV vec2 0 0 SCREEN_PIXEL_SIZE y xyz 0 15 col texture screen_texture SCREEN_UV vec2 0 0 2 0 SCREEN_PIXEL_SIZE y xyz 0 12 col texture screen_texture SCREEN_UV vec2 0 0 2 0 SCREEN_PIXEL_SIZE y xyz 0 12 col texture screen_texture SCREEN_UV vec2 0 0 3 0 SCREEN_PIXEL_SIZE y xyz 0 09 col texture screen_texture SCREEN_UV vec2 0 0 3 0 SCREEN_PIXEL_SIZE y xyz 0 09 col texture screen_texture SCREEN_UV vec2 0 0 4 0 SCREEN_PIXEL_SIZE y xyz 0 05 col texture screen_texture SCREEN_UV vec2 0 0 4 0 SCREEN_PIXEL_SIZE y xyz 0 05 COLOR xyz col Copy to clipboard Using the above code you should end up with a full screen blur effect like below User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Advanced post processing Introduction This tutorial describes an advanced method for post processing in Godot In particular it will explain how to write a post processing shader that uses the depth buffer You should already be familiar with post processing generally and in particular with the methods outlined in the custom post processing tutorial Full screen quad One way to make custom post processing effects is by using a viewport However there are two main drawbacks of using a Viewport The depth buffer cannot be accessed The effect of the post processing shader is not visible in the editor To get around the limitation on using the depth buffer use a MeshInstance3D with a QuadMesh primitive This allows us to use a shader and to access the depth texture of the scene Next use a vertex shader to make the quad cover the screen at all times so that the post processing effect will be applied at all times including in the editor First create a new MeshInstance3D and set its mesh to a QuadMesh This creates a quad centered at position 0 0 0 with a width and height of 1 Set the width and height to 2 and enable Flip Faces Right now the quad occupies a position in world space at the origin However we want it to move with the camera so that it always covers the entire screen To do this we will bypass the coordinate transforms that translate the vertex positions through the difference coordinate spaces and treat the vertices as if they were already in clip space The vertex shader expects coordinates to be output in clip space which are coordinates ranging from 1 at the left and bottom of the screen to 1 at the top and right of the screen This is why the QuadMesh needs to have height and width of 2 Godot handles the transform from model to view space to clip space behind the scenes so we need to nullify the effects of Godot s transformations We do this by setting the POSITION built in to our desired position POSITION bypasses the built in transformations and sets the vertex position in clip space directly shader_type spatial Prevent the quad from being affected by lighting and fog This also improves performance render_mode unshaded fog_disabled void vertex POSITION vec4 VERTEX xy 1 0 1 0 Copy to clipboard Note In versions of Godot earlier than 4 3 this code recommended using POSITION vec4 VERTEX 1 0 which implicitly assumed the clip space near plane was at 0 0 That code is now incorrect and will not work in versions 4 3 as we use a reversed z depth buffer now where the near plane is at 1 0 Even with this vertex shader the quad keeps disappearing This is due to frustum culling which is done on the CPU Frustum culling uses the camera matrix and the AABBs of Meshes to determine if the Mesh will be visible before passing it to the GPU The CPU has no knowledge of what we are doing with the vertices so it assumes the coordinates specified refer to world positions not clip space positions which results in Godot culling the quad when we turn away from the center of the scene In order to keep the quad from being culled there are a few options Add the QuadMesh as a child to the camera so the camera is always pointed at it Set the Geometry property extra_cull_margin as large as possible in the QuadMesh The second option ensures that the quad is visible in the editor while the first option guarantees that it will still be visible even if the camera moves outside the cull margin You can also use both options Depth texture To read from the depth texture we first need to create a texture uniform set to the depth buffer by using hint_depth_texture uniform sampler2D depth_texture source_color hint_depth_texture Copy to clipboard Once defined the depth texture can be read with the texture function float depth texture depth_texture SCREEN_UV x Copy to clipboard Note Similar to accessing the screen texture accessing the depth texture is only possible when reading from the current viewport The depth texture cannot be accessed from another viewport to which you have rendered The values returned by depth_texture are between 1 0 and 0 0 corresponding to the near and far plane respectively because of using a reverse z depth buffer and are nonlinear When displaying depth directly from the depth_texture everything will look almost black unless it is very close due to that nonlinearity In order to make the depth value align with world or model coordinates we need to linearize the value When we apply the projection matrix to the vertex position the z value is made nonlinear so to linearize it we multiply it by the inverse of the projection matrix which in Godot is accessible with the variable INV_PROJECTION_MATRIX Firstly take the screen space coordinates and transform them into normalized device coordinates NDC NDC run 1 0 to 1 0 in x and y directions and from 0 0 to 1 0 in the z direction when using the Vulkan backend Reconstruct the NDC using SCREEN_UV for the x and y axis and the depth value for z Note This tutorial assumes the use of the Vulkan renderer which uses NDCs with a Z range of 0 0 1 0 In contrast OpenGL uses NDCs with a Z range of 1 0 1 0 void fragment float depth texture depth_texture SCREEN_UV x vec3 ndc vec3 SCREEN_UV 2 0 1 0 depth Copy to clipboard Convert NDC to view space by multiplying the NDC by INV_PROJECTION_MATRIX Recall that view space gives positions relative to the camera so the z value will give us the distance to the point void fragment vec4 view INV_PROJECTION_MATRIX vec4 ndc 1 0 view xyz view w float linear_depth view z Copy to clipboard Because the camera is facing the negative z direction the position will have a negative z value In order to get a usable depth value we have to negate view z The world position can be constructed from the depth buffer using the following code using the INV_VIEW_MATRIX to transform the position from view space into world space void fragment vec4 world INV_VIEW_MATRIX INV_PROJECTION_MATRIX vec4 ndc 1 0 vec3 world_position world xyz world w Copy to clipboard Example shader Once we add a line to output to ALBEDO we have a complete shader that looks something like this This shader lets you visualize the linear depth or world space coordinates depending on which line is commented out shader_type spatial Prevent the quad from being affected by lighting and fog This also improves performance render_mode unshaded fog_disabled uniform sampler2D depth_texture source_color hint_depth_texture void vertex POSITION vec4 VERTEX xy 1 0 1 0 void fragment float depth texture depth_texture SCREEN_UV x vec3 ndc vec3 SCREEN_UV 2 0 1 0 depth vec4 view INV_PROJECTION_MATRIX vec4 ndc 1 0 view xyz view w float linear_depth view z vec4 world INV_VIEW_MATRIX INV_PROJECTION_MATRIX vec4 ndc 1 0 vec3 world_position world xyz world w Visualize linear depth ALBEDO rgb vec3 fract linear_depth Visualize world coordinates ALBEDO rgb fract world_position xyz Copy to clipboard An optimization You can benefit from using a single large triangle rather than using a full screen quad The reason for this is explained here However the benefit is quite small and only beneficial when running especially complex fragment shaders Set the Mesh in the MeshInstance3D to an ArrayMesh An ArrayMesh is a tool that allows you to easily construct a Mesh from Arrays for vertices normals colors etc Now attach a script to the MeshInstance3D and use the following code extends MeshInstance3D func _ready Create a single triangle out of vertices var verts PackedVector3Array verts append Vector3 1 0 1 0 0 0 verts append Vector3 1 0 3 0 0 0 verts append Vector3 3 0 1 0 0 0 Create an array of arrays This could contain normals colors UVs etc var mesh_array mesh_array resize Mesh ARRAY_MAX required size for ArrayMesh Array mesh_array Mesh ARRAY_VERTEX verts position of vertex array in ArrayMesh Array Create mesh from mesh_array mesh add_surface_from_arrays Mesh PRIMITIVE_TRIANGLES mesh_array Copy to clipboard Note The triangle is specified in normalized device coordinates Recall NDC run from 1 0 to 1 0 in both the x and y directions This makes the screen 2 units wide and 2 units tall In order to cover the entire screen with a single triangle use a triangle that is 4 units wide and 4 units tall double its height and width Assign the same vertex shader from above and everything should look exactly the same The one drawback to using an ArrayMesh over using a QuadMesh is that the ArrayMesh is not visible in the editor because the triangle is not constructed until the scene is run To get around that construct a single triangle Mesh in a modeling program and use that in the MeshInstance3D instead User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Making trees This is a short tutorial on how to make trees and other types of vegetation from scratch The aim is to not focus on the modeling techniques there are plenty of tutorials about that but how to make them look good in Godot Start with a tree I took this tree from SketchFab https sketchfab com models ea5e6ed7f9d6445ba69589d503e8cebf and opened it in Blender Paint with vertex colors The first thing you may want to do is to use the vertex colors to paint how much the tree will sway when there is wind Just use the vertex color painting tool of your favorite 3D modeling program and paint something like this This is a bit exaggerated but the idea is that color indicates how much sway affects every part of the tree This scale here represents it better Write a custom shader for the leaves This is an example of a shader for leaves shader_type spatial render_mode depth_prepass_alpha cull_disabled world_vertex_coords Copy to clipboard This is a spatial shader There is no front back culling so leaves can be seen from both sides and alpha prepass is used so there are less depth artifacts that result from using transparency and leaves cast shadow Finally for the sway effect world coordinates are recommended so the tree can be duplicated moved etc and it will still work together with other trees uniform sampler2D texture_albedo source_color uniform vec4 transmission source_color Copy to clipboard Here the texture is read as well as a transmission color which is used to add some back lighting to the leaves simulating subsurface scattering uniform float sway_speed 1 0 uniform float sway_strength 0 05 uniform float sway_phase_len 8 0 void vertex float strength COLOR r sway_strength VERTEX x sin VERTEX x sway_phase_len 1 123 TIME sway_speed strength VERTEX y sin VERTEX y sway_phase_len TIME sway_speed 1 12412 strength VERTEX z sin VERTEX z sway_phase_len 0 9123 TIME sway_speed 1 3123 strength Copy to clipboard This is the code to create the sway of the leaves It s basic just uses a sinewave multiplying by the time and axis position but works well Notice that the strength is multiplied by the color Every axis uses a different small near 1 0 multiplication factor so axes don t appear in sync Finally all that s left is the fragment shader void fragment vec4 albedo_tex texture texture_albedo UV ALBEDO albedo_tex rgb ALPHA albedo_tex a METALLIC 0 0 ROUGHNESS 1 0 TRANSMISSION transmission rgb Copy to clipboard And this is pretty much it The trunk shader is similar except it does not write to the alpha channel thus no alpha prepass is needed and does not require transmission to work Both shaders can be improved by adding normal mapping AO and other maps Improving the shader There are many more resources on how to do this that you can read Now that you know the basics a recommended read is the chapter from GPU Gems3 about how Crysis does this focus mostly on the sway code as many other techniques shown there are obsolete https developer nvidia com gpugems GPUGems3 gpugems3_ch16 html User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue User interface UI In this section of the tutorial we explain the basics of creating a graphical user interface GUI in Godot UI building blocks Like everything else in Godot the user interface is built using nodes specifically Control nodes There are many different types of controls which are useful for creating specific types of GUIs For simplicity we can separate them into two groups content and layout Typical content controls include Buttons Labels LineEdits and TextEdits Typical layout controls include BoxContainers MarginContainers ScrollContainers TabContainers Popups The following pages explain the basics of using such controls Size and anchors Using Containers Custom GUI controls Keyboard Controller Navigation and Focus Control node gallery GUI skinning and themes Godot features an in depth skinning theming system for control nodes The pages in this section explain the benefits of that system and how to set it up in your projects Introduction to GUI skinning Using the theme editor Theme type variations Using Fonts Control node tutorials The following articles cover specific details of using particular control nodes BBCode in RichTextLabel Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Size and anchors If a game was always going to be run on the same device and at the same resolution positioning controls would be a simple matter of setting the position and size of each one of them Unfortunately that is rarely the case Only TVs nowadays have a standard resolution and aspect ratio Everything else from computer monitors to tablets portable consoles and mobile phones have different resolutions and aspect ratios There are several ways to handle this but for now let s just imagine that the screen resolution has changed and the controls need to be re positioned Some will need to follow the bottom of the screen others the top of the screen or maybe the right or left margins This is done by editing the margin properties of controls Each control has four margins left right bottom and top which correspond to the respective edges of the control By default all of them represent a distance in pixels relative to the top left corner of the parent control or in case there is no parent control the viewport So to make the control wider you can make the right margin larger and or make the left margin smaller This lets you set the exact placement and shape of the control The anchor properties adjust where the margin distances are relative to Each margin has an individual anchor that can be adjusted from the beginning to the end of the parent So the vertical top bottom anchors adjust from 0 top of parent to 1 0 bottom of parent with 0 5 being the center and the control margins will be placed relative to that point The horizontal left right anchors similarly adjust from left to right of the parent Note that when you wish the edge of a control to be above or left of the anchor point you must change the margin value to be negative For example when horizontal anchors are changed to 1 the margin values become relative to the top right corner of the parent control or viewport Adjusting the two horizontal or the two vertical anchors to different values will make the control change size when the parent control does Here the control is set to anchor its bottom right corner to the parent s bottom right while the top left control margins are still anchored to the top left of the parent so when re sizing the parent the control will always cover it leaving a 20 pixel margin Centering a control To center a control in its parent set its anchors to 0 5 and each margin to half of its relevant dimension For example the code below shows how a TextureRect can be centered in its parent GDScript C var rect TextureRect new rect texture load res icon png rect anchor_left 0 5 rect anchor_right 0 5 rect anchor_top 0 5 rect anchor_bottom 0 5 var texture_size rect texture get_size rect offset_left texture_size x 2 rect offset_right texture_size x 2 rect offset_top texture_size y 2 rect offset_bottom texture_size y 2 add_child rect Copy to clipboard var rect new TextureRect rect Texture ResourceLoader Load Texture res icon png rect AnchorLeft 0 5f rect AnchorRight 0 5f rect AnchorTop 0 5f rect AnchorBottom 0 5f var textureSize rect Texture GetSize rect OffsetLeft textureSize X 2 rect OffsetRight textureSize X 2 rect OffsetTop textureSize Y 2 rect OffsetBottom textureSize Y 2 AddChild rect Copy to clipboard Setting each anchor to 0 5 moves the reference point for the margins to the center of its parent From there we set negative margins so that the control gets its natural size Layout Presets Instead of manually adjusting the margin and anchor values you can use the toolbar s Layout menu above the viewport Besides centering it gives you many options to align and resize control nodes User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Using Containers Anchors are an efficient way to handle different aspect ratios for basic multiple resolution handling in GUIs For more complex user interfaces they can become difficult to use This is often the case of games such as RPGs online chats tycoons or simulations Another common case where more advanced layout features may be required is in game tools or simply just tools All these situations require a more capable OS like user interface with advanced layout and formatting For that Containers are more useful Container layout Containers provide a huge amount of layout power as an example the Godot editor user interface is entirely done using them When a Container derived node is used all children Control nodes give up their own positioning ability This means the Container will control their positioning and any attempt to manually alter these nodes will be either ignored or invalidated the next time their parent is resized Likewise when a Container derived node is resized all its children will be re positioned according to it with a behavior based on the type of container used Example of HBoxContainer resizing children buttons The real strength of containers is that they can be nested as nodes allowing the creation of very complex layouts that resize effortlessly Sizing options When adding a node to a container the way the container treats each child depends mainly on their container sizing options These options can be found by inspecting the layout of any Control that is a child of a Container Sizing options are independent for vertical and horizontal sizing and not all containers make use of them but most do Fill Ensures the control fills the designated area within the container No matter if a control expands or not see below it will only fill the designated area when this is toggled on it is by default Expand Attempts to use as much space as possible in the parent container in each axis Controls that don t expand will be pushed away by those that do Between expanding controls the amount of space they take from each other is determined by the Stretch Ratio see below This option is only available when the parent Container is of the right type for example the HBoxContainer has this option for horizontal sizing Shrink Begin When expanding try to remain at the left or top of the expanded area Shrink Center When expanding try to remain at the center of the expanded area Shrink End When expanding try to remain at the right or bottom of the expanded area Stretch Ratio The ratio of how much expanded controls take up the available space in relation to each other A control with 2 will take up twice as much available space as one with 1 Experimenting with these flags and different containers is recommended to get a better grasp on how they work Container types Godot provides several container types out of the box as they serve different purposes Box Containers Arranges child controls vertically or horizontally via HBoxContainer and VBoxContainer In the opposite of the designated direction as in vertical for a horizontal container it just expands the children These containers make use of the Ratio property for children with the Expand flag set Grid Container Arranges child controls in a grid layout via GridContainer amount of columns must be specified Uses both the vertical and horizontal expand flags Margin Container Child controls are expanded towards the bounds of this control via MarginContainer Padding will be added on the margins depending on the theme configuration Again keep in mind that the margins are a Theme value so they need to be edited from the constants overrides section of each control Tab Container Allows you to place several child controls stacked on top of each other via TabContainer with only the current one visible Changing the current one is done via tabs located at the top of the container via clicking The titles are generated from the node names by default although they can be overridden via TabContainer API Settings such as tab placement and StyleBox can be modified in the TabContainer theme overrides Split Container Accepts only one or two children controls then places them side to side with a divisor via HSplitContainer and VSplitContainer Respects both horizontal and vertical flags as well as Ratio The divisor can be dragged around to change the size relation between both children PanelContainer A container that draws a StyleBox then expands children to cover its whole area via PanelContainer respecting the StyleBox margins It respects both the horizontal and vertical sizing options This container is useful as top level or just to add custom backgrounds to sections of a layout ScrollContainer Accepts a single child node If this node is bigger than the container scrollbars will be added to allow panning the node around via ScrollContainer Both vertical and horizontal size options are respected and the behavior can be turned on or off per axis in the properties Mouse wheel and touch drag when touch is available are also valid ways to pan the child control around As in the example above one of the most common ways to use this container is together with a VBoxContainer as child AspectRatioContainer A container type that arranges its child controls in a way that preserves their proportions automatically when the container is resized via AspectRatioContainer It has multiple stretch modes providing options for adjusting the child controls sizes concerning the container fill width control height height control width and cover useful when you have a container that needs to be dynamic and responsive to different screen sizes and you want the child elements to scale proportionally without losing their intended shapes FlowContainer FlowContainer is a container that arranges its child controls either horizontally or vertically via HFlowContainer and via VFlowContainer and when the available space runs out it wraps the children to the next line or column similar to how text wraps in a book useful for creating flexible layouts where the child controls adjust automatically to the available space without overlapping CenterContainer CenterContainer is a container that automatically keeps all of its child controls centered within it at their minimum size It ensures that the child controls are always aligned to the center making it easier to create centered layouts without manual positioning via CenterContainer SubViewportContainer This is a special control that will only accept a single Viewport node as child and it will display it as if it was an image via SubViewportContainer Creating custom Containers It is possible to create a custom container using a script Here is an example of a container that fits children to its rect size GDScript C extends Container func _notification what if what NOTIFICATION_SORT_CHILDREN Must re sort the children for c in get_children Fit to own size fit_child_in_rect c Rect2 Vector2 rect_size func set_some_setting Some setting changed ask for children re sort queue_sort Copy to clipboard using Godot public partial class CustomContainer Container public override void _Notification int what if what NotificationSortChildren Must re sort the children foreach Control c in GetChildren Fit to own size FitChildInRect c new Rect2 new Vector2 RectSize public void SetSomeSetting Some setting changed ask for children re sort QueueSort Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Work in progress The content of this page was not yet updated for Godot 4 3 and may be outdated If you know how to improve this page or you can confirm that it s up to date feel free to open a pull request Custom GUI controls So many controls Yet there are never enough Creating your own custom controls that act just the way you want them to is an obsession of almost every GUI programmer Godot provides plenty of them but they may not work exactly the way you want Before contacting the developers with a pull request to support diagonal scrollbars at least it will be good to know how to create these controls easily from script Drawing For drawing it is recommended to check the Custom drawing in 2D tutorial The same applies Some functions are worth mentioning due to their usefulness when drawing so they will be detailed next Checking control size Unlike 2D nodes size is important with controls as it helps to organize them in proper layouts For this the Control size property is provided Checking it during _draw is vital to ensure everything is kept in bounds Checking focus Some controls such as buttons or text editors might provide input focus for keyboard or joypad input Examples of this are entering text or pressing a button This is controlled with the Control focus_mode property When drawing and if the control supports input focus it is always desired to show some sort of indicator highlight box etc to indicate that this is the currently focused control To check for this status the Control has_focus method exists Example GDScript C func _draw if has_focus draw_selected else draw_normal Copy to clipboard public override void _Draw if HasFocus DrawSelected else DrawNormal Copy to clipboard Sizing As mentioned before size is important to controls This allows them to lay out properly when set into grids containers or anchored Controls most of the time provide a minimum size to help properly lay them out For example if controls are placed vertically on top of each other using a VBoxContainer the minimum size will make sure your custom control is not squished by the other controls in the container To provide this callback just override Control _get_minimum_size for example GDScript C func _get_minimum_size return Vector2 30 30 Copy to clipboard public override Vector2 _GetMinimumSize return new Vector2 20 20 Copy to clipboard Alternatively set it using a function GDScript C func _ready set_custom_minimum_size Vector2 30 30 Copy to clipboard public override void _Ready CustomMinimumSize new Vector2 20 20 Copy to clipboard Input Controls provide a few helpers to make managing input events much easier than regular nodes Input events There are a few tutorials about input before this one but it s worth mentioning that controls have a special input method that only works when The mouse pointer is over the control The button was pressed over this control control always captures input until button is released Control provides keyboard joypad focus via Control focus_mode This function is Control _gui_input Simply override it in your control No processing needs to be set GDScript C extends Control func _gui_input event if event is InputEventMouseButton and event button_index MOUSE_BUTTON_LEFT and event pressed print Left mouse button was pressed Copy to clipboard public override void _GuiInput InputEvent event if event is InputEventMouseButton mbe mbe ButtonIndex MouseButton Left mbe Pressed GD Print Left mouse button was pressed Copy to clipboard For more information about events themselves check the Using InputEvent tutorial Notifications Controls also have many useful notifications for which no dedicated callback exists but which can be checked with the _notification callback GDScript C func _notification what match what NOTIFICATION_MOUSE_ENTER pass Mouse entered the area of this control NOTIFICATION_MOUSE_EXIT pass Mouse exited the area of this control NOTIFICATION_FOCUS_ENTER pass Control gained focus NOTIFICATION_FOCUS_EXIT pass Control lost focus NOTIFICATION_THEME_CHANGED pass Theme used to draw the control changed update and redraw is recommended if using a theme NOTIFICATION_VISIBILITY_CHANGED pass Control became visible invisible check new status with is_visible NOTIFICATION_RESIZED pass Control changed size check new size with get_size NOTIFICATION_MODAL_CLOSE pass For modal pop ups notification that the pop up was closed Copy to clipboard public override void _Notification int what switch what case NotificationMouseEnter Mouse entered the area of this control break case NotificationMouseExit Mouse exited the area of this control break case NotificationFocusEnter Control gained focus break case NotificationFocusExit Control lost focus break case NotificationThemeChanged Theme used to draw the control changed update and redraw is recommended if using a theme break case NotificationVisibilityChanged Control became visible invisible check new status with is_visible break case NotificationResized Control changed size check new size with get_size break case NotificationModalClose For modal pop ups notification that the pop up was closed break Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Keyboard Controller Navigation and Focus It is a common requirement for a user interface to have full keyboard and controller support for navigation and interaction There are two main reasons why this is beneficial for projects improved accessibility not everyone can use mouse or touch controls for interactions and getting your project ready for consoles or just for people who prefer to game with a controller on PC Navigating between UI elements with keyboard or controller is done by changing which node is actively selected This is also called changing UI focus Every Control node in Godot is capable of having focus By default some control nodes have the ability to automatically grab focus reacting to built in UI actions such as ui_up ui_down ui_focus_next etc These actions can be seen in the project settings in the input map and can be modified Warning Because these actions are used for focus they should not be used for any gameplay code Node settings In addition to the built in logic you can define what is known as focus neighbors for each individual control node This allows to finely tune the path the UI focus takes across the user interface of your project The settings for individual nodes can be found in the Inspector dock under the Focus category of the Control section Neighbor options are used to define nodes for 4 directional navigation such as using arrow keys or a D pad on a controller For example the bottom neighbor will be used when navigating down with the down arrow or by pushing down on the D pad The Next and Previous options are used with the focus shift button such as Tab on desktop operating systems Note A node can lose focus if it becomes hidden The mode setting defines how a node can be focused All means a node can be focused by clicking on it with the mouse or selecting it with a keyboard or controller Click means it can only be focused on by clicking on it Finally None means it can t be focused at all Different control nodes have different default settings for this based on how they are typically used for example Label nodes are set to None by default while buttons are set to All Make sure to properly configure your scenes for focus and navigation If a node has no focus neighbor configured the engine will try to guess the next control automatically This may result in unintended behavior especially in a complex user interface that doesn t have well defined vertical or horizontal navigation flow Necessary code For keyboard and controller navigation to work correctly any node must be focused on using code when the scene starts Without doing this pressing buttons or keys won t do anything Here is a basic example of setting initial focus with code GDScript C func _ready StartButton grab_focus Copy to clipboard public override void _Ready GetNode Button StartButton GrabFocus Copy to clipboard Now when the scene starts the Start Button node will be focused and the keyboard or a controller can be used to navigate between it and other UI elements User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Control node gallery Here is a list of common Control nodes with their name next to them The Control Gallery demo pictured above can be found on GitHub User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Introduction to GUI skinning It is essential for a game to provide clear informative and yet visually pleasing user interface to its players While Control nodes come with a decently functional look out of the box there is always room for uniqueness and case specific tuning For this purpose Godot engine includes a system for GUI skinning or theming which allows you to customize the look of every control in your user interface including your custom controls Here is an example of this system in action a game with the GUI that is radically different from the default UI theme of the engine A Gear Up screen in Tank Kings courtesy of Winterpixel Games Beyond achieving a unique look for your game this system also enables developers to provide customization options to the end users including accessibility settings UI themes are applied in a cascading manner i e they propagate from parent controls to their children which means that font settings or adjustments for colorblind users can be applied in a single place and affect the entire UI tree Of course this system can also be used for gameplay purposes your hero based game can change its style for the selected player character or you can give different flavors to the sides in your team based project Basics of themes The skinning system is driven by the Theme resource Every Godot project has an inherent default theme that contains the settings used by the built in control nodes This is what gives the controls their distinct look out of the box A theme only describes the configuration however and it is still the job of each individual control to use that configuration in the way it requires to display itself This is important to remember when implementing your own custom controls Note Even the Godot editor itself relies on the default theme But it doesn t look the same as a Godot project because it applies its own heavily customized theme on top of the default one In principle this works exactly like it would in your game as explained below Theme items The configuration that is stored in a theme consists of theme items Each item has a unique name and must be one of the following data types Color A color value which is often used for fonts and backgrounds Colors can also be used for modulation of controls and icons Constant An integer value which can be used either for numeric properties of controls such as the item separation in a BoxContainer or for boolean flags such as the drawing of relationship lines in a Tree Font A font resource which is used by controls that display text Fonts contain most text rendering settings except for its size and color On top of that alignment and text direction are controlled by individual controls Font size An integer value which is used alongside a font to determine the size at which the text should be displayed Icon A texture resource which is normally used to display an icon on a Button for example StyleBox A StyleBox resource a collection of configuration options which define the way a UI panel should be displayed This is not limited to the Panel control as styleboxes are used by many controls for their backgrounds and overlays Theme types To help with the organization of its items each theme is separated into types and each item must belong to a single type In other words each theme item is defined by its name its data type and its theme type This combination must be unique within the theme For example there cannot be two color items named font_color in a type called Label but there can be another font_color item in a type LineEdit The default Godot theme comes with multiple theme types already defined one for every built in control node that uses UI skinning The example above contains actual theme items present in the default theme You can refer to the Theme Properties section in the class reference for each control to see which items are available to it and its child classes Note Child classes can use theme items defined for their parent class Button and its derivatives being a good example of that In fact every control can use every theme item of any theme type if it needs to but for the clarity and predictability we try to avoid that in the engine It is important to remember that for child classes that process is automated Whenever a built in control requests a theme item from the theme it can omit the theme type and its class name will be used instead On top of that the class names of its parent classes will also be used in turn This allows changes to the parent class such as Button to affect all derived classes without the need to customize every one of them You can also define your own theme types and additionally customize both built in controls and your own controls Because built in controls have no knowledge of your custom theme types you must utilize scripts to access those items All control nodes have several methods that allow to fetch theme items from the theme that is applied to them Those methods accept the theme type as one of the arguments GDScript C var accent_color get_theme_color accent_color MyType label add_color_override font_color accent_color Copy to clipboard Color accentColor GetThemeColor accent_color MyType label AddColorOverride font_color accentColor Copy to clipboard To give more customization opportunities types can also be linked together as type variations This is another use case for custom theme types For example a theme can contain a type Header which can be marked as a variation of the base Label type An individual Label control can then be set to use the Header variation for its type and every time a theme item is requested from a theme this variation will be used before any other type This allows to store various presets of theme items for the same class of the control node in the single Theme resource Warning Only variations available from the default theme or defined in the custom project theme are shown in the Inspector dock as options You can still input manually the name of a variation that is defined outside of those two places but it is recommended to keep all variations to the project theme You can learn more about creating and using theme type variations in a dedicated article Customizing a control Each control node can be customized directly without the use of themes This is called local overrides Every theme property from the control s class reference can be overridden directly on the control itself using either the Inspector dock or scripts This allows to make granular changes to a particular part of the UI while not affecting anything else in the project including this control s children Local overrides are less useful for the visual flair of your user interface especially if you aim for consistency However for layout nodes these are essential Nodes such as BoxContainer and GridContainer use theme constants for defining separation between their children and MarginContainer stores its customizable margins in its theme items Whenever a control has a local theme item override this is the value that it uses Values provided by the theme are ignored Customizing a project Out of the box each project adopts the default project theme provided by Godot The default theme itself is constant and cannot be changed but its items can be overridden with a custom theme Custom themes can be applied in two ways as a project setting and as a node property throughout the tree of control nodes There are two project settings that can be adjusted to affect your entire project gui theme custom allows you to set a custom project wide theme and gui theme custom_font does the same to the default fallback font When a theme item is requested by a control node the custom project theme if present is checked first Only if it doesn t have the item the default theme is checked This allows you to configure the default look of every Godot control with a single theme resource but you can go more granular than that Every control node also has a theme property which allows you to set a custom theme for the branch of nodes starting with that control This means that the control and all of its children and their children in turn would first check that custom theme resource before falling back on the project and the default themes Note Instead of changing the project setting you can set the custom theme resource to the root most control node of your entire UI branch to almost the same effect While in the running project it will behave as expected individual scenes will still display using the default theme when previewing or running them directly To fix that you can set the same theme resource to the root control of each individual scene For example you can have a certain style for buttons in your project theme but want a different look for buttons inside of a popup dialog You can set a custom theme resource to the root control of your popup and define a different style for buttons within that resource As long as the chain of control nodes between the root of the popup and the buttons is uninterrupted those buttons will use the styles defined in the theme resource that is closest to them All other controls will still be styled using the project wide theme and the default theme styles To sum it up for an arbitrary control its theme item lookup would look something like this Check for local overrides of the same data type and name Using control s type variation class name and parent class names Check every control starting from itself and see if it has a theme property set If it does check that theme for the matching item of the same name data and theme type If there is no custom theme or it doesn t have the item move to the parent control Repeat steps a c until the root of the tree is reached or a non control node is reached Using control s type variation class name and parent class names check the project wide theme if it s present Using control s type variation class name and parent class names check the default theme Even if the item doesn t exist in any theme a corresponding default value for that data type will be returned Beyond controls Naturally themes are an ideal type of resource for storing configuration for something visual While the support for theming is built into control nodes other nodes can use them as well just like any other resource An example of using themes for something beyond controls can be a modulation of sprites for the same units on different teams in a strategy game A theme resource can define a collection of colors and sprites with a help from scripts can use those colors to draw the texture The main benefit being that you could make different themes using the same theme items for red blue and green teams and swap them with a single resource change User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using the theme editor This article explains how to create and manage UI themes using the Godot editor and its theme editor tool We recommend getting familiar with the basics behind GUI skinning theming by reading Introduction to GUI skinning before starting The theme editor is a bottom panel tool that activates automatically when a Theme resource is selected for editing It contains the necessary UI for adding removing and adjusting theme types and theme items It features a preview section for testing your changes live as well as a window dialog for doing bulk operations of the theme items Creating a theme Like any other resources themes can be created directly in the file system dock by right clicking and selecting New Resource then selecting Theme and clicking Create This is especially useful for creating project wide themes Themes also can be created from any control node Select a control node in the scene hierarchy then in the inspector go to the theme property From there you can select New Theme This will create an empty theme and open up the theme editor Keep in mind that resources created this way are bundled with the scene by default Use the context menu to save the new theme to a file instead While the theme editor provides the tools to manage theme types and items themes also include the default fallback font that you can edit only using the Inspector dock Same applies to the contents of complex resource types such as StyleBoxes and icons they open for editing in the Inspector Theme editor overview The theme editor has two main parts The main theme editor located at the bottom of the Godot editor aims to provide users with tools to quickly create edit and delete theme items and types It gives visual tools for picking and changing controls abstracting the underlying theme concepts The Manage Theme Items dialog on the other hand tries to address the needs of those who want to change themes manually It s also useful for creating a new editor theme Theme previews The left hand side of the main editor has a set of preview tabs The Default Preview tab is visible out of the box and contains most of the frequently used controls in various states Previews are interactive so intermediate states e g hover can be previewed as well Additional tabs can be created from arbitrary scenes in your project The scene must have a control node as its root to function as a preview To add a new tab click the Add Preview button and select the saved scene from your file system If you make changes to the scene they will not be reflected in the preview automatically To update the preview click the reload button on the toolbar Previews can also be used to quickly select the theme type to edit Select the picker tool from the toolbar and hover over the preview area to highlight control nodes Highlighted control nodes display their class name or type variation if available Clicking on the highlighted control opens it for editing on the right hand side Theme types and items The right hand side of the theme editor provides a list of theme types available in the edited theme resource and the contents of the selected type The list of type s items is divided into several tabs corresponding to each data type available in the theme colors constants styles etc If the Show Default option is enabled then for each built in type its default theme values are displayed greyed out If the option is disabled only the items available in the edited theme itself are displayed Individual items from the default theme can be added to the current theme by clicking on the Override button next to the item You can also override all the default items of the selected theme type by clicking on the Override All button Overridden properties can then be removed with the Remove Item button Properties can also be renamed using the Rename Item button and completely custom properties can be added to the list using the text field below it Overridden theme items can be edited directly in the right hand panel unless they are resources Resources have rudimentary controls available for them but must be edited in the Inspector dock instead Styleboxes have a unique feature available where you can pin an individual stylebox from the list Pinned stylebox acts like the leader of the pack and all styleboxes of the same type are updated alongside it when you change its properties This allows you to edit properties of several styleboxes at the same time While theme types can be picked from a preview they can also be added manually Clicking the plus button next to the type list opens the Add item Type menu In that menu you can either select a type from the list or you can enter an arbitrary name to create a custom type Text field also filters the list of control nodes Manage and import items Clicking the Manage Items button brings up the Manage Theme Items dialog In the Edit Items tab you can view and add theme types as well as view and edit the theme items of the selected type You can create rename and remove individual theme items here by clicking the corresponding Add X Item and specifying their name You can also mass delete theme items either by their data type using the brush icon in the list or by their quality Remove Class Items will remove all built in theme items you have customized for a control node type Remove Custom Items will remove all the custom theme items for the selected type Finally Remove All Items will remove everything from the type From the Import Items tab you can import theme items from other themes You can import items from the default Godot theme the Godot editor theme or another custom theme You can import individual or multiple items and you can decide whether to copy or omit their data as well There are several ways you can select and deselect the items including by hand by hierarchy by data type and everything Opting to include the data will copy all theme items as they are to your theme Omitting the data will create the items of the corresponding data type and name but will leave them empty creating a template of a theme in a way User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Theme type variations When designing a user interface there may be times when a Control node needs to have a different look than what is normally defined by a Theme Every control node has theme property overrides which allow you to redefine the styling for each individual UI element This approach quickly becomes hard to manage if you need to share the same custom look between several controls Imagine that you use gray blue and red variants of Button throughout your project Setting it up every time you add a new button element to your interface is a tedious task To help with the organization and to better utilize the power of themes you can use theme type variations These work like normal theme types but instead of being self sufficient and standalone they extend another base type Following the previous example your theme can have some styles colors and fonts defined for the Button type customizing the looks of every button element in your UI To then have a gray red or blue button you would create a new type e g GrayButton and mark it as a variation of the base Button type Type variations can replace some aspects of the base type but keep others They can also define properties that the base style hasn t defined For example your GrayButton can override the normal style from the base Button and add font_color that Button has never defined The control will use a combination of both types giving priority to the type variation Note The way controls resolve what theme items they use from each type and each theme is better described in the Customizing a project section of the Introduction to GUI skinning article Creating a type variation To create a type variation open the theme editor then click the plus icon next to the Type dropdown on the right side of the editor Type in what you want to name your theme type variation in the text box then click Add Type Below the Type dropdown are the property tabs Switch to the tab with a wrench and screwdriver icon Click on the plus icon next to the Base Type field You can select the base type there which would typically be the name of a control node class e g Button Label etc Type variations can also chain and extend other type variations This works in the same way control nodes inherit styling of their base class For example CheckButton inherits styles from Button because corresponding node types extend each other After you select the base type you should now be able to see its properties on the other tabs in the theme editor You can edit them as usual Using a type variation Now that a type variation has been created you can apply it to your nodes In the inspector dock under the Theme property of a control node you can find the Theme Type Variation property It is empty by default which means that only the base type has an effect on this node You can either select a type variation from a dropdown list or input its name manually Variations appear on the list only if the type variation belongs to the project wide theme which you can configure in the project settings For any other case you have to input the name of the variation manually Click on the pencil icon to the right Then type in the name of the type variation and click the check mark icon or press enter If a type variation with that name exists it will now be used by the node User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Using Fonts Godot allows you to set specific fonts for different UI nodes There are three different places where you can setup font usage The first is the theme editor Choose the node you want to set the font for and select the font tab The second is in the inspector for control nodes under Theme Overrides Fonts Lastly in the inspector settings for themes under Default Font If no font override is specified anywhere Open Sans SemiBold is used as the default project font Note Since Godot 4 0 font sizes are no longer defined in the font itself but are instead defined in the node that uses the font This is done in the Theme Overrides Font Sizes section of the inspector This allows changing the font size without having to duplicate the font resource for every different font size There are 2 kinds of font files dynamic TTF OTF WOFF WOFF2 formats and bitmap BMFont fnt format or monospaced image Dynamic fonts are the most commonly used option as they can be resized and still look crisp at higher sizes Thanks to their vector based nature they can also contain a lot more glyphs while keeping a reasonable file size compared to bitmap fonts Dynamic fonts also support some advanced features that bitmap fonts cannot support such as ligatures several characters transforming into a single different design Tip You can find freely licensed font files on websites such as Google Fonts and Font Library Fonts are covered by copyright Double check the license of a font before using it as not all fonts allow commercial use without purchasing a license See also You can see how fonts work in action using the BiDI and Font Features demo project Dynamic fonts Godot supports the following dynamic font formats TrueType Font or Collection ttf ttc OpenType Font or Collection otf otc Web Open Font Format 1 woff Web Open Font Format 2 woff2 since Godot 3 5 While woff and especially woff2 tend to result in smaller file sizes there is no universally better font format In most situations it s recommended to use the font format that was shipped on the font developer s website Bitmap fonts Godot supports the BMFont fnt bitmap font format This is a format created by the BMFont program Many BMFont compatible programs also exist like BMGlyph or web based fontcutter Alternatively you can import any image to be used as a bitmap font This is only supported for monospaced fonts fonts where each character has the same width To do so select the image in the FileSystem dock go to the Import dock change its import type to Font Data Monospace Image Font then click Reimport Changing import type to Font Data Monospace Image Font The font s character set layout can be in any order but orders that match standard Unicode are recommended as they ll require far less configuration to import For example the bitmap font below contains ASCII characters and follows standard ASCII ordering Credit LibreQuake scaled and cropped to exclude extended range The following import options can be used to import the above font image successfully Import options to use for the above example font The Character Ranges option is an array that maps each position on the image in tile coordinates not pixels The font atlas is traversed from left to right and top to bottom Characters can be specified with decimal numbers 127 hexadecimal numbers 0x007f or between single quotes Ranges can be specified with a hyphen between characters For instance 0 127 or 0x0000 0x007f denotes the full ASCII range As another example is equivalent to 32 127 and denotes the range of printable visible ASCII characters Make sure the Character Ranges option doesn t exceed the number of Columns Rows defined Otherwise the font will fail to import If your font image contains margins not used for font glyphs such as attribution information try adjusting Image Margin This is a margin applied only once around the whole image If your font image contains guides in the form of lines between glyphs or if spacing between characters appears incorrect try adjusting Character Margin This margin is applied for every imported glyph Loading a font file To load a font file dynamic or bitmap use the resource dropdown s Quick Load or Load option next to a font property then navigate to the font file in question Loading a font file You can also drag and drop a font file from the FileSystem dock to the inspector property that accepts a Font resource Warning In Godot 4 0 and later texture filter and repeat properties are defined in the location where the texture is used rather than on the texture itself This also applies to fonts both dynamic fonts and bitmap fonts Fonts that have a pixel art appearance should have bilinear filtering disabled by changing the Rendering Textures Canvas Textures Default Texture Filter project setting to Nearest The font size must also be an integer multiple of the design size which varies on a per font basis and the Control node using the font must be scaled by an integer multiple as well Otherwise the font may look blurry Font sizes in Godot are specified in pixels px not points pt Keep this in mind when comparing font sizes across different software The texture filter mode can also be set on individual nodes that inherit from CanvasItem by setting CanvasItem texture_filter Font outlines and shadows Font outlines and shadows can be used to improve readability when the background color isn t known in advance For instance this is the case for HUD elements that are drawn over a 2D 3D scene Font outlines are available in most nodes that derive from Control in addition to Label3D To enable outline for a font on a given node configure the theme overrides Font Outline Color and Outline Size in the inspector The result should look like this Font outline example Note If using a font with MSDF rendering its MSDF Pixel Range import option be set to at least twice the value of the outline size for outline rendering to look correct Otherwise the outline may appear to be cut off earlier than intended Support for font shadows is more limited they are only available in Label and RichTextLabel Additionally font shadows always have a hard edge but you can reduce their opacity to make them look more subtle To enable font shadows on a given node configure the Font Shadow Color Shadow Offset X and Shadow Offset Y theme overrides in a Label or RichTextLabel node accordingly Configuring font shadow in a Label node The result should look like this Font shadow example Tip You can create local overrides to font display in Label nodes by creating a LabelSettings resource that you reuse across Label nodes This resource takes priority over theme properties Advanced font features Antialiasing You can adjust how the font should be smoothed out when rendering by adjusting antialiasing and hinting These are different properties with different use cases Antialiasing controls how glyph edges should be smoothed out when rasterizing the font The default antialiasing method Grayscale works well on every display technology However at small sizes grayscale antialiasing may result in fonts looking blurry The antialiasing sharpness can be improved by using LCD subpixel optimization which exploits the subpixel patterns of most LCD displays by offsetting the font antialiasing on a per channel basis red green blue The downside is that this can introduce fringing on edges especially on display technologies that don t use standard RGB subpixels such as OLED displays In most games it s recommended to stick to the default Grayscale antialiasing For non game applications LCD subpixel optimization is worth exploring From top to bottom Disabled Grayscale LCD Subpixel RGB Note Antialiasing cannot be changed on MSDF rendered fonts these are always rendered with grayscale antialiasing Hinting Hinting controls how aggressively glyph edges should be snapped to pixels when rasterizing the font None results in the smoothest appearance which can make the font look blurry at small sizes Light default is sharper by snapping glyph edges to pixels on the Y axis only while Full is even sharper by snapping glyph edges to pixels on both X and Y axes Depending on personal preference you may prefer using one hinting mode over the other From top to bottom None Light Full hinting Note If changing the hinting mode has no visible effect after clicking Reimport it s usually because the font doesn t include hinting instructions This can be resolved by looking for a version of the font file that includes hinting instructions or enabling Force Autohinter in the Import dock This will use FreeType s autohinter to automatically add hinting instructions to the imported font Subpixel positioning Subpixel positioning can be adjusted This is a FreeType feature that allows glyphs to be rendered more closely to their intended form The default setting of Auto automatically enables subpixel positioning at small sizes but disables it at large font sizes to improve rasterization performance You can force the subpixel positioning mode to Disabled One half of a pixel or One quarter of a pixel One quarter of a pixel provides the best quality at the cost of longer rasterization times Changing antialiasing hinting and subpixel positioning has the most visible effect at smaller font sizes Warning Fonts that have a pixel art appearance should have their subpixel positioning mode set to Disabled Otherwise the font may appear to have uneven pixel sizes This step is not required for bitmap fonts as subpixel positioning is only relevant for dynamic fonts which are usually made of vector elements Mipmaps By default fonts do not have mipmaps generated to reduce memory usage and speed up rasterization However this can cause downscaled fonts to become grainy This can be especially noticeable with 3D text that doesn t have Fixed Size enabled This can also occur when displaying text with a traditional rasterized non MSDF font in a Control node that has its scale lower than 1 1 After selecting a font in the FileSystem dock you can enable the Mipmaps in the Import dock to improve downscaled font rendering appearance Mipmaps can be enabled on MSDF fonts as well This can improve font rendering quality a little at smaller than default sizes but MSDF fonts are already resistant to graininess out of the box MSDF font rendering Multi channel signed distance field MSDF font rendering allows rendering fonts at any size without having to re rasterize them when their size changes MSDF font rendering has 2 upsides over traditional font rasterization which Godot uses by default The font will always look crisp even at huge sizes There is less stuttering when rendering characters at large font sizes for the first time as there is no rasterization performed The downsides of MSDF font rendering are Higher baseline cost for font rendering This is usually not noticeable on desktop platforms but it can have an impact on low end mobile devices Fonts at small sizes will not look as clear as rasterized fonts due to the lack of hinting Rendering new glyphs for the first time at small font sizes may be more expensive compared to traditional rasterized fonts Font prerendering can be used to alleviate this LCD subpixel optimization cannot be enabled for MSDF fonts Fonts with self intersecting outlines will not render correctly in MSDF mode If you notice rendering issues on fonts downloaded from websites such as Google Fonts try downloading the font from the font author s official website instead Comparison of font rasterization methods From top to bottom rasterized without oversampling rasterized with oversampling MSDF To enable MSDF rendering for a given font select it in the FileSystem dock go to the Import dock enable Multichannel Signed Distance Field then click Reimport Enabling MSDF in the font s import options Using emoji Godot has limited support for emoji fonts CBDT CBLC embedded PNGs and SVG emoji fonts are supported COLR CPAL emoji fonts custom vector format are not supported EMJC bitmap image compression used by iOS system emoji font is not supported This means that to support emoji on iOS you must use a custom font that uses SVG or PNG bitmap compression instead For Godot to be able to display emoji the font used or one of its fallbacks needs to include them Otherwise emoji won t be displayed and placeholder tofu characters will appear instead Default appearance when trying to use emoji in a label After adding a font to display emoji such as Noto Color Emoji you get the expected result Correct appearance after adding an emoji font to the label To use a regular font alongside emoji it s recommended to specify a fallback font that points to the emoji font in the regular font s advanced import options If you wish to use the default project font while displaying emoji leave the Base Font property in FontVariation empty while adding a font fallback pointing to the emoji font Tip Emoji fonts are quite large in size so you may want to load a system font to provide emoji glyphs rather than bundling it with your project This allows providing full emoji support in your project without increasing the size of its exported PCK The downside is that emoji will look different depending on the platform and loading system fonts is not supported on all platforms It s possible to use a system font as a fallback font too Using icon fonts Tools like Fontello can be used to generate font files containing vectors imported from SVG files This can be used to render custom vector elements as part of your text or to create extruded 3D icons with 3D text and TextMesh Note Fontello currently does not support creating multicolored fonts which Godot can render As of November 2022 support for multicolored fonts in icon font generation tools remains scarce Depending on your use cases this may lead to better results compared to using the img tag in RichTextLabel Unlike bitmap images including SVGs which are rasterized on import by Godot true vector data can be resized to any size without losing quality After downloading the generated font file load it in your Godot project then specify it as a custom font for a Label RichTextLabel or Label3D node Switch over to the Fontello web interface then copy the character by selecting it then pressing Ctrl C Cmd C on macOS Paste the character in the Text property of your Label node The character will appear as a placeholder glyph in the inspector but it should appear correctly in the 2D 3D viewport To use an icon font alongside a traditional font in the same Control you can specify the icon font as a fallback This works because icon fonts use the Unicode private use area which is reserved for use by custom fonts and doesn t contain standard glyphs by design Note Several modern icon fonts such as Font Awesome 6 have a desktop variant that uses ligatures to specify icons This allows you to specify icons by entering their name directly in the Text property of any node that can display fonts Once the icon s name is fully entered as text such as house it will be replaced by the icon While easier to use this approach cannot be used with font fallbacks as the main font s characters will take priority over the fallback font s ligatures Font fallbacks Godot supports defining one or more fallbacks when the main font lacks a glyph to be displayed There are 2 main use cases for defining font fallbacks Use a font that only supports Latin character sets but use another font to be able to display text another character set such as Cyrillic Use a font to render text and another font to render emoji or icons Open the Advanced Import Settings dialog by double clicking the font file in the FileSystem dock You can also select the font in the FileSystem dock go to the Import dock then choose Advanced at the bottom Import dock In the dialog that appears look for Fallbacks section on the sidebar on the right click the Array Font size 0 text to expand the property then click Add Element Adding font fallback Click the dropdown arrow on the new element then choose a font file using the Quick Load or Load options Loading font fallback It is possible to add fallback fonts while using the default project font To do so leave the Base Font property empty while adding one or more font fallbacks Note Font fallbacks can also be defined on a local basis similar to OpenType font features but this is not covered here for brevity reasons Variable fonts Godot has full support for variable fonts which allow you to use a single font file to represent various font weights and styles regular bold italic This must be supported by the font file you re using To use a variable font create a FontVariation resource in the location where you intend to use the font then load a font file within the FontVariation resource Creating a FontVariation resource Loading a font file into the FontVariation resource Scroll down to the FontVariation s Variation section then click the Variation Coordinates text to expand the list of axes that can be adjusted List of variation axes The set of axes you can adjust depends on the font loaded Some variable fonts only support one axis of adjustment typically weight or slant while others may support multiple axes of adjustment For example here s the Inter V font with a weight of 900 and a slant of 10 Variable font example Inter V Tip While variable font axis names and scales aren t standardized some common conventions are usually followed by font designers The weight axis is standardized in OpenType to work as follows Axis value Effective font weight 100 Thin Hairline 200 Extra Light Ultra Light 300 Light 400 Regular Normal 500 Medium 600 Semi Bold Demi Bold 700 Bold 800 Extra Bold Ultra Bold 900 Black Heavy 950 Extra Black Ultra Black You can save the FontVariation to a tres resource file to reuse it in other places Saving FontVariation to an external resource file Faux bold and italic When writing text in bold or italic using font variants specifically designed for this looks better Spacing between glyphs will be more consistent when using a bold font and certain glyphs shapes may change entirely in italic variants compare a and a However real bold and italic fonts require shipping more font files which increases distribution size A single variable font file can also be used but this file will be larger than a single non variable font While file size is usually not an issue for desktop projects it can be a concern for mobile web projects that strive to keep distribution size as low as possible To allow bold and italic fonts to be displayed without having to ship additional fonts or use a variable font that is larger in size Godot supports faux bold and italic Faux bold italic top real bold italic bottom Normal font used Open Sans SemiBold Faux bold and italic is automatically used in RichTextLabel s bold and italic tags if no custom fonts are provided for bold and or italic To use faux bold create a FontVariation resource in a property where a Font resource is expected Set Variation Embolden to a positive value to make a font bolder or to a negative value to make it less bold Recommended values are between 0 5 and 1 2 depending on the font Faux italic is created by skewing the text which is done by modifying the per character transform This is also provided in FontVariation using the Variation Transform property Setting the yx component of the character transform to a positive value will italicize the text Recommended values are between 0 2 and 0 4 depending on the font Adjusting font spacing For stylistic purposes or for better readability you may want to adjust how a font is presented in Godot Create a FontVariation resource in a property where a Font resource is expected There are 4 properties available in the Variation Extra Spacing section which accept positive and negative values Glyph Additional spacing between every glyph Space Additional spacing between words Top Additional spacing above glyphs This is used for multiline text but also to calculate the minimum size of controls such as Label and Button Top Additional spacing below glyphs This is used for multiline text but also to calculate the minimum size of controls such as Label and Button The Variation Transform property can also be adjusted to stretch characters horizontally or vertically This is specifically done by adjusting the xx horizontal scale and yy vertical scale components Remember to adjust glyph spacing to account for any changes as glyph transform doesn t affect how much space each glyph takes in the text Non uniform scaling of this kind should be used sparingly as fonts are generally not designed to be displayed with stretching OpenType font features Godot supports enabling OpenType font features which are a standardized way to define alternate characters that can be toggled without having to swap font files entirely Despite being named OpenType font features these are also supported in TrueType ttf and WOFF WOFF2 font files Support for OpenType features highly depends on the font used Some fonts don t support any OpenType features while other fonts can support dozens of toggleable features There are 2 ways to use OpenType font features Globally on a font file Open the Advanced Import Settings dialog by double clicking the font file in the FileSystem dock You can also select the font in the FileSystem dock go to the Import dock then choose Advanced at the bottom Import dock In the dialog that appears look for the Metadata Overrides OpenType Features section on the sidebar on the right click the Features 0 of N set text to expand the property then click Add Feature OpenType feature overrides in Advanced Import Settings In a specific font usage FontVariation To use a font feature create a FontVariation resource like you would do for a variable font then load a font file within the FontVariation resource Creating a FontVariation resource Loading a font file into a FontVariation resource Scroll down to the FontVariation s OpenType Features section click the Features 0 of N set text to expand the property then click Add Feature and select the desired feature in the dropdown Specifying OpenType features in a FontVariation resource For example here s the Inter font without the Slashed Zero feature top then with the Slashed Zero OpenType feature enabled bottom OpenType feature comparison Inter You can disable ligatures and or kerning for a specific font by adding OpenType features then unchecking them in the inspector Disabling ligatures and kerning for a font System fonts Warning Loading system fonts is only supported on Windows macOS Linux Android and iOS However loading system fonts on Android is unreliable as there is no official API for doing so Godot has to rely on parsing system configuration files which can be modified by third party Android vendors This may result in non functional system font loading System fonts are a different type of resource compared to imported fonts They are never actually imported into the project but are loaded at run time This has 2 benefits The fonts are not included within the exported PCK file leading to a smaller file size for the exported project Since fonts are not included with the exported project this avoids licensing issues that would occur if proprietary system fonts were distributed alongside the project The engine automatically uses system fonts as fallback fonts which makes it possible to display CJK characters and emoji without having to load a custom font There are some restrictions that apply though as mentioned in the Using emoji section Create a SystemFont resource in the location where you desire to use the system font Creating a SystemFont resource Specifying a font name to use in a SystemFont resource You can either specify one or more font names explicitly such as Arial or specify the name of a font alias that maps to a standard default font for the system Font alias Windows macOS iOS Linux Android sans serif Arial Helvetica Handled by fontconfig Roboto Noto Sans serif Times New Roman Times Handled by fontconfig Noto Serif monospace Courier New Courier Handled by fontconfig Droid Sans Mono cursive Comic Sans MS Apple Chancery Handled by fontconfig Dancing Script fantasy Gabriola Papyrus Handled by fontconfig Droid Sans Mono On Android Roboto is used for Latin Cyrillic text and Noto Sans is used for other languages glyphs such as CJK On third party Android distributions the exact font selection may differ If specifying more than one font the first font that is found on the system will be used from top to bottom Font names and aliases are case insensitive on all platforms Like for font variations you can save the SystemFont arrangement to a resource file to reuse it in other places Remember that different system fonts have different metrics which means that text that can fit within a rectangle on one platform may not be doing so on another platform Always reserve some additional space during development so that labels can extend further if needed Note Unlike Windows and macOS iOS the set of default fonts shipped on Linux depends on the distribution This means that on different Linux distributions different fonts may be displayed for a given system font name or alias It is also possible to load fonts at runtime even if they aren t installed on the system See Runtime loading and saving for details Font prerendering When using traditional rasterized fonts Godot caches glyphs on a per font and per size basis This reduces stuttering but it can still occur the first time a glyph is displayed when running the project This can be especially noticeable at higher font sizes or on mobile devices When using MSDF fonts they only need to be rasterized once to a special signed distance field texture This means caching can be done purely on a per font basis without taking the font size into consideration However the initial rendering of MSDF fonts is slower compared to a traditional rasterized font at a medium size To avoid stuttering issues related to font rendering it is possible to prerender certain glyphs This can be done for all glyphs you intend to use for optimal results or only for common glyphs that are most likely to appear during gameplay to reduce file size Glyphs that aren t pre rendered will be rasterized on the fly as usual Note In both cases traditional and MSDF font rasterization is done on the CPU This means that the GPU performance doesn t affect how long it takes for fonts to be rasterized Open the Advanced Import Settings dialog by double clicking the font file in the FileSystem dock You can also select the font in the FileSystem dock go to the Import dock then choose Advanced at the bottom Import dock Move to the Pre render Configurations tab of the Advanced Import Settings dialog then add a configuration by clicking the plus symbol Adding a new prerendering configuration in the Advanced Import Settings dialog After adding a configuration make sure it is selected by clicking its name once You can also rename the configuration by double clicking it There are 2 ways to add glyphs to be prerendered to a given configuration It is possible to use both approaches in a cumulative manner Using text from translations For most projects this approach is the most convenient to use as it automatically sources text from your language translations The downside is that it can only be used if your project supports internationalization Otherwise stick to the Using custom text approach described below After adding translations to the Project Settings use the Glyphs from the Translations tab to check translations by double clicking them then click Shape All Strings in the Translations and Add Glyphs at the bottom Enabling prerendering in the Advanced Import Settings dialog with the Glyphs from the Translations tab Note The list of prerendered glyphs is not automatically updated when translations are updated so you need to repeat this process if your translations have changed significantly Using custom text While it requires manually specifying text that will appear in the game this is the most efficient approach for games which don t feature user text input This approach is worth exploring for mobile games to reduce the file size of the distributed app To use existing text as a baseline for prerendering go to the Glyphs from the Text sub tab of the Advanced Import Settings dialog enter text in the window on the right then click Shape Text and Add Glyphs at the bottom of the dialog Enabling prerendering in the Advanced Import Settings dialog with the Glyphs from the Text tab Tip If your project supports internationalization you can paste the contents of your CSV or PO files in the above box to quickly prerender all possible characters that may be rendered during gameplay excluding user provided or non translatable strings By enabling character sets The second method requires less configuration and fewer updates if your game s text changes and is more suited to text heavy games or multiplayer games with chat On the other hand it may cause glyphs that never show up in the game to be prerendered which is less efficient in terms of file size To use existing text as a baseline for prerendering go to the Glyphs from the Character Map sub tab of the Advanced Import Settings dialog then double click character sets to be enabled on the right Enabling prerendering in the Advanced Import Settings dialog with the Glyphs from the Character Map tab To ensure full prerendering the character sets you need to enable depend on which languages are supported in your game For English only Basic Latin needs to be enabled Enabling Latin 1 Supplement as well allows fully covering many more languages such as French German and Spanish For Russian Cyrillic needs to be enabled and so on Default project font properties In the GUI Theme section of the advanced Project Settings you can choose how the default font should be rendered Default Font Antialiasing Controls the antialiasing method used for the default project font Default Font Hinting Controls the hinting method used for the default project font Default Font Subpixel Positioning Controls the subpixel positioning method for the default project font Default Font Multichannel Signed Distance Field If true makes the default project font use MSDF font rendering instead of traditional rasterization Default Font Generate Mipmaps If true enables mipmap generation and usage for the default project font Note These project settings only affect the default project font the one that is hardcoded in the engine binary Custom fonts properties are governed by their respective import options instead You can use the Import Defaults section of the Project Settings dialog to override default import options for custom fonts User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue BBCode in RichTextLabel Introduction Label nodes are great for displaying basic text but they have limitations If you want to change the color of the text or its alignment you can only do that to the entire label You can t make a part of the text have another color or have a part of the text centered To get around these limitations you would use a RichTextLabel RichTextLabel allows for complex formatting of text using a markup syntax or the built in API It uses BBCodes for the markup syntax a system of tags that designate formatting rules for a part of the text You may be familiar with them if you ever used forums also known as bulletin boards hence the BB in BBCode Unlike Label RichTextLabel also comes with its own vertical scrollbar This scrollbar is automatically displayed if the text does not fit within the control s size The scrollbar can be disabled by unchecking the Scroll Active property in the RichTextLabel inspector Note that the BBCode tags can also be used to some extent in the XML source of the class reference For more information see Class reference primer See also You can see how BBCode in RichTextLabel works in action using the Rich Text Label with BBCode demo project Using BBCode By default RichTextLabel functions like a normal Label It has the property_text property which you can edit to have uniformly formatted text To be able to use BBCode for rich text formatting you need to turn on the BBCode mode by setting bbcode_enabled After that you can edit the text property using available tags Both properties are located at the top of the inspector after selecting a RichTextLabel node For example BBCode color green test color would render the word test with a green color Most BBCodes consist of 3 parts the opening tag the content and the closing tag The opening tag delimits the start of the formatted part and can also carry some configuration options Some opening tags like the color one shown above also require a value to work Other opening tags may accept multiple options separated by spaces within the opening tag The closing tag delimits the end of the formatted part In some cases both the closing tag and the content can be omitted Unlike BBCode in HTML leading trailing whitespace is not removed by a RichTextLabel upon display Duplicate spaces are also displayed as is in the final output This means that when displaying a code block in a RichTextLabel you don t need to use a preformatted text tag tag content tag tag value content tag tag option1 value1 option2 value2 content tag tag tag tag Copy to clipboard Note RichTextLabel doesn t support entangled BBCode tags For example instead of using b bold i bold italic b italic i Copy to clipboard Use b bold i bold italic i b i italic i Copy to clipboard Handling user input safely In a scenario where users may freely input text such as chat in a multiplayer game you should make sure users cannot use arbitrary BBCode tags that will be parsed by RichTextLabel This is to avoid inappropriate use of formatting which can be problematic if url tags are handled by your RichTextLabel as players may be able to create clickable links to phishing sites or similar Using RichTextLabel s lb and or rb tags we can replace the opening and or closing brackets of any BBCode tag in a message with those escaped tags This prevents users from using BBCode that will be parsed as tags instead the BBCode will be displayed as text Example of unescaped user input resulting in BBCode injection 2nd line and escaped user input 3rd line The above image was created using the following script extends RichTextLabel func _ready append_chat_line Player 1 Hello world append_chat_line Player 2 Hello color red BBCode injection color no escaping append_chat_line_escaped Player 2 Hello color red BBCode injection color with escaping Returns escaped BBCode that won t be parsed by RichTextLabel as tags func escape_bbcode bbcode_text We only need to replace opening brackets to prevent tags from being parsed return bbcode_text replace lb Appends the user s message as is without escaping This is dangerous func append_chat_line username message append_text s color green s color n username message Appends the user s message with escaping Remember to escape both the player name and message contents func append_chat_line_escaped username message append_text s color green s color n escape_bbcode username escape_bbcode message Copy to clipboard Stripping BBCode tags For certain use cases it can be desired to remove BBCode tags from the string This is useful when displaying the RichTextLabel s text in another Control that does not support BBCode such as a tooltip extends RichTextLabel func _ready var regex RegEx new regex compile var text_without_tags regex sub text true text_without_tags contains the text with all BBCode tags removed Copy to clipboard Note Removing BBCode tags entirely isn t advised for user input as it can modify the displayed text without users understanding why part of their message was removed Escaping user input should be preferred instead Performance In most cases you can use BBCode directly as is since text formatting is rarely a heavy task However with particularly large RichTextLabels such as console logs spanning thousands of lines you may encounter stuttering during gameplay when the RichTextLabel s text is updated There are several ways to alleviate this Use the append_text function instead of appending to the text property This function will only parse BBCode for the added text rather than parsing BBCode from the entire text property Use push_ tag and pop functions to add tags to RichTextLabel instead of using BBCode Enable the Threading Threaded property in RichTextLabel This won t speed up processing but it will prevent the main thread from blocking which avoids stuttering during gameplay Only enable threading if it s actually needed in your project as threading has some overhead Using push_ tag and pop functions instead of BBCode If you don t want to use BBCode for performance reasons you can use functions provided by RichTextLabel to create formatting tags without writing BBCode in the text Every BBCode tag including effects has a push_ tag function where tag is the tag s name There are also a few convenience functions available such as push_bold_italics that combines both push_bold and push_italics into a single tag See the RichTextLabel class reference for a complete list of push_ tag functions The pop function is used to end any tag Since BBCode is a tag stack using pop will close the most recently started tags first The following script will result in the same visual output as using BBCode color green test i example i color extends RichTextLabel func _ready append_text BBCode Trailing space separates words from each other push_color Color GREEN append_text test Trailing space separates words from each other push_italics append_text example pop Ends the tag opened by push_italics pop Ends the tag opened by push_color Copy to clipboard Warning Do not set the text property directly when using formatting functions Appending to the text property will erase all modifications made to the RichTextLabel using the append_text push_ tag and pop functions Reference See also Some of these BBCode tags can be used in tooltips for export script variables as well as in the XML source of the class reference For more information see Class reference BBCode Tag Example b Makes text use the bold or bold italics font of RichTextLabel b text b i Makes text use the italics or bold italics font of RichTextLabel i text i u Makes text underlined u text u s Makes text strikethrough s text s code Makes text use the mono font of RichTextLabel code text code char Adds Unicode character with hexadecimal UTF 32 codepoint char codepoint p Adds new paragraph with text Supports configuration options see Paragraph options p text p p options text p center Makes text horizontally centered Same as p align center center text center left Makes text horizontally left aligned Same as p align left left text left right Makes text horizontally right aligned Same as p align right right text right fill Makes text fill the full width of RichTextLabel Same as p align fill fill text fill indent Indents text once The indentation width is the same as with ul or ol but without a bullet point indent text indent url Creates a hyperlink underlined and clickable text Can contain optional text or display link as is Must be handled with the meta_clicked signal to have an effect see Handling url tag clicks url link url url link text url hint Creates a tooltip hint that is displayed when hovering the text with the mouse Tooltip text should not be quoted quotes will appear as is in the tooltip otherwise hint tooltip text displayed on hover text hint img Inserts an image from the path can be any valid Texture2D resource If width is provided the image will try to fit that width maintaining the aspect ratio If both width and height are provided the image will be scaled to that size Add to the end of width or height value to specify it as percentages of the control width instead of pixels If valign configuration is provided the image will try to align to the surrounding text see Image and table vertical alignment Supports configuration options see Image options img path img img width path img img width x height path img img valign path img img options path img font Makes text use a font resource from the path Supports configuration options see Font options font path text font font options text font font_size Use custom font size for text font_size size text font_size dropcap Use a different font size and color for text while making the tag s contents span multiple lines if it s large enough A drop cap is typically one uppercase character but dropcap supports containing multiple characters margins values are comma separated and can be positive zero or negative Negative top and bottom margins are particularly useful to allow the rest of the paragraph to display below the dropcap dropcap font font font_size size color color outline_size size outline_color color margins left top right bottom text dropcap opentype_features Enables custom OpenType font features for text Features must be provided as a comma separated list opentype_features list text opentype_features lang Overrides the language for text that is set by the BiDi Language property in RichTextLabel code must be an ISO language code This can be used to enforce the use of a specific script for a language without starting a new paragraph Some font files may contain script specific substitutes in which case they will be used lang code text lang color Changes the color of text Color must be provided by a common name see Named colors or using the HEX format e g ff00ff see Hexadecimal color codes color code name text color bgcolor Draws the color behind text This can be used to highlight text Accepts same values as the color tag bgcolor code name text bgcolor fgcolor Draws the color in front of text This can be used to redact text by using an opaque foreground color Accepts same values as the color tag fgcolor code name text fgcolor outline_size Use custom font outline size for text outline_size size text outline_size outline_color Use custom outline color for text Accepts same values as the color tag outline_color code name text outline_color table Creates a table with the number of columns Use the cell tag to define table cells If valign configuration is provided the table will try to align to the surrounding text see Image and table vertical alignment If baseline alignment is used the table is aligned to the baseline of the row with index alignment_row zero based table number cells table table number valign cells table table number valign alignment_row cells table cell Adds a cell with text to the table If ratio is provided the cell will try to expand to that value proportionally to other cells and their ratio values Supports configuration options see Cell options cell text cell cell ratio text cell cell options text cell ul Adds an unordered list List items must be provided by putting one item per line of text The bullet point can be customized using the bullet parameter see Unordered list bullet ul items ul ul bullet bullet items ul ol Adds an ordered numbered list of the given type see Ordered list types List items must be provided by putting one item per line of text ol type type items ol lb rb Adds and respectively Allows escaping BBCode markup These are self closing tags which means you do not need to close them and there is no lb or rb closing tag lb b rb text lb b rb will display as b text b Several Unicode control characters can be added using their own self closing tags This can result in easier maintenance compared to pasting those control characters directly in the text lrm left to right mark rlm right to left mark lre left to right embedding rle right to left embedding lro left to right override rlo right to left override pdf pop directional formatting alm Arabic letter mark lri left to right isolate rli right to left isolate fsi first strong isolate pdi pop directional isolate zwj zero width joiner zwnj zero width non joiner wj word joiner shy soft hyphen Note Tags for bold b and italics i formatting work best if the appropriate custom fonts are set up in the RichTextLabelNode s theme overrides If no custom bold or italic fonts are defined faux bold and italic fonts will be generated by Godot These fonts rarely look good in comparison to hand made bold italic font variants The monospaced code tag only works if a custom font is set up in the RichTextLabel node s theme overrides Otherwise monospaced text will use the regular font There are no BBCode tags to control vertical centering of text yet Options can be skipped for all tags Paragraph options align Values left or l center or c right or r fill or f Default left Text horizontal alignment bidi_override st Values default of d uri or u file or f email or e list or l none or n custom or c Default default Structured text override justification_flags jst Values Comma separated list of the following values kashida or k word or w trim or tr after_last_tab or lt skip_last or sl skip_last_with_chars or sv do_not_skip_single or ns Default word kashida skip_last do_not_skip_single Justification fill alignment option See TextServer for more details direction dir Values ltr or l rtl or r auto or a Default Inherit Base BiDi direction language lang Values ISO language codes See Locale codes Default Inherit Locale override Some font files may contain script specific substitutes in which case they will be used tab_stops Values List of floating point numbers e g 10 0 30 0 Default Width of the space character in the font Overrides the horizontal offsets for each tab character When the end of the list is reached the tab stops will loop over For example if you set tab_stops to 10 0 30 0 the first tab will be at 10 pixels the second tab will be at 10 30 40 pixels and the third tab will be at 10 30 10 50 pixels from the origin of the RichTextLabel Handling url tag clicks By default url tags do nothing when clicked This is to allow flexible use of url tags rather than limiting them to opening URLs in a web browser To handle clicked url tags connect the RichTextLabel node s meta_clicked signal to a script function For example the following method can be connected to meta_clicked to open clicked URLs using the user s default web browser This assumes RichTextLabel s meta_clicked signal was connected to the function below using the signal connection dialog func _richtextlabel_on_meta_clicked meta meta is not guaranteed to be a String so convert it to a String to avoid script errors at run time OS shell_open str meta Copy to clipboard For more advanced use cases it s also possible to store JSON in an url tag s option and parse it in the function that handles the meta_clicked signal For example url example value JSON url Copy to clipboard Image options color Values Color name or color in HEX format Default Inherit Color tint of the image modulation height Values Integer number Default Inherit Target height of the image in pixels add to the end of value to specify it as percentages of the control width instead of pixels width Values Integer number Default Inherit Target width of the image add to the end of value to specify it as percentages of the control width instead of pixels region Values x y width height in pixels Default Inherit Region rect of the image This can be used to display a single image from a spritesheet pad Values false true Default false If set to true and the image is smaller than the size specified by width and height the image padding is added to match the size instead of upscaling tooltip Values String Default Image tooltip Image and table vertical alignment When a vertical alignment value is provided with the img or table tag the image table will try to align itself against the surrounding text Alignment is performed using a vertical point of the image and a vertical point of the text There are 3 possible points on the image top center and bottom and 4 possible points on the text and table top center baseline and bottom which can be used in any combination To specify both points use their full or short names as a value of the image table tag text img top bottom img text text img center center img text Copy to clipboard text table 3 center table text Center to center text table 3 top bottom table text Top of the table to the bottom of text text table 3 baseline baseline 1 table text Baseline of the second row rows use zero based indexing to the baseline of text Copy to clipboard You can also specify just one value top center or bottom to make use of a corresponding preset top top center center and bottom bottom respectively Short names for the values are t top c center l baseline and b bottom Font options name n Values A valid Font resource path Default Inherit Font resource path size s Values Number in pixels Default Inherit Custom font size glyph_spacing gl Values Number in pixels Default Inherit Extra spacing for each glyph space_spacing sp Values Number in pixels Default Inherit Extra spacing for the space character top_spacing top Values Number in pixels Default Inherit Extra spacing at the top of the line bottom_spacing bt Values Number in pixels Default Inherit Extra spacing at the bottom of the line embolden emb Values Floating point number Default 0 0 Font embolden strength if it is not equal to zero emboldens the font outlines Negative values reduce the outline thickness face_index fi Values Integer number Default 0 An active face index in the TrueType OpenType collection slant sln Values Floating point number Default 0 0 Font slant strength positive values slant glyphs to the right Negative values to the left opentype_variation otv Values Comma separated list of the OpenType variation tags Default Font OpenType variation coordinates See OpenType variation tags Note The value should be enclosed in to allow using inside it font otv wght 200 wdth 400 Sets variable font weight and width Copy to clipboard opentype_features otf Values Comma separated list of the OpenType feature tags Default Font OpenType features See OpenType features tags Note The value should be enclosed in to allow using inside it font otf calt 0 zero 1 Disable contextual alternates enable slashed zero Copy to clipboard Named colors For tags that allow specifying a color by name you can use names of the constants from the built in Color class Named classes can be specified in a number of styles using different casings DARK_RED DarkRed and darkred will give the same exact result Hexadecimal color codes For opaque RGB colors any valid 6 digit hexadecimal code is supported e g color ffffff white color Shorthand RGB color codes such as 6f2 equivalent to 66ff22 are also supported For transparent RGB colors any RGBA 8 digit hexadecimal code can be used e g color ffffff88 translucent white color Note that the alpha channel is the last component of the color code not the first one Short RGBA color codes such as 6f28 equivalent to 66ff2288 are supported as well Cell options expand Values Integer number Default 1 Cell expansion ratio This defines which cells will try to expand to proportionally to other cells and their expansion ratios border Values Color name or color in HEX format Default Inherit Cell border color bg Values Color name or color in HEX format Default Inherit Cell background color For alternating odd even row backgrounds you can use bg odd_color even_color padding Values 4 comma separated floating point numbers Default 0 0 0 0 Left top right and bottom cell padding Unordered list bullet By default the ul tag uses the U 2022 Bullet Unicode glyph as the bullet character This behavior is similar to web browsers The bullet character can be customized using ul bullet bullet If provided this bullet parameter must be a single character with no enclosing quotes for example bullet Additional characters are ignored The bullet character s width does not affect the list s formatting See Bullet typography on Wikipedia for a list of common bullet characters that you can paste directly in the bullet parameter Ordered list types Ordered lists can be used to automatically mark items with numbers or letters in ascending order This tag supports the following type options 1 Numbers using language specific numbering system if possible a A Lower and upper case Latin letters i I Lower and upper case Roman numerals Text effects BBCode can also be used to create different text effects that can optionally be animated Five customizable effects are provided out of the box and you can easily create your own By default animated effects will pause when the SceneTree is paused You can change this behavior by adjusting the RichTextLabel s Process Mode property All examples below mention the default values for options in the listed tag format Note Text effects that move characters position may result in characters being clipped by the RichTextLabel node bounds You can resolve this by disabling Control Layout Clip Contents in the inspector after selecting the RichTextLabel node or ensuring there is enough margin added around the text by using line breaks above and below the line using the effect Pulse Pulse creates an animated pulsing effect that multiplies each character s opacity and color It can be used to bring attention to specific text Its tag format is pulse freq 1 0 color ffffff40 ease 2 0 text pulse freq controls the frequency of the half pulsing cycle higher is faster A full pulsing cycle takes 2 1 0 freq seconds color is the target color multiplier for blinking The default mostly fades out text but not entirely ease is the easing function exponent to use Negative values provide in out easing which is why the default is 2 0 Wave Wave makes the text go up and down Its tag format is wave amp 50 0 freq 5 0 connected 1 text wave amp controls how high and low the effect goes and freq controls how fast the text goes up and down A freq value of 0 will result in no visible waves and negative freq values won t display any waves either If connected is 1 default glyphs with ligatures will be moved together If connected is 0 each glyph is moved individually even if they are joined by ligatures This can work around certain rendering issues with font ligatures Tornado Tornado makes the text move around in a circle Its tag format is tornado radius 10 0 freq 1 0 connected 1 text tornado radius is the radius of the circle that controls the offset freq is how fast the text moves in a circle A freq value of 0 will pause the animation while negative freq will play the animation backwards If connected is 1 default glyphs with ligatures will be moved together If connected is 0 each glyph is moved individually even if they are joined by ligatures This can work around certain rendering issues with font ligatures Shake Shake makes the text shake Its tag format is shake rate 20 0 level 5 connected 1 text shake rate controls how fast the text shakes level controls how far the text is offset from the origin If connected is 1 default glyphs with ligatures will be moved together If connected is 0 each glyph is moved individually even if they are joined by ligatures This can work around certain rendering issues with font ligatures Fade Fade creates a static fade effect that multiplies each character s opacity Its tag format is fade start 4 length 14 text fade start controls the starting position of the falloff relative to where the fade command is inserted length controls over how many characters should the fade out take place Rainbow Rainbow gives the text a rainbow color that changes over time Its tag format is rainbow freq 1 0 sat 0 8 val 0 8 text rainbow freq is the number of full rainbow cycles per second sat is the saturation of the rainbow val is the value of the rainbow A freq value of 0 will pause the animation while negative freq will play the animation backwards Font outlines are not affected by the rainbow effect they keep their original color Existing font colors are overridden by the rainbow effect However CanvasItem s Modulate and Self Modulate properties will affect how the rainbow effect looks as modulation multiplies its final colors Custom BBCode tags and text effects You can extend the RichTextEffect resource type to create your own custom BBCode tags Create a new script file that extends the RichTextEffect resource type and give the script a class_name so that the effect can be selected in the inspector Add the tool annotation to your GDScript file if you wish to have these custom effects run within the editor itself The RichTextLabel does not need to have a script attached nor does it need to be running in tool mode The new effect can be registered in the Inspector by adding it to the Markup Custom Effects array or in code with the install_effect method Selecting a custom RichTextEffect after saving a script that extends RichTextEffect with a class_name Warning If the custom effect is not registered within the RichTextLabel s Markup Custom Effects property no effect will be visible and the original tag will be left as is There is only one function that you need to extend _process_custom_fx char_fx Optionally you can also provide a custom BBCode identifier simply by adding a member name bbcode The code will check the bbcode property automatically or will use the name of the file to determine what the BBCode tag should be _process_custom_fx This is where the logic of each effect takes place and is called once per glyph during the draw phase of text rendering This passes in a CharFXTransform object which holds a few variables to control how the associated glyph is rendered identity specifies which custom effect is being processed You should use that for code flow control outline is true if effect is called for drawing text outline range tells you how far into a given custom effect block you are in as an index elapsed_time is the total amount of time the text effect has been running visible will tell you whether the glyph is visible or not and will also allow you to hide a given portion of text offset is an offset position relative to where the given glyph should render under normal circumstances color is the color of a given glyph glyph_index and font is glyph being drawn and font data resource used to draw it Finally env is a Dictionary of parameters assigned to a given custom effect You can use get with an optional default value to retrieve each parameter if specified by the user For example custom_fx spread 0 5 color FFFF00 test custom_fx would have a float spread and Color color parameters in its env Dictionary See below for more usage examples The last thing to note about this function is that it is necessary to return a boolean true value to verify that the effect processed correctly This way if there s a problem with rendering a given glyph it will back out of rendering custom effects entirely until the user fixes whatever error cropped up in their custom effect logic Here are some examples of custom effects Ghost tool extends RichTextEffect class_name RichTextGhost Syntax ghost freq 5 0 span 10 0 ghost Define the tag name var bbcode ghost func _process_custom_fx char_fx Get parameters or use the provided default value if missing var speed char_fx env get freq 5 0 var span char_fx env get span 10 0 var alpha sin char_fx elapsed_time speed char_fx range x span 0 5 0 5 char_fx color a alpha return true Copy to clipboard Matrix tool extends RichTextEffect class_name RichTextMatrix Syntax matrix clean 2 0 dirty 1 0 span 50 matrix Define the tag name var bbcode matrix Gets TextServer for retrieving font information func get_text_server return TextServerManager get_primary_interface func _process_custom_fx char_fx Get parameters or use the provided default value if missing var clear_time char_fx env get clean 2 0 var dirty_time char_fx env get dirty 1 0 var text_span char_fx env get span 50 var value char_fx glyph_index var matrix_time fmod char_fx elapsed_time char_fx range x float text_span clear_time dirty_time matrix_time 0 0 if matrix_time clear_time else matrix_time clear_time dirty_time if matrix_time 0 0 value int 1 matrix_time 126 65 value 126 65 value 65 char_fx glyph_index get_text_server font_get_glyph_index char_fx font 1 value 0 return true Copy to clipboard This will add a few new BBCode commands which can be used like so center ghost This is a custom matrix effect matrix ghost made in pulse freq 5 0 height 2 0 pulse color 00FFAA freq 2 0 GDScript pulse pulse center Copy to clipboard User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue XR This section of the manual covers everything related to XR Virtual Reality and Augmented Reality Basic Tutorial Setting up XR Deploying to Android A better XR start script AR Passthrough Where to go from here Advanced topics OpenXR Settings The XR action map Room scale in XR OpenXR composition layers OpenXR hand tracking OpenXR body tracking Godot XR Tools Introducing XR tools Basic XR Locomotion Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Setting up XR Introduction to the XR system in Godot Godot provides a modular XR system that abstracts many of the different XR platform specifics away from the user At the core sits the XRServer which acts as a central interface to the XR system that allows users to discover interfaces and interact with the components of the XR system Each supported XR platform is implemented as an XRInterface Supported interfaces register themselves with the XRServer and can be queried with the find_interface method on the XRServer When the desired interface is found it can be initialized by calling initialize on the interface Warning A registered interface means nothing more than that the interface is available if the interface is not supported by the host system initialization may fail and return false This can have many reasons and sadly the reasons differ from platform to platform It can be because the user hasn t installed the required software or that the user simply hasn t plugged in their headset You as a developer must thus react properly on an interface failing to initialize Due to the special requirements for output in XR especially for head mounted devices that supply different images to each eye the XRServer in Godot will override various features in the rendering system For stand alone devices this means the final output is handled by the XRInterface and Godot s usual output system is disabled For desktop XR devices that work as a second screen it is possible to dedicate a separate Viewport to handle the XR output leaving the main Godot window available for displaying alternative content Note Note that only one interface can be responsible for handling the output to an XR device this is known as the primary interface and by default will be the first interface that is initialized Godot currently thus only supports implementations with a single headset It is possible but increasingly uncommon to have a secondary interface for example to add tracking to an otherwise 3DOF only device There are three XR specific node types that you will find in nearly all XR applications XROrigin3D represents for all intents and purposes the center point of your play space That is an oversimplified statement but we ll go into more detail later All objects tracked in physical space by the XR platform are positioned in relation to this point XRCamera3D represents the stereo camera that is used when rendering output for the XR device The positioning of this node is controlled by the XR system and updated automatically using the tracking information provided by the XR platform XRController3D represents a controller used by the player commonly there are two one held in each hand These nodes give access to various states on these controllers and send out signals when the player presses buttons on them The positioning of this node is controlled by the XR system and updated automatically using the tracking information provided by the XR platform There are other XR related nodes and there is much more to say about these three nodes but we ll get into that later on Prerequisites for XR in Godot 4 While in Godot 3 most things worked out of the box Godot 4 needs a little more setup This is mainly due to the more advanced nature of the Vulkan renderer There are many rendering features in Vulkan the XR system uses that aren t enabled by default They are very easy to turn on simply open up your project settings and tick the XR shaders tickbox in the XR section Warning As Godot 4 is still in development many post process effects have not yet been updated to support stereoscopic rendering Using these will have adverse effects Note Godot 4 has 3 renderer options Compatibility Mobile and Forward In the future XR desktop projects should use Forward and projects for stand alone headsets should use Mobile However Compatibility is the recommended renderer for now due to it having the best XR performance OpenXR OpenXR is a new industry standard that allows different XR platforms to present themselves through a standardised API to XR applications This standard is an open standard maintained by the Khronos Group and thus aligns very well with Godot s interests The Vulkan implementation of OpenXR is closely integrated with Vulkan taking over part of the Vulkan system This requires tight integration of certain core graphics features in the Vulkan renderer which are needed before the XR system is setup This was one of the main deciding factors to include OpenXR as a core interface This also means OpenXR needs to be enabled when Godot starts in order to set things up correctly The required setting can be found in your project settings As setup is brought forward with OpenXR you can find several other settings related to OpenXR here as well These can t be changed while your application is running The default settings will get us started and we will go into detail in another section of the documentation Setting up the XR scene Every XR application needs at least an XROrigin3D and an XRCamera3D node Most will have two XRController3D one for the left hand and one for the right Keep in mind that the camera and controller nodes should be children of the origin node Add these nodes to a new scene and rename the controller nodes to LeftHand and RightHand your scene should look something like this Next you need to configure the controllers select the left hand and set it up as follows And the right hand Right now all these nodes are on the floor they will be positioned correctly in runtime To help during development it can be helpful to move the camera upwards so its y is set to 1 7 and move the controller nodes to 0 5 1 0 0 5 and 0 5 1 0 0 5 for respectively the left and right hand Next we need to add a script to our root node Add the following code into this script GDScript C extends Node3D var xr_interface XRInterface func _ready xr_interface XRServer find_interface OpenXR if xr_interface and xr_interface is_initialized print OpenXR initialized successfully Turn off v sync DisplayServer window_set_vsync_mode DisplayServer VSYNC_DISABLED Change our main viewport to output to the HMD get_viewport use_xr true else print OpenXR not initialized please check if your headset is connected Copy to clipboard using Godot public partial class MyNode3D Node3D private XRInterface _xrInterface public override void _Ready _xrInterface XRServer FindInterface OpenXR if _xrInterface null _xrInterface IsInitialized GD Print OpenXR initialized successfully Turn off v sync DisplayServer WindowSetVsyncMode DisplayServer VSyncMode Disabled Change our main viewport to output to the HMD GetViewport UseXR true else GD Print OpenXR not initialized please check if your headset is connected Copy to clipboard This code fragment assumes we are using OpenXR if you wish to use any of the other interfaces you can change the find_interface call Warning As you can see in the code snippet above we turn off v sync When using OpenXR you are outputting the rendering results to an HMD that often requires us to run at 90Hz or higher If your monitor is a 60hz monitor and v sync is turned on you will limit the output to 60 frames per second XR interfaces like OpenXR perform their own sync Also note that by default the physics engine runs at 60Hz as well and this can result in choppy physics You should set Engine physics_ticks_per_second to a higher value If you run your project at this point in time everything will work but you will be in a dark world So to finish off our starting point add a DirectionalLight3D and a WorldEnvironment node to your scene You may wish to also add a mesh instance as a child to each controller node just to temporarily visualise them Make sure you configure a sky in your world environment Now run your project you should be floating somewhere in space and be able to look around Note While traditional level switching can definitely be used with XR applications where this scene setup is repeated in each level most find it easier to set this up once and loading levels as a subscene If you do switch scenes and replicate the XR setup in each one do make sure you do not run initialize multiple times The effect can be unpredictable depending on the XR interface used For the rest of this basic tutorial series we will create a game that uses a single scene User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Deploying to Android Setup Most standalone headsets run on Android and OpenXR support is making its way to these platforms Before following the OpenXR specific instructions here you ll need to first setup your system to export to Android in general including Installing OpenJDK 17 Installing Android Studio Creating a debug keystore Configuring the location of the Android SDK and debug keystore in Godot See Exporting for Android for the full details and return here when you ve finished these steps Gradle Android build Note Official support for the Android platform wasn t added to the OpenXR specification initially resulting in various vendors creating custom loaders to make OpenXR available on their headsets While the long term expectation is that all vendors will adopt the official OpenXR loader for now these loaders need to be added to your project In order to include the vendor specific OpenXR loader into your project you will need to setup a gradle Android build Select Install Android Build Template from the Project menu This will create a folder called android inside of your project that contains all the runtime files needed on Android You can now customize this installation Godot won t show this in the editor but you can find it with a file browser You can read more about gradle builds here Gradle builds for Android Installing the vendors plugin Warning The Android plugin structure has been restructured in Godot 4 2 and the loader plugin was renamed to vendors plugin as it now includes more than just loaders If you ve previously installed the loader plugin you need to delete it from the android plugins folder The vendors plugin can be downloaded from the asset library search for OpenXR vendors and install the plugin You will find the installed files inside the addons folder Alternatively you can manually install the vendors plugin by downloading the v2 x version of the plugin from the release page here You will need to copy the assets addons godotopenxrvendors folder from the zip file into your projects addons folder You can find the main repository of the vendors plugin here Enabling the vendors plugin The vendors plugin needs to be enabled before the export settings become accessible Open Project and select Project Settings Go to the Plugins tab Enable the GodotOpenXRVendors plugin Note This is no longer required from vendors plugin 2 0 3 onwards as it now uses GDExtension The plugin will not be shown in this list You can verify it is installed correctly by checking if the export presets contain the entries described below Creating the export presets You will need to setup a separate export preset for each device as each device will need its own loader included Open Project and select Export Click on Add and select Android Next change the name of the export preset for the device you re setting this up for say Meta Quest And enable Use Gradle Build If you want to use one click deploy described below ensure that Runnable is enabled If the vendors plugins were installed correctly you should find entries for the different headsets select the entry for meta Also change the XR Mode to OpenXR Scroll to the bottom of the list and you ll find additional XR feature sections currently only Meta XR Features is available The hand tracking and passthrough settings here currently only work for the Meta Quest and you will need to select the appropriate settings if you wish to use these features Now you can repeat the same process for the other devices Note There are separate loaders for the Meta Quest Pico and Lynx R1 headsets The fourth option is the official Khronos loader in due time all headsets should work with this loader At the moment this loader has been tested with the Magic Leap 2 and standalone HTC headsets Warning While the Mobile Vulkan renderer has many optimizations targeted at mobile devices we re still working out the kinks It is highly advisable to use the compatibility renderer OpenGL for the time being when targeting Android based XR devices Running on your device from the Godot editor If you ve setup your export settings as described above and your headset is connected to your computer and correctly recognized you can launch it directly from the Godot editor using One click deploy For some devices on some platforms you may need to perform some extra steps in order for your device to be recognized correctly so be sure to check the developer documentation from your headset vendor For example with the Meta Quest 2 you need to enable developer mode on the headset and if you re on Windows you ll need to install special ADB drivers See the official Meta Quest developer documentation for more details If you re having any issues with one click deploy check the Troubleshooting section User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue A better XR start script In Setting up XR we introduced a startup script that initialises our setup which we used as our script on our main node This script performs the minimum steps required for any given interface When using OpenXR there are a number of improvements we should do here For this we ve created a more elaborate starting script You will find these used in our demo projects Alternatively if you are using XR Tools see Introducing XR tools it contains a version of this script updated with some features related to XR tools Below we will detail out the script used in our demos and explain the parts that are added Signals for our script We are introducing 3 signals to our script so that our game can add further logic focus_lost is emitted when the player takes off their headset or when the player enters the menu system of the headset focus_gained is emitted when the player puts their headset back on or exists the menu system and returns to the game pose_recentered is emitted when the headset requests the players position to be reset Our game should react accordingly to these signals GDScript C extends Node3D signal focus_lost signal focus_gained signal pose_recentered Copy to clipboard using Godot public partial class MyNode3D Node3D Signal public delegate void FocusLostEventHandler Signal public delegate void FocusGainedEventHandler Signal public delegate void PoseRecenteredEventHandler Copy to clipboard Variables for our script We introduce a few new variables to our script as well maximum_refresh_rate will control the headsets refresh rate if this is supported by the headset xr_interface holds a reference to our XR interface this already existed but we now type it to get full access to our XRInterface API xr_is_focussed will be set to true whenever our game has focus GDScript C export var maximum_refresh_rate int 90 var xr_interface OpenXRInterface var xr_is_focussed false Copy to clipboard Export public int MaximumRefreshRate get set 90 private OpenXRInterface _xrInterface private bool _xrIsFocused Copy to clipboard Our updated ready function We add a few things to the ready function If we re using the mobile or forward renderer we set the viewports vrs_mode to VRS_XR On platforms that support this this will enable foveated rendering If we re using the compatibility renderer we check if the OpenXR foveated rendering settings are configured and if not we output a warning See OpenXR Settings for further details We hook up a number of signals that will be emitted by the XRInterface We ll provide more detail about these signals as we implement them We also quit our application if we couldn t successfully initialise OpenXR Now this can be a choice If you are making a mixed mode game you setup the VR mode of your game on success and setup the non VR mode of your game on failure However when running a VR only application on a standalone headset it is nicer to exit on failure than to hang the system GDScript C Called when the node enters the scene tree for the first time func _ready xr_interface XRServer find_interface OpenXR if xr_interface and xr_interface is_initialized print OpenXR instantiated successfully var vp Viewport get_viewport Enable XR on our viewport vp use_xr true Make sure v sync is off v sync is handled by OpenXR DisplayServer window_set_vsync_mode DisplayServer VSYNC_DISABLED Enable VRS if RenderingServer get_rendering_device vp vrs_mode Viewport VRS_XR elif int ProjectSettings get_setting xr openxr foveation_level 0 push_warning OpenXR Recommend setting Foveation level to High in Project Settings Connect the OpenXR events xr_interface session_begun connect _on_openxr_session_begun xr_interface session_visible connect _on_openxr_visible_state xr_interface session_focussed connect _on_openxr_focused_state xr_interface session_stopping connect _on_openxr_stopping xr_interface pose_recentered connect _on_openxr_pose_recentered else We couldn t start OpenXR print OpenXR not instantiated get_tree quit Copy to clipboard summary Called when the node enters the scene tree for the first time summary public override void _Ready _xrInterface OpenXRInterface XRServer FindInterface OpenXR if _xrInterface null _xrInterface IsInitialized GD Print OpenXR instantiated successfully var vp GetViewport Enable XR on our viewport vp UseXR true Make sure v sync is off v sync is handled by OpenXR DisplayServer WindowSetVsyncMode DisplayServer VSyncMode Disabled Enable VRS if RenderingServer GetRenderingDevice null vp VrsMode Viewport VrsModeEnum XR else if int ProjectSettings GetSetting xr openxr foveation_level 0 GD PushWarning OpenXR Recommend setting Foveation level to High in Project Settings Connect the OpenXR events _xrInterface SessionBegun OnOpenXRSessionBegun _xrInterface SessionVisible OnOpenXRVisibleState _xrInterface SessionFocussed OnOpenXRFocusedState _xrInterface SessionStopping OnOpenXRStopping _xrInterface PoseRecentered OnOpenXRPoseRecentered else We couldn t start OpenXR GD Print OpenXR not instantiated GetTree Quit Copy to clipboard On session begun This signal is emitted by OpenXR when our session is setup This means the headset has run through setting everything up and is ready to begin receiving content from us Only at this time various information is properly available The main thing we do here is to check our headsets refresh rate We also check the available refresh rates reported by the XR runtime to determine if we want to set our headset to a higher refresh rate Finally we match our physics update rate to our headset update rate Godot runs at a physics update rate of 60 updates per second by default while headsets run at a minimum of 72 and for modern headsets often up to 144 frames per second Not matching the physics update rate will cause stuttering as frames are rendered without objects moving GDScript C Handle OpenXR session ready func _on_openxr_session_begun void Get the reported refresh rate var current_refresh_rate xr_interface get_display_refresh_rate if current_refresh_rate 0 print OpenXR Refresh rate reported as str current_refresh_rate else print OpenXR No refresh rate given by XR runtime See if we have a better refresh rate available var new_rate current_refresh_rate var available_rates Array xr_interface get_available_display_refresh_rates if available_rates size 0 print OpenXR Target does not support refresh rate extension elif available_rates size 1 Only one available so use it new_rate available_rates 0 else for rate in available_rates if rate new_rate and rate maximum_refresh_rate new_rate rate Did we find a better rate if current_refresh_rate new_rate print OpenXR Setting refresh rate to str new_rate xr_interface set_display_refresh_rate new_rate current_refresh_rate new_rate Now match our physics rate Engine physics_ticks_per_second current_refresh_rate Copy to clipboard summary Handle OpenXR session ready summary private void OnOpenXRSessionBegun Get the reported refresh rate var currentRefreshRate _xrInterface DisplayRefreshRate GD Print currentRefreshRate 0 0F OpenXR Refresh rate reported as currentRefreshRate OpenXR No refresh rate given by XR runtime See if we have a better refresh rate available var newRate currentRefreshRate var availableRates _xrInterface GetAvailableDisplayRefreshRates if availableRates Count 0 GD Print OpenXR Target does not support refresh rate extension else if availableRates Count 1 Only one available so use it newRate float availableRates 0 else GD Print OpenXR Available refresh rates availableRates foreach float rate in availableRates if rate newRate rate MaximumRefreshRate newRate rate Did we find a better rate if currentRefreshRate newRate GD Print OpenXR Setting refresh rate to newRate _xrInterface DisplayRefreshRate newRate currentRefreshRate newRate Now match our physics rate Engine PhysicsTicksPerSecond int currentRefreshRate Copy to clipboard On visible state This signal is emitted by OpenXR when our game becomes visible but is not focussed This is a bit of a weird description in OpenXR but it basically means that our game has just started and we re about to switch to the focussed state next that the user has opened a system menu or the users has just took their headset off On receiving this signal we ll update our focussed state we ll change the process mode of our node to disabled which will pause processing on this node and it s children and emit our focus_lost signal If you ve added this script to your root node this means your game will automatically pause when required If you haven t you can connect a method to the signal that performs additional changes Note While your game is in visible state because the user has opened a system menu Godot will keep rendering frames and head tracking will remain active so your game will remain visible in the background However controller and hand tracking will be disabled until the user exits the system menu GDScript C Handle OpenXR visible state func _on_openxr_visible_state void We always pass this state at startup but the second time we get this it means our player took off their headset if xr_is_focussed print OpenXR lost focus xr_is_focussed false pause our game get_tree paused true emit_signal focus_lost Copy to clipboard summary Handle OpenXR visible state summary private void OnOpenXRVisibleState We always pass this state at startup but the second time we get this it means our player took off their headset if _xrIsFocused GD Print OpenXR lost focus _xrIsFocused false Pause our game GetTree Paused true EmitSignal SignalName FocusLost Copy to clipboard On focussed state This signal is emitted by OpenXR when our game gets focus This is done at the completion of our startup but it can also be emitted when the user exits a system menu or put their headset back on Note also that when your game starts while the user is not wearing their headset the game stays in visible state until the user puts their headset on Warning It is thus important to keep your game paused while in visible mode If you don t the game will keep on running while your user isn t interacting with your game Also when the game returns to focussed mode suddenly all controller and hand tracking is re enabled and could have game breaking consequences if you do not react to this accordingly Be sure to test this behaviour in your game While handling our signal we will update the focusses state unpause our node and emit our focus_gained signal GDScript C Handle OpenXR focused state func _on_openxr_focused_state void print OpenXR gained focus xr_is_focussed true unpause our game get_tree paused false emit_signal focus_gained Copy to clipboard summary Handle OpenXR focused state summary private void OnOpenXRFocusedState GD Print OpenXR gained focus _xrIsFocused true Un pause our game GetTree Paused false EmitSignal SignalName FocusGained Copy to clipboard On stopping state This signal is emitted by OpenXR when we enter our stop state There are some differences between platforms when this happens On some platforms this is only emitted when the game is being closed But on other platforms this will also be emitted every time the player takes off their headset For now this method is only a place holder GDScript C Handle OpenXR stopping state func _on_openxr_stopping void Our session is being stopped print OpenXR is stopping Copy to clipboard summary Handle OpenXR stopping state summary private void OnOpenXRStopping Our session is being stopped GD Print OpenXR is stopping Copy to clipboard On pose recentered This signal is emitted by OpenXR when the user requests their view to be recentered Basically this communicates to your game that the user is now facing forward and you should re orient the player so they are facing forward in the virtual world As doing so is dependent on your game your game needs to react accordingly All we do here is emit the pose_recentered signal You can connect to this signal and implement the actual recenter code Often it is enough to call center_on_hmd GDScript C Handle OpenXR pose recentered signal func _on_openxr_pose_recentered void User recentered view we have to react to this by recentering the view This is game implementation dependent emit_signal pose_recentered Copy to clipboard summary Handle OpenXR pose recentered signal summary private void OnOpenXRPoseRecentered User recentered view we have to react to this by recentering the view This is game implementation dependent EmitSignal SignalName PoseRecentered Copy to clipboard And that finished our script It was written so that it can be re used over multiple projects Just add it as the script on your main node and extend it if needed or add it on a child node specific for this script User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue AR Passthrough Augmented Reality is supported through various methods depending on the capabilities of the hardware Headsets such as the Magic Leap and glasses such as TiltFive show the rendered result on see through displays allowing the user to see the real world Headsets such as the Quest HTC Elite and Lynx R1 implement this through a technique called video passthrough where cameras record the real world and these images are used as the background on top of which our rendered result is used Note Passthrough is implemented very differently across platforms In Godot 4 3 we have implemented a unified approach that is explained on this help page so you don t need to worry about these differences the XRInterface implementation is now responsible for applying the correct platform dependent method 1 For headsets such as the Meta Quest and HTC Elite you will need to use the OpenXR vendors plugin v3 0 0 or later to enable video passthrough For backwards compatibility the old API for passthrough is still available but it is recommended to follow the new instructions below Environment blend modes The way we configure VR or AR functionality is through setting the environment blend mode This mode determines how the real world environment is blended with the virtual world Blend modes Blend mode Description XR_ENV_BLEND_MODE_OPAQUE The rendered image is opaque we do not see the real world We re in VR mode This will turn off passthrough if video passthrough is used XR_ENV_BLEND_MODE_ADDITIVE The rendered image is added to the real world and will look semi transparent This mode is generally used with see through devices that are unable to obscure the real world This will turn on passthrough if video passthrough is used XR_ENV_BLEND_MODE_ALPHA_BLEND The rendered image is alpha blended with the real world On see through devices that support this the alpha will control the translucency of the optics On video passthrough devices alpha blending is applied with the video image passthrough will also be enabled if applicable You can set the environment blend mode for your application through the environment_blend_mode property of the XRInterface instance You can query the supported blend modes on the hardware using the get_supported_environment_blend_modes property on the same instance Configuring your background When setting the blend mode to XR_ENV_BLEND_MODE_ALPHA_BLEND you must set the transparent_bg property on Viewport to true When using the XR_ENV_BLEND_MODE_ADDITIVE blend mode you should set your background color to black Either solution will result in the background rendering not contributing to lighting It is thus also recommended you adjust your environment settings accordingly and ensure there is adequate ambient light set to illuminate your scene Note Some AR SDKs do provide ambient lighting information or even provide a full radiance map to allow for real world reflections in your virtual objects The core Godot XR functionality doesn t currently have support for this however this functionality can be exposed through plugins OpenXR specific In OpenXR you can configure the default blend mode you want to use Godot will select this blend mode at startup if available If not available Godot will default to the first supported blend mode provided by the XR runtime For passthrough devices OpenXR requires additional settings to be configured These settings are platform dependent and provided through the OpenXR vendors plugin For example these are the settings required on Meta Quest The Passthrough setting defines whether passthrough is supported or even required The Boundary Mode allows you to define whether the guardian is needed disabling this fully requires passthrough to be enabled at all times Putting it together Putting the above together we can use the following code as a base onready var viewport Viewport get_viewport onready var environment Environment WorldEnvironment environment func switch_to_ar bool var xr_interface XRInterface XRServer primary_interface if xr_interface var modes xr_interface get_supported_environment_blend_modes if XRInterface XR_ENV_BLEND_MODE_ALPHA_BLEND in modes xr_interface environment_blend_mode XRInterface XR_ENV_BLEND_MODE_ALPHA_BLEND viewport transparent_bg true elif XRInterface XR_ENV_BLEND_MODE_ADDITIVE in modes xr_interface environment_blend_mode XRInterface XR_ENV_BLEND_MODE_ADDITIVE viewport transparent_bg false else return false environment background_mode Environment BG_COLOR environment background_color Color 0 0 0 0 0 0 0 0 environment ambient_light_source Environment AMBIENT_SOURCE_COLOR return true func switch_to_vr bool var xr_interface XRInterface XRServer primary_interface if xr_interface var modes xr_interface get_supported_environment_blend_modes if XRInterface XR_ENV_BLEND_MODE_OPAQUE in modes xr_interface environment_blend_mode XRInterface XR_ENV_BLEND_MODE_OPAQUE else return false viewport transparent_bg false environment background_mode Environment BG_SKY environment ambient_light_source Environment AMBIENT_SOURCE_BG return true Copy to clipboard Shadow to opacity Shadow to opacity is a render mode for Godot spatial shaders that was introduced in Godot 3 specifically for AR It is a special render mode where the more a surface is in shadow the more opaque the surface becomes When a surface is fully lit the surface becomes fully transparent and thus shows the real world However the surface is rendered during the opaque state effectively This has two consequences As both the depth buffer and color buffer are written to we occlude any geometry behind our surface even when fully transparent As we are making the surface opaque if in shadow we can have virtual objects cast shadows on real world objects 2 Image showing shadow to opacity being used to show the users desk This enabled the following use cases You can render a box mesh around a real world table this ensures the table remains visible even if a virtual object is placed underneath it The virtual object will be correctly occluded Placing a virtual object on top of the real world table will result in a shadow being cast on the table You can use a shader with this render mode when render a hand mesh using the hand tracking functionality and ensure your hands properly occlude virtual objects The following shader code is a good base for this functionality shader_type spatial render_mode blend_mix depth_draw_opaque cull_back shadow_to_opacity void fragment ALBEDO vec3 0 0 0 0 0 0 Copy to clipboard 1 Restrictions may apply depending on XR interface implementation 2 This feature is still being perfected User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Where to go from here Now that we have the basics covered there are several options to look at for your XR game dev journey You can take a look at the Advanced topics section You can look at a number of XR demos here You can find 3rd party tutorials on our Tutorials and resources page XR Toolkits There are various XR toolkits available that implement more complex XR logic ready for you to use We have a small introduction to Godot XR Tools that you can look at a toolkit developed by core contributors of Godot There are more toolkits available for Godot Godot XR handtracking toolkit GDScript Godot XR Kit GDScript Godot XR Tools GDScript NXR C User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue OpenXR Settings OpenXR has its own set of settings that are applied when OpenXR starts While it is possible for OpenXR extensions implemented through Godot plugins to add additional settings we will only discuss the settings in the core of Godot here Enabled This setting enables the OpenXR module when Godot starts This is required when the Vulkan backend is used For other backends you can enable OpenXR at any time by calling initialize on the OpenXRInterface This also needs to be enabled to get access to the action map editor You can use the xr mode on command line switch to force this to on Default Action Map This specifies the path of the action map file that OpenXR will load and communicate to the XR Runtime Form Factor This specifies whether your game is designed for Head Mounted devices such as a Meta Quest Valve Index or Magic Leap Handheld devices such as phones If the device on which you run your game does not match the selection here OpenXR will fail to initialise View Configuration This specifies the view configuration your game is designed for Mono your game provides a single image output E g phone based AR Stereo your game provides stereo image output E g head mounted devices If the device on which you run your game does not match the selection here OpenXR will fail to initialise Note OpenXR has additional view configurations for very specific devices that Godot doesn t support yet For instance Varjo headsets have a quad view configuration that outputs two sets of stereo images These may be supported in the near future Reference Space Within XR all elements like the player s head and hands are tracked within a tracking volume At the base of this tracking volume is our origin point which maps our virtual space to the real space There are however different scenarios that place this point in different locations depending on the XR system used In OpenXR these scenarios are well defined and selected by setting a reference space Local The local reference space places our origin point at the player s head by default Some XR runtimes will do this each time your game starts others will make the position persist over sessions This reference space however does not prevent the user from walking away so you will need to detect if the user does so if you wish to prevent the user from leaving the vehicle they are controlling which could potentially be game breaking This reference space is the best option for games like flight simulators or racing simulators where we want to place the XROrigin3D node where the player s head should be When the user enacts the recenter option on their headset the method of which is different per XR runtime the XR runtime will move the XRCamera3D to the XROrigin3D node The OpenXRInterface will also emit the pose_recentered signal so your game can react accordingly Note Any other XR tracked elements such as controllers or anchors will also be adjusted accordingly Warning You should not call center_on_hmd when using this reference space Stage The stage reference space is our default reference space and places our origin point at the center of our play space For XR runtimes that allow you to draw out a guardian boundary this location and its orientation is often set by the user Other XR runtimes may decide on the placement of this point by other means It is however a stationary point in the real world This reference space is the best option for room scale games where the user is expected to walk around a larger space or for games where there is a need to switch between game modes See Room Scale for more information When the user enacts the recenter option on their headset the method of which is different per XR runtime the XR runtime will not change the origin point The OpenXRInterface will emit the pose_recentered signal and it is up to the game to react appropriately Not doing so will prevent your game from being accepted on various stores In Godot you can do this by calling the center_on_hmd function on the XRServer Calling XRServer center_on_hmd XRServer RESET_BUT_KEEP_TILT true will move the XRCamera3D node to the XROrigin3D node similar to the Local reference space Calling XRServer center_on_hmd XRServer RESET_BUT_KEEP_TILT true will move the XRCamera3D node above the XROrigin3D node keeping the player s height similar to the Local Floor reference space Note Any other XR tracked elements such as controllers or anchors will also be adjusted accordingly Local Floor The local floor reference space is similar to the local reference space as it positions the origin point where the player is In this mode however the height of the player is kept Same as with the local reference space some XR runtimes will persist this location over sessions It is thus not guaranteed the player will be standing on the origin point the only guarantee is that they were standing there when the user last recentered The player is thus also free to walk away This reference space is the best option of games where the user is expected to stand in the same location or for AR type games where the user s interface elements are bound to the origin node and are quickly placed at the player s location on recenter When the user enacts the recenter option on their headset the method of which is different per XR runtime the XR runtime will move the XRCamera3D above the XROrigin3D node but keeping the player s height The OpenXRInterface will also emit the pose_recentered signal so your game can react accordingly Warning Be careful using this mode in combination with virtual movement of the player The user recentering in this scenario can be unpredictable unless you counter the move when handling the recenter signal This can even be game breaking as the effect in this scenario would be the player teleporting to whatever abstract location the origin point was placed at during virtual movement including the ability for players teleporting into locations that should be off limits It is better to use the Stage mode in this scenario and limit resetting to orientation only when a pose_recentered signal is received Note Any other XR tracked elements such as controllers or anchors will also be adjusted accordingly Warning You should not call center_on_hmd when using this reference space Environment Blend Mode The environment blend mode defines how our rendered output is blended into the real world provided this is supported by the headset Opaque means our output obscures the real world we are in VR mode Additive means our output is added to the real world this is an AR mode where optics do not allow us to fully obscure the real world e g Hololens Alpha means our output is blended with the real world using the alpha output viewport should have transparent background enabled this is an AR mode where optics can fully obscure the real world Magic Leap all pass through devices etc If a mode is selected that is not supported by the headset the first available mode will be selected Note Some OpenXR devices have separate systems for enabling disabling passthrough From Godot 4 3 onwards selecting the alpha blend mode will also perform these extra steps This does require the latest vendor plugin to be installed Foveation Level Sets the foveation level used when rendering provided this feature is supported by the hardware used Foveation is a technique where the further away from the center of the viewport we render content the lower resolution we render at Most XR runtimes only support fixed foveation but some will take eye tracking into account and use the focal point for this effect The higher the level the better the performance gains but also the more reduction in quality there is in the users peripheral vision Note Compatibility renderer only for Mobile and Forward renderer set the vrs_mode property on Viewport to VRS_XR Warning This feature is disabled if post effects are used such as glow bloom or DOF Foveation Dynamic When enabled the foveation level will be adjusted automatically depending on current GPU load It will be adjusted between low and the select foveation level in the previous setting It is therefore best to combine this setting with foveation level set to high Note Compatibility renderer only Submit Depth Buffer If enabled an OpenXR supplied depth buffer will be used while rendering which is submitted alongside the rendered image The XR runtime can use this for improved reprojection Note Enabling this feature will disable stencil support during rendering Not many XR runtimes make use of this it is advised to leave this setting off unless it provides noticeable benefits for your use case Startup Alert If enabled this will result in an alert message presented to the user if OpenXR fails to start We don t always receive feedback from the XR system as to why starting fails If we do we log this to the console Common failure reasons are No OpenXR runtime is installed on the host system Microsoft s WMR OpenXR runtime is currently active this only supports DirectX and will fail if OpenGL or Vulkan is used SteamVR is used but no headset is connected turned on Disable this if you support a fallback mode in your game so it can be played in desktop mode when no VR headset is connected or if you re handling the failure condition yourself by checking OpenXRInterface is_initialized Extensions This subsection provides access to various optional OpenXR extensions Hand Tracking This enables the hand tracking extension when supported by the device used This is on by default for legacy reasons The hand tracking extension provides access to data that allows you to visualise the user s hands with correct finger positions Depending on platform capabilities the hand tracking data can be inferred from controller inputs come from data gloves come from optical hand tracking sensors or any other applicable source If your game only supports controllers this should be turned off See the chapter on hand tracking for additional details Eye Gaze Interaction This enables the eye gaze interaction extension when supported by the device used When enabled we will get feedback from eye tracking through a pose situated between the user s eyes orientated in the direction the user is looking This will be a unified orientation In order to use this functionality you need to edit your action map and add a new pose action say eye_pose Now add a new interaction profile for the eye gaze interaction and map the eye_pose Don t forget to save Next add a new XRController3D node to your origin node and set its tracker property to user eyes_ext and set its pose property to eye_pose Now you can add things to this controller node such as a raycast and control things with your eyes User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue The XR action map Godot has an action map feature as part of the XR system At this point in time this system is part of the OpenXR module There are plans to encompass WebXR into this in the near future hence we call it the XR action map system in this document It implements the built in action map system of OpenXR mostly exactly as it is offered The XR action map system exposes input positional data and output for XR controllers to your game application It does this by exposing named actions that can be tailored to your game application and binding these to the actual inputs and outputs on your XR devices As the XR action map is currently part of the OpenXR module OpenXR needs to be enabled in your project settings to expose it You will then find the XR Action Map interface in the bottom of the screen Note Godot s built in input system has many things in common with the XR action map system In fact our original idea was to add functionality to the existing input system and expose the data to the OpenXR action map system We may revisit that idea at some point but as it turns out there were just too many problems to overcome To name a few Godot s input system mainly centers around button inputs XR adds triggers axis poses and haptics output into the mix This would greatly complicate the input system with features that won t work for normal controllers or contrast with the current approach It was felt this would lead to confusion for the majority of Godot users Godot s input system works with raw input data that is parsed and triggers emitting actions This input data is made available to the end user OpenXR completely hides raw data and does all the parsing for us we only get access to already parsed action data This inconsistency is likely to lead to bugs when an unsuspecting user tries to use an XR device as a normal input device Godot s input system allows changes to what inputs are bound to actions in runtime OpenXR does not Godot s input system is based on device ids which are meaningless in OpenXR This does mean that a game application that mixes traditional inputs with XR controllers will have a separation For most applications either one or the other is used and this is not seen as a problem In the end it s a limitation of the system The default action map Godot will automatically create a default action map if no action map file is found Warning This default map was designed to help developers port their XR games applications from Godot 3 to Godot 4 As a result this map essentially binds all known inputs on all controllers supported by default to actions one on one This is not a good example of setting up an action map It does allow a new developer to have a starting point when they want to become familiar with Godot XR It prevents having to design a proper action map for their game application first For this walkthrough we re going to start with a blank action map You can simply delete the Godot action set entry at the top by pressing the trash can icon This will clear out all actions You might also want to remove the controllers that you do not wish to setup more on this later Action sets Note Before we dive in you will see the term XR runtime used throughout this document With XR runtime we mean the software that is controlling and interacting with the AR or VR headset The XR runtime then exposes this to us through an API such as OpenXR So for Steam this is SteamVR for Meta on desktop this is the Oculus Client including when using Quest link for Meta on Quest this is the Quest s native OpenXR client on Linux this could be Monado etc The action map allows us to organize our actions in sets Each set can be enabled or disabled on its own The concept here is that you could have different sets that provide bindings in different scenarios You could have a Character control set for when you re walking around a Vehicle control set for when you re operating a vehicle a Menu set for when a menu is open Only the action set applicable to the current state of your game application can then be enabled This is especially important if you wish to bind the same input on a controller to a different action For instance in your Character control set you may have an action Jump in your Vehicle control set you may have an action Accelerate in your Menu set you may have an action Select All are bound to the trigger on your controller OpenXR will only bind an input or output to a single action If the same input or output is bound to multiple actions the one in the active action set with the highest priority will be the one updated used So in our above example it will thus be important that only one action set is active For your first XR game application we highly recommend starting with just a single action set and to not over engineer things For our walkthrough in this document we will thus create a single action set called my_first_action_set We do this by pressing the Add action set button The columns in our table are as follows Col Value Description 1 my_first_action_set This is the internal name of the action set OpenXR doesn t specify specific restrictions on this name other then size however some XR runtimes will not like spaces or special characters 2 My first action set This is a human readable name for the action set Some XR runtimes will display this name to the end user for example in configuration dialogs 3 0 This is the priority of the action set If multiple active action sets have actions bound to the same controllers inputs or outputs the action set with the highest priority value will determine the action that is updated Actions In the XR action map actions are the entities that your game application will interact with For instance we can define an action Shoot and the input bound to that action will trigger the button_pressed signal on the relevant XRController3D node in your scene with Shoot as the name parameter of the signal You can also poll the current state of an action XRController3D for instance has an is_button_pressed method Actions can be used for both input and output and each action has a type that defines its behavior The Bool type is used for discrete input like buttons The Float type is used for analogue input like triggers These two are special as they are the only ones that are interchangeable OpenXR will handle conversions between Bool and Float inputs and actions You can get the value of a Float type action by calling the method get_float on your XRController3D node It emits the input_float_changed signal when changed Note Where analogue inputs are queried as buttons a threshold is applied This threshold is currently managed exclusively by the XR runtime There are plans to extend Godot to provide some level of control over these thresholds in the future The Vector2 type defines the input as an axis input Touchpads thumbsticks and similar inputs are exposed as vectors You can get the value of a Vector2 type action by calling the method get_vector2 on your XRController3D node It emits the input_vector2_changed signal when changed The Pose type defines a spatially tracked input Multiple pose inputs are available in OpenXR aim grip and palm Your XRController3D node is automatically positioned based on the pose action assigned to pose property of this node More about poses later Note The OpenXR implementation in Godot also exposes a special pose called Skeleton This is part of the hand tracking implementation This pose is exposed through the skeleton action that is supported outside of the action map system It is thus always present if hand tracking is supported You don t need to bind actions to this pose to use it Finally the only output type is Haptic and it allows us to set the intensity of haptic feedback such as controller vibration Controllers can have multiple haptic outputs and support for haptic vests is coming to OpenXR So lets add an action for our aim pose we do this by clicking on the button for our action set The columns in our table are as follows Col Value Description 1 aim_pose This is the internal name of the action OpenXR doesn t specify specific restrictions on this name other then size however some XR runtimes will not like spaces or special characters 2 Aim pose This is a human readable name for the action Some XR runtimes will display this name to the end user for example in configuration dialogs 3 Pose The type of this action OpenXR defines a number of bindable input poses that are commonly available for controllers There are no rules for which poses are supported for different controllers The poses OpenXR currently defines are The aim pose on most controllers is positioned slightly in front of the controller and aims forward This is a great pose to use for laser pointers or to align the muzzle of a weapon with The grip pose on most controllers is positioned where the grip button is placed on the controller The orientation of this pose differs between controllers and can differ for the same controller on different XR runtimes The palm pose on most controllers is positioned in the center of the palm of the hand holding the controller This is a new pose that is not available on all XR runtimes Note If hand tracking is used there are currently big differences in implementations between the different XR runtimes As a result the action map is currently not suitable for hand tracking Work is being done on this so stay tuned Let s complete our list of actions for a very simple shooting game application The actions we have added are movement which allows the user to move around outside of normal room scale tracking grab which detects that the user wants to hold something shoot which detects that the user wants to fire the weapon they are holding haptic which allows us to output haptic feedback Now note that we don t distinguish between the left and right hand This is something that is determined at the next stage We ve implemented the action system in such a way that you can bind the same action to both hands The appropriate XRController3D node will emit the signal Warning For both grab and shoot we ve used the Bool type As mentioned before OpenXR does automatic conversions from an analogue controls however not all XR Runtimes currently apply sensible thresholds We recommend as a workaround to use the Float type when interacting with triggers and grip buttons and apply your own threshold For buttons like A B X Y and similar where there is no analogue option the Bool type works fine Note You can bind the same action to multiple inputs for the same controller on the same profile In this case the XR runtime will attempt to combine the inputs For Bool inputs this will perform an OR operation between the buttons For Float inputs this will take the highest value of the bound inputs The behavior for Pose inputs is undefined but the first bound input is likely to be used You shouldn t bind multiple actions of the same action set to the same controller input If you do this or if actions are bound from multiple action sets but they have overlapping priorities the behavior is undefined The XR runtime may simply not accept your action map or it may take this on a first come first serve basis We are still investigating the restrictions around binding multiple actions to the same output as this scenario makes sense The OpenXR specification seems to not allow this Now that we have our basic actions defined it s time to hook them up Profiles In OpenXR controller bindings are captured in so called Interaction Profiles We ve simply shortened it to Profiles because it takes up less space This generic name is chosen because controllers don t cover the entire system Currently there are also profiles for trackers remotes and tracked pens There are also provisions for devices such as treadmills haptic vests and such even though those are not part of the specification yet Warning It is important to know that OpenXR has strict checking on supported devices The core specification identifies a number of controllers and similar devices with their supported inputs and outputs Every XR runtime must accept these interaction profiles even if they aren t applicable New devices are added through extensions and XR runtimes must specify which ones they support XR runtimes that do not support a device added through extensions will not accept these profiles XR runtimes that do not support added input or output types will often crash if supplied As such Godot keeps meta data of all available devices their inputs and outputs and which extension adds support for them You can create interaction profiles for all devices you wish to support Godot will filter out those not supported by the XR runtime the user is using This does mean that in order to support new devices you might need to update to a more recent version of Godot It is however also important to note that the action map has been designed with this in mind When new devices enter the market or when your users use devices that you do not have access to the action map system relies on the XR runtime It is the XR runtime s job to choose the best fitting interaction profile that has been specified and adapt it for the controller the user is using How the XR runtime does this is left to the implementation of the runtime and there are thus vast differences between the runtimes Some runtimes might even permit users to edit the bindings themselves A common approach for a runtime is to look for a matching interaction profile first If this is not found it will check the most common profiles such as that of the Touch controller and do a conversion If all else fails it will check the generic Simple controller Note There is an important conclusion to be made here When a controller is found and the action map is applied to it the XR runtime is not limited to the exact configurations you set up in Godot s action map editor While the runtime will generally choose a suitable mapping based on one of the bindings you set up in the action map it can deviate from it For example when the Touch controller profile is used any of the following scenarios could be true we could be using a Quest 1 controller we could be using a Quest 2 controller we could be using a Quest Pro controller but no Quest Pro profile was given or the XR runtime being used does not support the Quest Pro controller it could be a completely different controller for which no profile was given but the XR runtime is using the touch bindings as a base Ergo there currently is no way to know with certainty which controller the user is actually using Warning Finally and this trips up a lot of people the bindings aren t set in stone It is fully allowed and even expected that an XR runtime allows a user to customise the bindings At the moment none of the XR runtimes offer this functionality though SteamVR has an existing UI from OpenVRs action map system that is still accessible This is actively being worked on however Our first controller binding Let s set up our first controller binding using the Touch controller as an example Press Add profile find the Touch controller and add it If it is not in the list then it may already have been added Our UI now shows panels for both the left and right controllers The panels contain all of the possible inputs and outputs for each controller We can use the next to each entry to bind it to an action Let s finish our configuration Each action is bound the given input or output for both controllers to indicate that we support the action on either controller The exception is the movement action which is bound only to the right hand controller It is likely that we would want to use the left hand thumbstick for a different purpose say a teleport function In developing your game application you have to account for the possibility that the user changes the binding and binds the movement to the left hand thumbstick Also note that our shoot and grab boolean actions are linked to inputs of type Float As mentioned before OpenXR will do conversions between the two but do read the warning given on that subject earlier in this document Note Some of the inputs seem to appear in our list multiple times For instance we can find the X button twice once as X click and then as X touch This is due to the Touch controller having a capacitive sensor X touch will be true if the user is merely touching the X button X click will be true when the user is actually pressing down on the button Similarly for the thumbstick we have Thumbstick touch which will be true if the user is touching the thumbstick Thumbstick which gives a value for the direction the thumbstick is pushed to Thumbstick click which is true when the user is pressing down on the thumbstick It is important to note that only a select number of XR controllers support touch sensors or have click features on thumbsticks Keep that in mind when designing your game application Make sure these are used for optional features of your game application The simple controller The Simple controller is a generic controller that OpenXR offers as a fallback We ll apply our mapping As becomes painfully clear the simple controller is often far too simple and falls short for anything but the simplest of VR games applications This is why many XR runtimes only use it as a last resort and will attempt to use bindings from one of the more popular systems as a fallback first Note Due to the simple controller likely not covering the needs of your game it is tempting to provide bindings for every controller supported by OpenXR The default action map seems to suggest this as a valid course of action As mentioned before the default action map was designed for ease of migration from Godot 3 It is the recommendation from the OpenXR Working Group that only bindings for controllers actually tested by the developer are setup The XR runtimes are designed with this in mind They can perform a better job of rebinding a provided binding than a developer can make educated guesses Especially as the developer can t test if this leads to a comfortable experience for the end user This is our advice as well limit your action map to the interaction profiles for devices you have actually tested your game with The Oculus Touch controller is widely used as a fallback controller by many runtimes If you are able to test your game using a Meta Rift or Quest and add this profile there is a high probability your game will work with other headsets User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Room scale in XR One of the staples of XR projects is the ability to walk around freely in a large space This space is often constrained by the room the player is physically in with tracking sensors placed within this space With the advent of inside out tracking however ever larger play spaces are possible As a developer this introduces a number of interesting challenges In this document we will look at a number of the challenges you may face and outline some solutions We ll discuss the issues and challenges for seated XR games in another document Note Often developers sit behind their desk while building the foundation to their game In this mode the issues with developing for room scale don t show themselves until it is too late The advice here is to start testing while standing up and walking around as early as possible Once you are happy your foundation is solid you can develop in comfort while remaining seated In traditional first person games a player is represented by a CharacterBody3D node This node is moved by processing traditional controller mouse or keyboard input A camera is attached to this node at a location roughly where the player s head will be Applying this model to the XR setup we add an XROrigin3D node as a child of the character body and add an XRCamera3D as a child of the origin node At face value this seems to work However upon closer examination this model does not take into account that there are two forms of movement in XR The movement through controller input and the physical movement of the player in the real world As a result the origin node does not represent the position of the player It represents the center or start of the tracking space in which the player can physically move As the player moves around their room this movement is represented through the tracking of the players headset In game this translates to the camera node s position being updated accordingly For all intents and purposes we are tracking a disembodied head Unless body tracking is available we have no knowledge of the position or orientation of the player s body The first problem this causes is fairly obvious When the player moves with controller input we can use the same approach in normal games and move the player in a forward direction However the player isn t where we think they are and as we move forward we re checking collisions in the wrong location The second problem really shows itself when the player walks further away from the center of the tracking space and uses controller input to turn If we rotate our character body the player will be moved around the room in a circular fashion If we fix the above issues we will find a third issue When the path for the player is blocked in the virtual world the player can still physically move forward We will look at solving the first two problem with two separate solutions and then discuss dealing with the third Origin centric solution Looking at the first approach for solving this we are going to change our structure This is the approach currently implemented in XR Tools In this setup we mark the character body as top level so it does not move with the origin We also have a helper node that tells us where our neck joint is in relation to our camera We use this to determine where our body center is Processing our character movement is now done in three steps Note The Origin centric movement demo contains a more elaborate example of the technique described below Step 1 In the first step we re going to process the physical movement of the player We determine where the player is right now and attempt to move our character body there func _process_on_physical_movement delta Remember our current velocity we ll apply that later var current_velocity CharacterBody3D velocity Remember where our player body currently is var org_player_body Vector3 CharacterBody3D global_transform origin Determine where our player body should be var player_body_location Vector3 XRCamera3D transform XRCamera3D Neck transform origin player_body_location y 0 0 player_body_location global_transform player_body_location Attempt to move our character CharacterBody3D velocity player_body_location org_player_body delta CharacterBody3D move_and_slide Set back to our current value CharacterBody3D velocity current_velocity Check if we managed to move all the way ignoring height change var movement_left player_body_location CharacterBody3D global_transform origin movement_left y 0 0 if movement_left length 0 01 We ll talk more about what we ll do here later on return true else return false func _physics_process delta var is_colliding _process_on_physical_movement delta Copy to clipboard Note that we re returning true from our _process_on_physical_movement function when we couldn t move our player all the way Step 2 The second step is to handle rotation of the player as a result of user input As the input used can differ based on your needs we are simply calling the function _get_rotational_input This function should obtain the necessary input and return the rotational speed in radians per second Note For our example we are going to keep this simple and straight forward We are not going to worry about comfort features such as snap turning and applying a vignette We highly recommend implementing such comfort features func _get_rotational_input float Implement this function to return rotation in radians per second return 0 0 func _copy_player_rotation_to_character_body We only copy our forward direction to our character body we ignore tilt var camera_forward Vector3 XRCamera3D global_transform basis z var body_forward Vector3 Vector3 camera_forward x 0 0 camera_forward z CharacterBody3D global_transform basis Basis looking_at body_forward Vector3 UP func _process_rotation_on_input delta var t1 Transform3D var t2 Transform3D var rot Transform3D We are going to rotate the origin around the player var player_position CharacterBody3D global_transform origin global_transform origin t1 origin player_position t2 origin player_position rot rot rotated Vector3 0 0 1 0 0 0 _get_rotational_input delta global_transform global_transform t2 rot t1 orthonormalized Now ensure our player body is facing the correct way as well _copy_player_rotation_to_character_body func _physics_process delta var is_colliding _process_on_physical_movement delta if is_colliding _process_rotation_on_input delta Copy to clipboard Note We ve added the call for processing our rotation to our physics process but we are only executing this if we were able to move our player fully This means that if the player moves somewhere they shouldn t we don t process further movement Step 3 The third and final step is moving the player forwards backwards or sideways as a result of user input Just like with the rotation the inputs differ from project to project so we are simply calling the function _get_movement_input This function should obtain the necessary input and return a directional vector scaled to the required velocity Note Just like with rotation we re keeping it simple Here too it is advisable to look at adding comfort settings var gravity ProjectSettings get_setting physics 3d default_gravity func _get_movement_input Vector2 Implement this to return requested directional movement in meters per second return Vector2 func _process_movement_on_input delta Remember where our player body currently is var org_player_body Vector3 CharacterBody3D global_transform origin We start with applying gravity CharacterBody3D velocity y gravity delta Now we add in our movement var input Vector2 _get_movement_input var movement Vector3 CharacterBody3D global_transform basis Vector3 input x 0 input y CharacterBody3D velocity x movement x CharacterBody3D velocity z movement z Attempt to move our player CharacterBody3D move_and_slide And now apply the actual movement to our origin global_transform origin CharacterBody3D global_transform origin org_player_body func _physics_process delta var is_colliding _process_on_physical_movement delta if is_colliding _process_rotation_on_input delta _process_movement_on_input delta Copy to clipboard Character body centric solution In this setup we are going to keep our character body as our root node and as such is easier to combine with traditional game mechanics Here we have a standard character body with collision shape and our XR origin node and camera as normal children We also have our neck helper node Processing our character movement is done in the same three steps but implemented slightly differently Note The Character centric movement demo contains a more elaborate example of the technique described below Step 1 In this approach step 1 is where all the magic happens Just like with our previous approach we will be applying our physical movement to the character body but we will counter that movement on the origin node This will ensure that the players location stays in sync with the character body s location Helper variables to keep our code readable onready var origin_node XROrigin3D onready var camera_node XROrigin3D XRCamera3D onready var neck_position_node XROrigin3D XRCamera3D Neck func _process_on_physical_movement delta bool Remember our current velocity we ll apply that later var current_velocity velocity Start by rotating the player to face the same way our real player is var camera_basis Basis origin_node transform basis camera_node transform basis var forward Vector2 Vector2 camera_basis z x camera_basis z z var angle float forward angle_to Vector2 0 0 1 0 Rotate our character body transform basis transform basis rotated Vector3 UP angle Reverse this rotation our origin node origin_node transform Transform3D rotated Vector3 UP angle origin_node transform Now apply movement first move our player body to the right location var org_player_body Vector3 global_transform origin var player_body_location Vector3 origin_node transform camera_node transform neck_position_node transform origin player_body_location y 0 0 player_body_location global_transform player_body_location velocity player_body_location org_player_body delta move_and_slide Now move our XROrigin back var delta_movement global_transform origin org_player_body origin_node global_transform origin delta_movement Return our value velocity current_velocity if player_body_location global_transform origin length 0 01 We ll talk more about what we ll do here later on return true else return false func _physics_process delta var is_colliding _process_on_physical_movement delta Copy to clipboard In essence the code above will move the character body to where the player is and then move the origin node back in equal amounts The result is that the player stays centered above the character body We start with applying the rotation The character body should be facing where the player was looking the previous frame We calculate our camera orientation in the space of the character body We can now calculate the angle by which the player has rotated their head We rotate our character body by the same amount so our character body faces the same direction as the player And then we reverse the rotation on the origin node so the camera ends up aligned with the player again For the movement we do much the same The character body should be where the player was standing the previous frame We calculate by how much the player has moved from this location Then we attempt to move the character body to this location As the player may hit a collision body and be stopped we only move the origin point back by the amount we actually moved the character body The player may thus move away from this location but that will be reflected in the positioning of the player As with our previous solution we return true if this is the case Step 2 In this step we again apply the rotation based on controller input However in this case the code is nearly identical to how one would implement this in a normal first person game As the input used can differ based on your needs we are simply calling the function _get_rotational_input This function should obtain the necessary input and return the rotational speed in radians per second func _get_rotational_input float Implement this function to return rotation in radians per second return 0 0 func _process_rotation_on_input delta rotation y _get_rotational_input delta func _physics_process delta var is_colliding _process_on_physical_movement delta if is_colliding _process_rotation_on_input delta Copy to clipboard Step 3 For step three we again apply the movement based on controller input However just like at step 2 we can now implement this as we would in a normal first person game Just like with the rotation the inputs differ from project to project so we are simply calling the function _get_movement_input This function should obtain the necessary input and return a directional vector scaled to the required velocity func _get_movement_input Vector2 Implement this to return requested directional movement in meters per second return Vector2 func _process_movement_on_input delta var movement_input _get_movement_input var direction global_transform basis Vector3 movement_input x 0 movement_input y if direction velocity x direction x velocity z direction z else velocity x move_toward velocity x 0 delta velocity z move_toward velocity z 0 delta move_and_slide func _physics_process delta var is_colliding _process_on_physical_movement delta if is_colliding _process_rotation_on_input delta _process_movement_on_input delta Copy to clipboard When the player walks to somewhere they shouldn t Think of a situation where the player is outside a locked room You don t want the player to go into that room until the door is unlocked You also don t want the player to see what is in this room The logic for moving the player through controller input nicely prevents this The player encounters a static body and the code prevents the player from moving into the room However with XR nothing is preventing the player from taking a real step forward With both the approaches worked out up above we will prevent the character body from moving where the player can t go As the player has physically moved to this location the camera will now have moved into the room The logical solution would be to prevent the movement altogether and adjust the placement of the XR origin point so the player stays outside of the room The problem with this approach is that physical movement is now not replicated in the virtual space This will cause nausea for the player What many XR games do instead is to measure the distance between where the player physically is and where the players virtual body has been left behind As this distance increases usually to a distance of a few centimeters the screen slowly blacks out Our solutions up above would allow us to add this logic into the code at the end of step 1 Further improvements to the code presented could be allowing controller input as long as this distance is still small still applying gravity to the player even when controller input is disabled Note The movement demos in our demo repository contain an example of blacking out the screen when a user walks into restricted areas Further suggestions for improvements The above provides two good options as starting points for implementing room scale XR games A few more things that are worth pointing out that you will likely want to implement The height of the camera can be used to detect whether the player is standing up crouching jumping or lying down You can adjust the size and orientation of the collision shape accordingly Extra bonus points for adding multiple collision shapes so the head and body have their own more accurately sized shapes When a scene first loads the player may be far away from the center of the tracking space This could result in the player spawning into a different room than our origin point The game will now attempt and fail to move the player body from the starting point to where the player is standing You should implement a reset function that moves the origin point so the player is in the correct starting position Both of the above improvements require the player to be ready and standing up straight There is no guarantee as the player may still be putting their headset on Many games including XR Tools solve this by introducing an intro screen or loading screen where the player must press a button when they are ready This starting environment is often a large location where the positioning of the player has little impact on what the player sees When the player is ready and presses the button this is the moment you record the position and height of the camera User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue OpenXR composition layers Introduction In XR games you generally want to create user interactions that happen in 3D space and involve users touching objects as if they are touching them in real life Sometimes however creating a more traditional 2D interface is unavoidable In XR however you can t just add 2D components to your scene Godot needs depth information to properly position these elements so they appear at a comfortable place for the user Even with depth information there are headsets with slanted displays that make it impossible for the standard 2D pipeline to correctly render the 2D elements The solution then is to render the UI to a SubViewport and display the result of this using a ViewportTexture on a 3D mesh The QuadMesh is a suitable option for this Note See the GUI in 3D example project for an example of this approach The problem with displaying the viewport in this way is that the rendered result is sampled for lens distortion by the XR runtime and the resulting quality loss can make UI text hard to read OpenXR offers a solution to this problem through composition layers With composition layers it is possible for the contents of a viewport to be projected on a surface after lens distortion resulting in a much higher quality end result Note As not all XR runtimes support all composition layer types Godot implements a fallback solution where we render the viewport as part of the normal scene but with the aforementioned quality limitations Warning When the composition layer is supported it is the XR runtime that presents the subviewport This means the UI is only visible in the headset it will not be accessible by Godot and will thus not be shown when you have a spectator view on the desktop There are currently 3 nodes that expose this functionality OpenXRCompositionLayerCylinder shows the contents of the SubViewport on the inside of a cylinder or slice of a cylinder OpenXRCompositionLayerEquirect shows the contents of the SubViewport on the interior of a sphere or slice of a sphere OpenXRCompositionLayerQuad shows the contents of the SubViewport on a flat rectangle Setting up the SubViewport The first step is adding a SubViewport for our 2D UI this doesn t require any specific steps For our example we do mark the viewport as transparent You can now create the 2D UI by adding child nodes to the SubViewport as you normally would It is advisable to save the 2D UI in a subscene this makes it easier to do your layout Warning The update mode When Visible will not work as Godot can t determine whether the viewport is visible to the user When assigning our viewport to a composition layer Godot will automatically adjust this Adding a composition layer The second step is adding our composition layer We simply add the correct composition layer node as a child node of our XROrigin3D node This is very important as the XR runtime positions everything in relation to our origin We want to position the composition layer so it is at eye height and roughly 1 to 1 5 meters away from the player We now assign the SubViewport to the Layer Viewport property and enable Alpha Blend Note As the player can walk away from the origin point you will want to reposition the composition layer when the player recenters the view Using the reference space Local Floor will apply this logic automatically Making the interface work So far we re only displaying our UI to make it work we need to add some code For this example we re going to keep things simple and make one of the controllers work as a pointer We ll then simulate mouse actions with this pointer This code also requires a MeshInstance3D node called Pointer to be added as a child to our OpenXRCompositionLayerQuad node We configure a SphereMesh with a radius 0 01 meters We ll be using this as a helper to visualize where the user is pointing The main function that drives this functionality is the intersects_ray function on our composition layer node This function takes the global position and orientation of our pointer and returns the UV where our ray intersects our viewport It returns Vector2 1 0 1 0 if we re not pointing at our viewport We start with setting up some variables important here are the export variables which identify our controller node with which we point to our screen extends OpenXRCompositionLayerQuad const NO_INTERSECTION Vector2 1 0 1 0 export var controller XRController3D export var button_action String trigger_click var was_pressed bool false var was_intersect Vector2 NO_INTERSECTION Copy to clipboard Next we define a helper function that takes the value returned from intersects_ray and gives us the global position for that intersection point This implementation only works for our OpenXRCompositionLayerQuad node func _intersect_to_global_pos intersect Vector2 Vector3 if intersect NO_INTERSECTION var local_pos Vector2 intersect Vector2 0 5 0 5 quad_size return global_transform Vector3 local_pos x local_pos y 0 0 else return Vector3 Copy to clipboard We also define a helper function that takes our intersect value and returns our location in the viewports local coordinate system func _intersect_to_viewport_pos intersect Vector2 Vector2i if layer_viewport and intersect NO_INTERSECTION var pos Vector2 intersect Vector2 layer_viewport size return Vector2i pos else return Vector2i 1 1 Copy to clipboard The main logic happens in our _process function Here we start by hiding our pointer we then check if we have a valid controller and viewport and we call intersects_ray with the position and orientation of our controller Called every frame delta is the elapsed time since the previous frame func _process _delta Hide our pointer we ll make it visible if we re interacting with the viewport Pointer visible false if controller and layer_viewport var controller_t Transform3D controller global_transform var intersect Vector2 intersects_ray controller_t origin controller_t basis z Copy to clipboard Next we check if we re intersecting with our viewport If so we check if our button is pressed and place our pointer at our intersection point if intersect NO_INTERSECTION var is_pressed bool controller is_button_pressed button_action Place our pointer where we re pointing var pos Vector3 _intersect_to_global_pos intersect Pointer visible true Pointer global_position pos Copy to clipboard If we were intersecting in our previous process call and our pointer has moved we prepare a InputEventMouseMotion object to simulate our mouse moving and send that to our viewport for further processing if was_intersect NO_INTERSECTION and intersect was_intersect Pointer moved var event InputEventMouseMotion InputEventMouseMotion new var from Vector2 _intersect_to_viewport_pos was_intersect var to Vector2 _intersect_to_viewport_pos intersect if was_pressed event button_mask MOUSE_BUTTON_MASK_LEFT event relative to from event position to layer_viewport push_input event Copy to clipboard If we ve just released our button we also prepare a InputEventMouseButton object to simulate a button release and send that to our viewport for further processing if not is_pressed and was_pressed Button was let go var event InputEventMouseButton InputEventMouseButton new event button_index 1 event pressed false event position _intersect_to_viewport_pos intersect layer_viewport push_input event Copy to clipboard Or if we ve just pressed our button we prepare a InputEventMouseButton object to simulate a button press and send that to our viewport for further processing elif is_pressed and not was_pressed Button was pressed var event InputEventMouseButton InputEventMouseButton new event button_index 1 event button_mask MOUSE_BUTTON_MASK_LEFT event pressed true event position _intersect_to_viewport_pos intersect layer_viewport push_input event Copy to clipboard Next we remember our state for next frame was_pressed is_pressed was_intersect intersect Copy to clipboard Finally if we aren t intersecting we simply clear our state else was_pressed false was_intersect NO_INTERSECTION Copy to clipboard Hole punching As the composition layer is composited on top of the render result it can be rendered in front of objects that are actually forward of the viewport By enabling hole punch you instruct Godot to render a transparent object where our viewport is displayed It does this in a way that fills the depth buffer and clears the current rendering result Anything behind our viewport will now be cleared while anything in front of our viewport will be rendered as usual You also need to set Sort Order to a negative value the XR compositor will now draw the viewport first and then overlay our rendering result Use case showing how the users hand is incorrectly obscured by a composition layer when hole punching is not used User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue OpenXR hand tracking Introduction Note This page focuses specifically on the feature set exposed through OpenXR Parts of the functionality presented here also applies to WebXR and can by provided by other XR interfaces When discussing hand tracking it is important to know that there are differences of opinion as to where lines are drawn The practical result of this is that there are differences in implementation between the different OpenXR runtimes You may find yourself in a place where chosen hardware doesn t support a piece of the puzzle or does things differently enough from the other platforms that you need to do extra work That said recent improvements to the OpenXR specification are closing these gaps and as platforms implement these improvements we are getting closer to a future where we have either full portability between platforms or at least a clear way to detect the capabilities of a platform When we look at the early days of VR the focus of the major platforms was on tracked controller based input Here we are tracking a physical device that also has buttons for further input From the tracking data we can infer the location of the player s hands but no further information is known traditionally it was left up to the game to implement a mechanism to display the player s hand and animate the fingers based on further input from the controller be it due to buttons being pressed or through proximity sensors Often fingers are also placed based on context what the user is holding and what action a user is performing More recently optical hand tracking has become a popular solution where cameras track the user s hands and full tracking data for the hand and finger positions becomes available Many vendors saw this as completely separate from controller tracking and introduced independent APIs to access hand and finger positions and orientation data When handling input it was up to the game developer to implement a gesture detection mechanism This split also exists in OpenXR where controller tracking is handled primarily by the action map system while optical hand tracking is primarily handled by the hand tracking API extension However the world is not that black and white and we re seeing a number of scenarios where we cross the line Devices that fit in both categories such as tracked gloves and controllers such as the Index controller that also perform finger tracking XR Runtimes that implement inferred hand tracking from controller data as a means to solve proper finger placement for multiple controllers XR applications that wish to seamlessly switch between controller and hand tracking offering the same user experience regardless of approach used OpenXR is answering this call by introducing further extensions that lets us query the capabilities of the XR runtime hardware or that add further functionality across this divide The problem that currently does remain is that there are gaps in adopting these extensions with some platforms thus not reporting capabilities to their full extent As such you may need to test for the features available on specific hardware and adjust your approach accordingly Demo project The information presented on this page was used to create a demo project that can be found here The Hand Tracking API As mentioned in our introduction the hand tracking API is primarily used with optical hand tracking and on many platforms only works when the user is not holding a controller Some platforms support controller inferred hand tracking meaning that you will get hand tracking data even if the user is holding a controller This includes SteamVR Meta Quest currently native only but Meta link support is likely coming and hopefully soon others as well The hand tracking implementation in Godot has been standardized around the Godot Humanoid Skeleton and works both in OpenXR and WebXR The instructions below will thus work in both environments In order to use the hand tracking API with OpenXR you first need to enable it This can be done in the project settings For some standalone XR devices you also need to configure the hand tracking extension in export settings for instance for Meta Quest Now you need to add 3 components into your scene for each hand A tracked node to position the hand A properly skinned hand mesh with skeleton A skeleton modifier that applies finger tracking data to the skeleton Hand tracking node The hand tracking system uses separate hand trackers to track the position of the player s hands within our tracking space This information has been separated out for the following use cases Tracking happens in the local space of the XROrigin3D node This node must be a child of the XROrigin3D node in order to be correctly placed This node can be used as an IK target when an upper body mesh with arms is used instead of separate hand meshes Actual placement of the hands may be loosely bound to the tracking in scenarios such as avatar creation UIs fake mirrors or similar situations resulting in the hand mesh and finger tracking being localized elsewhere We ll concentrate on the first use case only For this you need to add an XRNode3D node to your XROrigin3D node On this node the tracker should be set to user hand_tracker left or user hand_tracker right for the left or right hand respectively The pose should remain set to default no other option will work here The checkbox Show When Tracked will automatically hide this node if no tracking data is available or make this node visible if tracking data is available Rigged hand mesh In order to display our hand we need a hand mesh that is properly rigged and skinned For this Godot uses the hand bone structure as defined for the Godot Humanoid but optionally supporting an extra tip bone for each finger The OpenXR hand tracking demo contains example glTF files of properly rigged hands We will be using those here and add them as a child to our XRNode3D node We also need to enable editable children to gain access to our Skeleton3D node The hand skeleton modifier Finally we need to add a XRHandModifier3D node as a child to our Skeleton3D node This node will obtain the finger tracking data from OpenXR and apply it the hand model You need to set the Hand Tracker property to either user hand_tracker left or user hand_tracker right depending on whether we are apply the tracking data of respectively the left or right hand You can also set the Bone Update mode on this node Full applies the hand tracking data fully This does mean that the skeleton positioning will potentially reflect the size of the actual hand of the user This can lead to scrunching effect if meshes aren t weighted properly to account for this Make sure you test your game with players of all sizes when optical hand tracking is used Rotation Only will only apply rotation to the bones of the hands and keep the bone length as is In this mode the size of the hand mesh doesn t change With this added when we run the project we should see the hand correctly displayed if hand tracking is supported The hand tracking data source This is an OpenXR extension that provides information about the source of the hand tracking data At this moment only a few runtimes implement it but if it is available Godot will activate it If this extension is not supported and thus unknown is returned you can make the following assumptions If you are using SteamVR including Steam link only controller based hand tracking is supported For any other runtime if hand tracking is supported only optical hand tracking is supported Note Meta Link currently fall into this category In all other cases no hand tracking is supported at all You can access this information through code var hand_tracker XRHandTracker XRServer get_tracker user hand_tracker left if hand_tracker if hand_tracker has_tracking_data if hand_tracker hand_tracking_source XRHandTracker HAND_TRACKING_SOURCE_UNKNOWN print Hand tracking source unknown elif hand_tracker hand_tracking_source XRHandTracker HAND_TRACKING_SOURCE_UNOBSTRUCTED print Hand tracking source is optical hand tracking elif hand_tracker hand_tracking_source XRHandTracker HAND_TRACKING_SOURCE_CONTROLLER print Hand tracking data is inferred from controller data else print Unknown hand tracking source hand_tracker hand_tracking_source else print Hand is currently not being tracked else print No hand tracker registered Copy to clipboard This example simply logs the state for the left hand If in this example no hand tracker is returned by get_tracker this means the hand tracking API is not supported on the XR runtime at all If there is a tracker but has_tracking_data is false the user s hand is currently not being tracked This is likely caused by one of the following reasons The player s hand is not visible by any of the tracking cameras on the headset The player is currently using a controller and the headset only supports optical hand tracking The controller is turned off and only controller hand tracking is supported Handling user input Reacting to actions performed by the user is handled through The XR action map if controllers are used In the action map you can map various inputs like the trigger or joystick on the controller to an action This can then drive logic in your game When hand tracking is used we originally had no such inputs inputs are driven by gestures made by the user such as making a fist to grab or pinching the thumb and index finger together to select something It was up to the game developer to implement this Recognizing that there is an increasing demand for applications that can switch seamlessly between controller and hand tracking and the need some form of basic input capability a number of extensions were added to the specification that provide some basic gesture recognition and can be used with the action map The hand interaction profile The hand interaction profile extension is a new core extension which supports pinch grasp and poke gestures and related poses There is still limited support for this extension but it should become available in more runtimes in the near future The pinch gesture is triggered by pinching your thumb and index finger together This is often used as a select gesture for menu systems similar to using your controller to point at an object and press the trigger to select and is thus often mapped as such The pinch pose is a pose positioned in the middle between the tip of the thumb and the tip of the index finger and oriented such that a ray cast can be used to identify a target The pinch float input is a value between 0 0 the tip of the thumb and index finger are apart and 1 0 the tip of the thumb and index finger are touching The pinch ready input is true when the tips of the fingers are close to touching The grasp gesture is triggered by making a fist and is often used to pick items up similar to engaging the squeeze input on controllers The grasp float input is a value between 0 0 open hand and 1 0 fist The grasp ready input is true when the user made a fist The poke gesture is triggered by extending your index finger this one is a bit of an exception as the pose at the tip of your index finger is often used to poke an interactable object The poke pose is a pose positioned on the tip of the index finger Finally the aim activate ready input is defined as an input that is 1 0 true when the index finger is extended and pointing at a target that can be activated How runtimes interpret this is not clear With this setup the normal left_hand and right_hand trackers are used and you can thus seamlessly switch between controller and hand tracking input Note You need to enable the hand interaction profile extension in the OpenXR project settings Microsoft hand interaction profile The Microsoft hand interaction profile extension was introduced by Microsoft and loosely mimics the simple controller profile Meta has also added support for this extension but only on their native OpenXR client it is currently not available over Meta Link Pinch support is exposed through the select input the value of which is 0 0 when the tip of the thumb and index finger are apart and 1 0 when they are together Note that in this profile the aim pose is redefined as a pose between thumb and index finger oriented so a ray cast can be used to identify a target Grasp support is exposed through the squeeze input the value of which is 0 0 when the hand is open and 1 0 when a fist is made With this setup the normal left_hand and right_hand trackers are used and you can thus seamlessly switch between controller and hand tracking input HTC hand interaction profile The HTC hand interaction profile extension was introduced by HTC and is defined similarly to the Microsoft extension It is only supported by HTC for the Focus 3 and Elite XR headsets See the Microsoft hand interaction profile for the gesture support The defining difference is that this extension introduces two new trackers user hand_htc left and user hand_htc right This means that extra logic needs to be implemented to switch between the default trackers and the HTC specific trackers when the user puts down or picks up their controller Simple controller profile The simple controller profile is a standard core profile defined as a fallback profile when a controller is used for which no profile exists There are a number of OpenXR runtimes that will mimic controllers through the simple controller profile when hand tracking is used Unfortunately there is no sound way to determine whether an unknown controller is used or whether hand tracking is emulating a controller through this profile XR runtimes are free to define how the simple controller profile operates so there is also no certainty to how this profile is mapped to gestures The most common mapping seems to be that select click is true when the tip of the thumb and index fingers are touching while the user s palm is facing away from the user menu click will be true when tip of the thumb and index fingers are touching while the user s palm is facing towards the user With this setup the normal left_hand and right_hand trackers are used and you can thus seamlessly switch between controller and hand tracking input Note As some of these interaction profiles have overlap it is important to know that you can add each profile to your action map and the XR runtime will choose the best fitting profile For instance a Meta Quest supports both the Microsoft hand interaction profile and simple controller profile If both are specified the Microsoft hand interaction profile will take precedence and will be used The expectation is that once Meta supports the core hand interaction profile extension that profile will take precedence over both Microsoft and simple controller profiles Gesture based input If the platform doesn t support any interaction profiles when hand tracking is used or if you re building an application where you need more complicated gesture support you re going to need to build your own gesture recognition system You can obtain the full hand tracking data through the XRHandTracker resource for each hand You can obtain the hand tracker by calling XRServer get_tracker and using either user hand_tracker left or user hand_tracker left as the tracker This resource provides access to all the joint information for the given hand Detailing out a full gesture recognition algorithm goes beyond the scope of this manual however there are a number of community projects you can look at Julian Todd s Auto hands library Malcolm Nixons Hand Pose Detector User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue OpenXR body tracking Support for full body tracking in OpenXR is only just becoming available for a select few platforms As support solidifies information will be added to this page HTC Tracker support An option that has been available for some time is doing full body tracking using HTC trackers These are currently supported through SteamVR and on HTC Elite XR headsets They are exposed through the action map system These trackers are identified by their roles which are assigned to them when configured Simply add XRController3D nodes as children to the XROrigin3D node and assign one of the following trackers HTC trackers user vive_tracker_htcx role handheld_object user vive_tracker_htcx role left_foot user vive_tracker_htcx role right_foot user vive_tracker_htcx role left_shoulder user vive_tracker_htcx role right_shoulder user vive_tracker_htcx role left_elbow user vive_tracker_htcx role right_elbow user vive_tracker_htcx role left_knee user vive_tracker_htcx role right_knee user vive_tracker_htcx role waist user vive_tracker_htcx role chest user vive_tracker_htcx role camera user vive_tracker_htcx role keyboard You can now use these as targets for IK modifiers on a full body avatar User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Introducing XR tools Out of the box Godot gives you all the basic support to setup an XR project XR specific game mechanics however need to be implemented on top of this foundation While Godot makes this relatively easy this can still be a daunting task For this reason Godot has developed a toolkit called Godot XR Tools that implements many of the basic mechanics found in XR games from locomotion to object interaction to UI interaction This toolkit is designed to work with both OpenXR and WebXR runtimes We ll be using this as a base for our documentation here It helps developers hit the ground running but for more specific use cases building your own logic is just as valid In that case XR tools can help in providing inspiration Note The current stable release of Godot XR Tools available on the Asset Library is the version for Godot 3 The port of Godot XR Tools for Godot 4 is available for download from the github website We will walk through the step of downloading and installing it here We will update the documentation once Godot XR Tools becomes available for Godot 4 through the asset library Installing XR Tools Continuing on from our project we started in Setting up XR we want to add in the Godot XR Tools library This can be downloaded from the Godot XR Tools releases page Simply find the latest pre release for Godot 4 and then under assets download the godot xr tools zip file Once downloaded unzip the file You will notice the files are held within a godot xr tools subfolder Inside of this folder you will find an addons folder It is this folder that you want to copy in its entirety to your Godot project folder your project should now look something like this Now open up your project in Godot if you haven t already and give it a minute or so to import all the resources of the plugin Next open the Project menu and select Project Settings Now go to the Plugins tab and enable the plugin Basic hands Just to get a feel of things we re going to add a few standard components that dress up our scene starting with hands for our player OpenXR supports full hand tracking however there currently are significant differences in capabilities between the different XR Runtimes As a reliable alternative Godot XR Tools comes with a number of rigged hand scenes that react on trigger and grip inputs of your controller These hands come in low and high poly versions come in a few configurations a number of animation files to control finger positions and a number of different textures In your scene tree select your left hand XRController3D node Now click on the instantiate Child Scene button to add a child scene And select addons godot xr tools hands scenes lowpoly left_hand_low tscn As you can see from the path of this scene low poly models are in the lowpoly subfolder while high poly models are in the highpoly subfolder You will want to use the low poly versions if you plan to release your game on mobile devices The default hand we chose is just a hand The other options are tac_glove the hand is wearing a glove with fingers exposed full_glove the hand is wearing a glove that covers the entire hand Finally each hand comes in a physics version This exposes all the bones We ll look at how that can be used in another tutorial We repeat the same for the right hand More information We ll continue with adding features to our tutorial project using Godot XR tools in the next couple of pages More detailed information about the toolkit can be found on the toolkits help pages User contributed notes Please read the User contributed notes policy before submitting a comment Up to date This page is up to date for Godot 4 3 If you still find outdated information please open an issue Basic XR Locomotion For basic locomotion we re going to continue using our Godot XR Tools library The library contains both basic movement features as more advanced features Adding our player body The first step we need to do is to add a helper node to our XROrigin3D node Because XR supports roomscale tracking you can t simply add your XR setup to a CharacterBody3D node and expect things to work You will run into trouble when the user moves around their physical space and is no longer standing in the center of their room Godot XR Tools embeds the needed logic into a helper node called PlayerBody Select your XROrigin3D node and click on the instantiate Child Scene button to add a child scene Select addons godot xr tools player player_body tscn and add this node Adding a floor This node governs the in game movement of your character and will immediately react to gravity So to prevent our player from infinitely falling down we ll quickly add a floor to our scene We start by adding a StaticBody3D node to our root node and we rename this to Floor We add a MeshInstance3D node as a child node for our Floor Then create a new PlaneMesh as it s mesh For now we set the size of the mesh to 100 x 100 meters Next we add a CollisionShape3D node as a child node for our Floor Then create a BoxShape as our shape We set the size of this box shape to 100 x 1 x 100 meters We also need to move our collision shape down by 0 5 meters so the top of our box is flush with the floor To make it easier to see that we re actually moving around our world a white floor isn t going to do it For this we add a material to our PlaneMesh and set the albedo to a grid texture we ve created with Wahooneys excellent free texture generator Direct movement We re going to start adding some basic direct movement to our setup This allows the user to move through the virtual world using joystick input Note It is important to note that moving through the virtual world while the player is standing still in the real world can be nausea inducing especially for players who are new to VR The default settings on our movement functions are fairly conservative We advise you to stick to these defaults but offer features in game to enable less comfortable settings for more experienced users who are used to playing VR games We want to enable this on the right hand controller We do this by adding a subscene to the right hand XRController3D node Select addons godot xr tools functions movement_direct tscn as the scene to add This function adds forward and backwards movement to the player by using the joystick on the right hand controller It has an option to also add left right strafe but by default this is disabled Instead we are going to add the ability for the player to also turn with this joystick We will add another subscene to our controller node select addons godot xr tools functions movement_turn tscn for this The turn system by default uses a snap turn approach This means that turning happens in steps This may seem jarring however it is a tried and tested method of combating motion sickness You can easily switch to a mode that offers smooth turning by changing the mode property on the turn node If you run your game at this point in time you will find that you can move through the world freely using the right hand joystick Teleport An alternative to direct movement that some users find more pleasant is the ability to teleport to another location within your game world Godot XR Tools supports this through the teleport function and we will be adding this to our left hand controller Add a new child scene to your left hand XRController3D node by selecting the addons godot xr tools functions function_teleport tscn scene With this scene added the player will be able to teleport around the world by pressing the trigger on the left hand controller pointing where they want to go and then releasing the trigger The player can also adjust the orientation by using the left hand controllers joystick If you ve followed all instructions correctly your scene should now look something like this More advanced movement features Godot XR Tools adds many more movement features such as gliding a grapple hook implementation a jetpack climbing mechanics etc Most work similarly to the basic movement features we ve handled so far simply add the relevant subscene from the plugin to the controller that implements it We ll look at some of these in more detail later on in this tutorial where additional setup is required such as climbing but for others please look at Godot XR Tools own help pages for details User contributed notes Please read the User contributed notes policy before submitting a comment